{"version":3,"file":"index.c0abc8831e8e447b.hot-update.js","sources":["/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/entry.css","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/main/state/atoms/replay.ts"],"sourcesContent":["// extracted by css-extract-rspack-plugin\nexport {};\n    if(module.hot) {\n      (function() {\n        var localsJsonString = undefined;\n        // 1749664339115\n        var cssReload = require(\"../../node_modules/.pnpm/@rspack+core@1.3.9_@swc+helpers@0.5.17/node_modules/@rspack/core/dist/cssExtractHmr.js\").cssReload(module.id, {});\n        // only invalidate when locals change\n        if (\n          module.hot.data &&\n          module.hot.data.value &&\n          module.hot.data.value !== localsJsonString\n        ) {\n          module.hot.invalidate();\n        } else {\n          module.hot.accept();\n        }\n        module.hot.dispose(function(data) {\n          data.value = localsJsonString;\n          cssReload();\n        });\n      })();\n    }\n  ","import { atom } from 'jotai';\nimport { AgentEventStream } from '@/common/types';\n\n/**\n * Replay state interface for storing replay data\n *\n * This represents the current state of the replay functionality,\n * including timing, event positioning, and playback control\n */\nexport interface ReplayState {\n  // Active state\n  isActive: boolean;\n  isPaused: boolean;\n\n  // Events and timing\n  events: AgentEventStream.Event[];\n  currentEventIndex: number;\n  startTimestamp: number | null;\n  endTimestamp: number | null;\n\n  // Playback control\n  playbackSpeed: number; // 1 = normal, 2 = 2x speed, etc.\n  autoPlayCountdown: number | null; // Countdown in seconds before autoplay starts\n\n  // Current visible range\n  visibleTimeWindow: {\n    start: number;\n    end: number;\n  } | null;\n\n  // Tracking processed events to avoid duplicates\n  processedEvents?: Record<string, boolean>;\n}\n\n/**\n * Default replay state\n */\nconst DEFAULT_REPLAY_STATE: ReplayState = {\n  isActive: false,\n  isPaused: true,\n  events: [],\n  currentEventIndex: -1,\n  startTimestamp: null,\n  endTimestamp: null,\n  playbackSpeed: 1,\n  autoPlayCountdown: null,\n  visibleTimeWindow: null,\n  processedEvents: {},\n};\n\n/**\n * Atom for storing replay state\n * This manages the entire replay experience including timeline position and events\n */\nexport const replayStateAtom = atom<ReplayState>(DEFAULT_REPLAY_STATE);\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACvBA;AAkCA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA"}