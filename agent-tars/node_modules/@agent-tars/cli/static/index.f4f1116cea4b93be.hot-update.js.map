{"version":3,"file":"index.f4f1116cea4b93be.hot-update.js","sources":["/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/entry.css","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/Message/components/EnvironmentStateEntry.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/Message/components/MessageGroup.tsx"],"sourcesContent":["// extracted by css-extract-rspack-plugin\nexport {};\n    if(module.hot) {\n      (function() {\n        var localsJsonString = undefined;\n        // 1749584134448\n        var cssReload = require(\"../../node_modules/.pnpm/@rspack+core@1.3.9_@swc+helpers@0.5.17/node_modules/@rspack/core/dist/cssExtractHmr.js\").cssReload(module.id, {});\n        // only invalidate when locals change\n        if (\n          module.hot.data &&\n          module.hot.data.value &&\n          module.hot.data.value !== localsJsonString\n        ) {\n          module.hot.invalidate();\n        } else {\n          module.hot.accept();\n        }\n        module.hot.dispose(function(data) {\n          data.value = localsJsonString;\n          cssReload();\n        });\n      })();\n    }\n  ","import React from 'react';\nimport { motion } from 'framer-motion';\nimport { FiMonitor, FiMaximize } from 'react-icons/fi';\nimport { Message } from '../../../../types';\nimport { formatTimestamp } from '../../../../utils/formatters';\n\ninterface EnvironmentStateEntryProps {\n  environmentMessage: Message;\n  onClick: () => void;\n}\n\n/**\n * EnvironmentStateEntry - Displays a UI entry for viewing the last environment state\n * \n * This component provides a way to access the final environment state (e.g. browser screenshot)\n * after a conversation has completed, similar to tool call entries.\n */\nexport const EnvironmentStateEntry: React.FC<EnvironmentStateEntryProps> = ({ \n  environmentMessage, \n  onClick \n}) => {\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 5 }}\n      animate={{ opacity: 1, y: 0 }}\n      whileHover={{ y: -2, boxShadow: '0 4px 12px rgba(0,0,0,0.05)' }}\n      whileTap={{ scale: 0.98 }}\n      onClick={onClick}\n      className=\"mt-3 p-3 bg-white dark:bg-gray-800 rounded-xl border border-gray-100/40 dark:border-gray-700/20 cursor-pointer group\"\n    >\n      <div className=\"flex items-start\">\n        <div className=\"w-10 h-10 flex-shrink-0 rounded-lg bg-blue-50 dark:bg-blue-900/20 flex items-center justify-center border border-blue-100/40 dark:border-blue-800/30\">\n          <FiMonitor className=\"text-blue-600 dark:text-blue-400\" size={18} />\n        </div>\n\n        <div className=\"flex-1 min-w-0 ml-3\">\n          <div className=\"font-medium text-gray-800 dark:text-gray-200 mb-1\">\n            View Final Environment State\n          </div>\n          <div className=\"flex items-center text-xs text-gray-500 dark:text-gray-400\">\n            <span className=\"mr-2\">{formatTimestamp(environmentMessage.timestamp)}</span>\n            <span className=\"px-1.5 py-0.5 bg-blue-50/70 dark:bg-blue-900/20 text-blue-600 dark:text-blue-400 rounded-full border border-blue-100/30 dark:border-blue-800/20\">\n              {environmentMessage.description || 'Environment State'}\n            </span>\n          </div>\n        </div>\n\n        <motion.div\n          className=\"ml-2 w-8 h-8 rounded-full flex items-center justify-center opacity-0 group-hover:opacity-100 bg-gray-50 dark:bg-gray-700 text-gray-400 dark:text-gray-500 group-hover:bg-blue-50 dark:group-hover:bg-blue-900/20 group-hover:text-blue-500 dark:group-hover:text-blue-400 transition-all duration-200 border border-gray-100/40 dark:border-gray-700/30\"\n          animate={{ x: [0, 3, 0] }}\n          transition={{\n            duration: 1.5,\n            repeat: Infinity,\n            repeatType: 'loop',\n            ease: 'easeInOut',\n            repeatDelay: 2,\n          }}\n        >\n          <FiMaximize size={16} />\n        </motion.div>\n      </div>\n    </motion.div>\n  );\n};\n","import React from 'react';\nimport { motion } from 'framer-motion';\nimport { Message as MessageType } from '../../../../types';\nimport { Message } from '../index';\nimport { FiClock } from 'react-icons/fi';\nimport { formatTimestamp } from '../../../../utils/formatters';\nimport { isMultimodalContent } from '../../../../utils/typeGuards';\nimport { useSession } from '../../../../hooks/useSession';\nimport { EnvironmentStateEntry } from './EnvironmentStateEntry';\n\ninterface MessageGroupProps {\n  messages: MessageType[];\n  isThinking: boolean;\n}\n\n/**\n * MessageGroup Component - Groups related messages in a thinking sequence\n *\n * Design principles:\n * - Minimalist design with no avatars or indentation\n * - Clean, full-width message layout\n * - All intermediate thinking steps are always visible\n * - Visual hierarchy emphasizing final answers\n * - Consistent monochromatic styling\n */\nexport const MessageGroup: React.FC<MessageGroupProps> = ({ messages, isThinking }) => {\n  const { setActivePanelContent } = useSession();\n\n  // 找到环境消息 (可能存在多个)\n  const environmentMessages = messages.filter((msg) => msg.role === 'environment');\n  // 获取最后一个环境消息，用于显示最终环境状态\n  const lastEnvironmentMessage = environmentMessages.length > 0 \n    ? environmentMessages[environmentMessages.length - 1] \n    : null;\n\n  // 过滤掉环境消息进行正常显示\n  const filteredMessages = messages.filter((msg) => msg.role !== 'environment');\n\n  // 判断是否应该显示环境状态入口\n  // 条件: 有环境消息 && 有助手消息(表明助手已回应) && 不在思考中\n  const showEnvironmentEntry = \n    lastEnvironmentMessage !== null && \n    filteredMessages.some(msg => msg.role === 'assistant') &&\n    !isThinking;\n  \n  // 处理环境消息点击\n  const handleEnvironmentClick = () => {\n    if (lastEnvironmentMessage && Array.isArray(lastEnvironmentMessage.content)) {\n      const imageContent = lastEnvironmentMessage.content.find(\n        (part) => part.type === 'image_url' && part.image_url && part.image_url.url,\n      );\n      \n      if (imageContent && imageContent.image_url) {\n        setActivePanelContent({\n          type: 'image',\n          source: lastEnvironmentMessage.content,\n          title: lastEnvironmentMessage.description || 'Environment State',\n          timestamp: lastEnvironmentMessage.timestamp,\n          environmentId: lastEnvironmentMessage.id\n        });\n      }\n    }\n  };\n\n  // 如果过滤后没有消息，则不渲染任何内容\n  if (filteredMessages.length === 0) {\n    return null;\n  }\n\n  // 如果只有一条消息，检查是否需要拆分\n  if (filteredMessages.length === 1) {\n    const message = filteredMessages[0];\n\n    // 检查是否是包含图片和文本的多模态用户消息\n    if (message.role === 'user' && isMultimodalContent(message.content)) {\n      const imageContents = message.content.filter((part) => part.type === 'image_url');\n      const textContents = message.content.filter((part) => part.type === 'text');\n\n      // 只有同时包含图片和文本时才拆分显示\n      if (imageContents.length > 0 && textContents.length > 0) {\n        return (\n          <div className=\"space-y-3\">\n            {/* 先显示图片消息 */}\n            <Message\n              key={`${message.id}-images`}\n              message={{\n                ...message,\n                content: imageContents,\n                id: `${message.id}-images`,\n              }}\n            />\n\n            {/* 再显示文本消息 */}\n            <Message\n              key={`${message.id}-text`}\n              message={{\n                ...message,\n                content: textContents,\n                id: `${message.id}-text`,\n              }}\n            />\n            \n            {/* 环境状态入口 - 单条消息情况 */}\n            {showEnvironmentEntry && lastEnvironmentMessage && (\n              <EnvironmentStateEntry \n                environmentMessage={lastEnvironmentMessage} \n                onClick={handleEnvironmentClick}\n              />\n            )}\n          </div>\n        );\n      }\n    }\n\n    return (\n      <div>\n        <Message message={filteredMessages[0]} />\n        \n        {/* 环境状态入口 - 单条消息情况 */}\n        {showEnvironmentEntry && lastEnvironmentMessage && (\n          <EnvironmentStateEntry \n            environmentMessage={lastEnvironmentMessage} \n            onClick={handleEnvironmentClick}\n          />\n        )}\n      </div>\n    );\n  }\n\n  // 获取第一条消息 - 通常是用户消息\n  const firstMessage = filteredMessages[0];\n\n  // If not a user message, use simplified rendering\n  if (firstMessage.role !== 'user') {\n    return (\n      <div className=\"space-y-3\">\n        {filteredMessages.map((message, index) => (\n          <Message\n            key={message.id}\n            message={message}\n            isInGroup={index > 0 && index < filteredMessages.length - 1}\n            isIntermediate={index > 0 && index < filteredMessages.length - 1}\n            shouldDisplayTimestamp={false}\n          />\n        ))}\n        \n        {/* 环境状态入口 - 非用户消息开头的情况 */}\n        {showEnvironmentEntry && lastEnvironmentMessage && (\n          <EnvironmentStateEntry \n            environmentMessage={lastEnvironmentMessage} \n            onClick={handleEnvironmentClick}\n          />\n        )}\n      </div>\n    );\n  }\n\n  // For user-initiated groups, use enhanced rendering with thinking sequence\n\n  const responseMessage = filteredMessages.length > 1 ? filteredMessages[1] : null;\n  const intermediateMessages = filteredMessages.slice(2, -1);\n  const lastMessage = filteredMessages[filteredMessages.length - 1];\n\n  const hasFinalAnswer = lastMessage.role === 'assistant' && lastMessage.finishReason === 'stop';\n  const finalMessage = hasFinalAnswer ? lastMessage : null;\n\n  const hasThinkingSteps = intermediateMessages.length > 0;\n\n  // 检查用户消息是否需要拆分\n  if (isMultimodalContent(firstMessage.content)) {\n    const imageContents = firstMessage.content.filter((part) => part.type === 'image_url');\n    const textContents = firstMessage.content.filter((part) => part.type === 'text');\n\n    // 只有同时包含图片和文本时才拆分显示\n    if (imageContents.length > 0 && textContents.length > 0) {\n      return (\n        <div className=\"message-group-container space-y-3\">\n          {/* 先显示图片消息 */}\n          <Message\n            message={{\n              ...firstMessage,\n              content: imageContents,\n              id: `${firstMessage.id}-images`,\n            }}\n          />\n\n          {/* 再显示文本消息 */}\n          <Message\n            message={{\n              ...firstMessage,\n              content: textContents,\n              id: `${firstMessage.id}-text`,\n            }}\n          />\n\n          {/* Assistant response section with all assistant-related messages */}\n          {responseMessage && (\n            <div className=\"assistant-response-container\">\n              {/* Initial response message - marked as in-group */}\n              <Message message={responseMessage} isInGroup={true} />\n\n              {/* Thinking process section - always shown */}\n              {hasThinkingSteps && (\n                <div className=\"thinking-steps-container\">\n                  {intermediateMessages.map((msg) => (\n                    <Message key={msg.id} message={msg} isIntermediate={true} isInGroup={true} />\n                  ))}\n\n                  {!isThinking && (\n                    <div className=\"mt-1 mb-2\">\n                      <div className=\"flex items-center text-xs text-gray-500 dark:text-gray-400 py-1\">\n                        <FiClock size={10} className=\"mr-1\" />\n                        {responseMessage && formatTimestamp(responseMessage.timestamp)}\n                      </div>\n                    </div>\n                  )}\n                </div>\n              )}\n\n              {/* Final answer - if exists and not currently thinking */}\n              {finalMessage && finalMessage !== responseMessage && !isThinking && (\n                <Message message={finalMessage} isInGroup={false} />\n              )}\n\n              {/* 环境状态入口 - 放在回答之后 */}\n              {showEnvironmentEntry && lastEnvironmentMessage && !isThinking && (\n                <EnvironmentStateEntry \n                  environmentMessage={lastEnvironmentMessage} \n                  onClick={handleEnvironmentClick}\n                />\n              )}\n\n              {/* Thinking indicator */}\n              {isThinking && (\n                <div className=\"mt-2 flex items-center text-xs text-gray-500 dark:text-gray-400\">\n                  <div className=\"flex items-center justify-center bg-gray-50/70 dark:bg-gray-700/40 rounded-full w-5 h-5 mr-2 text-gray-500 dark:text-gray-400\">\n                    <div className=\"w-1.5 h-1.5 bg-gray-500 dark:bg-gray-400 rounded-full animate-pulse\"></div>\n                  </div>\n                  Agent TARS is thinking...\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      );\n    }\n  }\n\n  return (\n    <div className=\"message-group-container space-y-3\">\n      {/* User message is always displayed */}\n      <Message message={firstMessage} />\n\n      {/* Assistant response section with all assistant-related messages */}\n      {responseMessage && (\n        <div className=\"assistant-response-container\">\n          {/* Initial response message - marked as in-group */}\n          <Message message={responseMessage} isInGroup={true} />\n\n          {/* Thinking process section - always shown */}\n          {hasThinkingSteps && (\n            <div className=\"thinking-steps-container\">\n              {intermediateMessages.map((msg) => (\n                <Message key={msg.id} message={msg} isIntermediate={true} isInGroup={true} />\n              ))}\n\n              {!isThinking && (\n                <div className=\"mt-1 mb-2\">\n                  <div className=\"flex items-center text-xs text-gray-500 dark:text-gray-400 py-1\">\n                    <FiClock size={10} className=\"mr-1\" />\n                    {responseMessage && formatTimestamp(responseMessage.timestamp)}\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n\n          {/* Final answer - if exists and not currently thinking */}\n          {finalMessage && finalMessage !== responseMessage && !isThinking && (\n            <Message message={finalMessage} isInGroup={false} />\n          )}\n          \n          {/* 环境状态入口 - 放在回答之后 */}\n          {showEnvironmentEntry && lastEnvironmentMessage && !isThinking && (\n            <EnvironmentStateEntry \n              environmentMessage={lastEnvironmentMessage} \n              onClick={handleEnvironmentClick}\n            />\n          )}\n\n          {/* Thinking indicator */}\n          {isThinking && (\n            <div className=\"mt-2 flex items-center text-xs text-gray-500 dark:text-gray-400\">\n              <div className=\"flex items-center justify-center bg-gray-50/70 dark:bg-gray-700/40 rounded-full w-5 h-5 mr-2 text-gray-500 dark:text-gray-400\">\n                <div className=\"w-1.5 h-1.5 bg-gray-500 dark:bg-gray-400 rounded-full animate-pulse\"></div>\n              </div>\n              Agent TARS is thinking...\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACvBA;AACA;AACA;AAEA;AAOA;;;;;AAKA;AACA;AAIA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;;AACA;AAAA;AACA;AAAA;AAAA;;;;;;;;;;;AAGA;AAAA;;AACA;AAAA;AAAA;;;;;;AAGA;AAAA;;AACA;AAAA;AAAA;;;;;;AACA;AAAA;AACA;;;;;;;;;;;;;;;;;;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;;;;;;;;;;;;;;;;;;;;;;AAKA;AA9CA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjBA;AAGA;AACA;AACA;AACA;AACA;AACA;AAOA;;;;;;;;;AASA;AACA;;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AAKA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AALA;;;;;AASA;AAEA;AACA;AACA;AACA;AACA;AALA;;;;;AASA;AAEA;AACA;;;;;;;;;;;;AAKA;AACA;AAEA;;AAEA;AAAA;;;;;;AAGA;AAEA;AACA;;;;;;;;;;;;AAKA;AAEA;AACA;AAEA;AACA;AACA;AACA;;AACA;AAGA;AACA;AACA;AACA;AAJA;;;;;AASA;AAEA;AACA;;;;;;;;;;;;AAKA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;AAIA;AACA;AACA;AACA;AACA;AACA;;;;;;AAIA;AACA;;AAEA;AAAA;AAAA;;;;;;AAGA;AACA;;AACA;AACA;AAAA;AAAA;AAAA;;;;;AAGA;AACA;AACA;AAAA;;AACA;AAAA;AAAA;;;;;;AACA;;;;;;;;;;;;;;;;;;AAQA;AACA;AAAA;;;;;;AAIA;AAEA;AACA;;;;;;AAKA;AACA;;AACA;AAAA;AACA;AAAA;;;;;;;;;;;AACA;;;;;;;;;;;;;;;;;;;AAQA;AACA;AAEA;AACA;;AAEA;AAAA;;;;;;AAGA;AACA;;AAEA;AAAA;AAAA;;;;;;AAGA;AACA;;AACA;AACA;AAAA;AAAA;AAAA;;;;;AAGA;AACA;AACA;AAAA;;AACA;AAAA;AAAA;;;;;;AACA;;;;;;;;;;;;;;;;;;AAQA;AACA;AAAA;;;;;;AAIA;AAEA;AACA;;;;;;AAKA;AACA;;AACA;AAAA;AACA;AAAA;;;;;;;;;;;AACA;;;;;;;;;;;;;;;;;;;AAQA;AAtRA;;AACA;;;AADA"}