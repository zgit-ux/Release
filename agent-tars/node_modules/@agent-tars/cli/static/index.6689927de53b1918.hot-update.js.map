{"version":3,"file":"index.6689927de53b1918.hot-update.js","sources":["/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/entry.css","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/workspace/utils/contentStandardizer/handlers.ts"],"sourcesContent":["// extracted by css-extract-rspack-plugin\nexport {};\n    if(module.hot) {\n      (function() {\n        var localsJsonString = undefined;\n        // 1751744363537\n        var cssReload = require(\"../../node_modules/.pnpm/@rspack+core@1.3.9_@swc+helpers@0.5.17/node_modules/@rspack/core/dist/cssExtractHmr.js\").cssReload(module.id, {});\n        // only invalidate when locals change\n        if (\n          module.hot.data &&\n          module.hot.data.value &&\n          module.hot.data.value !== localsJsonString\n        ) {\n          module.hot.invalidate();\n        } else {\n          module.hot.accept();\n        }\n        module.hot.dispose(function(data) {\n          data.value = localsJsonString;\n          cssReload();\n        });\n      })();\n    }\n  ","import { ToolResultContentPart } from '../../types';\nimport { StandardPanelContent, SearchResult } from '../../types/panelContent';\nimport {\n  isMultimodalContent,\n  isSearchResults,\n  isCommandResult,\n  isScriptResult,\n  isFileResult,\n  isObjectWithResults,\n} from './typeGuards';\nimport {\n  extractImageUrl,\n  parseImageContent,\n  extractSearchResults,\n  extractCommandResult,\n  extractScriptResult,\n  extractFileContent,\n  findImageContent,\n} from './extractors';\n\nexport function handleImageContent(source: unknown, title: string): ToolResultContentPart[] {\n  if (typeof source === 'string') {\n    const imageData = parseImageContent(source);\n    if (imageData) {\n      return [\n        {\n          type: 'image',\n          imageData: imageData.base64Data,\n          mimeType: imageData.mimeType,\n          name: title,\n        },\n      ];\n    }\n  }\n\n  if (Array.isArray(source)) {\n    const imagePart = findImageContent(source);\n    if (imagePart?.image_url?.url) {\n      const imgSrc = imagePart.image_url.url;\n      const imageData = parseImageContent(imgSrc);\n\n      if (imageData) {\n        return [\n          {\n            type: 'image',\n            imageData: imageData.base64Data,\n            mimeType: imageData.mimeType,\n            name: title,\n          },\n        ];\n      }\n    }\n  }\n\n  return [\n    {\n      type: 'text',\n      text: 'Image could not be displayed',\n    },\n  ];\n}\n\nexport function handleSearchContent(\n  source: unknown,\n  toolArguments?: Record<string, unknown>,\n  title?: string,\n): ToolResultContentPart[] {\n  if (isSearchResults(source)) {\n    return [\n      {\n        type: 'search_result',\n        name: 'SEARCH_RESULTS',\n        results: source.map(\n          (item): SearchResult => ({\n            title: item.title,\n            url: item.url,\n            snippet: item.content || item.snippet || '',\n          }),\n        ),\n        query: (toolArguments?.query as string) || title?.replace(/^Search: /i, ''),\n      },\n    ];\n  }\n\n  if (isMultimodalContent(source)) {\n    const { results, query } = extractSearchResults(source);\n    return [\n      {\n        type: 'search_result',\n        name: 'SEARCH_RESULTS',\n        results,\n        query,\n      },\n    ];\n  }\n\n  if (isObjectWithResults(source)) {\n    return [\n      {\n        type: 'search_result',\n        name: 'SEARCH_RESULTS',\n        results: source.results,\n        query: source.query,\n      },\n    ];\n  }\n\n  return [\n    {\n      type: 'text',\n      text: typeof source === 'string' ? source : JSON.stringify(source, null, 2),\n    },\n  ];\n}\n\nexport function handleCommandContent(\n  source: unknown,\n  toolArguments?: Record<string, unknown>,\n): ToolResultContentPart[] {\n  if (isMultimodalContent(source)) {\n    const commandResult = extractCommandResult(source);\n    return [\n      {\n        type: 'command_result',\n        name: 'COMMAND_RESULT',\n        command: commandResult.command || (toolArguments?.command as string),\n        stdout: commandResult.stdout || '',\n        stderr: commandResult.stderr || '',\n        exitCode: commandResult.exitCode,\n      },\n    ];\n  }\n\n  if (isCommandResult(source)) {\n    return [\n      {\n        type: 'command_result',\n        name: 'COMMAND_RESULT',\n        command: source.command || (toolArguments?.command as string),\n        stdout: source.output || source.stdout || '',\n        stderr: source.stderr || '',\n        exitCode: source.exitCode,\n      },\n    ];\n  }\n\n  return [\n    {\n      type: 'text',\n      text: typeof source === 'string' ? source : JSON.stringify(source, null, 2),\n    },\n  ];\n}\n\nexport function handleScriptContent(\n  source: unknown,\n  toolArguments?: Record<string, unknown>,\n): ToolResultContentPart[] {\n  if (isMultimodalContent(source)) {\n    const scriptResult = extractScriptResult(source);\n    return [\n      {\n        type: 'script_result',\n        name: 'SCRIPT_RESULT',\n        script: (toolArguments?.script as string) || '',\n        interpreter: (toolArguments?.interpreter as string) || 'python',\n        cwd: (toolArguments?.cwd as string) || undefined,\n        stdout: scriptResult.stdout || '',\n        stderr: scriptResult.stderr || '',\n        exitCode: scriptResult.exitCode,\n      },\n    ];\n  }\n\n  if (isScriptResult(source)) {\n    return [\n      {\n        type: 'script_result',\n        name: 'SCRIPT_RESULT',\n        script: source.script || (toolArguments?.script as string) || '',\n        interpreter: source.interpreter || (toolArguments?.interpreter as string) || 'python',\n        cwd: source.cwd || (toolArguments?.cwd as string) || undefined,\n        stdout: source.stdout || '',\n        stderr: source.stderr || '',\n        exitCode: source.exitCode,\n      },\n    ];\n  }\n\n  return [\n    {\n      type: 'text',\n      text: typeof source === 'string' ? source : JSON.stringify(source, null, 2),\n    },\n  ];\n}\n\nexport function handleFileContent(\n  source: unknown,\n  toolArguments?: Record<string, unknown>,\n): ToolResultContentPart[] {\n  if (isMultimodalContent(source)) {\n    const { content } = extractFileContent(source);\n    if (content) {\n      return [\n        {\n          type: 'file_result',\n          name: 'FILE_RESULT',\n          path: (toolArguments?.path as string) || 'Unknown file',\n          content,\n        },\n      ];\n    }\n  }\n\n  if (isFileResult(source)) {\n    return [\n      {\n        type: 'file_result',\n        name: 'FILE_RESULT',\n        path: source.path || (toolArguments?.path as string) || 'Unknown file',\n        content: source.content || 'No content available',\n      },\n    ];\n  }\n\n  if (typeof source === 'string') {\n    return [\n      {\n        type: 'file_result',\n        name: 'FILE_RESULT',\n        path: (toolArguments?.path as string) || 'Unknown file',\n        content: source,\n      },\n    ];\n  }\n\n  // Handle streaming write_file operation\n  if (toolArguments?.path && toolArguments?.content !== undefined) {\n    return [\n      {\n        type: 'file_result',\n        name: 'FILE_RESULT',\n        path: toolArguments.path as string,\n        content: toolArguments.content as string,\n      },\n    ];\n  }\n\n  return [\n    {\n      type: 'text',\n      text: typeof source === 'string' ? source : JSON.stringify(source, null, 2),\n    },\n  ];\n}\n\nexport function handleBrowserControlContent(\n  panelContent: StandardPanelContent,\n  source: unknown,\n): ToolResultContentPart[] {\n  const { toolCallId, arguments: toolArguments, originalContent } = panelContent;\n\n  const environmentImage = Array.isArray(originalContent) ? extractImageUrl(originalContent) : null;\n\n  return [\n    {\n      type: 'browser_control',\n      name: 'BROWSER_CONTROL',\n      toolCallId,\n      thought: (toolArguments?.thought as string) || '',\n      step: (toolArguments?.step as string) || '',\n      action: (toolArguments?.action as string) || '',\n      status: isCommandResult(source) ? source.command || 'unknown' : 'unknown',\n      environmentImage,\n    },\n  ];\n}\n\nexport function handleDefaultContent(source: unknown): ToolResultContentPart[] {\n  if (typeof source === 'object' && source !== null) {\n    return [\n      {\n        type: 'json',\n        name: 'JSON_DATA',\n        data: source,\n      },\n    ];\n  }\n\n  return [\n    {\n      type: 'text',\n      text: typeof source === 'string' ? source : JSON.stringify(source, null, 2),\n    },\n  ];\n}"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACrBA;AAQA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AADA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA"}