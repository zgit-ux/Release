{"version":3,"file":"index.41f8fce3f854ff54.hot-update.js","sources":["/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/entry.css","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/Message/components/AssistantExpandableContent.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/Message/components/EnvironmentMessage.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/Message/components/MultimodalContent.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/Message/index.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Workspace/renderers/BrowserResultRenderer.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Workspace/renderers/DeliverableRenderer.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Workspace/renderers/FileResultRenderer.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Workspace/renderers/GenericResultRenderer.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Workspace/renderers/ResearchReportRenderer.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Workspace/renderers/TextRenderer.tsx"],"sourcesContent":["// extracted by css-extract-rspack-plugin\nexport {};\n    if(module.hot) {\n      (function() {\n        var localsJsonString = undefined;\n        // 1749661013393\n        var cssReload = require(\"../../node_modules/.pnpm/@rspack+core@1.3.9_@swc+helpers@0.5.17/node_modules/@rspack/core/dist/cssExtractHmr.js\").cssReload(module.id, {});\n        // only invalidate when locals change\n        if (\n          module.hot.data &&\n          module.hot.data.value &&\n          module.hot.data.value !== localsJsonString\n        ) {\n          module.hot.invalidate();\n        } else {\n          module.hot.accept();\n        }\n        module.hot.dispose(function(data) {\n          data.value = localsJsonString;\n          cssReload();\n        });\n      })();\n    }\n  ","import React from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { MarkdownRenderer } from '../../../Markdown';\nimport { ToggleButton } from './ToggleButton';\n\ninterface AssistantExpandableContentProps {\n  content: string;\n  showSteps: boolean;\n  setShowSteps: (show: boolean) => void;\n}\n\n/**\n * Component for assistant messages with expandable content\n *\n * Design principles:\n * - Progressive disclosure of detailed information\n * - Smooth animations for content expansion\n * - Maintains readability by showing summary first\n */\nexport const AssistantExpandableContent: React.FC<AssistantExpandableContentProps> = ({\n  content,\n  showSteps,\n  setShowSteps,\n}) => {\n  // Extract just the first paragraph as summary\n  const summary = content.split('\\n')[0];\n  const hasMoreContent = content.length > summary.length;\n\n  return (\n    <>\n      <div className=\"prose dark:prose-invert prose-sm max-w-none text-xs\">\n        <MarkdownRenderer content={summary} />\n      </div>\n\n      <AnimatePresence>\n        {showSteps && (\n          <motion.div\n            initial={{ height: 0, opacity: 0 }}\n            animate={{ height: 'auto', opacity: 1 }}\n            exit={{ height: 0, opacity: 0 }}\n            transition={{ duration: 0.3 }}\n            className=\"overflow-hidden mt-1\"\n          >\n            <div className=\"prose dark:prose-invert prose-sm max-w-none text-xs border-t border-gray-100/30 dark:border-gray-700/20 pt-1 mt-1\">\n              <MarkdownRenderer content={content.substring(summary.length)} />\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      {hasMoreContent && (\n        <ToggleButton\n          isExpanded={showSteps}\n          onToggle={() => setShowSteps(!showSteps)}\n          expandedText=\"Hide detailed steps\"\n          collapsedText=\"Show detailed steps\"\n        />\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { motion } from 'framer-motion';\nimport { FiMaximize } from 'react-icons/fi';\nimport { MarkdownRenderer } from '../../../Markdown';\nimport { BrowserShell } from '../../../Workspace/renderers/BrowserShell';\nimport { useSession } from '../../../../hooks/useSession';\n\ninterface EnvironmentMessageProps {\n  content: any;\n  description?: string;\n  timestamp: number;\n  setActivePanelContent: (content: any) => void;\n  isIntermediate?: boolean;\n}\n\n/**\n * Component for displaying environment messages with optimized image rendering\n *\n * Design principles:\n * - Efficient rendering of multi-format content\n * - Interactive image thumbnails with preview capability\n * - Clear visual hierarchy with descriptive labels\n * - Compact and elegant styling for images without borders\n * - Support for intermediate display in thinking sequences\n * - Uses BrowserShell for browser screenshots for consistent UI with browser_vision_control\n */\nexport const EnvironmentMessage: React.FC<EnvironmentMessageProps> = ({\n  content,\n  description,\n  timestamp,\n  setActivePanelContent,\n  isIntermediate = false,\n}) => {\n  const { replayState } = useSession();\n\n  // 处理直接从环境输入渲染图像\n  if (Array.isArray(content)) {\n    const images = content.filter((part) => part.type === 'image_url');\n    const textParts = content.filter((part) => part.type === 'text');\n\n    // 空内容处理\n    if (images.length === 0 && textParts.length === 0) {\n      return <div className=\"text-xs text-gray-500 italic\">环境输入</div>;\n    }\n\n    // 检查是否是浏览器截图 - 通过description判断或使用启发式方法\n    const isBrowserScreenshot =\n      description?.toLowerCase().includes('browser') ||\n      description?.toLowerCase().includes('screenshot') ||\n      // 如果描述包含特定关键词但图片数量较少，可能是浏览器截图\n      (images.length === 1 && !isIntermediate);\n\n    // 确保在回放模式下图片能够正确加载\n    const handleImageError = (e: React.SyntheticEvent<HTMLImageElement, Event>) => {\n      console.warn('Image failed to load:', e.currentTarget.src);\n      // 可以在这里添加重试逻辑或替代图片\n    };\n\n    // 对于浏览器截图，使用BrowserShell进行渲染\n    if (isBrowserScreenshot && images.length > 0) {\n      return (\n        <div className=\"space-y-1\">\n          {/* 渲染文本内容 */}\n          {textParts.length > 0 && (\n            <div\n              className={`prose dark:prose-invert prose-sm max-w-none ${isIntermediate ? 'text-xs' : 'text-sm'} mb-2`}\n            >\n              {textParts.map((part, idx) => (\n                <MarkdownRenderer key={idx} content={part.text} />\n              ))}\n            </div>\n          )}\n\n          {/* 使用BrowserShell渲染浏览器截图 */}\n          <BrowserShell title={description || 'Browser Screenshot'}>\n            <div\n              className=\"relative group cursor-pointer\"\n              onClick={() =>\n                setActivePanelContent({\n                  type: 'image',\n                  source: images[0].image_url.url,\n                  title: description || '浏览器截图',\n                  timestamp,\n                })\n              }\n            >\n              <img\n                src={images[0].image_url.url}\n                alt={images[0].image_url.alt || '截图'}\n                className=\"w-full h-auto object-contain\"\n                onError={handleImageError}\n              />\n\n              {/* 悬停覆盖层 */}\n              <div className=\"absolute inset-0 bg-black/20 opacity-0 group-hover:opacity-100 transition-opacity duration-200 flex items-center justify-center\">\n                <FiMaximize className=\"text-white\" size={20} />\n              </div>\n            </div>\n          </BrowserShell>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"space-y-1\">\n        {/* 渲染文本内容 */}\n        {textParts.length > 0 && (\n          <div\n            className={`prose dark:prose-invert prose-sm max-w-none ${isIntermediate ? 'text-xs' : 'text-sm'}`}\n          >\n            {textParts.map((part, idx) => (\n              <MarkdownRenderer key={idx} content={part.text} />\n            ))}\n          </div>\n        )}\n\n        {/* 将图像渲染为无边框的缩略图 */}\n        {images.length > 0 && (\n          <div className=\"flex flex-wrap gap-1 mt-1\">\n            {images.map((image, idx) => (\n              <motion.div\n                key={idx}\n                whileHover={{ scale: 1.02 }}\n                className=\"relative group cursor-pointer\"\n                onClick={() =>\n                  setActivePanelContent({\n                    type: 'image',\n                    source: image.image_url.url,\n                    title: description || '环境输入',\n                    timestamp,\n                  })\n                }\n              >\n                {/* 缩略图 */}\n                <img\n                  src={image.image_url.url}\n                  alt={image.image_url.alt || '截图'}\n                  className={`${isIntermediate ? 'h-16' : 'h-20'} rounded-lg object-cover shadow-sm`}\n                  onError={handleImageError}\n                />\n\n                {/* 悬停覆盖层 */}\n                <div className=\"absolute inset-0 bg-black/20 opacity-0 group-hover:opacity-100 rounded-lg transition-opacity duration-200 flex items-center justify-center\">\n                  <FiMaximize className=\"text-white\" size={isIntermediate ? 14 : 16} />\n                </div>\n              </motion.div>\n            ))}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  // 非数组内容的回退\n  return (\n    <div\n      className={`prose dark:prose-invert prose-sm max-w-none ${isIntermediate ? 'text-xs' : 'text-sm'}`}\n    >\n      {description && !isIntermediate && (\n        <div className=\"text-xs font-medium text-gray-500 dark:text-gray-400 mb-1\">\n          {description}\n        </div>\n      )}\n      {typeof content === 'string' ? (\n        <MarkdownRenderer content={content} />\n      ) : (\n        <pre className=\"text-xs\">{JSON.stringify(content, null, 2)}</pre>\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport { motion } from 'framer-motion';\nimport { MarkdownRenderer } from '../../../Markdown';\n\ninterface MultimodalContentProps {\n  content: any[];\n  timestamp: number;\n  setActivePanelContent: any;\n}\n\n/**\n * Component for rendering multimodal content (text and images)\n *\n * Design principles:\n * - Seamless integration of different content types\n * - Interactive image previews with expansion capability\n * - Consistent formatting of text and visual elements\n */\nexport const MultimodalContent: React.FC<MultimodalContentProps> = ({\n  content,\n  timestamp,\n  setActivePanelContent,\n}) => {\n  // 筛选出图片和文本内容\n  const imageContents = content.filter((part) => part.type === 'image_url');\n  const textContents = content.filter((part) => part.type === 'text');\n\n  // 仅包含图片的情况 - 优化布局\n  const isImageOnly = imageContents.length > 0 && textContents.length === 0;\n\n  return (\n    <>\n      {/* 渲染图片内容 */}\n      {imageContents.length > 0 && (\n        <div\n          className={`${isImageOnly ? '' : 'mt-2 mb-2'} ${imageContents.length > 1 ? 'flex flex-wrap gap-2' : ''}`}\n        >\n          {imageContents.map((part, index) => (\n            <motion.div\n              key={`image-${index}`}\n              whileHover={{ scale: 1.02 }}\n              onClick={() =>\n                setActivePanelContent({\n                  type: 'image',\n                  source: part.image_url.url,\n                  title: part.image_url.alt || 'Image',\n                  timestamp,\n                })\n              }\n              className=\"relative group cursor-pointer inline-block\"\n            >\n              {/* Render the actual image thumbnail */}\n              <img\n                src={part.image_url.url}\n                alt={part.image_url.alt || 'Image'}\n                className={`${isImageOnly ? 'max-h-48' : 'h-24'} rounded-3xl object-cover border`}\n              />\n\n              {/* Hover overlay */}\n              {/* <div className=\"absolute inset-0 bg-black/30 opacity-0 group-hover:opacity-100 rounded-lg transition-opacity duration-200 flex items-center justify-center\">\n                <FiMaximize className=\"text-white\" size={20} />\n              </div> */}\n            </motion.div>\n          ))}\n        </div>\n      )}\n\n      {/* 渲染文本内容 - 确保用户消息中文本可见 */}\n      {textContents.map((part, index) => (\n        <div key={`text-${index}`} className=\"text-current\">\n          <MarkdownRenderer key={`text-${index}`} content={part.text} />\n        </div>\n      ))}\n    </>\n  );\n};","import React, { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { isMultimodalContent } from '../../../utils/typeGuards';\nimport { Message as MessageType } from '../../../types';\nimport { useSession } from '../../../hooks/useSession';\nimport { useTool } from '../../../hooks/useTool';\nimport { MarkdownRenderer } from '../../Markdown';\nimport './Message.css';\n\n// Import sub-components\nimport { SystemMessage } from './components/SystemMessage';\nimport { EnvironmentMessage } from './components/EnvironmentMessage';\nimport { MultimodalContent } from './components/MultimodalContent';\nimport { AssistantExpandableContent } from './components/AssistantExpandableContent';\nimport { ToolCalls } from './components/ToolCalls';\nimport { ThinkingToggle } from './components/ThinkingToggle';\nimport { MessageTimestamp } from './components/MessageTimestamp';\nimport { ThinkingAnimation } from './components/ThinkingAnimation';\nimport { useAtomValue } from 'jotai';\nimport { replayStateAtom } from '../../../state/atoms/replay';\nimport { ReportFileEntry } from './components/ReportFileEntry';\nimport { messagesAtom } from '../../../state/atoms/message';\nimport { FiExternalLink } from 'react-icons/fi';\n\ninterface MessageProps {\n  message: MessageType;\n  shouldDisplayTimestamp?: boolean;\n  isIntermediate?: boolean;\n  isInGroup?: boolean;\n}\n\n/**\n * Message Component - Displays a single message in the chat\n *\n * Design principles:\n * - Minimalist black & white design with no avatars\n * - Clean, full-width message bubbles with subtle differentiation\n * - Focus on content with minimal visual distractions\n * - Elegant spacing and typography\n * - Progressive disclosure for detailed content\n */\nexport const Message: React.FC<MessageProps> = ({\n  message,\n  isIntermediate = false,\n  isInGroup = false,\n  shouldDisplayTimestamp = true,\n}) => {\n  const [showThinking, setShowThinking] = useState(false);\n  const [showSteps, setShowSteps] = useState(false);\n  const { setActivePanelContent, activeSessionId } = useSession();\n  const { getToolIcon } = useTool();\n  const replayState = useAtomValue(replayStateAtom);\n  const allMessages = useAtomValue(messagesAtom);\n\n  const isMultimodal = isMultimodalContent(message.content);\n  const isEnvironment = message.role === 'environment';\n  const isUserMessage = message.role === 'user';\n\n  const isFinalAnswer = message.role === 'final_answer' || message.isDeepResearch;\n\n  // Check if this is a final assistant response\n  const isFinalAssistantResponse = message.role === 'assistant' && message.finishReason === 'stop';\n\n  // Handle tool call click - show in panel\n  const handleToolCallClick = (toolCall: any) => {\n    if (message.toolResults && message.toolResults.length > 0) {\n      const result = message.toolResults.find((r) => r.toolCallId === toolCall.id);\n      if (result) {\n        setActivePanelContent({\n          type: result.type,\n          source: result.content,\n          title: result.name,\n          timestamp: result.timestamp,\n          toolCallId: result.toolCallId,\n          error: result.error,\n          arguments: result.arguments,\n        });\n      }\n    }\n  };\n\n  // Handle click on final assistant response to show latest environment state\n  const handleFinalResponseClick = () => {\n    if (!activeSessionId || !isFinalAssistantResponse) return;\n\n    const sessionMessages = allMessages[activeSessionId] || [];\n\n    // Find the most recent environment input\n    for (let i = sessionMessages.length - 1; i >= 0; i--) {\n      const msg = sessionMessages[i];\n      if (msg.role === 'environment' && Array.isArray(msg.content)) {\n        const imageContent = msg.content.find(\n          (item) => item.type === 'image_url' && item.image_url && item.image_url.url,\n        );\n\n        if (imageContent) {\n          setActivePanelContent({\n            type: 'image',\n            source: msg.content,\n            title: msg.description || 'Final Environment State',\n            timestamp: msg.timestamp,\n            environmentId: msg.id,\n          });\n          break;\n        }\n      }\n    }\n  };\n\n  // Render content based on type\n  const renderContent = () => {\n    if (isMultimodal) {\n      return (\n        <MultimodalContent\n          content={message.content as any[]}\n          timestamp={message.timestamp}\n          setActivePanelContent={setActivePanelContent}\n        />\n      );\n    }\n\n    // For assistant messages with tool calls, first show summary\n    if (message.role === 'assistant' && message.toolCalls && message.toolCalls.length > 0) {\n      return (\n        <AssistantExpandableContent\n          content={message.content as string}\n          showSteps={showSteps}\n          setShowSteps={setShowSteps}\n        />\n      );\n    }\n\n    return <MarkdownRenderer content={message.content as string} forceDarkTheme={isUserMessage} />;\n  };\n\n  // Message animation variants\n  const messageVariants = {\n    initial: { opacity: 0, y: 10 },\n    animate: { opacity: 1, y: 0 },\n    transition: { duration: 0.3 },\n  };\n\n  // Determine message bubble style based on role and state\n  const getMessageBubbleClasses = () => {\n    let baseClasses = '';\n\n    if (message.role === 'user') {\n      if (isImageOnlyMessage) {\n        baseClasses = 'message-user message-user-image';\n      } else {\n        baseClasses = 'message-user';\n      }\n    } else if (message.role === 'system') {\n      baseClasses = 'message-system';\n    } else if (message.role === 'environment') {\n      baseClasses = 'environment-message-minimal';\n    } else {\n      baseClasses = 'message-assistant';\n    }\n\n    // 添加更平滑的点击样式\n    if (isFinalAssistantResponse) {\n      baseClasses += ' cursor-pointer transition-all duration-300';\n    }\n\n    return baseClasses;\n  };\n\n  // 检查消息是否只包含图片（用于样式优化）\n  const isImageOnlyMessage = React.useMemo(() => {\n    if (!isMultimodalContent(message.content)) return false;\n\n    const imageContents = message.content.filter((part) => part.type === 'image_url');\n    const textContents = message.content.filter((part) => part.type === 'text');\n\n    return imageContents.length > 0 && textContents.length === 0;\n  }, [message.content]);\n\n  // 检查消息是否只包含文本（用于样式优化）\n  const isTextOnlyMessage = React.useMemo(() => {\n    if (!isMultimodalContent(message.content)) return true;\n\n    const imageContents = message.content.filter((part) => part.type === 'image_url');\n    const textContents = message.content.filter((part) => part.type === 'text');\n\n    return textContents.length > 0 && imageContents.length === 0;\n  }, [message.content]);\n\n  return (\n    <motion.div\n      initial=\"initial\"\n      animate=\"animate\"\n      variants={messageVariants}\n      className={`message-container ${message.role === 'user' ? 'message-container-user' : 'message-container-assistant'} ${isIntermediate ? 'message-container-intermediate' : ''}`}\n    >\n      <div\n        className={`message-bubble ${getMessageBubbleClasses()} ${isIntermediate ? 'message-bubble-intermediate' : ''} ${isFinalAssistantResponse ? 'group' : ''}`}\n        onClick={isFinalAssistantResponse ? handleFinalResponseClick : undefined}\n        title={isFinalAssistantResponse ? 'Click to view final environment state' : undefined}\n      >\n        {/* Role-based content */}\n        {message.role === 'system' ? (\n          <SystemMessage content={message.content as string} />\n        ) : message.role === 'environment' ? (\n          <EnvironmentMessage\n            content={message.content}\n            description={message.description}\n            timestamp={message.timestamp}\n            setActivePanelContent={setActivePanelContent}\n            isIntermediate={isIntermediate}\n          />\n        ) : (\n          <>\n            <div\n              className={`prose ${message.role === 'user' ? 'prose-invert' : 'dark:prose-invert'} prose-sm max-w-none text-sm`}\n            >\n              {renderContent()}\n            </div>\n\n            {/* Show click hint for final assistant responses */}\n            {isFinalAssistantResponse && !isIntermediate && !isInGroup && (\n              <div className=\"mt-2 opacity-0 group-hover:opacity-100 transition-opacity duration-200 text-xs text-gray-500 dark:text-gray-400 flex items-center\">\n                <FiExternalLink size={14} className=\"mr-1\" />\n                Click to view final environment state\n              </div>\n            )}\n\n            {/* 总是显示最终答案/研究报告的文件入口，除非是中间消息或组内消息 */}\n            {isFinalAnswer &&\n              message.title &&\n              typeof message.content === 'string' &&\n              !isIntermediate &&\n              !isInGroup && (\n                <ReportFileEntry\n                  title={message.title || 'Research Report'}\n                  timestamp={message.timestamp}\n                  content={message.content}\n                />\n              )}\n\n            {/* Tool calls section - now with loading states and status icons */}\n            {message.toolCalls && message.toolCalls.length > 0 && (\n              <ToolCalls\n                toolCalls={message.toolCalls}\n                onToolCallClick={handleToolCallClick}\n                getToolIcon={getToolIcon}\n                isIntermediate={isIntermediate}\n                toolResults={message.toolResults || []} // Pass tool results for status checking\n              />\n            )}\n\n            {/* Thinking section */}\n            {message.thinking && (\n              <ThinkingToggle\n                thinking={message.thinking}\n                showThinking={showThinking}\n                setShowThinking={setShowThinking}\n              />\n            )}\n          </>\n        )}\n      </div>\n\n      {/* Timestamp and copy button - only for main messages */}\n      {message.role !== 'system' &&\n        !isIntermediate &&\n        !isInGroup &&\n        shouldDisplayTimestamp &&\n        !replayState.isActive && (\n          <MessageTimestamp\n            timestamp={message.timestamp}\n            content={message.content}\n            role={message.role}\n          />\n        )}\n    </motion.div>\n  );\n};","import React from 'react';\nimport { ToolResultContentPart } from '../../../types';\nimport { FiMonitor, FiExternalLink, FiGlobe, FiBookmark, FiCopy, FiCheck } from 'react-icons/fi';\nimport { BrowserShell } from './BrowserShell';\nimport { MarkdownRenderer } from '../../Markdown';\nimport { motion } from 'framer-motion';\nimport { useState } from 'react';\n\ninterface BrowserResultRendererProps {\n  part: ToolResultContentPart;\n  onAction?: (action: string, data: any) => void;\n}\n\n/**\n * Renders browser navigation and page content results with improved UI\n *\n * Design improvements:\n * - Enhanced browser shell with realistic browser chrome\n * - Better visual hierarchy and content spacing\n * - Quick action buttons for URL interaction\n * - Proper content formatting with support for different content types\n * - Smooth animations for state changes\n */\nexport const BrowserResultRenderer: React.FC<BrowserResultRendererProps> = ({ part }) => {\n  const { url, content, title, contentType } = part;\n  const [copied, setCopied] = useState(false);\n\n  const displayTitle = title || url?.split('/').pop() || 'Browser Result';\n\n  if (!url && !content) {\n    return <div className=\"text-gray-500 italic\">Browser result is empty</div>;\n  }\n\n  const copyUrl = () => {\n    if (url) {\n      navigator.clipboard.writeText(url);\n      setCopied(true);\n      setTimeout(() => setCopied(false), 2000);\n    }\n  };\n\n  // Extract URL from text content if it's in the format \"Navigated to URL\"\n  const extractUrlFromContent = () => {\n    if (typeof content === 'string' && content.includes('Navigated to ')) {\n      const lines = content.split('\\n');\n      const firstLine = lines[0] || '';\n      return firstLine.replace('Navigated to ', '').trim();\n    }\n    return url || '';\n  };\n\n  // Extract content from text after URL line\n  const extractContentFromText = () => {\n    if (typeof content === 'string' && content.includes('Navigated to ')) {\n      const lines = content.split('\\n');\n      return lines.slice(1).join('\\n');\n    }\n    return content;\n  };\n\n  const extractedUrl = extractUrlFromContent();\n  const extractedContent = extractContentFromText();\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"mb-4\">\n        {/* URL actions bar */}\n        {extractedUrl && (\n          <div className=\"mb-4 flex items-center\">\n            <div className=\"flex-1 p-3 bg-gray-50 dark:bg-gray-800/80 rounded-lg text-sm border border-gray-100/30 dark:border-gray-700/20 flex items-center overflow-hidden\">\n              <FiGlobe className=\"flex-shrink-0 text-gray-400 dark:text-gray-500 mr-2\" size={16} />\n              <span className=\"truncate text-gray-700 dark:text-gray-300 mr-2\">{extractedUrl}</span>\n            </div>\n            <div className=\"flex ml-2 gap-2\">\n              <motion.button\n                whileHover={{ scale: 1.05 }}\n                whileTap={{ scale: 0.95 }}\n                onClick={copyUrl}\n                className=\"p-2 rounded-lg bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors border border-gray-200/50 dark:border-gray-700/30\"\n                title=\"Copy URL\"\n              >\n                {copied ? <FiCheck size={18} className=\"text-green-500\" /> : <FiCopy size={18} />}\n              </motion.button>\n              <motion.a\n                whileHover={{ scale: 1.05 }}\n                whileTap={{ scale: 0.95 }}\n                href={extractedUrl}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"p-2 rounded-lg bg-purple-50 dark:bg-purple-900/20 text-purple-600 dark:text-purple-400 hover:bg-purple-100 dark:hover:bg-purple-800/30 transition-colors border border-purple-200/50 dark:border-purple-800/30\"\n                title=\"Open in new tab\"\n              >\n                <FiExternalLink size={18} />\n              </motion.a>\n            </div>\n          </div>\n        )}\n\n        {/* Content with enhanced browser shell */}\n        <BrowserShell title={displayTitle} url={extractedUrl}>\n          <div className=\"bg-white dark:bg-gray-800 px-5 min-h-[200px] max-h-[70vh] overflow-auto border-t border-gray-100/30 dark:border-gray-700/20\">\n            {contentType === 'text' || typeof extractedContent === 'string' ? (\n              <div className=\"prose dark:prose-invert prose-sm max-w-none py-4\">\n                <MarkdownRenderer content={typeof extractedContent === 'string' ? extractedContent : ''} />\n              </div>\n            ) : (\n              <pre className=\"text-sm whitespace-pre-wrap font-mono bg-gray-50 dark:bg-gray-800/50 p-4 rounded-lg border border-gray-100/30 dark:border-gray-700/20 overflow-x-auto\">\n                {JSON.stringify(extractedContent, null, 2)}\n              </pre>\n            )}\n          </div>\n        </BrowserShell>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { motion } from 'framer-motion';\nimport { FiFileText, FiCode, FiDownload, FiExternalLink, FiCopy, FiCheck } from 'react-icons/fi';\nimport { ToolResultContentPart } from '../../../types';\nimport { MarkdownRenderer } from '../../Markdown';\n\ninterface DeliverableRendererProps {\n  part: ToolResultContentPart;\n  onAction?: (action: string, data: any) => void;\n}\n\n/**\n * DeliverableRenderer - Specialized component for rendering deliverable content\n * such as reports, code artifacts, and other final products\n *\n * Features:\n * - Categorizes deliverables by type (code, document, data)\n * - Provides download and copy functionality\n * - Offers appropriate preview for different content types\n * - Visual design consistent with other workspace renderers\n */\nexport const DeliverableRenderer: React.FC<DeliverableRendererProps> = ({ part, onAction }) => {\n  const { title, text, data, name } = part;\n  const [copied, setCopied] = React.useState(false);\n  \n  // Determine deliverable type based on available data\n  const getDeliverableType = () => {\n    if (!part) return 'unknown';\n    \n    // Check extensions if name exists\n    if (name) {\n      if (/\\.(js|ts|jsx|tsx|py|java|c|cpp|php|html|css|json)$/i.test(name)) return 'code';\n      if (/\\.(md|txt|docx|pdf|rtf)$/i.test(name)) return 'document';\n      if (/\\.(csv|xlsx|xls|xml)$/i.test(name)) return 'data';\n    }\n    \n    // Check title\n    if (title) {\n      if (title.toLowerCase().includes('report')) return 'document';\n      if (title.toLowerCase().includes('code')) return 'code';\n      if (title.toLowerCase().includes('data')) return 'data';\n    }\n    \n    // Default\n    return 'document';\n  };\n  \n  const deliverableType = getDeliverableType();\n  const content = text || (typeof data === 'string' ? data : JSON.stringify(data, null, 2));\n  \n  if (!content) {\n    return <div className=\"text-gray-500 italic\">No deliverable content available</div>;\n  }\n  \n  // Handle copy to clipboard\n  const handleCopy = () => {\n    navigator.clipboard.writeText(content);\n    setCopied(true);\n    setTimeout(() => setCopied(false), 2000);\n  };\n  \n  // Handle download\n  const handleDownload = () => {\n    const blob = new Blob([content], { type: 'text/plain' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = name || title || 'deliverable';\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n  \n  return (\n    <div className=\"space-y-4\">\n      {/* Deliverable header with metadata */}\n      <div className=\"flex items-center justify-between bg-white dark:bg-gray-800 rounded-xl p-4 border border-gray-200/50 dark:border-gray-700/30\">\n        <div className=\"flex items-center\">\n          <div className=\"w-10 h-10 rounded-xl flex items-center justify-center mr-3 border border-gray-200/50 dark:border-gray-700/30 shadow-sm \n            bg-gradient-to-br \n            from-amber-50 to-amber-100 dark:from-amber-900/20 dark:to-amber-800/20 \n            text-amber-500 dark:text-amber-400\">\n            {deliverableType === 'code' ? (\n              <FiCode size={18} />\n            ) : (\n              <FiFileText size={18} />\n            )}\n          </div>\n          <div>\n            <h3 className=\"font-medium text-gray-800 dark:text-gray-200 mb-1\">\n              {title || name || 'Deliverable'}\n            </h3>\n            <div className=\"flex items-center text-xs text-gray-500 dark:text-gray-400\">\n              <span className=\"mr-2\">{deliverableType === 'code' ? 'Code artifact' : 'Document'}</span>\n              {name && <span className=\"px-2 py-0.5 bg-gray-100 dark:bg-gray-700 rounded-full\">{name}</span>}\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"flex items-center gap-2\">\n          <motion.button\n            whileHover={{ scale: 1.05 }}\n            whileTap={{ scale: 0.95 }}\n            onClick={handleCopy}\n            className=\"p-2 rounded-lg bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors\"\n            title=\"Copy content\"\n          >\n            {copied ? <FiCheck size={18} className=\"text-green-500\" /> : <FiCopy size={18} />}\n          </motion.button>\n          <motion.button\n            whileHover={{ scale: 1.05 }}\n            whileTap={{ scale: 0.95 }}\n            onClick={handleDownload}\n            className=\"p-2 rounded-lg bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors\"\n            title=\"Download file\"\n          >\n            <FiDownload size={18} />\n          </motion.button>\n        </div>\n      </div>\n      \n      {/* Content preview with appropriate rendering */}\n      <div className=\"bg-white dark:bg-gray-800 rounded-xl border border-gray-200/50 dark:border-gray-700/30 overflow-hidden\">\n        <div className=\"px-4 py-3 bg-gray-50/80 dark:bg-gray-800/80 border-b border-gray-100/50 dark:border-gray-700/30 flex items-center\">\n          <FiFileText className=\"text-gray-600 dark:text-gray-400 mr-2.5\" size={16} />\n          <div className=\"font-medium text-gray-700 dark:text-gray-300\">Content Preview</div>\n        </div>\n        \n        <div className=\"p-4 max-h-[70vh] overflow-auto\">\n          {deliverableType === 'code' ? (\n            <pre className=\"text-sm whitespace-pre-wrap font-mono bg-gray-50 dark:bg-gray-800/50 p-4 rounded-lg border border-gray-100/30 dark:border-gray-700/20 overflow-x-auto\">\n              {content}\n            </pre>\n          ) : (\n            <div className=\"prose dark:prose-invert prose-sm max-w-none\">\n              <MarkdownRenderer content={content} />\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { ToolResultContentPart } from '../../../types';\nimport { motion } from 'framer-motion';\nimport { FiFileText, FiCode, FiEye, FiDownload } from 'react-icons/fi';\nimport { MarkdownRenderer } from '../../Markdown';\n\ninterface FileResultRendererProps {\n  part: ToolResultContentPart;\n  onAction?: (action: string, data: any) => void;\n}\n\n/**\n * Renders file operation results with preview capabilities\n * \n * Features:\n * - Content preview with syntax highlighting\n * - Special handling for HTML files with preview mode\n * - File download functionality\n * - Clean interface with visual file type indicators\n */\nexport const FileResultRenderer: React.FC<FileResultRendererProps> = ({ part, onAction }) => {\n  const { path, content } = part;\n  const [previewMode, setPreviewMode] = useState<'code' | 'preview'>('code');\n  \n  if (!path) {\n    return <div className=\"text-gray-500 italic\">File path missing</div>;\n  }\n\n  // Determine file extension\n  const extension = path.split('.').pop()?.toLowerCase() || '';\n  const isHtml = extension === 'html' || extension === 'htm';\n  const isImage = ['jpg', 'jpeg', 'png', 'gif', 'svg', 'webp'].includes(extension);\n  const isText = ['txt', 'md', 'js', 'jsx', 'ts', 'tsx', 'css', 'json', 'yaml', 'yml', 'html', 'htm', 'xml'].includes(extension);\n  \n  // Determine icon and color based on file type\n  const getFileIcon = () => {\n    if (isHtml) return <FiCode size={18} className=\"text-orange-500 dark:text-orange-400\" />;\n    if (isImage) return <FiEye size={18} className=\"text-blue-500 dark:text-blue-400\" />;\n    return <FiFileText size={18} className=\"text-gray-600 dark:text-gray-400\" />;\n  };\n\n  // Create downloadable content\n  const handleDownload = () => {\n    const blob = new Blob([content], { type: isHtml ? 'text/html' : 'text/plain' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = path.split('/').pop() || 'file';\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  // Format file size\n  const formatBytes = (bytes: number): string => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n  \n  const approximateSize = content ? formatBytes(content.length) : 'Unknown size';\n\n  return (\n    <div className=\"space-y-4\">\n      {/* File info header */}\n      <div className=\"flex items-center justify-between bg-white dark:bg-gray-800 rounded-xl p-4 border border-gray-200/50 dark:border-gray-700/30\">\n        <div className=\"flex items-center\">\n          <div className=\"w-10 h-10 rounded-xl bg-gray-100/80 dark:bg-gray-700/80 flex items-center justify-center mr-3 border border-gray-200/50 dark:border-gray-700/30\">\n            {getFileIcon()}\n          </div>\n          <div>\n            <h3 className=\"font-medium text-gray-800 dark:text-gray-200 mb-1\">\n              {path.split('/').pop()}\n            </h3>\n            <div className=\"flex items-center text-xs text-gray-500 dark:text-gray-400\">\n              <span className=\"mr-3\">{path}</span>\n              <span className=\"px-2 py-0.5 bg-gray-100 dark:bg-gray-700 rounded-full\">\n                {approximateSize}\n              </span>\n            </div>\n          </div>\n        </div>\n        \n        <motion.button\n          whileHover={{ scale: 1.05 }}\n          whileTap={{ scale: 0.95 }}\n          onClick={handleDownload}\n          className=\"p-2 rounded-lg bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors\"\n          title=\"Download file\"\n        >\n          <FiDownload size={18} />\n        </motion.button>\n      </div>\n\n      {/* Content preview section */}\n      <div className=\"bg-white dark:bg-gray-800 rounded-xl border border-gray-200/50 dark:border-gray-700/30 overflow-hidden\">\n        {/* Toggle buttons for HTML files */}\n        {isHtml && (\n          <div className=\"flex border-b border-gray-100/60 dark:border-gray-700/30\">\n            <button\n              className={`flex-1 px-4 py-3 text-sm font-medium ${\n                previewMode === 'code'\n                  ? 'bg-gray-100/80 dark:bg-gray-700/80 text-gray-800 dark:text-gray-200'\n                  : 'text-gray-500 dark:text-gray-400 hover:bg-gray-50 dark:hover:bg-gray-700/30'\n              }`}\n              onClick={() => setPreviewMode('code')}\n            >\n              <div className=\"flex items-center justify-center\">\n                <FiCode className=\"mr-2\" size={16} />\n                Source Code\n              </div>\n            </button>\n            <button\n              className={`flex-1 px-4 py-3 text-sm font-medium ${\n                previewMode === 'preview'\n                  ? 'bg-gray-100/80 dark:bg-gray-700/80 text-gray-800 dark:text-gray-200'\n                  : 'text-gray-500 dark:text-gray-400 hover:bg-gray-50 dark:hover:bg-gray-700/30'\n              }`}\n              onClick={() => setPreviewMode('preview')}\n            >\n              <div className=\"flex items-center justify-center\">\n                <FiEye className=\"mr-2\" size={16} />\n                Preview\n              </div>\n            </button>\n          </div>\n        )}\n\n        {/* Content display */}\n        <div className=\"p-4\">\n          {isHtml && previewMode === 'preview' ? (\n            <div className=\"border border-gray-200/50 dark:border-gray-700/30 rounded-lg overflow-hidden bg-white dark:bg-gray-900/30\">\n              <div className=\"px-3 py-2 bg-gray-100/80 dark:bg-gray-700/80 border-b border-gray-200/50 dark:border-gray-700/30 text-xs font-medium text-gray-700 dark:text-gray-300\">\n                Preview\n              </div>\n              <div className=\"p-4 max-h-[70vh] overflow-auto\">\n                <iframe\n                  srcDoc={content}\n                  className=\"w-full border-0 min-h-[400px]\"\n                  title=\"HTML Preview\"\n                  sandbox=\"allow-scripts allow-same-origin\"\n                />\n              </div>\n            </div>\n          ) : isImage ? (\n            <div className=\"text-center\">\n              <img\n                src={`data:image/${extension};base64,${content}`}\n                alt={path}\n                className=\"max-h-[70vh] max-w-full mx-auto border border-gray-200/50 dark:border-gray-700/30 rounded-lg\"\n              />\n            </div>\n          ) : (\n            <div className=\"max-h-[70vh] overflow-auto\">\n              {isText ? (\n                <div className=\"prose dark:prose-invert prose-sm max-w-none\">\n                  <MarkdownRenderer\n                    content={`\\`\\`\\`${extension === 'md' ? 'markdown' : extension}\\n${content}\\n\\`\\`\\``}\n                  />\n                </div>\n              ) : (\n                <pre className=\"text-sm whitespace-pre-wrap font-mono bg-gray-50 dark:bg-gray-800/50 p-4 rounded-lg border border-gray-100/30 dark:border-gray-700/20\">\n                  {content}\n                </pre>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport {\n  FiCheck,\n  FiX,\n  FiAlertCircle,\n  FiInfo,\n  FiRefreshCw,\n  FiGlobe,\n  FiNavigation,\n  FiMousePointer,\n  FiLink,\n  FiArrowRight,\n  FiCornerUpRight,\n  FiLayers,\n} from 'react-icons/fi';\nimport { ToolResultContentPart } from '../../../types';\nimport { MarkdownRenderer } from '../../Markdown';\n\ninterface GenericResultRendererProps {\n  part: ToolResultContentPart;\n  onAction?: (action: string, data: any) => void;\n}\n\n/**\n * GenericResultRenderer - 智能分析并渲染任意格式的工具结果\n *\n * 特点:\n * - 自动识别常见的状态模式（成功/失败/信息）\n * - 提取并突出显示关键信息\n * - 优雅处理各种数据结构\n * - 美观一致的卡片式布局\n * - 丝滑的动画过渡效果\n * - 针对不同操作类型的特殊可视化处理\n */\nexport const GenericResultRenderer: React.FC<GenericResultRendererProps> = ({ part }) => {\n  const content = part.text || part.data || {};\n  const [showDetails, setShowDetails] = useState(false);\n  const [animateSuccess, setAnimateSuccess] = useState(false);\n\n  // 尝试将字符串内容解析为JSON\n  let parsedContent = content;\n  if (typeof content === 'string') {\n    try {\n      parsedContent = JSON.parse(content);\n    } catch (e) {\n      // 不是有效的JSON，保持字符串格式\n      parsedContent = content;\n    }\n  }\n\n  // 智能检测结果类型\n  const resultInfo = analyzeResult(parsedContent, part.name);\n\n  console.log('resultInfo', resultInfo);\n\n  // 触发成功动画\n  useEffect(() => {\n    if (resultInfo.type === 'success') {\n      setAnimateSuccess(true);\n      const timer = setTimeout(() => setAnimateSuccess(false), 2000);\n      return () => clearTimeout(timer);\n    }\n  }, [resultInfo.type]);\n\n  // 添加对导航类操作的特殊处理\n  const isNavigationOperation =\n    part.name?.includes('navigate') || (typeof parsedContent === 'object' && parsedContent?.url);\n\n  console.log('isNavigationOperation', isNavigationOperation);\n\n  // 检测内容是否为 Markdown\n  const isPossibleMarkdown = (text: string): boolean => {\n    // 检查常见的 Markdown 语法特征\n    const markdownPatterns = [\n      /^#+\\s+.+$/m, // 标题\n      /\\[.+\\]\\(.+\\)/, // 链接\n      /\\*\\*.+\\*\\*/, // 粗体\n      /\\*.+\\*/, // 斜体\n      /```[\\s\\S]*```/, // 代码块\n      /^\\s*-\\s+.+$/m, // 无序列表\n      /^\\s*\\d+\\.\\s+.+$/m, // 有序列表\n      />\\s+.+/, // 引用块\n      /!\\[.+\\]\\(.+\\)/, // 图片\n      /^---$/m, // 分隔线\n      /^\\|.+\\|$/m, // 表格\n    ];\n\n    // 如果满足至少两个 Markdown 特征，或者内容较长并包含一个特征，认为是 Markdown\n    const matchCount = markdownPatterns.filter((pattern) => pattern.test(text)).length;\n    return matchCount >= 2 || (text.length > 500 && matchCount >= 1);\n  };\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 10 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.3, ease: [0.16, 1, 0.3, 1] }}\n      className=\"w-full\"\n    >\n      <div className=\"bg-white dark:bg-gray-800 rounded-xl border border-gray-200/50 dark:border-gray-700/30 shadow-sm overflow-hidden w-full transform transition-all duration-300 hover:shadow-md\">\n        {/* 状态头部 */}\n        <div\n          className={`py-4 px-5 flex items-center justify-between border-b ${getHeaderClasses(resultInfo.type)}`}\n        >\n          <div className=\"flex items-center\">\n            <div className=\"mr-3 relative\">\n              <AnimatePresence mode=\"wait\">\n                <motion.div\n                  key={resultInfo.type}\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  exit={{ opacity: 0, scale: 0.8 }}\n                  transition={{ duration: 0.2 }}\n                >\n                  {getStatusIcon(resultInfo.type, resultInfo.operation)}\n                </motion.div>\n              </AnimatePresence>\n\n              {/* 成功动画效果 */}\n              {animateSuccess && resultInfo.type === 'success' && (\n                <motion.div\n                  initial={{ scale: 0.5, opacity: 0.8 }}\n                  animate={{ scale: 1.5, opacity: 0 }}\n                  transition={{ duration: 1.2, ease: 'easeOut' }}\n                  className=\"absolute inset-0 rounded-full bg-green-500 dark:bg-green-400 z-0\"\n                />\n              )}\n            </div>\n            <div>\n              <motion.span\n                className=\"font-medium\"\n                initial={{ opacity: 0.8 }}\n                animate={{ opacity: 1 }}\n              >\n                {part.name || resultInfo.title}\n              </motion.span>\n              {resultInfo.operation && (\n                <div className=\"text-xs text-gray-500 dark:text-gray-400\">\n                  {getOperationDescription(resultInfo.operation, resultInfo)}\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* 添加URL显示（适用于浏览器工具） */}\n          {resultInfo.url && (\n            <div className=\"text-xs flex items-center text-gray-500 dark:text-gray-400 hover:text-accent-600 dark:hover:text-accent-400 transition-colors group\">\n              <FiLink size={12} className=\"mr-1 group-hover:text-accent-500\" />\n              <a\n                href={resultInfo.url}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"max-w-[200px] truncate hover:underline transition-all\"\n              >\n                {resultInfo.url}\n              </a>\n            </div>\n          )}\n        </div>\n\n        {/* 内容区域 */}\n        <div className=\"p-5 relative\">\n          {/* 主要消息区 */}\n          <AnimatePresence mode=\"wait\">\n            {resultInfo.message ? (\n              <motion.div\n                key=\"message\"\n                initial={{ opacity: 0, y: 5 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.3, delay: 0.1 }}\n                className=\"text-gray-700 dark:text-gray-300 mb-4\"\n              >\n                {typeof resultInfo.message === 'string' &&\n                isPossibleMarkdown(resultInfo.message) ? (\n                  <div className=\"prose dark:prose-invert prose-sm max-w-none\">\n                    <MarkdownRenderer content={`\\`\\`\\`md\\n${resultInfo.message}\\n\\`\\`\\``} />\n                  </div>\n                ) : (\n                  resultInfo.message\n                )}\n              </motion.div>\n            ) : null}\n          </AnimatePresence>\n\n          {/* 针对导航类操作的特殊处理 */}\n          {isNavigationOperation && resultInfo.type === 'success' && (\n            <motion.div\n              initial={{ opacity: 0, y: 10 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.5, delay: 0.2 }}\n              className=\"mb-4\"\n            >\n              <div className=\"flex items-center mt-1\">\n                <div className=\"w-8 h-8 rounded-full bg-gray-100 dark:bg-gray-700 flex items-center justify-center\">\n                  <FiCornerUpRight className=\"text-accent-500 dark:text-accent-400\" size={16} />\n                </div>\n                <div className=\"ml-3\">\n                  <div className=\"text-sm text-gray-500 dark:text-gray-400\">导航至</div>\n                  <div className=\"font-medium text-accent-600 dark:text-accent-400 flex items-center\">\n                    {resultInfo.url}\n                  </div>\n                </div>\n              </div>\n\n              {/* 导航动画 */}\n              <div className=\"my-5 px-3\">\n                <div className=\"relative h-0.5 bg-gray-100 dark:bg-gray-700 rounded-full overflow-hidden\">\n                  <motion.div\n                    initial={{ width: 0, x: 0 }}\n                    animate={{ width: '100%', x: ['0%', '100%'] }}\n                    transition={{\n                      duration: 1.5,\n                      width: { duration: 0 },\n                      x: { duration: 1.5, ease: 'easeInOut' },\n                    }}\n                    className=\"absolute top-0 left-0 h-full bg-accent-500 dark:bg-accent-400 rounded-full\"\n                    style={{ width: '30%' }}\n                  />\n                </div>\n              </div>\n            </motion.div>\n          )}\n\n          {/* 详细信息切换按钮 - 只在有额外信息时显示 */}\n          {resultInfo.details && Object.keys(resultInfo.details).length > 0 && (\n            <motion.div\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              transition={{ duration: 0.3, delay: 0.3 }}\n              className=\"mt-2 mb-3\"\n            >\n              <button\n                onClick={() => setShowDetails(!showDetails)}\n                className=\"text-xs flex items-center text-gray-500 dark:text-gray-400 hover:text-accent-600 dark:hover:text-accent-400 transition-colors\"\n              >\n                <motion.div\n                  animate={{ rotate: showDetails ? 90 : 0 }}\n                  transition={{ duration: 0.2 }}\n                >\n                  <FiArrowRight size={12} className=\"mr-1.5\" />\n                </motion.div>\n                {showDetails ? '隐藏详情' : '查看详情'}\n              </button>\n            </motion.div>\n          )}\n\n          {/* 详细信息区 - 只在有额外信息时显示 */}\n          <AnimatePresence>\n            {showDetails && resultInfo.details && Object.keys(resultInfo.details).length > 0 && (\n              <motion.div\n                initial={{ opacity: 0, height: 0 }}\n                animate={{ opacity: 1, height: 'auto' }}\n                exit={{ opacity: 0, height: 0 }}\n                transition={{ duration: 0.3 }}\n                className=\"overflow-hidden\"\n              >\n                <div className=\"mt-3 pt-3 border-t border-gray-100 dark:border-gray-700/30\">\n                  <div className=\"grid gap-2\">\n                    {Object.entries(resultInfo.details).map(([key, value]) => (\n                      <motion.div\n                        key={key}\n                        initial={{ opacity: 0, y: 5 }}\n                        animate={{ opacity: 1, y: 0 }}\n                        transition={{ duration: 0.2 }}\n                        className=\"flex items-start\"\n                      >\n                        <div className=\"text-xs font-medium text-gray-500 dark:text-gray-400 w-24 flex-shrink-0\">\n                          {formatKey(key)}:\n                        </div>\n                        <div className=\"text-sm text-gray-700 dark:text-gray-300\">\n                          {formatValue(value)}\n                        </div>\n                      </motion.div>\n                    ))}\n                  </div>\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n\n          {/* 空状态处理 - 美化版 */}\n          {!resultInfo.message &&\n            !resultInfo.url &&\n            (!resultInfo.details || Object.keys(resultInfo.details).length === 0) && (\n              <div className=\"flex flex-col items-center justify-center py-4\">\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.9 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  transition={{\n                    duration: 0.5,\n                    delay: 0.2,\n                    type: 'spring',\n                    stiffness: 100,\n                  }}\n                  className=\"flex flex-col items-center\"\n                >\n                  {resultInfo.type === 'success' ? (\n                    <>\n                      <div className=\"w-12 h-12 mb-3 rounded-full bg-green-50 dark:bg-green-900/20 flex items-center justify-center text-green-500 dark:text-green-400\">\n                        <motion.div\n                          animate={{\n                            scale: [1, 1.15, 1],\n                          }}\n                          transition={{\n                            duration: 1,\n                            repeat: Infinity,\n                            repeatType: 'reverse',\n                            repeatDelay: 1,\n                          }}\n                        >\n                          <FiCheck size={24} />\n                        </motion.div>\n                      </div>\n                      <div className=\"text-center\">\n                        <div className=\"font-medium text-gray-800 dark:text-gray-200 mb-1\">\n                          The operation completed successfully\n                        </div>\n                        {resultInfo.operation && (\n                          <div className=\"text-sm text-gray-500 dark:text-gray-400\">\n                            {getOperationDescription(resultInfo.operation, resultInfo)}\n                          </div>\n                        )}\n                      </div>\n                    </>\n                  ) : (\n                    <>\n                      <div className=\"w-12 h-12 mb-3 rounded-full bg-gray-100 dark:bg-gray-800 flex items-center justify-center text-gray-400 dark:text-gray-500\">\n                        <FiInfo size={24} />\n                      </div>\n                      <div className=\"text-center text-gray-500 dark:text-gray-400\">\n                        {resultInfo.type === 'empty' ? '无可用内容' : '操作已完成'}\n                      </div>\n                    </>\n                  )}\n                </motion.div>\n              </div>\n            )}\n        </div>\n      </div>\n    </motion.div>\n  );\n};\n\n/**\n * 分析工具结果并提取关键信息\n */\nfunction analyzeResult(\n  content: any,\n  toolName?: string,\n): {\n  type: 'success' | 'error' | 'info' | 'empty';\n  title: string;\n  message: string | null;\n  details: Record<string, any>;\n  url?: string;\n  operation?: string; // 添加操作类型\n} {\n  // 默认值\n  const result = {\n    type: 'info' as const,\n    title: 'Operation Result',\n    message: null,\n    details: {} as Record<string, any>,\n  };\n\n  // 尝试从工具名称中推断操作类型\n  let operation = '';\n  if (toolName) {\n    if (toolName.includes('navigate')) operation = 'navigate';\n    else if (toolName.includes('click')) operation = 'click';\n    else if (toolName.includes('type')) operation = 'type';\n    else if (toolName.includes('scroll')) operation = 'scroll';\n    else if (toolName.includes('browser')) operation = 'browser';\n  }\n\n  // 处理空内容\n  if (!content || (typeof content === 'object' && Object.keys(content).length === 0)) {\n    return { ...result, type: 'empty', title: 'Empty Result', operation };\n  }\n\n  // 处理字符串内容\n  if (typeof content === 'string') {\n    // 检测是否是导航成功消息\n    if (content.includes('Navigated to ')) {\n      const url = content.replace('Navigated to ', '').trim();\n      return {\n        ...result,\n        type: 'success',\n        title: 'Navigation Successful',\n        message: null,\n        details: { url },\n        url,\n        operation: 'navigate',\n      };\n    }\n    return { ...result, message: content, operation };\n  }\n\n  // 处理对象内容\n  if (typeof content === 'object') {\n    // 特别处理导航相关\n    if (content.url) {\n      operation = operation || 'navigate';\n      result.url = content.url;\n    }\n\n    // 检测状态字段\n    if ('status' in content) {\n      const status = String(content.status).toLowerCase();\n      if (status === 'success' || status === 'ok' || status === 'completed') {\n        result.type = 'success';\n        result.title = 'Success';\n      } else if (status === 'error' || status === 'fail' || status === 'failed') {\n        result.type = 'error';\n        result.title = 'Error';\n      }\n    }\n\n    // 检测消息字段\n    if ('message' in content) {\n      result.message = String(content.message);\n    } else if ('error' in content) {\n      result.message = String(content.error);\n      result.type = 'error';\n      result.title = 'Error';\n    } else if ('msg' in content) {\n      result.message = String(content.msg);\n    } else if ('content' in content && typeof content.content === 'string') {\n      result.message = content.content;\n    }\n\n    // 提取标题\n    if ('title' in content && typeof content.title === 'string' && content.title.trim()) {\n      result.title = content.title;\n    } else if (result.message && result.message.length < 50) {\n      // 如果消息很短，可以用作标题\n      result.title = result.message;\n      result.message = null;\n    }\n\n    // 特别处理URL (用于浏览器工具结果)\n    let url: string | undefined = undefined;\n    if ('url' in content && typeof content.url === 'string') {\n      url = content.url;\n    }\n\n    // 收集其他重要字段作为详情\n    for (const [key, value] of Object.entries(content)) {\n      // 跳过已处理的字段\n      if (['status', 'message', 'error', 'msg', 'title', 'url'].includes(key)) continue;\n\n      // 特殊处理分页信息\n      if (key === 'pagination' && typeof value === 'object') {\n        for (const [pKey, pValue] of Object.entries(value)) {\n          result.details[`pagination.${pKey}`] = pValue;\n        }\n        continue;\n      }\n\n      // 优先展示这些重要字段\n      const importantFields = ['name', 'description', 'type', 'value', 'data'];\n      if (importantFields.includes(key)) {\n        result.details = { [key]: value, ...result.details };\n      } else {\n        // 添加到详情中\n        result.details[key] = value;\n      }\n    }\n\n    return { ...result, url, operation };\n  }\n\n  return { ...result, operation };\n}\n\n/**\n * 获取状态图标\n */\nfunction getStatusIcon(type: string, operation?: string) {\n  // 先根据操作类型选择图标\n  if (operation) {\n    switch (operation) {\n      case 'navigate':\n        return (\n          <div className=\"w-8 h-8 rounded-full flex items-center justify-center bg-accent-50 dark:bg-accent-900/20 text-accent-500 dark:text-accent-400\">\n            <FiNavigation size={16} />\n          </div>\n        );\n      case 'click':\n        return (\n          <div className=\"w-8 h-8 rounded-full flex items-center justify-center bg-purple-50 dark:bg-purple-900/20 text-purple-500 dark:text-purple-400\">\n            <FiMousePointer size={16} />\n          </div>\n        );\n      case 'browser':\n        return (\n          <div className=\"w-8 h-8 rounded-full flex items-center justify-center bg-blue-50 dark:bg-blue-900/20 text-blue-500 dark:text-blue-400\">\n            <FiGlobe size={16} />\n          </div>\n        );\n    }\n  }\n\n  // 回退到基于状态类型的图标\n  switch (type) {\n    case 'success':\n      return (\n        <div className=\"w-8 h-8 rounded-full flex items-center justify-center bg-green-50 dark:bg-green-900/20 text-green-500 dark:text-green-400\">\n          <FiCheck size={16} />\n        </div>\n      );\n    case 'error':\n      return (\n        <div className=\"w-8 h-8 rounded-full flex items-center justify-center bg-red-50 dark:bg-red-900/20 text-red-500 dark:text-red-400\">\n          <FiX size={16} />\n        </div>\n      );\n    case 'empty':\n      return (\n        <div className=\"w-8 h-8 rounded-full flex items-center justify-center bg-gray-100 dark:bg-gray-700 text-gray-400 dark:text-gray-500\">\n          <FiLayers size={16} />\n        </div>\n      );\n    case 'info':\n    default:\n      return (\n        <div className=\"w-8 h-8 rounded-full flex items-center justify-center bg-blue-50 dark:bg-blue-900/20 text-blue-500 dark:text-blue-400\">\n          <FiInfo size={16} />\n        </div>\n      );\n  }\n}\n\n/**\n * 根据操作类型生成描述\n */\nfunction getOperationDescription(operation: string, resultInfo: any): string {\n  switch (operation) {\n    case 'navigate':\n      return resultInfo.url ? `导航至 ${resultInfo.url}` : '页面导航';\n    case 'click':\n      return '点击元素';\n    case 'type':\n      return '输入文本';\n    case 'scroll':\n      return '滚动页面';\n    case 'browser':\n      return '浏览器操作';\n    default:\n      return '操作已完成';\n  }\n}\n\n/**\n * 获取头部样式类\n */\nfunction getHeaderClasses(type: string): string {\n  switch (type) {\n    case 'success':\n      return 'border-green-100/50 dark:border-green-800/30 bg-green-50/50 dark:bg-green-900/20';\n    case 'error':\n      return 'border-red-100/50 dark:border-red-800/30 bg-red-50/50 dark:bg-red-900/20';\n    case 'empty':\n      return 'border-gray-100/50 dark:border-gray-700/30 bg-gray-50/50 dark:bg-gray-800/50';\n    case 'info':\n    default:\n      return 'border-blue-100/50 dark:border-blue-800/30 bg-blue-50/50 dark:bg-blue-900/20';\n  }\n}\n\n/**\n * 格式化键名\n */\nfunction formatKey(key: string): string {\n  return key\n    .replace(/([A-Z])/g, ' $1') // 在大写字母前插入空格\n    .replace(/^./, (str) => str.toUpperCase()) // 首字母大写\n    .replace(/[._]/g, ' '); // 将下划线和点替换为空格\n}\n\n/**\n * 格式化值显示\n */\nfunction formatValue(value: any): React.ReactNode {\n  if (value === null || value === undefined) {\n    return <span className=\"text-gray-400 dark:text-gray-500 italic\">None</span>;\n  }\n\n  if (typeof value === 'boolean') {\n    return value ? 'Yes' : 'No';\n  }\n\n  if (Array.isArray(value)) {\n    if (value.length === 0) {\n      return <span className=\"text-gray-400 dark:text-gray-500 italic\">Empty array</span>;\n    }\n\n    if (\n      value.length <= 3 &&\n      value.every((item) => typeof item === 'string' || typeof item === 'number')\n    ) {\n      return value.join(', ');\n    }\n\n    return (\n      <pre className=\"text-xs bg-gray-50 dark:bg-gray-800/50 p-2 rounded\">\n        {JSON.stringify(value, null, 2)}\n      </pre>\n    );\n  }\n\n  if (typeof value === 'object') {\n    try {\n      return (\n        <pre className=\"text-xs bg-gray-50 dark:bg-gray-800/50 p-2 rounded\">\n          {JSON.stringify(value, null, 2)}\n        </pre>\n      );\n    } catch (e) {\n      return String(value);\n    }\n  }\n\n  // 检测URL并使其可点击\n  if (typeof value === 'string' && (value.startsWith('http://') || value.startsWith('https://'))) {\n    return (\n      <a\n        href={value}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        className=\"text-accent-600 dark:text-accent-400 hover:underline\"\n      >\n        {value}\n      </a>\n    );\n  }\n\n  return String(value);\n}\n","import React, { useEffect, useState, useRef } from 'react';\nimport { motion } from 'framer-motion';\n\nimport { FiDownload, FiBookOpen, FiLoader, FiShare2, FiCopy, FiCheck } from 'react-icons/fi';\nimport { MarkdownRenderer } from '../../Markdown';\n\ninterface ResearchReportRendererProps {\n  content: string;\n  title?: string;\n  isStreaming?: boolean;\n}\n\n/**\n * Research Report Renderer - Displays a detailed research report with proper formatting\n *\n * Features:\n * - Elegant markdown rendering with document styling\n * - Download capability for saving reports\n * - Animated indicators for streaming content\n * - Smooth transitions for content updates\n * - Auto-scrolling during streaming updates\n */\nexport const ResearchReportRenderer: React.FC<ResearchReportRendererProps> = ({\n  content,\n  title = 'Research Report',\n  isStreaming = false,\n}) => {\n  const [scrollToBottom, setScrollToBottom] = useState(true);\n  const [copied, setCopied] = useState(false);\n  const contentRef = useRef<HTMLDivElement>(null);\n\n  // 处理内容格式化，确保始终是字符串\n  const formattedContent = React.useMemo(() => {\n    if (typeof content === 'string') {\n      return content;\n    }\n\n    // 如果不是字符串，尝试转换为 JSON 字符串\n    try {\n      return JSON.stringify(content, null, 2);\n    } catch (e) {\n      return String(content);\n    }\n  }, [content]);\n\n  // Auto-scroll to bottom when streaming content\n  useEffect(() => {\n    if (isStreaming && scrollToBottom && contentRef.current) {\n      contentRef.current.scrollTop = contentRef.current.scrollHeight;\n    }\n  }, [content, isStreaming, scrollToBottom]);\n\n  // Handle content scroll\n  const handleScroll = () => {\n    if (!contentRef.current) return;\n\n    const { scrollTop, scrollHeight, clientHeight } = contentRef.current;\n    const isNearBottom = scrollHeight - scrollTop - clientHeight < 100;\n\n    setScrollToBottom(isNearBottom);\n  };\n\n  // Handle report download\n  const handleDownload = () => {\n    const blob = new Blob([content], { type: 'text/markdown' });\n    const url = URL.createObjectURL(blob);\n\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `${title.replace(/[^\\w\\s-]/g, '')}.md`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n\n    URL.revokeObjectURL(url);\n  };\n\n  // Handle copy content\n  const handleCopy = () => {\n    navigator.clipboard.writeText(formattedContent);\n    setCopied(true);\n    setTimeout(() => setCopied(false), 2000);\n  };\n\n  return (\n    <div className=\"h-full flex flex-col bg-gray-50/80 dark:bg-gray-900/20\">\n      {/* Report header */}\n      <div className=\"flex items-center justify-between p-5 border-b border-gray-100/60 dark:border-gray-700/30 bg-white dark:bg-gray-800/90\">\n        <div className=\"flex items-center\">\n          <div className=\"w-10 h-10 mr-4 rounded-xl bg-gradient-to-br from-accent-50 to-accent-100 dark:from-accent-900/20 dark:to-accent-800/20 flex items-center justify-center border border-accent-100/50 dark:border-accent-800/30 text-accent-600 dark:text-accent-400 shadow-sm\">\n            <FiBookOpen size={18} />\n          </div>\n          <div>\n            <h2 className=\"font-medium text-gray-800 dark:text-gray-200 text-lg leading-tight\">\n              {title}\n            </h2>\n            <div className=\"text-xs text-gray-500 dark:text-gray-400 flex items-center\">\n              {isStreaming ? (\n                <>\n                  <FiLoader className=\"mr-1.5 animate-spin\" size={10} />\n                  Generating report...\n                </>\n              ) : (\n                'Research Report'\n              )}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"flex gap-2\">\n          <motion.button\n            whileHover={{ scale: 1.05 }}\n            whileTap={{ scale: 0.95 }}\n            onClick={handleCopy}\n            className=\"p-2 rounded-lg bg-gray-50/80 dark:bg-gray-800/50 text-gray-600 dark:text-gray-400 hover:bg-gray-100/80 dark:hover:bg-gray-700/50 transition-colors border border-gray-200/50 dark:border-gray-700/30\"\n            title=\"Copy content\"\n          >\n            {copied ? <FiCheck size={20} className=\"text-green-500\" /> : <FiCopy size={20} />}\n          </motion.button>\n          \n          <motion.button\n            whileHover={{ scale: 1.05 }}\n            whileTap={{ scale: 0.95 }}\n            onClick={handleDownload}\n            className=\"p-2 rounded-lg bg-gray-50/80 dark:bg-gray-800/50 text-gray-600 dark:text-gray-400 hover:bg-gray-100/80 dark:hover:bg-gray-700/50 transition-colors border border-gray-200/50 dark:border-gray-700/30\"\n            title=\"Download Report\"\n          >\n            <FiDownload size={20} />\n          </motion.button>\n        </div>\n      </div>\n\n      {/* Report content */}\n      <div\n        ref={contentRef}\n        className=\"flex-1 overflow-auto p-8 workspace-scrollbar\"\n        onScroll={handleScroll}\n      >\n        <div className=\"max-w-4xl mx-auto bg-white dark:bg-gray-800 rounded-xl border border-gray-200/70 dark:border-gray-700/40 shadow-sm overflow-hidden\">\n          <div className=\"p-8\">\n            <div className=\"research-report prose prose-slate lg:prose-lg dark:prose-invert max-w-none\">\n              <MarkdownRenderer content={formattedContent} />\n            </div>\n\n            {/* Loading indicator for streaming content */}\n            {isStreaming && (\n              <motion.div\n                initial={{ opacity: 0 }}\n                animate={{ opacity: 1 }}\n                transition={{ duration: 0.5 }}\n                className=\"flex items-center justify-center py-6 mt-4 text-accent-500 dark:text-accent-400\"\n              >\n                <div className=\"flex items-center gap-3 px-4 py-2 bg-accent-50/70 dark:bg-accent-900/20 rounded-full border border-accent-100/60 dark:border-accent-800/30\">\n                  <FiLoader className=\"animate-spin\" size={16} />\n                  <span className=\"text-sm font-medium\">Generating report...</span>\n                </div>\n              </motion.div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { ToolResultContentPart } from '../../../types';\nimport { MarkdownRenderer } from '../../Markdown';\nimport { BrowserShell } from './BrowserShell';\n\ninterface TextRendererProps {\n  part: ToolResultContentPart & { showAsRawMarkdown?: boolean };\n  onAction?: (action: string, data: any) => void;\n}\n\n/**\n * Renders text content with Markdown support\n *\n * Improvements:\n * - Support for displaying raw markdown content\n * - Uses browser shell for browser-related content\n * - Better syntax highlighting for code blocks\n */\nexport const TextRenderer: React.FC<TextRendererProps> = ({ part, onAction }) => {\n  if (!part.text) {\n    return <div className=\"text-gray-500 italic\">Empty text content</div>;\n  }\n\n  // Determine if content is browser-related\n  const isBrowserContent = part.name?.toLowerCase().includes('browser') || false;\n\n  // Check if this is a browser_get_markdown result that should display raw markdown\n  const isMarkdownResult =\n    part.showAsRawMarkdown ||\n    part.name?.toLowerCase().includes('markdown') ||\n    part.name?.toLowerCase().includes('browser_get_markdown');\n\n  // if (part.name?.toLowerCase().includes('browser_navigate')) {\n  //   return <BrowserShell title={part.name || 'Browser Content'}>{part.text}</BrowserShell>;\n  // }\n\n  // Handle \"other\" type events - wrap in code block if needed\n  const isOtherType = part.name === 'other' || part.type === 'other';\n  if (isOtherType || isMarkdownResult) {\n    // Wrap in markdown code block to preserve formatting\n    const content = `\\`\\`\\`md\\n${part.text}\\n\\`\\`\\``;\n    return (\n      <div className=\"prose dark:prose-invert prose-sm max-w-none\">\n        <MarkdownRenderer content={content} />\n      </div>\n    );\n  }\n\n  // Determine if content contains markdown syntax\n  const hasMarkdown = /[*#\\[\\]_`~]/.test(part.text);\n\n  // Render browser content in a browser shell\n  if (isBrowserContent) {\n    return (\n      <BrowserShell title={part.name || 'Browser Content'}>\n        <div className=\"prose dark:prose-invert prose-sm max-w-none\">\n          <MarkdownRenderer content={part.text} />\n        </div>\n      </BrowserShell>\n    );\n  }\n\n  // Render standard content\n  return (\n    <div className=\"prose dark:prose-invert prose-sm max-w-none\">\n      {hasMarkdown ? (\n        <MarkdownRenderer content={part.text} />\n      ) : (\n        <div className=\"whitespace-pre-wrap\">{part.text}</div>\n      )}\n    </div>\n  );\n};\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACvBA;AACA;AACA;AACA;AAQA;;;;;;;AAOA;AACA;AAKA;AACA;AACA;AAEA;;AAEA;AAAA;AACA;AAAA;;;;;;;;;;;AAGA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;AAMA;AAEA;AACA;AACA;AACA;;;;;;;;AAKA;AAzCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AAUA;;;;;;;;;;AAUA;AACA;;AAOA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;;;;;;AACA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AAEA;AAEA;AACA;AAAA;;;;;;;;;;AAMA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;;;;;AAIA;AAAA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA;AAEA;AACA;;AAEA;AAEA;AAEA;AACA;AAAA;;;;;;;;;;AAMA;AACA;AACA;AAGA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;;;;;;AAIA;AAAA;AACA;AAAA;AAAA;;;;;;;;;;;;AAtBA;;;;;;;;;;;;;;;;AA8BA;AAEA;AACA;AAEA;;AAEA;AACA;AACA;;;;;;AAGA;AACA;;;;;AAEA;AAAA;AAAA;;;;;;;;;;;;AAIA;AAhJA;;AAOA;;;AAPA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1BA;AACA;AACA;AAQA;;;;;;;AAOA;AACA;AAKA;AACA;AACA;AAEA;AACA;AAEA;;AAGA;AAEA;AAEA;AAGA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;;;;;;AAhBA;;;;;;;;;;AA6BA;AACA;AACA;AAAA;AAAA;;;;;AADA;;;;;;;AAMA;AAzDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClBA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AASA;;;;;;;;;AASA;AACA;;AAMA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;;;;AAGA;AAEA;AAAA;AAAA;;;;;;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAGA;AACA;;;;;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;AAGA;;AACA;AACA;AAEA;;;;;;AAIA;AACA;;AACA;AAAA;AAAA;;;;;;AAAA;;;;;;;AAMA;AAMA;AACA;AACA;;;;;;AAKA;AAEA;AACA;AACA;AACA;AACA;;;;;;AAKA;AAEA;AACA;AACA;;;;;;;;;;;;;AAQA;AAMA;AACA;AACA;;;;;;;;;;;;AAKA;AA5OA;;AAQA;AACA;AACA;AACA;;;AAXA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzCA;AAEA;AACA;AACA;AACA;AACA;AAOA;;;;;;;;;AASA;AACA;;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;;;;;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;;AAEA;AACA;;AACA;AAAA;;AACA;AAAA;AAAA;;;;;;AACA;AAAA;AAAA;;;;;;;;;;;;AAEA;AAAA;;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;;;;;AAAA;AAAA;;;;;;;;;;;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;;;;;;;;;;;;;;;;;;;;;;;AAOA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;;;;;;;;;;AAGA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA;AA5FA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvBA;AACA;AACA;AAEA;AAOA;;;;;;;;;AASA;AACA;;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;;;;;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AAAA;;AACA;AAAA;;AACA;AAAA;AAIA;AACA;;;;;AAEA;AAAA;;;;;;;;;;;AAGA;;AACA;AAAA;AACA;;;;;;AAEA;AAAA;;AACA;AAAA;AAAA;;;;;;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAKA;AAAA;;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;;;;;AAAA;AAAA;;;;;;;;;;;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAAA;;;;;;;;;;;;;;;;;;;;;;;AAMA;AAAA;;AACA;AAAA;;AACA;AAAA;AAAA;;;;;;AACA;AAAA;AAAA;;;;;;;;;;;;AAGA;AAAA;AACA;AACA;AACA;;;;;AAGA;AAAA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA;AA1HA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrBA;AAEA;AACA;AACA;AAOA;;;;;;;;AAQA;AACA;AASA;;AARA;AACA;AAEA;AACA;AAAA;AAAA;;;;;;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;;;;;;AACA;AAAA;AAAA;;;;;;AACA;AAAA;AAAA;;;;;;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;;AAEA;AAAA;;AACA;AAAA;;AACA;AAAA;AACA;;;;;;AAEA;;AACA;AAAA;AACA;;;;;;AAEA;AAAA;;AACA;AAAA;AAAA;;;;;;AACA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AAMA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAAA;;;;;;;;;;;;;;;;;AAKA;AAAA;;AAEA;AACA;;AACA;AACA;AAKA;AAEA;AAAA;;AACA;AAAA;AAAA;;;;;;AAAA;;;;;;;;;;;;AAIA;AACA;AAKA;AAEA;AAAA;;AACA;AAAA;AAAA;;;;;;AAAA;;;;;;;;;;;;;;;;;;AAQA;AAAA;AACA;AACA;;AACA;AAAA;AAAA;;;;;;AAGA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AAIA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AAIA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;AAIA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASA;AA1JA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBA;AACA;AACA;AAeA;AAOA;;;;;;;;;;AAUA;AACA;AAgCA;;AA/BA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;;AAEA;AACA;;AAEA;AAAA;;AACA;AAAA;;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AANA;;;;;;;;;;AAWA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;AAIA;;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;;;;;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;AAOA;AACA;;AACA;AAAA;AAAA;;;;;;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;AAOA;AAAA;;AAEA;AAAA;AACA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AAAA;;;;;;;;;;AAGA;AAZA;;;;AAeA;;;;;;AAIA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;;AAEA;AAAA;;AACA;AAAA;AACA;AAAA;AAAA;;;;;;;;;;;AAEA;AAAA;;AACA;AAAA;AAAA;;;;;;AACA;AAAA;AACA;;;;;;;;;;;;;;;;;;AAMA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;AAQA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;;;;;;;;;;;AAEA;;;;;;;;;;;;AAMA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AAEA;AAAA;;AACA;AAAA;;;;;;;AAEA;AAAA;AACA;;;;;;;AAVA;;;;;;;;;;;;;;;;;;;;;;;;;;AAqBA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;;;;;;;;;;;;;;;;AAGA;AAAA;;AACA;AAAA;AAAA;;;;;;AAGA;AACA;AACA;;;;;;;;;;;;;AAMA;;AACA;AAAA;AACA;AAAA;;;;;;;;;;;AAEA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWA;AAnTA;AAAA;AAqTA;;AAEA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;AAGA;AACA;AACA;AACA;AAAA;;;;;;;;;;;AAGA;AACA;AACA;AACA;AAAA;;;;;;;;;;;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;AAGA;AACA;AACA;AACA;AAAA;;;;;;;;;;;AAGA;AACA;AACA;AACA;AAAA;;;;;;;;;;;AAGA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;AAGA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AAEA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AAAA;AAAA;;;;;;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;;;;;;AACA;AAEA;AAIA;AACA;AAEA;AACA;AACA;;;;;;AAGA;AAEA;AACA;AACA;AACA;AACA;;;;;;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;;;;AAGA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/nBA;AACA;AAEA;AACA;AAQA;;;;;;;;;AASA;AACA;;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AAAA;;AACA;AAAA;;AACA;AAAA;AACA;AAAA;;;;;;;;;;;AAEA;;AACA;AAAA;AACA;;;;;;AAEA;AAAA;AACA;;AAEA;AAAA;AAAA;;;;;;AAAA;;AAIA;;;;;;;;;;;;;;;;;;AAMA;AAAA;;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;;;;;AAAA;AAAA;;;;;;;;;;;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAAA;;;;;;;;;;;;;;;;;;;;;;;AAMA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;;AACA;AAAA;AACA;AAAA;;;;;;;;;;;AAIA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;;AACA;AAAA;AAAA;;;;;;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASA;AA7IA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtBA;AAEA;AACA;AAOA;;;;;;;AAOA;AACA;AAMA;AALA;AACA;AAAA;AAAA;;;;;;AACA;AAEA;AACA;AAEA;AACA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;AAGA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;;;;;;;;;;;;;;;;AAIA;AAEA;AACA;AACA;AACA;AACA;;;;;AAEA;AAAA;AAAA;;;;;;;;;;;AAIA;AAtDA"}