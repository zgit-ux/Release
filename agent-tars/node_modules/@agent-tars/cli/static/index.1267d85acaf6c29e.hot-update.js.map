{"version":3,"file":"index.1267d85acaf6c29e.hot-update.js","sources":["/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/entry.css","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/Message/Message.css","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/ChatPanel.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/Message/components/MessageGroup.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/Message/index.tsx"],"sourcesContent":["// extracted by css-extract-rspack-plugin\nexport {};\n    if(module.hot) {\n      (function() {\n        var localsJsonString = undefined;\n        // 1749587806544\n        var cssReload = require(\"../../node_modules/.pnpm/@rspack+core@1.3.9_@swc+helpers@0.5.17/node_modules/@rspack/core/dist/cssExtractHmr.js\").cssReload(module.id, {});\n        // only invalidate when locals change\n        if (\n          module.hot.data &&\n          module.hot.data.value &&\n          module.hot.data.value !== localsJsonString\n        ) {\n          module.hot.invalidate();\n        } else {\n          module.hot.accept();\n        }\n        module.hot.dispose(function(data) {\n          data.value = localsJsonString;\n          cssReload();\n        });\n      })();\n    }\n  ","// extracted by css-extract-rspack-plugin\nexport {};\n    if(module.hot) {\n      (function() {\n        var localsJsonString = undefined;\n        // 1749587806399\n        var cssReload = require(\"../../../../../../node_modules/.pnpm/@rspack+core@1.3.9_@swc+helpers@0.5.17/node_modules/@rspack/core/dist/cssExtractHmr.js\").cssReload(module.id, {});\n        // only invalidate when locals change\n        if (\n          module.hot.data &&\n          module.hot.data.value &&\n          module.hot.data.value !== localsJsonString\n        ) {\n          module.hot.invalidate();\n        } else {\n          module.hot.accept();\n        }\n        module.hot.dispose(function(data) {\n          data.value = localsJsonString;\n          cssReload();\n        });\n      })();\n    }\n  ","import React, { useRef, useEffect, useState } from 'react';\nimport { useSession } from '../../hooks/useSession';\nimport { MessageGroup } from './Message/components/MessageGroup';\nimport { MessageInput } from './MessageInput';\nimport { FiInfo, FiMessageSquare, FiRefreshCw, FiWifiOff, FiX } from 'react-icons/fi';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { useAtom, useAtomValue } from 'jotai';\nimport { offlineModeAtom } from '../../state/atoms/ui';\nimport { groupedMessagesAtom, messagesAtom } from '../../state/atoms/message';\n\nimport { useReplay } from '../../hooks/useReplay';\nimport { replayStateAtom } from '../../state/atoms/replay';\nimport { MessageGroup as MessageGroupType } from '../../types';\nimport { usePro } from '../../hooks/usePro';\nimport { ShareButton } from '../Share';\nimport { useReplayMode } from '../../context/ReplayModeContext';\n\nimport './ChatPanel.css';\nimport { apiService } from '@/v2/services/apiService';\nimport { ResearchReportEntry } from './ResearchReportEntry';\n\nimport { useLocation } from 'react-router-dom';\n\n/**\n * ChatPanel Component - Main chat interface\n *\n * Design principles:\n * - Clean, distraction-free message display area with ample whitespace\n * - Elegant loading indicators and status messages with subtle animations\n * - Visually distinct message bubbles with refined spacing\n * - Clear visual hierarchy through typography and subtle borders\n */\nexport const ChatPanel: React.FC = () => {\n  const { activeSessionId, isProcessing, connectionStatus, checkServerStatus } = useSession();\n\n  const groupedMessages = useAtomValue(groupedMessagesAtom);\n  const allMessages = useAtomValue(messagesAtom);\n  const [offlineMode, setOfflineMode] = useAtom(offlineModeAtom);\n\n  const [replayState] = useAtom(replayStateAtom);\n  const isReplayMode = useReplayMode();\n  const { cancelAutoPlay } = useReplay();\n\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const messagesContainerRef = useRef<HTMLDivElement>(null);\n\n  const [showScrollButton, setShowScrollButton] = useState(false);\n\n  const location = useLocation();\n\n  const isProMode = usePro();\n\n  // 使用当前会话的消息 - 这样与正常渲染保持一致\n  // 回放模式下会通过 processEvent 来更新这些消息\n  const activeMessages = activeSessionId ? groupedMessages[activeSessionId] || [] : [];\n\n  // 检查滚动位置以确定是否显示滚动按钮\n  useEffect(() => {\n    const checkScroll = () => {\n      const container = messagesContainerRef.current;\n      if (!container) return;\n\n      const { scrollTop, scrollHeight, clientHeight } = container;\n      const atBottom = Math.abs(scrollHeight - scrollTop - clientHeight) < 10;\n      setShowScrollButton(!atBottom);\n    };\n\n    const container = messagesContainerRef.current;\n    if (container) {\n      container.addEventListener('scroll', checkScroll);\n      return () => container.removeEventListener('scroll', checkScroll);\n    }\n  }, []);\n\n  // Auto-scroll when new messages arrive\n  useEffect(() => {\n    if (messagesEndRef.current && messagesContainerRef.current) {\n      const container = messagesContainerRef.current;\n\n      // Check if user is already at bottom\n      const { scrollTop, scrollHeight, clientHeight } = container;\n      const isAtBottom = Math.abs(scrollHeight - scrollTop - clientHeight) < 30;\n\n      // Auto-scroll if at bottom or if new user message\n      if (\n        isAtBottom ||\n        (activeMessages.length > 0 &&\n          activeMessages[activeMessages.length - 1].messages[0]?.role === 'user')\n      ) {\n        setTimeout(() => {\n          container.scrollTo({\n            top: container.scrollHeight,\n            behavior: 'smooth',\n          });\n        }, 100);\n      }\n    }\n  }, [activeMessages]);\n\n  const scrollToBottom = () => {\n    if (messagesEndRef.current && messagesContainerRef.current) {\n      messagesContainerRef.current.scrollTo({\n        top: messagesContainerRef.current.scrollHeight,\n        behavior: 'smooth',\n      });\n    }\n  };\n\n  // Animation variants\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        duration: 0.4,\n        staggerChildren: 0.1,\n      },\n    },\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, y: 20 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: { duration: 0.4 },\n    },\n  };\n\n  // Add loading indicator component with improved visibility\n  const renderLoadingIndicator = () => {\n    if (!isProcessing) return null;\n\n    // Determine if there are already messages to show a different style\n    const hasMessages = activeSessionId && activeMessages.length > 0;\n\n    if (!hasMessages) return null;\n\n    return (\n      <motion.div\n        initial={{ opacity: 0, y: 10 }}\n        animate={{ opacity: 1, y: 0 }}\n        className=\"flex items-center gap-2 p-3 bg-white dark:bg-gray-800 rounded-3xl mb-4 border border-gray-100/40 dark:border-gray-700/20\"\n      >\n        <div className=\"w-6 h-6 rounded-full bg-gray-100 dark:bg-gray-800 border border-gray-200/40 dark:border-gray-700/20 flex items-center justify-center\">\n          <div className=\"w-3 h-3 rounded-full bg-accent-500 animate-pulse\" />\n        </div>\n        <span className=\"text-sm text-gray-600 dark:text-gray-300\">Agent TARS is thinking...</span>\n      </motion.div>\n    );\n  };\n\n  const renderOfflineBanner = () => {\n    if (connectionStatus.connected || !activeSessionId || isReplayMode) return null;\n\n    return (\n      <motion.div\n        initial={{ opacity: 0, y: -10 }}\n        animate={{ opacity: 1, y: 0 }}\n        className=\"mb-4 px-4 py-3 bg-red-50/30 dark:bg-red-900/15 text-red-700 dark:text-red-300 text-sm rounded-xl\"\n      >\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <div className=\"font-medium flex items-center\">\n              <FiWifiOff className=\"mr-2 text-red-500 dark:text-red-400\" />\n              Viewing in offline mode\n            </div>\n            <div className=\"text-sm mt-1\">\n              You can view previous messages but cannot send new ones until reconnected.\n            </div>\n          </div>\n          <motion.button\n            whileHover={{ scale: 1.05 }}\n            whileTap={{ scale: 0.95 }}\n            onClick={() => checkServerStatus()}\n            className=\"ml-3 px-3 py-1.5 bg-red-100/70 dark:bg-red-800/30 hover:bg-red-200/70 dark:hover:bg-red-700/40 rounded-2xl text-sm font-medium transition-colors flex items-center border border-red-200/30 dark:border-red-700/30\"\n          >\n            <FiRefreshCw\n              className={`mr-1.5 ${connectionStatus.reconnecting ? 'animate-spin' : ''}`}\n              size={14}\n            />\n            {connectionStatus.reconnecting ? 'Reconnecting...' : 'Reconnect'}\n          </motion.button>\n        </div>\n      </motion.div>\n    );\n  };\n\n  // 新增：查找会话中的研究报告\n  const findResearchReport = () => {\n    if (!activeSessionId || !allMessages[activeSessionId]) return null;\n\n    const sessionMessages = allMessages[activeSessionId];\n    // 查找类型为 final_answer 且 isDeepResearch 为 true 的最后一条消息\n    const reportMessage = [...sessionMessages]\n      .reverse()\n      .find(\n        (msg) =>\n          (msg.role === 'final_answer' || msg.role === 'assistant') &&\n          msg.isDeepResearch === true &&\n          msg.title,\n      );\n\n    return reportMessage;\n  };\n\n  const researchReport = findResearchReport();\n\n  return (\n    <div className=\"flex flex-col h-full\">\n      {!activeSessionId ? (\n        <motion.div\n          initial=\"hidden\"\n          animate=\"visible\"\n          variants={containerVariants}\n          className=\"flex items-center justify-center flex-1\"\n        >\n          <div className=\"text-center p-6 max-w-md\">\n            <motion.div\n              variants={itemVariants}\n              className=\"w-16 h-16 bg-white dark:bg-gray-800 rounded-2xl flex items-center justify-center mx-auto mb-6 text-gray-500 dark:text-gray-400 border border-gray-100/50 dark:border-gray-700/20\"\n            >\n              <FiMessageSquare size={24} />\n            </motion.div>\n            <motion.h2\n              variants={itemVariants}\n              className=\"text-xl font-display font-bold mb-3 text-gray-800 dark:text-gray-200\"\n            >\n              Welcome to Agent TARS\n            </motion.h2>\n            <motion.p\n              variants={itemVariants}\n              className=\"text-gray-600 dark:text-gray-400 mb-5 text-sm leading-relaxed\"\n            >\n              Create a new chat session to get started with the AI assistant.\n            </motion.p>\n            <motion.div\n              variants={itemVariants}\n              whileHover={{ y: -2 }}\n              className=\"flex items-center p-4 bg-white dark:bg-gray-800 rounded-2xl mb-3 text-gray-600 dark:text-gray-400 text-sm border border-gray-100/40 dark:border-gray-700/20\"\n            >\n              <FiInfo className=\"mr-3 text-gray-400 flex-shrink-0\" />\n              <span>\n                TARS can help with tasks involving web search, browsing, and file operations.\n              </span>\n            </motion.div>\n          </div>\n        </motion.div>\n      ) : (\n        <>\n          <div\n            ref={messagesContainerRef}\n            className=\"flex-1 overflow-y-auto px-5 py-5 overflow-x-hidden min-h-0 chat-scrollbar relative\"\n          >\n            {renderOfflineBanner()}\n\n            <AnimatePresence>\n              {!connectionStatus.connected && !activeSessionId && (\n                <motion.div\n                  initial={{ opacity: 0, y: -10 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  exit={{ opacity: 0, y: -10 }}\n                  className=\"mb-4 px-4 py-3 bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 text-sm rounded-3xl border border-gray-100/40 dark:border-gray-700/20\"\n                >\n                  <div className=\"font-medium\">Server disconnected</div>\n                  <div className=\"text-sm mt-1\">\n                    {connectionStatus.reconnecting\n                      ? 'Attempting to reconnect...'\n                      : 'Please check your connection and try again.'}\n                  </div>\n                </motion.div>\n              )}\n            </AnimatePresence>\n\n            {/* 空状态 */}\n            {activeMessages.length === 0 ? (\n              <motion.div\n                initial={{ opacity: 0 }}\n                animate={{ opacity: 1 }}\n                transition={{ duration: 0.3 }}\n                className=\"flex items-center justify-center h-full\"\n              >\n                <div className=\"text-center p-6 max-w-md\">\n                  <h3 className=\"text-lg font-display font-medium mb-2\">\n                    {replayState.isActive ? 'Replay starting...' : 'Start a conversation'}\n                  </h3>\n                  {replayState.isActive && replayState.autoPlayCountdown !== null ? (\n                    <div className=\"mt-2\">\n                      <p className=\"text-gray-600 dark:text-gray-400 text-sm mb-2\">\n                        Auto-play in {replayState.autoPlayCountdown} seconds...\n                      </p>\n                      <motion.button\n                        whileHover={{ scale: 1.05 }}\n                        whileTap={{ scale: 0.95 }}\n                        onClick={cancelAutoPlay}\n                        className=\"px-3 py-1.5 text-xs bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-lg border border-gray-200/50 dark:border-gray-700/30 flex items-center mx-auto\"\n                      >\n                        <FiX size={12} className=\"mr-1.5\" />\n                        Cancel auto-play\n                      </motion.button>\n                    </div>\n                  ) : (\n                    <p className=\"text-gray-600 dark:text-gray-400 text-sm\">\n                      {replayState.isActive\n                        ? 'Please wait while the replay loads or press play to begin'\n                        : 'Ask Agent TARS a question or provide a command to begin.'}\n                    </p>\n                  )}\n                </div>\n              </motion.div>\n            ) : (\n              <div className=\"space-y-6 pb-2\">\n                {activeMessages.map((group, index) => (\n                  <MessageGroup\n                    key={`group-${index}-${group.messages[0].id}`}\n                    messages={group.messages}\n                    isThinking={\n                      isProcessing && !replayState.isActive && index === activeMessages.length - 1\n                    }\n                  />\n                ))}\n              </div>\n            )}\n\n            {/* Add loading indicator */}\n            {renderLoadingIndicator()}\n\n            <div ref={messagesEndRef} />\n          </div>\n\n          {/* 消息输入区域 */}\n          {!isReplayMode && (\n            <div className=\"p-4\">\n              {/* 新增：研究报告入口 */}\n              {researchReport && !isProcessing && (\n                <div className=\"mb-4\">\n                  <ResearchReportEntry\n                    title={researchReport.title || 'Research Report'}\n                    timestamp={researchReport.timestamp}\n                    content={\n                      typeof researchReport.content === 'string' ? researchReport.content : ''\n                    }\n                  />\n                </div>\n              )}\n\n              {/* 按钮区域 - 移除分享按钮 */}\n              <div className=\"flex justify-center gap-3 mb-3\">{/* 分享按钮已移至Navbar */}</div>\n\n              <MessageInput\n                isDisabled={\n                  !activeSessionId || isProcessing || !connectionStatus.connected || isReplayMode\n                }\n                onReconnect={checkServerStatus}\n                connectionStatus={connectionStatus}\n              />\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport { motion } from 'framer-motion';\nimport { Message as MessageType } from '../../../../types';\nimport { Message } from '../index';\nimport { FiClock } from 'react-icons/fi';\nimport { formatTimestamp } from '../../../../utils/formatters';\nimport { isMultimodalContent } from '../../../../utils/typeGuards';\n\ninterface MessageGroupProps {\n  messages: MessageType[];\n  isThinking: boolean;\n}\n\n/**\n * MessageGroup Component - Groups related messages in a thinking sequence\n *\n * Design principles:\n * - Minimalist design with no avatars or indentation\n * - Clean, full-width message layout\n * - All intermediate thinking steps are always visible\n * - Visual hierarchy emphasizing final answers\n * - Consistent monochromatic styling\n */\nexport const MessageGroup: React.FC<MessageGroupProps> = ({ messages, isThinking }) => {\n  // 过滤掉环境消息\n  const filteredMessages = messages.filter((msg) => msg.role !== 'environment');\n\n  // 如果过滤后没有消息，则不渲染任何内容\n  if (filteredMessages.length === 0) {\n    return null;\n  }\n\n  // 如果只有一条消息，检查是否需要拆分\n  if (filteredMessages.length === 1) {\n    const message = filteredMessages[0];\n\n    // 检查是否是包含图片和文本的多模态用户消息\n    if (message.role === 'user' && isMultimodalContent(message.content)) {\n      const imageContents = message.content.filter((part) => part.type === 'image_url');\n      const textContents = message.content.filter((part) => part.type === 'text');\n\n      // 只有同时包含图片和文本时才拆分显示\n      if (imageContents.length > 0 && textContents.length > 0) {\n        return (\n          <div className=\"space-y-3\">\n            {/* 先显示图片消息 */}\n            <Message\n              key={`${message.id}-images`}\n              message={{\n                ...message,\n                content: imageContents,\n                id: `${message.id}-images`,\n              }}\n            />\n\n            {/* 再显示文本消息 */}\n            <Message\n              key={`${message.id}-text`}\n              message={{\n                ...message,\n                content: textContents,\n                id: `${message.id}-text`,\n              }}\n            />\n          </div>\n        );\n      }\n    }\n\n    return <Message message={filteredMessages[0]} />;\n  }\n\n  // 获取第一条消息 - 通常是用户消息\n  const firstMessage = filteredMessages[0];\n\n  // If not a user message, use simplified rendering\n  if (firstMessage.role !== 'user') {\n    return (\n      <div className=\"space-y-3\">\n        {filteredMessages.map((message, index) => (\n          <Message\n            key={message.id}\n            message={message}\n            isInGroup={index > 0 && index < filteredMessages.length - 1}\n            isIntermediate={index > 0 && index < filteredMessages.length - 1}\n            shouldDisplayTimestamp={false}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  // For user-initiated groups, use enhanced rendering with thinking sequence\n\n  const responseMessage = filteredMessages.length > 1 ? filteredMessages[1] : null;\n  const intermediateMessages = filteredMessages.slice(2, -1);\n  const lastMessage = filteredMessages[filteredMessages.length - 1];\n\n  const hasFinalAnswer = lastMessage.role === 'assistant' && lastMessage.finishReason === 'stop';\n  const finalMessage = hasFinalAnswer ? lastMessage : null;\n\n  const hasThinkingSteps = intermediateMessages.length > 0;\n\n  // 检查用户消息是否需要拆分\n  if (isMultimodalContent(firstMessage.content)) {\n    const imageContents = firstMessage.content.filter((part) => part.type === 'image_url');\n    const textContents = firstMessage.content.filter((part) => part.type === 'text');\n\n    // 只有同时包含图片和文本时才拆分显示\n    if (imageContents.length > 0 && textContents.length > 0) {\n      return (\n        <div className=\"message-group-container space-y-3\">\n          {/* 先显示图片消息 */}\n          <Message\n            message={{\n              ...firstMessage,\n              content: imageContents,\n              id: `${firstMessage.id}-images`,\n            }}\n          />\n\n          {/* 再显示文本消息 */}\n          <Message\n            message={{\n              ...firstMessage,\n              content: textContents,\n              id: `${firstMessage.id}-text`,\n            }}\n          />\n\n          {/* Assistant response section with all assistant-related messages */}\n          {responseMessage && (\n            <div className=\"assistant-response-container\">\n              {/* Initial response message - marked as in-group */}\n              <Message message={responseMessage} isInGroup={true} />\n\n              {/* Thinking process section - always shown */}\n              {hasThinkingSteps && (\n                <div className=\"thinking-steps-container\">\n                  {intermediateMessages.map((msg) => (\n                    <Message key={msg.id} message={msg} isIntermediate={true} isInGroup={true} />\n                  ))}\n\n                  {!isThinking && (\n                    <div className=\"mt-1 mb-2\">\n                      <div className=\"flex items-center text-xs text-gray-500 dark:text-gray-400 py-1\">\n                        <FiClock size={10} className=\"mr-1\" />\n                        {responseMessage && formatTimestamp(responseMessage.timestamp)}\n                      </div>\n                    </div>\n                  )}\n                </div>\n              )}\n\n              {/* Final answer - if exists and not currently thinking */}\n              {finalMessage && finalMessage !== responseMessage && !isThinking && (\n                <Message message={finalMessage} isInGroup={false} />\n              )}\n\n              {/* Thinking indicator */}\n              {isThinking && (\n                <div className=\"mt-2 flex items-center text-xs text-gray-500 dark:text-gray-400\">\n                  <div className=\"flex items-center justify-center bg-gray-50/70 dark:bg-gray-700/40 rounded-full w-5 h-5 mr-2 text-gray-500 dark:text-gray-400\">\n                    <div className=\"w-1.5 h-1.5 bg-gray-500 dark:bg-gray-400 rounded-full animate-pulse\"></div>\n                  </div>\n                  Agent TARS is thinking...\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      );\n    }\n  }\n\n  return (\n    <div className=\"message-group-container space-y-3\">\n      {/* User message is always displayed */}\n      <Message message={firstMessage} />\n\n      {/* Assistant response section with all assistant-related messages */}\n      {responseMessage && (\n        <div className=\"assistant-response-container\">\n          {/* Initial response message - marked as in-group */}\n          <Message message={responseMessage} isInGroup={true} />\n\n          {/* Thinking process section - always shown */}\n          {hasThinkingSteps && (\n            <div className=\"thinking-steps-container\">\n              {intermediateMessages.map((msg) => (\n                <Message key={msg.id} message={msg} isIntermediate={true} isInGroup={true} />\n              ))}\n\n              {!isThinking && (\n                <div className=\"mt-1 mb-2\">\n                  <div className=\"flex items-center text-xs text-gray-500 dark:text-gray-400 py-1\">\n                    <FiClock size={10} className=\"mr-1\" />\n                    {responseMessage && formatTimestamp(responseMessage.timestamp)}\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n\n          {/* Final answer - if exists and not currently thinking */}\n          {finalMessage && finalMessage !== responseMessage && !isThinking && (\n            <Message message={finalMessage} isInGroup={false} />\n          )}\n\n          {/* Thinking indicator */}\n          {isThinking && (\n            <div className=\"mt-2 flex items-center text-xs text-gray-500 dark:text-gray-400\">\n              <div className=\"flex items-center justify-center bg-gray-50/70 dark:bg-gray-700/40 rounded-full w-5 h-5 mr-2 text-gray-500 dark:text-gray-400\">\n                <div className=\"w-1.5 h-1.5 bg-gray-500 dark:bg-gray-400 rounded-full animate-pulse\"></div>\n              </div>\n              Agent TARS is thinking...\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { isMultimodalContent } from '../../../utils/typeGuards';\nimport { Message as MessageType } from '../../../types';\nimport { useSession } from '../../../hooks/useSession';\nimport { useTool } from '../../../hooks/useTool';\nimport { MarkdownRenderer } from '../../Markdown';\nimport './Message.css';\n\n// Import sub-components\nimport { SystemMessage } from './components/SystemMessage';\nimport { EnvironmentMessage } from './components/EnvironmentMessage';\nimport { MultimodalContent } from './components/MultimodalContent';\nimport { AssistantExpandableContent } from './components/AssistantExpandableContent';\nimport { ToolCalls } from './components/ToolCalls';\nimport { ThinkingToggle } from './components/ThinkingToggle';\nimport { MessageTimestamp } from './components/MessageTimestamp';\nimport { useAtomValue } from 'jotai';\nimport { replayStateAtom } from '../../../state/atoms/replay';\nimport { ReportFileEntry } from './components/ReportFileEntry';\n\ninterface MessageProps {\n  message: MessageType;\n  shouldDisplayTimestamp?: boolean;\n  isIntermediate?: boolean;\n  isInGroup?: boolean;\n}\n\n/**\n * Message Component - Displays a single message in the chat\n *\n * Design principles:\n * - Minimalist black & white design with no avatars\n * - Clean, full-width message bubbles with subtle differentiation\n * - Focus on content with minimal visual distractions\n * - Elegant spacing and typography\n * - Progressive disclosure for detailed content\n */\nexport const Message: React.FC<MessageProps> = ({\n  message,\n  isIntermediate = false,\n  isInGroup = false,\n  shouldDisplayTimestamp = true,\n}) => {\n  console.log('message', message);\n\n  const [showThinking, setShowThinking] = useState(false);\n  const [showSteps, setShowSteps] = useState(false);\n  const { setActivePanelContent } = useSession();\n  const { getToolIcon } = useTool();\n  const replayState = useAtomValue(replayStateAtom);\n\n  const isMultimodal = isMultimodalContent(message.content);\n  const isEnvironment = message.role === 'environment';\n  const isUserMessage = message.role === 'user';\n  console.log('message.role', message);\n\n  const isFinalAnswer = message.role === 'final_answer' || message.isDeepResearch;\n\n  // Handle tool call click - show in panel\n  const handleToolCallClick = (toolCall: any) => {\n    if (message.toolResults && message.toolResults.length > 0) {\n      const result = message.toolResults.find((r) => r.toolCallId === toolCall.id);\n      if (result) {\n        setActivePanelContent({\n          type: result.type,\n          source: result.content,\n          title: result.name,\n          timestamp: result.timestamp,\n          toolCallId: result.toolCallId,\n          error: result.error,\n          arguments: result.arguments,\n        });\n      }\n    }\n  };\n\n  // Render content based on type\n  const renderContent = () => {\n    if (isMultimodal) {\n      return (\n        <MultimodalContent\n          content={message.content as any[]}\n          timestamp={message.timestamp}\n          setActivePanelContent={setActivePanelContent}\n        />\n      );\n    }\n\n    // For assistant messages with tool calls, first show summary\n    if (message.role === 'assistant' && message.toolCalls && message.toolCalls.length > 0) {\n      return (\n        <AssistantExpandableContent\n          content={message.content as string}\n          showSteps={showSteps}\n          setShowSteps={setShowSteps}\n        />\n      );\n    }\n\n    return <MarkdownRenderer content={message.content as string} forceDarkTheme={isUserMessage} />;\n  };\n\n  // Message animation variants\n  const messageVariants = {\n    initial: { opacity: 0, y: 10 },\n    animate: { opacity: 1, y: 0 },\n    transition: { duration: 0.3 },\n  };\n\n  // Determine message bubble style based on role and state\n  const getMessageBubbleClasses = () => {\n    if (message.role === 'user') {\n      if (isImageOnlyMessage) {\n        return 'message-user message-user-image';\n      }\n      return 'message-user';\n    } else if (message.role === 'system') {\n      return 'message-system';\n    } else if (message.role === 'environment') {\n      return 'environment-message-minimal';\n    } else {\n      return 'message-assistant';\n    }\n  };\n\n  // 检查消息是否只包含图片（用于样式优化）\n  const isImageOnlyMessage = React.useMemo(() => {\n    if (!isMultimodalContent(message.content)) return false;\n\n    const imageContents = message.content.filter((part) => part.type === 'image_url');\n    const textContents = message.content.filter((part) => part.type === 'text');\n\n    return imageContents.length > 0 && textContents.length === 0;\n  }, [message.content]);\n\n  // 检查消息是否只包含文本（用于样式优化）\n  const isTextOnlyMessage = React.useMemo(() => {\n    if (!isMultimodalContent(message.content)) return true;\n\n    const imageContents = message.content.filter((part) => part.type === 'image_url');\n    const textContents = message.content.filter((part) => part.type === 'text');\n\n    return textContents.length > 0 && imageContents.length === 0;\n  }, [message.content]);\n\n  return (\n    <motion.div\n      initial=\"initial\"\n      animate=\"animate\"\n      variants={messageVariants}\n      className={`message-container ${message.role === 'user' ? 'message-container-user' : 'message-container-assistant'} ${isIntermediate ? 'message-container-intermediate' : ''}`}\n    >\n      <div\n        className={`message-bubble ${getMessageBubbleClasses()} ${isIntermediate ? 'message-bubble-intermediate' : ''}`}\n      >\n        {/* Role-based content */}\n        {message.role === 'system' ? (\n          <SystemMessage content={message.content as string} />\n        ) : message.role === 'environment' ? (\n          <EnvironmentMessage\n            content={message.content}\n            description={message.description}\n            timestamp={message.timestamp}\n            setActivePanelContent={setActivePanelContent}\n            isIntermediate={isIntermediate}\n          />\n        ) : (\n          <>\n            <div className=\"prose dark:prose-invert prose-sm max-w-none text-sm\">\n              {renderContent()}\n            </div>\n\n            {/* 总是显示最终答案/研究报告的文件入口，除非是中间消息或组内消息 */}\n            {isFinalAnswer &&\n              message.title &&\n              typeof message.content === 'string' &&\n              !isIntermediate &&\n              !isInGroup && (\n                <ReportFileEntry\n                  title={message.title || 'Research Report'}\n                  timestamp={message.timestamp}\n                  content={message.content}\n                />\n              )}\n\n            {/* Tool calls section - now with loading states and status icons */}\n            {message.toolCalls && message.toolCalls.length > 0 && (\n              <ToolCalls\n                toolCalls={message.toolCalls}\n                onToolCallClick={handleToolCallClick}\n                getToolIcon={getToolIcon}\n                isIntermediate={isIntermediate}\n                toolResults={message.toolResults || []} // Pass tool results for status checking\n              />\n            )}\n\n            {/* Thinking section */}\n            {message.thinking && (\n              <ThinkingToggle\n                thinking={message.thinking}\n                showThinking={showThinking}\n                setShowThinking={setShowThinking}\n              />\n            )}\n          </>\n        )}\n      </div>\n\n      {/* Timestamp and copy button - only for main messages */}\n      {message.role !== 'system' &&\n        !isIntermediate &&\n        !isInGroup &&\n        shouldDisplayTimestamp &&\n        !replayState.isActive && (\n          <MessageTimestamp\n            timestamp={message.timestamp}\n            content={message.content}\n            role={message.role}\n          />\n        )}\n    </motion.div>\n  );\n};\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;;;;;;;;AAQA;;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAWA;AAVA;AAEA;AACA;AACA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;;AAEA;AAAA;AACA;AAAA;;;;;;;;;;;AAEA;AAAA;AAAA;;;;;;;;;;;;AAGA;AAEA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;;AACA;;AACA;AAAA;;AACA;AAAA;;;;;;AAAA;;;;;;;AAGA;AAAA;AAAA;;;;;;;;;;;;AAIA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;;AAEA;AACA;AACA;;;;;;AAEA;;;;;;;;;;;;;;;;;;AAKA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AASA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;;AACA;AACA;AACA;AAEA;AAAA;;;;;;;;;;;AAEA;AACA;AACA;AACA;;;;;;AAGA;AACA;AACA;AACA;;;;;;AAGA;AACA;AACA;AAAA;AAAA;AACA;;AAEA;AAAA;;;;;;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;AAOA;;AACA;AACA;AACA;;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;;AAEA;AAAA;AAAA;;;;;;AACA;AAAA;AACA;;;;;;;;;;;;;;;;;AASA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;;AACA;AAAA;AACA;;;;;;AAEA;AACA;;AACA;AAAA;;AAAA;AACA;AAAA;;;;;;;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;;AAEA;AAAA;AAAA;;;;;;AAAA;;;;;;;;;;;;AAKA;AAAA;AACA;;;;;;;;;;;;;;;;AAQA;AAAA;AACA;AAGA;AACA;AAFA;;;;;;;;;;AAWA;AAEA;AAAA;;;;;;;;;;;;AAIA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAQA;AAAA;;;;;;AAEA;AACA;AAGA;AACA;;;;;;;;;;;;;;;;;;;AAQA;AA1UA;;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAOA;AAEA;;;AAlBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChCA;AAGA;AACA;AACA;AACA;AAOA;;;;;;;;;AASA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AALA;;;;;AASA;AAEA;AACA;AACA;AACA;AACA;AALA;;;;;;;;;;;AASA;AACA;AAEA;AAAA;;;;;;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAJA;;;;;;;;;;AASA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;AAIA;AACA;AACA;AACA;AACA;AACA;;;;;;AAIA;AACA;;AAEA;AAAA;AAAA;;;;;;AAGA;AACA;;AACA;AACA;AAAA;AAAA;AAAA;;;;;AAGA;AACA;AACA;AAAA;;AACA;AAAA;AAAA;;;;;;AACA;;;;;;;;;;;;;;;;;;AAQA;AACA;AAAA;;;;;;AAIA;AACA;;AACA;AAAA;AACA;AAAA;;;;;;;;;;;AACA;;;;;;;;;;;;;;;;;;;AAQA;AACA;AAEA;AACA;;AAEA;AAAA;;;;;;AAGA;AACA;;AAEA;AAAA;AAAA;;;;;;AAGA;AACA;;AACA;AACA;AAAA;AAAA;AAAA;;;;;AAGA;AACA;AACA;AAAA;;AACA;AAAA;AAAA;;;;;;AACA;;;;;;;;;;;;;;;;;;AAQA;AACA;AAAA;;;;;;AAIA;AACA;;AACA;AAAA;AACA;AAAA;;;;;;;;;;;AACA;;;;;;;;;;;;;;;;;;;AAQA;AAvMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvBA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;;;;;;;;;AASA;AACA;;AAMA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;;;;AAGA;AAEA;AAAA;AAAA;;;;;;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AAGA;AACA;;;;;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;AAGA;;AACA;AAAA;AACA;;;;;;AAIA;AAMA;AACA;AACA;;;;;;AAKA;AAEA;AACA;AACA;AACA;AACA;;;;;;AAKA;AAEA;AACA;AACA;;;;;;;;;;;;;AAQA;AAMA;AACA;AACA;;;;;;;;;;;;AAKA;AAzLA;;AAUA;AACA;AACA;;;AAZA"}