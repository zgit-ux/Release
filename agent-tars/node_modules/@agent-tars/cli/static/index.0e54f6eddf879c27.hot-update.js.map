{"version":3,"file":"index.0e54f6eddf879c27.hot-update.js","sources":["/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/entry.css","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/main/components/Layout/index.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/sdk/dialog/ConfirmDialog.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/sdk/dialog/index.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/sidebar/ChatSession.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/sidebar/SessionItem.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/sidebar/SidebarContainer.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/sidebar/ToolBar.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/sidebar/index.tsx"],"sourcesContent":["// extracted by css-extract-rspack-plugin\nexport {};\n    if(module.hot) {\n      (function() {\n        var localsJsonString = undefined;\n        // 1749662167590\n        var cssReload = require(\"../../node_modules/.pnpm/@rspack+core@1.3.9_@swc+helpers@0.5.17/node_modules/@rspack/core/dist/cssExtractHmr.js\").cssReload(module.id, {});\n        // only invalidate when locals change\n        if (\n          module.hot.data &&\n          module.hot.data.value &&\n          module.hot.data.value !== localsJsonString\n        ) {\n          module.hot.invalidate();\n        } else {\n          module.hot.accept();\n        }\n        module.hot.dispose(function(data) {\n          data.value = localsJsonString;\n          cssReload();\n        });\n      })();\n    }\n  ","import React from 'react';\nimport { Sidebar } from '@/standalone/sidebar';\nimport { ChatPanel } from '../Chat/ChatPanel';\nimport { WorkspacePanel } from '../Workspace/WorkspacePanel';\nimport { useSession } from '../../hooks/useSession';\nimport { motion } from 'framer-motion';\nimport { Shell } from './Shell';\nimport { useReplayMode } from '../../context/ReplayModeContext';\nimport { Navbar } from '../Navbar';\nimport './Layout.css';\n\ninterface LayoutProps {\n  isReplayMode?: boolean;\n}\n\n/**\n * Layout Component - Main application layout\n *\n * Design principles:\n * - Clean, minimalist aesthetic with refined borders and subtle shadows\n * - Neutral color palette with elegant accent colors\n * - Consistent spacing and typography for optimal readability\n * - Seamless visual flow between different interface elements\n * - Adapts layout based on replay mode status\n */\nexport const Layout: React.FC<LayoutProps> = ({ isReplayMode: propIsReplayMode }) => {\n  const { connectionStatus } = useSession();\n\n  // Use the context hook to get global replay mode status\n  const contextIsReplayMode = useReplayMode();\n\n  // Prioritize props for backward compatibility, but fall back to context\n  const isReplayMode = propIsReplayMode !== undefined ? propIsReplayMode : contextIsReplayMode;\n\n  return (\n    <div className=\"flex flex-col h-screen bg-[#F2F3F5] dark:bg-white/5 text-gray-900 dark:text-gray-100 overflow-hidden\">\n      {/* Global navbar at the top */}\n      <Navbar />\n\n      {/* Main content area */}\n      <div className=\"flex flex-1 overflow-hidden\">\n        {/* Sidebar with ToolBar and ChatSession - only show when not in replay mode */}\n        {!isReplayMode && <Sidebar />}\n\n        {/* Content area - using flex-col to properly distribute vertical space */}\n        <div className=\"flex-1 flex flex-col overflow-hidden p-2 lg:p-3\">\n          {/* Panels container - apply flex-1 to take remaining vertical space */}\n          <div className=\"flex gap-3 flex-1 min-h-0\">\n            {/* Chat panel - adjust width based on replay mode */}\n            <motion.div\n              layout\n              className={isReplayMode ? 'w-[50%] flex flex-col' : 'w-[50%] flex flex-col'}\n            >\n              <Shell className=\"h-full rounded-xl bg-white/95 dark:bg-gray-800/95 backdrop-blur-sm border border-[#E5E6EC] dark:border-none bg-[#FFFFFFE5] dark:shadow-gray-950/5\">\n                <ChatPanel />\n              </Shell>\n            </motion.div>\n\n            {/* Workspace panel */}\n            <motion.div layout className=\"w-[50%] flex flex-col\">\n              <Shell className=\"h-full rounded-xl bg-white/95 dark:bg-gray-800/95 backdrop-blur-sm border border-[#E5E6EC] dark:border-none bg-[#FFFFFFE5] dark:shadow-gray-950/5\">\n                <WorkspacePanel />\n              </Shell>\n            </motion.div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Dialog } from '@headlessui/react';\nimport { motion } from 'framer-motion';\nimport { FiAlertTriangle, FiX } from 'react-icons/fi';\n\ninterface ConfirmDialogProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onConfirm: () => void;\n  title: string;\n  message: string;\n  confirmText?: string;\n  cancelText?: string;\n  type?: 'danger' | 'warning' | 'info';\n}\n\nexport const ConfirmDialog: React.FC<ConfirmDialogProps> = ({\n  isOpen,\n  onClose,\n  onConfirm,\n  title,\n  message,\n  confirmText = 'Confirm',\n  cancelText = 'Cancel',\n  type = 'danger',\n}) => {\n  const getTypeStyles = () => {\n    switch (type) {\n      case 'danger':\n        return {\n          icon: <FiAlertTriangle size={24} className=\"text-red-500 dark:text-red-400\" />,\n          confirmButton:\n            'bg-red-500 hover:bg-red-600 dark:bg-red-600 dark:hover:bg-red-700 text-white',\n          iconBg: 'bg-red-100 dark:bg-red-900/30',\n        };\n      case 'warning':\n        return {\n          icon: <FiAlertTriangle size={24} className=\"text-amber-500 dark:text-amber-400\" />,\n          confirmButton:\n            'bg-amber-500 hover:bg-amber-600 dark:bg-amber-600 dark:hover:bg-amber-700 text-white',\n          iconBg: 'bg-amber-100 dark:bg-amber-900/30',\n        };\n      default:\n        return {\n          icon: <FiAlertTriangle size={24} className=\"text-blue-500 dark:text-blue-400\" />,\n          confirmButton:\n            'bg-blue-500 hover:bg-blue-600 dark:bg-blue-600 dark:hover:bg-blue-700 text-white',\n          iconBg: 'bg-blue-100 dark:bg-blue-900/30',\n        };\n    }\n  };\n\n  const typeStyles = getTypeStyles();\n\n  return (\n    <Dialog open={isOpen} onClose={onClose} className=\"relative z-[9999]\">\n      {/* Backdrop */}\n      <div className=\"fixed inset-0 bg-black bg-opacity-25 backdrop-blur-sm\" aria-hidden=\"true\" />\n\n      {/* Dialog position */}\n      <div className=\"fixed inset-0 flex items-center justify-center p-4\">\n        <Dialog.Panel className=\"w-full max-w-md rounded-xl bg-white dark:bg-gray-800 p-6 shadow-xl border border-gray-200/50 dark:border-gray-700/30\">\n          <div className=\"flex items-start\">\n            <div className={`p-3 rounded-full ${typeStyles.iconBg} mr-4 flex-shrink-0`}>\n              {typeStyles.icon}\n            </div>\n\n            <div className=\"flex-1\">\n              <Dialog.Title className=\"text-lg font-medium text-gray-900 dark:text-gray-100\">\n                {title}\n              </Dialog.Title>\n\n              <div className=\"mt-2\">\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">{message}</p>\n              </div>\n            </div>\n\n            <motion.button\n              whileHover={{ scale: 1.1 }}\n              whileTap={{ scale: 0.9 }}\n              onClick={onClose}\n              className=\"text-gray-500 hover:text-gray-700 dark:hover:text-gray-300 p-2 rounded-full hover:bg-gray-100 dark:hover:bg-gray-700\"\n            >\n              <FiX size={18} />\n            </motion.button>\n          </div>\n\n          <div className=\"mt-6 flex justify-end gap-3\">\n            <motion.button\n              whileHover={{ scale: 1.02 }}\n              whileTap={{ scale: 0.98 }}\n              onClick={onClose}\n              className=\"px-4 py-2 bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 text-gray-800 dark:text-gray-200 rounded-lg text-sm font-medium transition-colors\"\n            >\n              {cancelText}\n            </motion.button>\n            <motion.button\n              whileHover={{ scale: 1.02 }}\n              whileTap={{ scale: 0.98 }}\n              onClick={onConfirm}\n              className={`px-4 py-2 ${typeStyles.confirmButton} rounded-lg text-sm font-medium transition-colors`}\n            >\n              {confirmText}\n            </motion.button>\n          </div>\n        </Dialog.Panel>\n      </div>\n    </Dialog>\n  );\n};\n","export * from './ConfirmDialog';\n","import React, { useState, useMemo, useCallback } from 'react';\nimport { useSession } from '../../hooks/useSession';\nimport { useNavigate } from 'react-router-dom';\nimport { FiRefreshCw, FiWifiOff, FiChevronDown, FiChevronUp } from 'react-icons/fi';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport SessionItem from './SessionItem';\nimport { ConfirmDialog } from '@/sdk/dialog';\n\ninterface ChatSessionProps {\n  isCollapsed: boolean;\n}\n\n/**\n * ChatSession Component - Collapsible sidebar for session management\n *\n * Design principles:\n * - Clean, consistent visual hierarchy\n * - Collapsible interface to maximize workspace\n * - Time-based grouping for easy navigation\n * - Offline mode support with clear visual feedback\n */\nexport const ChatSession: React.FC<ChatSessionProps> = ({ isCollapsed }) => {\n  const {\n    sessions,\n    activeSessionId,\n    setActiveSession,\n    updateSessionMetadata,\n    deleteSession,\n    loadSessions,\n    connectionStatus,\n    checkServerStatus,\n  } = useSession();\n\n  const navigate = useNavigate();\n\n  const [editingSessionId, setEditingSessionId] = useState<string | null>(null);\n  const [editedName, setEditedName] = useState('');\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [loadingSessionId, setLoadingSessionId] = useState<string | null>(null);\n  const [collapsedSections, setCollapsedSections] = useState<Record<string, boolean>>({});\n  const [deleteConfirmOpen, setDeleteConfirmOpen] = useState(false);\n  const [sessionToDelete, setSessionToDelete] = useState<string | null>(null);\n\n  // Toggle section collapse state\n  const toggleSectionCollapse = useCallback((sectionKey: string) => {\n    setCollapsedSections((prev) => ({\n      ...prev,\n      [sectionKey]: !prev[sectionKey],\n    }));\n  }, []);\n\n  // Group sessions by time period\n  const groupedSessions = useMemo(() => {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n\n    const yesterday = new Date(today);\n    yesterday.setDate(yesterday.getDate() - 1);\n\n    const lastWeek = new Date(today);\n    lastWeek.setDate(lastWeek.getDate() - 7);\n\n    // Initialize groups\n    const groups: Array<{ label: string; sessions: Array<any>; key: string }> = [\n      { label: 'Today', sessions: [], key: 'today' },\n      { label: 'Yesterday', sessions: [], key: 'yesterday' },\n      { label: 'This Week', sessions: [], key: 'thisWeek' },\n      { label: 'Earlier', sessions: [], key: 'earlier' },\n    ];\n\n    // Categorize sessions\n    sessions.forEach((session) => {\n      const sessionDate = new Date(session.updatedAt || session.createdAt);\n\n      if (sessionDate >= today) {\n        groups[0].sessions.push(session);\n      } else if (sessionDate >= yesterday) {\n        groups[1].sessions.push(session);\n      } else if (sessionDate >= lastWeek) {\n        groups[2].sessions.push(session);\n      } else {\n        groups[3].sessions.push(session);\n      }\n    });\n\n    // Only return non-empty groups\n    return groups.filter((group) => group.sessions.length > 0);\n  }, [sessions]);\n\n  // Event handlers\n  const handleEditSession = useCallback((sessionId: string, currentName?: string) => {\n    setEditingSessionId(sessionId);\n    setEditedName(currentName || '');\n  }, []);\n\n  const handleSaveEdit = useCallback(\n    async (sessionId: string) => {\n      try {\n        await updateSessionMetadata({ sessionId, updates: { name: editedName } });\n        setEditingSessionId(null);\n      } catch (error) {\n        console.error('Failed to update session name:', error);\n      }\n    },\n    [updateSessionMetadata, editedName],\n  );\n\n  const handleDeleteSession = useCallback(async (sessionId: string, e: React.MouseEvent) => {\n    e.stopPropagation();\n    setSessionToDelete(sessionId);\n    setDeleteConfirmOpen(true);\n  }, []);\n\n  const confirmDeleteSession = useCallback(async () => {\n    if (!sessionToDelete) return;\n\n    try {\n      // 在删除之前找到下一个可用的会话\n      if (sessionToDelete === activeSessionId && sessions.length > 1) {\n        // 找到不是要删除的会话的最近会话\n        const nextSession = sessions.find((s) => s.id !== sessionToDelete);\n        if (nextSession) {\n          // 先导航到新会话\n          navigate(`/${nextSession.id}`);\n\n          // 给导航一点时间完成\n          await new Promise((resolve) => setTimeout(resolve, 50));\n        }\n      }\n\n      // 然后删除会话\n      await deleteSession(sessionToDelete);\n    } catch (error) {\n      console.error('Failed to delete session:', error);\n    } finally {\n      setDeleteConfirmOpen(false);\n      setSessionToDelete(null);\n    }\n  }, [deleteSession, sessionToDelete, sessions, activeSessionId, navigate]);\n\n  const refreshSessions = useCallback(async () => {\n    setIsRefreshing(true);\n    try {\n      const isConnected = await checkServerStatus();\n      if (isConnected) {\n        await loadSessions();\n      }\n    } catch (error) {\n      console.error('Failed to refresh sessions:', error);\n    } finally {\n      setIsRefreshing(false);\n    }\n  }, [checkServerStatus, loadSessions]);\n\n  const handleSessionClick = useCallback(\n    async (sessionId: string) => {\n      if (loadingSessionId || !connectionStatus.connected) return;\n\n      try {\n        setLoadingSessionId(sessionId);\n        navigate(`/${sessionId}`);\n      } catch (error) {\n        console.error('Failed to switch session:', error);\n        checkServerStatus();\n      } finally {\n        setLoadingSessionId(null);\n      }\n    },\n    [loadingSessionId, connectionStatus.connected, navigate, checkServerStatus],\n  );\n\n  // If collapsed, render minimal sidebar\n  if (isCollapsed) {\n    return (\n      <div className=\"flex flex-col h-full bg-transparent w-0 border-r border-gray-100/40 dark:border-gray-700/20\">\n        {/* No collapse button here anymore - moved to Navbar */}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"w-64 flex flex-col h-full duration-200 backdrop-blur-sm border-r border-gray-100/40 dark:border-gray-700/20\">\n      {/* Header with title - no collapse button anymore */}\n      <div className=\"p-4 flex items-center justify-between border-b border-gray-100/40 dark:border-gray-700/20\">\n        <div className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Recent Tasks</div>\n        <div className=\"flex items-center gap-2\">\n          {/* Connection status indicator */}\n          <div\n            className={`h-2 w-2 rounded-full ${\n              connectionStatus.connected\n                ? 'bg-green-500 animate-pulse'\n                : connectionStatus.reconnecting\n                  ? 'bg-yellow-500 animate-ping'\n                  : 'bg-gray-400'\n            }`}\n            title={\n              connectionStatus.connected\n                ? 'Connected to server'\n                : connectionStatus.reconnecting\n                  ? 'Reconnecting...'\n                  : 'Disconnected from server'\n            }\n          />\n\n          <motion.button\n            whileHover={{ rotate: 180 }}\n            transition={{ duration: 0.3 }}\n            onClick={refreshSessions}\n            disabled={isRefreshing || !connectionStatus.connected}\n            className={`text-gray-500 hover:text-gray-700 dark:hover:text-gray-300 p-1 rounded-full hover:bg-gray-100/40 dark:hover:bg-gray-800/40 text-xs transition-all ${\n              !connectionStatus.connected && 'opacity-50 cursor-not-allowed'\n            }`}\n            title={connectionStatus.connected ? 'Refresh tasks' : 'Server disconnected'}\n          >\n            <FiRefreshCw className={isRefreshing ? 'animate-spin' : ''} size={12} />\n          </motion.button>\n        </div>\n      </div>\n\n      {/* Offline mode banner */}\n      {!connectionStatus.connected && sessions.length > 0 && (\n        <div className=\"px-3 py-2\">\n          <div className=\"p-3 rounded-xl bg-red-50/30 dark:bg-red-900/15 text-gray-700 dark:text-gray-300 text-sm border border-red-200/50 dark:border-red-800/30 shadow-sm\">\n            <div className=\"flex items-center\">\n              <FiWifiOff className=\"mr-2 flex-shrink-0 text-red-500 dark:text-red-400\" />\n              <div className=\"font-medium text-red-700 dark:text-red-400\">Offline Mode</div>\n            </div>\n            <p className=\"mt-1 text-xs\">\n              You can view tasks but can't create new ones until reconnected.\n            </p>\n            <motion.button\n              whileHover={{ scale: 1.02 }}\n              whileTap={{ scale: 0.98 }}\n              onClick={() => checkServerStatus()}\n              className=\"w-full mt-2 py-1.5 px-3 bg-red-100/70 dark:bg-red-800/30 hover:bg-red-200/70 dark:hover:bg-red-700/40 rounded-xl text-xs font-medium transition-colors flex items-center justify-center border border-red-200/30 dark:border-red-700/30 text-red-700 dark:text-red-300\"\n            >\n              <FiRefreshCw\n                className={`mr-1.5 ${connectionStatus.reconnecting ? 'animate-spin' : ''}`}\n                size={12}\n              />\n              {connectionStatus.reconnecting ? 'Reconnecting...' : 'Reconnect to Server'}\n            </motion.button>\n          </div>\n        </div>\n      )}\n\n      {/* Sessions list */}\n      <div className=\"flex-1 overflow-y-auto sidebar-scrollbar p-3\">\n        <AnimatePresence>\n          {groupedSessions.map((group) => (\n            <div key={group.key} className=\"mb-4\">\n              {/* Group header and toggle */}\n              <motion.button\n                onClick={() => toggleSectionCollapse(group.key)}\n                className=\"w-full flex items-center justify-between px-1 py-2 text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider hover:text-gray-700 dark:hover:text-gray-300\"\n                whileHover={{ x: 2 }}\n              >\n                <span>{group.label}</span>\n                <motion.div\n                  animate={{ rotate: collapsedSections[group.key] ? 0 : 180 }}\n                  transition={{ duration: 0.2 }}\n                >\n                  <FiChevronUp size={14} />\n                </motion.div>\n              </motion.button>\n\n              {/* Sessions in this group */}\n              <AnimatePresence>\n                {!collapsedSections[group.key] && (\n                  <motion.div\n                    initial={{ height: 0, opacity: 0 }}\n                    animate={{ height: 'auto', opacity: 1 }}\n                    exit={{ height: 0, opacity: 0 }}\n                    transition={{ duration: 0.3 }}\n                    className=\"overflow-hidden\"\n                  >\n                    <div className=\"space-y-1\">\n                      {group.sessions.map((session) => (\n                        <SessionItem\n                          key={session.id}\n                          session={session}\n                          isActive={activeSessionId === session.id}\n                          isLoading={loadingSessionId === session.id}\n                          isConnected={connectionStatus.connected}\n                          onSessionClick={handleSessionClick}\n                          onEditSession={handleEditSession}\n                          onDeleteSession={handleDeleteSession}\n                          onSaveEdit={handleSaveEdit}\n                          editingSessionId={editingSessionId}\n                          editedName={editedName}\n                          setEditedName={setEditedName}\n                        />\n                      ))}\n                    </div>\n                  </motion.div>\n                )}\n              </AnimatePresence>\n            </div>\n          ))}\n        </AnimatePresence>\n      </div>\n\n      {/* Confirm Dialog */}\n      <ConfirmDialog\n        isOpen={deleteConfirmOpen}\n        onClose={() => setDeleteConfirmOpen(false)}\n        onConfirm={confirmDeleteSession}\n        title=\"Delete Task\"\n        message=\"Are you sure you want to delete this task? This action cannot be undone.\"\n        confirmText=\"Delete\"\n        cancelText=\"Cancel\"\n        type=\"danger\"\n      />\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { FiMessageSquare, FiEdit2, FiTrash2, FiTag, FiClock, FiLoader } from 'react-icons/fi';\nimport { formatTimestamp } from '../../utils/formatters';\nimport { SessionMetadata } from '../../types';\nimport classNames from 'classnames';\n\ninterface SessionItemProps {\n  session: SessionMetadata;\n  isActive: boolean;\n  isLoading: boolean;\n  isConnected: boolean;\n  onSessionClick: (sessionId: string) => void;\n  onEditSession: (sessionId: string, currentName?: string) => void;\n  onDeleteSession: (sessionId: string, e: React.MouseEvent) => void;\n  onSaveEdit: (sessionId: string) => void;\n  editingSessionId: string | null;\n  editedName: string;\n  setEditedName: (name: string) => void;\n}\n\nconst SessionItem: React.FC<SessionItemProps> = React.memo(\n  ({\n    session,\n    isActive,\n    isLoading,\n    isConnected,\n    onSessionClick,\n    onEditSession,\n    onDeleteSession,\n    onSaveEdit,\n    editingSessionId,\n    editedName,\n    setEditedName,\n  }) => {\n    return (\n      <motion.div\n        key={session.id}\n        className=\"relative group\"\n        initial={{ opacity: 0, x: -10 }}\n        animate={{ opacity: 1, x: 0 }}\n        transition={{ duration: 0.2 }}\n      >\n        {editingSessionId === session.id ? (\n          <div className=\"flex items-center p-2 glass-effect rounded-xl\">\n            <input\n              type=\"text\"\n              value={editedName}\n              onChange={(e) => setEditedName(e.target.value)}\n              className=\"flex-1 px-2 py-1 text-sm bg-white/90 dark:bg-gray-700/90 border border-gray-200/50 dark:border-gray-600/30 rounded-lg focus:outline-none focus:ring-1 focus:ring-accent-500 dark:focus:ring-accent-400 w-[100px]\"\n              autoFocus\n              onKeyDown={(e) => {\n                if (e.key === 'Enter') onSaveEdit(session.id);\n                if (e.key === 'Escape') onEditSession('', '');\n              }}\n            />\n            <button\n              onClick={() => onSaveEdit(session.id)}\n              className=\"ml-2 px-2 py-1 text-accent-600 dark:text-accent-400 bg-accent-50/70 dark:bg-accent-900/20 hover:bg-accent-100 dark:hover:bg-accent-800/30 rounded-lg text-xs transition-colors border border-accent-100/40 dark:border-accent-700/20\"\n            >\n              Save\n            </button>\n          </div>\n        ) : (\n          <motion.button\n            whileTap={{ scale: 0.98 }}\n            onClick={() => onSessionClick(session.id)}\n            disabled={!isConnected || isLoading}\n            className={classNames(\n              'text-left text-sm transition-all duration-200 flex items-center p-2 w-full rounded-xl border',\n              {\n                'bg-white/80 dark:bg-gray-800/80 border-gray-100/60 dark:border-gray-700/30 text-gray-900 dark:text-gray-100':\n                  isActive,\n                'hover:bg-white/60 dark:hover:bg-gray-800/60 border-transparent hover:border-gray-100/40 dark:hover:border-gray-700/20 backdrop-blur-sm':\n                  !isActive,\n                'opacity-60 cursor-not-allowed hover:bg-transparent dark:hover:bg-transparent hover:border-transparent dark:hover:border-transparent':\n                  !isConnected || (isLoading && session.id !== isLoading),\n              },\n            )}\n          >\n            <div\n              className={`mr-3 h-9 w-9 flex-shrink-0 rounded-xl flex items-center justify-center ${\n                isActive\n                  ? 'bg-accent-50/50 dark:bg-gray-700/60 text-accent-500 dark:text-accent-400 border border-accent-100/30 dark:border-gray-600/30'\n                  : 'bg-gray-50/70 text-gray-500 dark:bg-gray-800/50 dark:text-gray-400 border border-gray-100/40 dark:border-gray-700/30'\n              }`}\n            >\n              {isLoading === session.id ? (\n                <FiLoader className=\"animate-spin\" size={16} />\n              ) : (\n                <FiMessageSquare size={16} />\n              )}\n            </div>\n            <div className=\"flex-1 min-w-0\">\n              <div className=\"font-medium truncate\">{session.name || 'Untitled Task'}</div>\n              <div className=\"text-xs flex items-center mt-0.5 text-gray-500 dark:text-gray-400\">\n                <FiClock className=\"mr-1\" size={10} />\n                {formatTimestamp(session.updatedAt || session.createdAt)}\n              </div>\n            </div>\n\n            <div className=\"hidden group-hover:flex absolute right-2 gap-1\">\n              <motion.button\n                whileHover={{ scale: 1.1 }}\n                whileTap={{ scale: 0.9 }}\n                onClick={(e) => {\n                  e.stopPropagation();\n                  onEditSession(session.id, session.name);\n                }}\n                className=\"text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 p-1 rounded-full hover:bg-gray-100/50 dark:hover:bg-gray-700/50 transition-all border border-transparent hover:border-gray-100/40 dark:hover:border-gray-700/30 bg-white/80 dark:bg-gray-800/80\"\n                title=\"Edit task name\"\n              >\n                <FiEdit2 size={12} />\n              </motion.button>\n              <motion.button\n                whileHover={{ scale: 1.1 }}\n                whileTap={{ scale: 0.9 }}\n                onClick={(e) => onDeleteSession(session.id, e)}\n                className=\"text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 p-1 rounded-full hover:bg-gray-100/50 dark:hover:bg-gray-700/50 transition-all border border-transparent hover:border-gray-100/40 dark:hover:border-gray-700/30 bg-white/80 dark:bg-gray-800/80\"\n                title=\"Delete task\"\n              >\n                <FiTrash2 size={12} />\n              </motion.button>\n            </div>\n          </motion.button>\n        )}\n\n        {session.tags && session.tags.length > 0 && (\n          <div className=\"flex flex-wrap gap-1 px-4 my-1 pb-2\">\n            {session.tags.map((tag, idx) => (\n              <motion.div\n                key={idx}\n                whileHover={{ y: -2 }}\n                className=\"flex items-center bg-gray-50/60 dark:bg-gray-800/50 text-gray-600 dark:text-gray-300 rounded-full px-2 py-0.5 text-[10px] border border-gray-100/40 dark:border-gray-700/30\"\n              >\n                <FiTag size={8} className=\"mr-1\" />\n                {tag}\n              </motion.div>\n            ))}\n          </div>\n        )}\n      </motion.div>\n    );\n  },\n);\n\nSessionItem.displayName = 'SessionItem';\n\nexport default SessionItem;\n","import React from 'react';\nimport { ToolBar } from './ToolBar';\nimport { ChatSession } from './ChatSession';\nimport { useLayout } from '../../hooks/useLayout';\nimport { useReplayMode } from '../../context/ReplayModeContext';\n\n/**\n * SidebarContainer - Container component that orchestrates the sidebar layout\n *\n * Design principles:\n * - Manages the layout of ToolBar and ChatSession components\n * - Handles conditional rendering based on replay mode\n * - Maintains proper spacing and alignment between components\n * - Provides a clean interface for the main layout\n */\nexport const SidebarContainer: React.FC = () => {\n  const { isSidebarCollapsed } = useLayout();\n  const isReplayMode = useReplayMode();\n\n  // In replay mode, only show the ToolBar\n  if (isReplayMode) {\n    return (\n      <div className=\"flex h-full\">\n        <ToolBar />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-full\">\n      <ToolBar />\n      <ChatSession isCollapsed={isSidebarCollapsed} />\n    </div>\n  );\n};\n\nexport default SidebarContainer;\n","import React, { useCallback } from 'react';\nimport { motion } from 'framer-motion';\n\nimport { FiPlus, FiHome } from 'react-icons/fi';\nimport { useNavigate } from 'react-router-dom';\nimport { useSession } from '../../hooks/useSession';\nimport { useReplayMode } from '../../context/ReplayModeContext';\n\n/**\n * ToolBar Component - Vertical toolbar inspired by modern IDE designs\n *\n * Design principles:\n * - Minimalist vertical bar with icon-only actions\n * - Consistent visual language with subtle animations\n * - Quick access to essential functionality\n * - Always visible regardless of sidebar collapse state\n */\nexport const ToolBar: React.FC = () => {\n  const navigate = useNavigate();\n  const isReplayMode = useReplayMode();\n  const { createSession, connectionStatus } = useSession();\n\n  // Create new session\n  const handleNewSession = useCallback(async () => {\n    try {\n      const sessionId = await createSession();\n      navigate(`/${sessionId}`);\n    } catch (error) {\n      console.error('Failed to create new session:', error);\n    }\n  }, [createSession, navigate]);\n\n  // Navigate to home\n  const handleNavigateHome = useCallback(() => {\n    navigate('/');\n  }, [navigate]);\n\n  return (\n    <div className=\"w-14 h-full flex flex-col backdrop-blur-sm border-r border-gray-300/40 dark:border-gray-600/20\">\n      {/* Tool buttons */}\n      <div className=\"flex-1 flex flex-col items-center gap-4 py-4\">\n        {/* New session button */}\n        {!isReplayMode && (\n          <motion.button\n            whileHover={{\n              scale: 1.08,\n              backgroundColor: connectionStatus.connected ? '#000000' : undefined,\n              boxShadow: connectionStatus.connected\n                ? '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)'\n                : undefined,\n            }}\n            whileTap={{ scale: 0.97 }}\n            transition={{ type: 'spring', stiffness: 400, damping: 17 }}\n            onClick={handleNewSession}\n            disabled={!connectionStatus.connected}\n            className={`w-8 h-8 rounded-lg flex items-center justify-center transition-all duration-200 ${\n              connectionStatus.connected\n                ? 'bg-gradient-to-r from-[#141414] to-[#1e1e1e] dark:from-gray-900 dark:to-gray-800 text-white hover:shadow-md'\n                : 'bg-gray-400 text-white cursor-not-allowed opacity-60'\n            }`}\n            title={connectionStatus.connected ? 'New Task' : 'Server disconnected'}\n          >\n            <FiPlus size={16} />\n          </motion.button>\n        )}\n\n        {/* Home button */}\n        {!isReplayMode && (\n          <motion.button\n            whileHover={{\n              scale: 1.08,\n              backgroundColor: 'rgba(0, 0, 0, 0.06)',\n              boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.05), 0 2px 4px -1px rgba(0, 0, 0, 0.03)',\n            }}\n            whileTap={{ scale: 0.97 }}\n            transition={{ type: 'spring', stiffness: 400, damping: 17 }}\n            onClick={handleNavigateHome}\n            className=\"w-8 h-8 rounded-lg flex items-center justify-center text-gray-700 dark:text-gray-300 hover:bg-gray-100/80 dark:hover:bg-gray-700/80 transition-all duration-200\"\n            title=\"Home\"\n          >\n            <FiHome size={16} />\n          </motion.button>\n        )}\n      </div>\n    </div>\n  );\n};\n","import SidebarContainer from './SidebarContainer';\n\nexport { SidebarContainer as Sidebar };\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;;;;;;;;;AASA;AACA;;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;;AAEA;;;;;AAGA;AAAA;;AAEA;;;;;AAGA;AAAA;AAEA;AAAA;;AAEA;AACA;AACA;AAEA;AAAA;AACA;;;;;;;;;;;;;;;AAKA;AAAA;AAAA;AACA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA;AA5CA;;AACA;AAGA;;;AAJA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzBA;AACA;AACA;AACA;AAaA;AAAA;AAUA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;;AAEA;AAAA;AAAA;;;;;;AAGA;AAAA;AACA;AAAA;;AACA;AAAA;;AACA;AAAA;AACA;;;;;;AAGA;AAAA;;AACA;AAAA;AACA;;;;;;AAGA;AAAA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;AAIA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;;;;;;;;;;;;;;;;;AAIA;AAAA;;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAEA;;;;;;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA;AA7FA;;;;;;;;;;;;;;;;;;;;;;;AChBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;;;;;;;;AAQA;AACA;;AACA;AAWA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;;;;;;AAIA;AAEA;AACA;;AAEA;AAAA;;AACA;AAAA;AAAA;;;;;;AACA;AAAA;;AAEA;AACA;AAOA;;;;;;AASA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AAEA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;AAMA;AACA;AACA;AAAA;;AACA;AAAA;;AACA;AAAA;;;;;;AACA;AAAA;AAAA;;;;;;;;;;;;AAEA;AAAA;AAAA;;;;;;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;;AAEA;AACA;AACA;;;;;;AAEA;;;;;;;;;;;;;;;;;;AAOA;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AAAA;;AAEA;AAAA;;;;;;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;;;;;;;;;;;;;;;;;AAKA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;;;;;;;;;;;;;;;;;;;;;AA7BA;;;;;;;;;;;;;;;AAqDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AAIA;AAtSA;;AAUA;AAEA;;;AAZA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrBA;AACA;AACA;AACA;AAEA;AAgBA;AACA;AAaA;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AAEA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAEA;AACA;AACA;AACA;;;;;;;;;;;AAKA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AAEA;AAEA;AAEA;;AAGA;AACA;AAMA;AACA;AAAA;;;;;AAEA;AAAA;;;;;;;;;;;AAGA;AAAA;;AACA;AAAA;AAAA;;;;;;AACA;AAAA;;AACA;AAAA;AAAA;;;;;;AACA;;;;;;;;;;;;;AAIA;AAAA;;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;;;;;;;;;;;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAAA;;;;;;;;;;;;;;;;;;;;;;;AAMA;AACA;AACA;AAGA;AAAA;AAAA;AACA;;AAEA;AAAA;AAAA;;;;;;AACA;;AALA;;;;;;;;;;;AA9FA;;;;;AA0GA;;AAGA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpJA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;AAQA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;AAGA;AAEA;AACA;;AACA;;;;;AACA;AAAA;;;;;;;;;;;;AAGA;AAnBA;;AACA;AACA;;;AAFA;AAqBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpCA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;;;;;;AAQA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AAAA;;AAEA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAKA;AAEA;AAAA;;;;;;;;;;;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAAA;;;;;;;;;;;;;;;;;;;;;;AAMA;AArEA;;AACA;AACA;AACA;;;AAHA;;;;;;;;;;;;;;;;;;;;;;;ACjBA;AAEA"}