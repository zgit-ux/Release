{"version":3,"file":"index.f1f705ece571fc1a.hot-update.js","sources":["/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/entry.css","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Layout/index.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Workspace/WorkspacePanel.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/hooks/useReplay.ts"],"sourcesContent":["// extracted by css-extract-rspack-plugin\nexport {};\n    if(module.hot) {\n      (function() {\n        var localsJsonString = undefined;\n        // 1748713397078\n        var cssReload = require(\"../../node_modules/.pnpm/@rspack+core@1.3.9_@swc+helpers@0.5.17/node_modules/@rspack/core/dist/cssExtractHmr.js\").cssReload(module.id, {});\n        // only invalidate when locals change\n        if (\n          module.hot.data &&\n          module.hot.data.value &&\n          module.hot.data.value !== localsJsonString\n        ) {\n          module.hot.invalidate();\n        } else {\n          module.hot.accept();\n        }\n        module.hot.dispose(function(data) {\n          data.value = localsJsonString;\n          cssReload();\n        });\n      })();\n    }\n  ","import React from 'react';\nimport { Sidebar } from '../Sidebar';\nimport { ChatPanel } from '../Chat/ChatPanel';\nimport { WorkspacePanel } from '../Workspace/WorkspacePanel';\nimport { useLayout } from '../../hooks/useLayout';\nimport { useSession } from '../../hooks/useSession';\nimport { motion } from 'framer-motion';\nimport { Shell } from '../Common/Shell';\nimport { useReplayMode } from '../../context/ReplayModeContext';\nimport './Layout.css';\n\ninterface LayoutProps {\n  isReplayMode?: boolean;\n}\n\n/**\n * Layout Component - Main application layout\n *\n * Design principles:\n * - Clean, minimalist aesthetic with refined borders and subtle shadows\n * - Neutral color palette with elegant accent colors\n * - Consistent spacing and typography for optimal readability\n * - Seamless visual flow between different interface elements\n * - Adapts layout based on replay mode status\n */\nexport const Layout: React.FC<LayoutProps> = ({ isReplayMode: propIsReplayMode }) => {\n  const { isSidebarCollapsed, toggleSidebar } = useLayout();\n  const { connectionStatus } = useSession();\n  \n  // Use the context hook to get global replay mode status\n  const contextIsReplayMode = useReplayMode();\n  \n  // Prioritize props for backward compatibility, but fall back to context\n  const isReplayMode = propIsReplayMode !== undefined ? propIsReplayMode : contextIsReplayMode;\n\n  return (\n    <div className=\"flex h-screen bg-[#F2F3F5] dark:bg-white/5 text-gray-900 dark:text-gray-100 overflow-hidden\">\n      {/* Only show sidebar when not in replay mode */}\n      {!isReplayMode && (\n        <Sidebar isCollapsed={isSidebarCollapsed} onToggleCollapse={toggleSidebar} />\n      )}\n\n      <div className=\"flex-1 flex flex-col overflow-hidden p-3 lg:p-4 lg:pl-1\">\n        {/* Show replay header when in replay mode */}\n        {isReplayMode && (\n          <div className=\"mb-3 p-4 bg-white/90 dark:bg-gray-800/90 rounded-xl border border-[#E5E6EC] dark:border-gray-700/30 flex items-center\">\n            <div className=\"w-10 h-10 rounded-2xl bg-gray-900 dark:bg-gray-100 flex items-center justify-center text-white dark:text-gray-900 font-bold mr-3 text-base\">\n              A\n            </div>\n            <div>\n              <h1 className=\"font-bold text-gray-900 dark:text-gray-100 text-xl\">Agent TARS</h1>\n              <div className=\"text-sm text-gray-500 dark:text-gray-400\">\n                Shared Conversation (Replay Mode)\n              </div>\n            </div>\n          </div>\n        )}\n\n        <div className=\"flex gap-3 h-full\">\n          {/* Chat panel - adjust width based on replay mode */}\n          <motion.div \n            layout \n            className={isReplayMode ? \"w-[40%]\" : \"w-[40%]\"}\n          >\n            <Shell className=\"h-full rounded-3xl bg-white/95 dark:bg-gray-800/95 backdrop-blur-sm border border-[#E5E6EC] dark:border-none bg-[#FFFFFFE5] dark:shadow-gray-950/5\">\n              <ChatPanel />\n            </Shell>\n          </motion.div>\n\n          {/* Workspace panel */}\n          <motion.div layout className=\"w-[60%]\">\n            <Shell className=\"h-full rounded-3xl bg-white/95 dark:bg-gray-800/95 backdrop-blur-sm border border-[#E5E6EC] dark:border-none bg-[#FFFFFFE5] dark:shadow-gray-950/5\">\n              <WorkspacePanel />\n            </Shell>\n          </motion.div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","      {/* Main content area */}\n      <div className=\"flex-1 overflow-hidden\">\n        {isViewingPlan ? (\n          <PlanView onBack={() => setActivePanelContent(null)} />\n        ) : activePanelContent ? (\n          <WorkspaceDetail />\n        ) : (\n          <WorkspaceContent />\n        )}\n      </div>\n\n      {/* Refined replay controls with monochromatic styling */}\n      <AnimatePresence>\n        {isReplayActive && (\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: 20 }}\n            transition={{ duration: 0.3 }}\n            className=\"p-4 border-t border-gray-100/40 dark:border-gray-700/20 bg-gray-50/50 dark:bg-gray-900/30 sticky bottom-0 left-0 right-0 z-10\"\n          >\n            {/* Timeline slider */}\n            <TimelineSlider />\n\n            {/* Controls centered below the timeline */}\n            <div className=\"flex justify-center mt-3\">\n              <ReplayControls />\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n","import { useAtom } from 'jotai';\nimport { useCallback, useEffect, useState } from 'react';\nimport { replayStateAtom } from '../state/atoms/replay';\nimport { Event, EventType } from '../types';\nimport { useSession } from './useSession';\nimport { messagesAtom } from '../state/atoms/message';\nimport { toolResultsAtom } from '../state/atoms/tool';\nimport { processEventAction } from '../state/actions/eventProcessor';\nimport { atom, useSetAtom } from 'jotai';\nimport { plansAtom } from '../state/atoms/plan';\n\n/**\n * Custom hook for managing replay functionality\n *\n * Provides:\n * - Control for playback (play, pause, jump, etc.)\n * - Event processing through the standard event processor\n * - Timeline calculations and positioning\n */\nexport function useReplay() {\n  const [replayState, setReplayState] = useAtom(replayStateAtom);\n  const { activeSessionId } = useSession();\n  const [playbackInterval, setPlaybackInterval] = useState<NodeJS.Timeout | null>(null);\n  const [, setMessages] = useAtom(messagesAtom);\n  const [, setToolResults] = useAtom(toolResultsAtom);\n  const [, setPlans] = useAtom(plansAtom);\n  const processEvent = useSetAtom(processEventAction);\n\n  /**\n   * Initialize replay with events for the current session\n   * Filter out streaming events and only keep key frames\n   */\n  const initReplay = useCallback(\n    async (events: Event[]) => {\n      if (!events || events.length === 0 || !activeSessionId) return;\n\n      // 清空当前会话的所有状态\n      setMessages((prev) => ({\n        ...prev,\n        [activeSessionId]: [],\n      }));\n\n      setToolResults((prev) => ({\n        ...prev,\n        [activeSessionId]: [],\n      }));\n\n      setPlans((prev) => ({\n        ...prev,\n        [activeSessionId]: {\n          steps: [],\n          isComplete: false,\n          summary: null,\n          hasGeneratedPlan: false,\n          keyframes: [],\n        },\n      }));\n\n      // 过滤出关键帧事件，排除流式消息\n      const keyFrameEvents = events\n        .filter(\n          (event) =>\n            // 只保留关键事件，排除所有流式消息\n            event.type === EventType.USER_MESSAGE ||\n            event.type === EventType.ASSISTANT_MESSAGE ||\n            event.type === EventType.TOOL_CALL ||\n            event.type === EventType.TOOL_RESULT ||\n            event.type === EventType.ENVIRONMENT_INPUT ||\n            event.type === EventType.PLAN_START ||\n            event.type === EventType.PLAN_UPDATE ||\n            event.type === EventType.PLAN_FINISH ||\n            event.type === EventType.FINAL_ANSWER\n        )\n        .sort((a, b) => a.timestamp - b.timestamp);\n\n      setReplayState({\n        isActive: true,\n        isPaused: true, // 初始为暂停状态\n        events: keyFrameEvents,\n        currentEventIndex: -1, // 开始前为-1\n        startTimestamp: keyFrameEvents[0]?.timestamp || null,\n        endTimestamp: keyFrameEvents[keyFrameEvents.length - 1]?.timestamp || null,\n        playbackSpeed: 1,\n        autoPlayCountdown: 2, // 设置2秒倒计时\n        visibleTimeWindow:\n          keyFrameEvents.length > 0\n            ? {\n                start: keyFrameEvents[0].timestamp,\n                end: keyFrameEvents[keyFrameEvents.length - 1].timestamp,\n              }\n            : null,\n        processedEvents: {}, // 初始化空的已处理事件映射\n      });\n\n      // 启动倒计时并在结束后自动播放\n      const countdownTimer = setInterval(() => {\n        setReplayState((prev) => {\n          // 如果倒计时结束或已被取消\n          if (prev.autoPlayCountdown === null || prev.autoPlayCountdown <= 0) {\n            clearInterval(countdownTimer);\n\n            // 只有当倒计时正常结束（为0）时才自动开始播放\n            if (prev.autoPlayCountdown === 0) {\n              setTimeout(() => startReplay(), 0);\n              return {\n                ...prev,\n                autoPlayCountdown: null,\n              };\n            }\n\n            return {\n              ...prev,\n              autoPlayCountdown: null,\n            };\n          }\n\n          // 继续倒计时\n          return {\n            ...prev,\n            autoPlayCountdown: prev.autoPlayCountdown - 1,\n          };\n        });\n      }, 1000);\n    },\n    [activeSessionId, setMessages, setToolResults, setPlans, setReplayState],\n  );\n\n  /**\n   * 重置会话状态并处理事件至指定索引\n   */\n  const processEventsUpToIndex = useCallback(\n    (targetIndex: number) => {\n      if (!activeSessionId || !replayState.events.length || targetIndex < 0) return;\n\n      // 获取需要处理的事件\n      const eventsToProcess = replayState.events.slice(0, targetIndex + 1);\n\n      // 清空当前会话状态\n      setMessages((prev) => ({\n        ...prev,\n        [activeSessionId]: [],\n      }));\n\n      setToolResults((prev) => ({\n        ...prev,\n        [activeSessionId]: [],\n      }));\n\n      setPlans((prev) => ({\n        ...prev,\n        [activeSessionId]: {\n          steps: [],\n          isComplete: false,\n          summary: null,\n          hasGeneratedPlan: false,\n          keyframes: [],\n        },\n      }));\n\n      // 处理环境输入事件优先，确保图片资源先加载\n      const envEvents = eventsToProcess.filter(\n        (event) => event.type === EventType.ENVIRONMENT_INPUT,\n      );\n      const nonEnvEvents = eventsToProcess.filter(\n        (event) => event.type !== EventType.ENVIRONMENT_INPUT,\n      );\n\n      // 先处理环境输入事件\n      for (const event of envEvents) {\n        processEvent({ sessionId: activeSessionId, event });\n      }\n\n      // 然后处理其他事件\n      for (const event of nonEnvEvents) {\n        processEvent({ sessionId: activeSessionId, event });\n      }\n    },\n    [activeSessionId, replayState.events, setMessages, setToolResults, setPlans, processEvent],\n  );\n\n  /**\n   * 开始回放\n   */\n  const startReplay = useCallback(() => {\n    // 清除现有的定时器\n    if (playbackInterval) {\n      clearInterval(playbackInterval);\n    }\n\n    setReplayState((prev) => ({\n      ...prev,\n      isPaused: false,\n    }));\n\n    // 设置定时器按间隔前进\n    const interval = setInterval(() => {\n      setReplayState((prev) => {\n        // 到达末尾时停止\n        if (prev.currentEventIndex >= prev.events.length - 1) {\n          clearInterval(interval);\n          return {\n            ...prev,\n            isPaused: true,\n            currentEventIndex: prev.events.length - 1,\n          };\n        }\n\n        // 前进到下一个事件\n        const nextIndex = prev.currentEventIndex + 1;\n\n        // 处理到新位置\n        if (activeSessionId) {\n          processEvent({\n            sessionId: activeSessionId,\n            event: prev.events[nextIndex],\n          });\n        }\n\n        return {\n          ...prev,\n          currentEventIndex: nextIndex,\n        };\n      });\n    }, 200 / replayState.playbackSpeed); // 由于只显示关键帧，增加了帧间隔时间\n\n    setPlaybackInterval(interval);\n  }, [activeSessionId, playbackInterval, processEvent, replayState.playbackSpeed, setReplayState]);\n\n  /**\n   * 暂停回放\n   */\n  const pauseReplay = useCallback(() => {\n    if (playbackInterval) {\n      clearInterval(playbackInterval);\n      setPlaybackInterval(null);\n    }\n\n    setReplayState((prev) => ({\n      ...prev,\n      isPaused: true,\n    }));\n  }, [playbackInterval, setReplayState]);\n\n  /**\n   * 跳转到时间轴上的指定位置\n   */\n  const jumpToPosition = useCallback(\n    (position: number) => {\n      // 确保位置在有效范围内\n      const normalizedPosition = Math.max(0, Math.min(1, position));\n\n      if (replayState.events.length === 0 || !activeSessionId) return;\n\n      // 根据位置计算目标事件索引\n      const targetIndex = Math.floor(normalizedPosition * (replayState.events.length - 1));\n\n      // 暂停任何正在进行的回放\n      if (playbackInterval) {\n        clearInterval(playbackInterval);\n        setPlaybackInterval(null);\n      }\n\n      // 处理到新位置\n      processEventsUpToIndex(targetIndex);\n\n      setReplayState((prev) => ({\n        ...prev,\n        isPaused: true,\n        currentEventIndex: targetIndex,\n      }));\n    },\n    [\n      activeSessionId,\n      playbackInterval,\n      processEventsUpToIndex,\n      replayState.events.length,\n      setReplayState,\n    ],\n  );\n\n  /**\n   * 跳转到最终结果\n   */\n  const jumpToResult = useCallback(() => {\n    if (replayState.events.length === 0 || !activeSessionId) return;\n\n    const finalIndex = replayState.events.length - 1;\n\n    // 暂停任何正在进行的回放\n    if (playbackInterval) {\n      clearInterval(playbackInterval);\n      setPlaybackInterval(null);\n    }\n\n    // 处理到最终位置\n    processEventsUpToIndex(finalIndex);\n\n    setReplayState((prev) => ({\n      ...prev,\n      isPaused: true,\n      currentEventIndex: finalIndex,\n    }));\n  }, [\n    activeSessionId,\n    playbackInterval,\n    processEventsUpToIndex,\n    replayState.events.length,\n    setReplayState,\n  ]);\n\n  /**\n   * 设置播放速度\n   */\n  const setPlaybackSpeed = useCallback(\n    (speed: number) => {\n      setReplayState((prev) => ({\n        ...prev,\n        playbackSpeed: speed,\n      }));\n\n      // 如果正在播放，以新速度重启\n      if (!replayState.isPaused && playbackInterval) {\n        clearInterval(playbackInterval);\n        startReplay();\n      }\n    },\n    [playbackInterval, replayState.isPaused, setReplayState, startReplay],\n  );\n\n  /**\n   * 退出回放模式\n   */\n  const exitReplay = useCallback(() => {\n    if (playbackInterval) {\n      clearInterval(playbackInterval);\n    }\n\n    setReplayState((prev) => ({\n      ...prev,\n      isActive: false,\n      isPaused: true,\n      currentEventIndex: -1,\n      events: [],\n      processedEvents: {},\n    }));\n  }, [playbackInterval, setReplayState]);\n\n  /**\n   * 获取当前事件\n   */\n  const getCurrentEvent = useCallback(() => {\n    if (\n      !replayState.isActive ||\n      replayState.currentEventIndex < 0 ||\n      replayState.currentEventIndex >= replayState.events.length\n    ) {\n      return null;\n    }\n\n    return replayState.events[replayState.currentEventIndex];\n  }, [replayState.currentEventIndex, replayState.events, replayState.isActive]);\n\n  /**\n   * 获取当前位置百分比 (0-100)\n   */\n  const getCurrentPosition = useCallback(() => {\n    if (!replayState.isActive || replayState.events.length <= 1) {\n      return 0;\n    }\n\n    return (replayState.currentEventIndex / (replayState.events.length - 1)) * 100;\n  }, [replayState.currentEventIndex, replayState.events.length, replayState.isActive]);\n\n  /**\n   * 获取当前所有事件\n   */\n  const getCurrentEvents = useCallback(() => {\n    if (!replayState.isActive || replayState.currentEventIndex < 0) {\n      return [];\n    }\n\n    return replayState.events.slice(0, replayState.currentEventIndex + 1);\n  }, [replayState.currentEventIndex, replayState.events, replayState.isActive]);\n\n  // 组件卸载时清理定时器\n  useEffect(() => {\n    return () => {\n      if (playbackInterval) {\n        clearInterval(playbackInterval);\n      }\n    };\n  }, [playbackInterval]);\n\n  // 回放模式初始化时：如果索引为-1，需要手动触发第一步，否则会显示为空白\n  useEffect(() => {\n    if (\n      replayState.isActive &&\n      replayState.currentEventIndex === -1 &&\n      replayState.events.length > 0\n    ) {\n      // 如果启动回放后立即跳到第一个事件\n      processEventsUpToIndex(0);\n      setReplayState((prev) => ({\n        ...prev,\n        currentEventIndex: 0,\n      }));\n    }\n  }, [\n    replayState.isActive,\n    replayState.currentEventIndex,\n    replayState.events.length,\n    processEventsUpToIndex,\n    setReplayState,\n  ]);\n\n  /**\n   * 取消自动播放倒计时\n   */\n  const cancelAutoPlay = useCallback(() => {\n    setReplayState((prev) => ({\n      ...prev,\n      autoPlayCountdown: null,\n    }));\n  }, [setReplayState]);\n\n  // 添加对自动播放事件的监听\n  useEffect(() => {\n    const handleAutoStart = () => {\n      console.log('Auto-play event received, starting replay...');\n      startReplay();\n    };\n\n    // 添加事件监听器\n    window.addEventListener('replay-autostart', handleAutoStart);\n\n    // 清理函数\n    return () => {\n      window.removeEventListener('replay-autostart', handleAutoStart);\n    };\n  }, [startReplay]); // 依赖于startReplay函数\n\n  return {\n    // 状态\n    replayState,\n\n    // 操作方法\n    initReplay,\n    startReplay,\n    pauseReplay,\n    jumpToPosition,\n    jumpToResult,\n    setPlaybackSpeed,\n    exitReplay,\n    cancelAutoPlay,\n\n    // 工具方法\n    getCurrentEvents,\n    getCurrentPosition,\n    getCurrentEvent,\n  };\n}"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;;;;;;;;;AASA;AACA;;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;;AAEA;AACA;AAAA;;;;;;AAGA;AAAA;;AAEA;AACA;;AACA;AAAA;AAAA;;;;;;AAGA;;AACA;AAAA;AAAA;;;;;;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;AAOA;AAAA;;AAEA;AACA;AACA;AAEA;AAAA;AACA;;;;;;;;;;;;;;;AAKA;AAAA;AAAA;AACA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA;AAtDA;;AACA;AACA;AAGA;;;AALA;;;;;;;;;;;;;;;;;;;ACzBA;AACA;AACA;AACA;;;;;AACA;;;;AAGA;;;;;;;;;;AAIA;AAEA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AAGA;;;;;AAGA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AAiDA;AA9CA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;AAEA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;;AAEA;AAGA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;;AAEA;AAEA;AAKA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA"}