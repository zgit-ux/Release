"use strict";
self["webpackHotUpdate_agent_tars_web_ui"]("index", {
"./src/entry.css": (function (module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
// extracted by css-extract-rspack-plugin

    if(true) {
      (function() {
        var localsJsonString = undefined;
        // 1749585944213
        var cssReload = (__webpack_require__("../node_modules/.pnpm/@rspack+core@1.3.9_@swc+helpers@0.5.17/node_modules/@rspack/core/dist/cssExtractHmr.js")/* .cssReload */.cssReload)(module.id, {});
        // only invalidate when locals change
        if (
          module.hot.data &&
          module.hot.data.value &&
          module.hot.data.value !== localsJsonString
        ) {
          module.hot.invalidate();
        } else {
          module.hot.accept();
        }
        module.hot.dispose(function(data) {
          data.value = localsJsonString;
          cssReload();
        });
      })();
    }
  

}),
"./src/v2/components/Workspace/WorkspaceDetail.tsx": (function (module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  WorkspaceDetail: () => (WorkspaceDetail)
});
/* ESM import */var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/react@18.3.1/node_modules/react/jsx-dev-runtime.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../node_modules/.pnpm/react@18.3.1/node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* ESM import */var framer_motion__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("../node_modules/.pnpm/framer-motion@10.18.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/render/dom/motion.mjs");
/* ESM import */var _hooks_useSession__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/v2/hooks/useSession.ts");
/* ESM import */var _hooks_useTool__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/v2/hooks/useTool.tsx");
/* ESM import */var react_icons_fi__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("../node_modules/.pnpm/react-icons@4.12.0_react@18.3.1/node_modules/react-icons/fi/index.esm.js");
/* ESM import */var _utils_formatters__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/v2/utils/formatters.ts");
/* ESM import */var _renderers_ToolResultRenderer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./src/v2/components/Workspace/renderers/ToolResultRenderer.tsx");
/* ESM import */var _renderers_ResearchReportRenderer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./src/v2/components/Workspace/renderers/ResearchReportRenderer.tsx");
/* provided dependency */ var $ReactRefreshRuntime$ = __webpack_require__("../node_modules/.pnpm/@rspack+plugin-react-refresh@1.0.3_react-refresh@0.16.0/node_modules/@rspack/plugin-react-refresh/client/reactRefresh.js");

var _s = $RefreshSig$();








/**
 * WorkspaceDetail Component - Displays details of a single tool result or report
 */ const WorkspaceDetail = ()=>{
    var _activePanelContent_toolCallId, _activePanelContent_toolCallId1;
    _s();
    const { activePanelContent, setActivePanelContent, toolResults, activeSessionId } = (0,_hooks_useSession__WEBPACK_IMPORTED_MODULE_2__.useSession)();
    const { getToolIcon } = (0,_hooks_useTool__WEBPACK_IMPORTED_MODULE_3__.useTool)();
    if (!activePanelContent) {
        return null;
    }
    const handleBackToList = ()=>{
        setActivePanelContent(null);
    };
    // 特殊处理 final_answer 类型或研究报告内容
    if ((activePanelContent === null || activePanelContent === void 0 ? void 0 : activePanelContent.type) === 'research_report' || activePanelContent.toolCallId && activePanelContent.toolCallId.startsWith('final-answer')) {
        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_renderers_ResearchReportRenderer__WEBPACK_IMPORTED_MODULE_6__.ResearchReportRenderer, {
            content: typeof activePanelContent.source === 'string' ? activePanelContent.source : JSON.stringify(activePanelContent.source, null, 2),
            title: activePanelContent.title || 'Research Report',
            isStreaming: activePanelContent.isStreaming
        }, void 0, false, {
            fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Workspace/WorkspaceDetail.tsx",
            lineNumber: 32,
            columnNumber: 7
        }, undefined);
    }
    // 特殊处理研究报告内容
    if ((activePanelContent === null || activePanelContent === void 0 ? void 0 : activePanelContent.type) === 'research_report') {
        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_renderers_ResearchReportRenderer__WEBPACK_IMPORTED_MODULE_6__.ResearchReportRenderer, {
            content: activePanelContent.source,
            title: activePanelContent.title,
            isStreaming: activePanelContent.isStreaming
        }, void 0, false, {
            fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Workspace/WorkspaceDetail.tsx",
            lineNumber: 47,
            columnNumber: 7
        }, undefined);
    }
    // Convert legacy format content to standardized tool result parts
    const getStandardizedContent = ()=>{
        const { type, source, title, error, arguments: toolArguments } = activePanelContent;
        // Show error if present
        if (error) {
            return [
                {
                    type: 'text',
                    name: 'ERROR',
                    text: error
                }
            ];
        }
        // Handle browser_vision_control type specifically
        if (type === 'browser_vision_control') {
            // 如果这是环境增强，包含原始截图数据
            const environmentImage = Array.isArray(activePanelContent.originalContent) ? extractImageUrl(activePanelContent.originalContent) : null;
            // Create browser_control part for the specialized renderer
            return [
                {
                    type: 'browser_control',
                    name: 'BROWSER_CONTROL',
                    toolCallId: activePanelContent.toolCallId,
                    thought: (toolArguments === null || toolArguments === void 0 ? void 0 : toolArguments.thought) || '',
                    step: (toolArguments === null || toolArguments === void 0 ? void 0 : toolArguments.step) || '',
                    action: (toolArguments === null || toolArguments === void 0 ? void 0 : toolArguments.action) || '',
                    status: (source === null || source === void 0 ? void 0 : source.status) || 'unknown',
                    environmentImage: environmentImage
                }
            ];
        }
        // Handle array of content parts from environment_input
        if (Array.isArray(source) && source.some((part)=>part.type === 'image_url')) {
            const imagePart = source.find((part)=>part.type === 'image_url');
            if (imagePart && imagePart.image_url && imagePart.image_url.url) {
                const imgSrc = imagePart.image_url.url;
                if (imgSrc.startsWith('data:image/')) {
                    const [mimeTypePrefix, base64Data] = imgSrc.split(',');
                    const mimeType = mimeTypePrefix.split(':')[1].split(';')[0];
                    return [
                        {
                            type: 'image',
                            imageData: base64Data,
                            mimeType,
                            name: activePanelContent.title
                        }
                    ];
                }
            }
        }
        // Based on tool type, convert to standardized format
        switch(type){
            case 'image':
                // Image content
                if (typeof source === 'string' && source.startsWith('data:image/')) {
                    const [mimeTypePrefix, base64Data] = source.split(',');
                    const mimeType = mimeTypePrefix.split(':')[1].split(';')[0];
                    return [
                        {
                            type: 'image',
                            imageData: base64Data,
                            mimeType,
                            name: activePanelContent.title
                        }
                    ];
                }
                return [
                    {
                        type: 'text',
                        text: 'Image could not be displayed'
                    }
                ];
            case 'search':
                // Search results
                if (Array.isArray(source) && source.some((item)=>item.type === 'text')) {
                    // Handle new multimodal format
                    const resultsItem = source.find((item)=>item.name === 'RESULTS');
                    const queryItem = source.find((item)=>item.name === 'QUERY');
                    if (resultsItem && resultsItem.text) {
                        // Parse results text into separate result items
                        const resultBlocks = resultsItem.text.split('---').filter(Boolean);
                        const parsedResults = resultBlocks.map((block)=>{
                            const lines = block.trim().split('\n');
                            const titleLine = lines[0] || '';
                            const urlLine = lines[1] || '';
                            const snippet = lines.slice(2).join('\n');
                            const title = titleLine.replace(/^\[\d+\]\s*/, '').trim();
                            const url = urlLine.replace(/^URL:\s*/, '').trim();
                            return {
                                title,
                                url,
                                snippet
                            };
                        });
                        // Return only the search_result part, removing the redundant text query part
                        return [
                            {
                                type: 'search_result',
                                name: 'SEARCH_RESULTS',
                                results: parsedResults,
                                query: queryItem === null || queryItem === void 0 ? void 0 : queryItem.text
                            }
                        ];
                    }
                }
                // Handle old format
                if (source && typeof source === 'object' && source.results) {
                    return [
                        {
                            type: 'search_result',
                            name: 'SEARCH_RESULTS',
                            results: source.results,
                            query: source.query
                        }
                    ];
                }
                return [
                    {
                        type: 'text',
                        text: typeof source === 'string' ? source : JSON.stringify(source, null, 2)
                    }
                ];
            case 'command':
                // Command results
                if (Array.isArray(source) && source.some((item)=>item.type === 'text')) {
                    var _source_find;
                    // New multimodal format
                    const commandItem = source.find((item)=>item.name === 'COMMAND');
                    const stdoutItem = source.find((item)=>item.name === 'STDOUT');
                    const stderrItem = source.find((item)=>item.name === 'STDERR');
                    return [
                        {
                            type: 'command_result',
                            name: 'COMMAND_RESULT',
                            command: (commandItem === null || commandItem === void 0 ? void 0 : commandItem.text) || (toolArguments === null || toolArguments === void 0 ? void 0 : toolArguments.command),
                            stdout: (stdoutItem === null || stdoutItem === void 0 ? void 0 : stdoutItem.text) || '',
                            stderr: (stderrItem === null || stderrItem === void 0 ? void 0 : stderrItem.text) || '',
                            exitCode: (_source_find = source.find((item)=>item.name === 'EXIT_CODE')) === null || _source_find === void 0 ? void 0 : _source_find.value
                        }
                    ];
                }
                // Old format
                if (source && typeof source === 'object') {
                    return [
                        {
                            type: 'command_result',
                            name: 'COMMAND_RESULT',
                            command: source.command || (toolArguments === null || toolArguments === void 0 ? void 0 : toolArguments.command),
                            stdout: source.output || source.stdout || '',
                            stderr: source.stderr || '',
                            exitCode: source.exitCode
                        }
                    ];
                }
                return [
                    {
                        type: 'text',
                        text: typeof source === 'string' ? source : JSON.stringify(source, null, 2)
                    }
                ];
            case 'browser':
                const toolName = (title === null || title === void 0 ? void 0 : title.toLowerCase()) || '';
                if (toolName.includes('navigate')) {
                    let textContent = '';
                    if (typeof source === 'string') {
                        textContent = source;
                    } else if (Array.isArray(source)) {
                        textContent = source.filter((p)=>p.type === 'text').map((p)=>p.text).join('\n');
                    } else if (typeof source === 'object' && source !== null) {
                        textContent = source.content || source.text || JSON.stringify(source, null, 2);
                    }
                    return [
                        {
                            type: 'text',
                            name: title,
                            text: textContent,
                            showAsRawMarkdown: true
                        }
                    ];
                }
                // Browser results
                if (Array.isArray(source) && source.some((item)=>item.type === 'text')) {
                    // 处理数组格式的浏览器结果
                    const contentText = source.filter((item)=>item.type === 'text').map((item)=>item.text).join('\n');
                    return [
                        {
                            type: 'browser_result',
                            name: 'BROWSER_RESULT',
                            url: extractUrlFromContent(contentText),
                            content: contentText,
                            title: 'Browser Navigation',
                            contentType: 'text'
                        }
                    ];
                }
                // Old format or direct string content
                return [
                    {
                        type: 'browser_result',
                        name: 'BROWSER_RESULT',
                        url: typeof source === 'object' && source.url ? source.url : '',
                        content: typeof source === 'object' ? source.content || source.text || JSON.stringify(source, null, 2) : typeof source === 'string' ? source : JSON.stringify(source, null, 2),
                        contentType: 'text',
                        title: 'Browser Navigation'
                    }
                ];
            case 'file':
                // File results
                if (source && typeof source === 'object') {
                    return [
                        {
                            type: 'text',
                            name: 'FILE_PATH',
                            text: `File: ${source.path || 'Unknown file'}`
                        },
                        {
                            type: 'text',
                            name: 'FILE_CONTENT',
                            text: source.content || 'No content available'
                        }
                    ];
                }
                return [
                    {
                        type: 'text',
                        text: typeof source === 'string' ? source : JSON.stringify(source, null, 2)
                    }
                ];
            default:
                // Default handling for unknown types
                if (typeof source === 'object') {
                    return [
                        {
                            type: 'json',
                            name: 'JSON_DATA',
                            data: source
                        }
                    ];
                }
                return [
                    {
                        type: 'text',
                        text: typeof source === 'string' ? source : JSON.stringify(source, null, 2)
                    }
                ];
        }
    };
    // 辅助函数：从文本内容中提取URL
    const extractUrlFromContent = (content)=>{
        if (typeof content === 'string' && content.includes('Navigated to ')) {
            const lines = content.split('\n');
            const firstLine = lines[0] || '';
            return firstLine.replace('Navigated to ', '').trim();
        }
        return '';
    };
    // 辅助函数：从环境内容中提取图片URL
    const extractImageUrl = (content)=>{
        const imgPart = content.find((part)=>part && part.type === 'image_url' && part.image_url && part.image_url.url);
        return imgPart ? imgPart.image_url.url : null;
    };
    // Handle tool result content action
    const handleContentAction = (action, data)=>{
        if (action === 'zoom' && data.src) {
            // Here you could open a modal with the zoomed image
            console.log('Zoom image:', data.src);
        }
    };
    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_7__.motion.div, {
        initial: {
            opacity: 0
        },
        animate: {
            opacity: 1
        },
        exit: {
            opacity: 0
        },
        className: "h-full flex flex-col",
        children: [
            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                className: "flex items-center justify-between p-4 border-b border-gray-100/40 dark:border-gray-700/20",
                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                    className: "flex items-center",
                    children: [
                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_7__.motion.button, {
                            whileHover: {
                                scale: 1.05,
                                x: -2
                            },
                            whileTap: {
                                scale: 0.95
                            },
                            onClick: handleBackToList,
                            className: "mr-3 p-2 text-gray-600 dark:text-gray-400 hover:bg-gray-100/50 dark:hover:bg-gray-700/30 rounded-lg border border-transparent hover:border-gray-100/40 dark:hover:border-gray-700/30",
                            title: "Back to list",
                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_icons_fi__WEBPACK_IMPORTED_MODULE_8__.FiArrowLeft, {
                                size: 16
                            }, void 0, false, {
                                fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Workspace/WorkspaceDetail.tsx",
                                lineNumber: 381,
                                columnNumber: 13
                            }, undefined)
                        }, void 0, false, {
                            fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Workspace/WorkspaceDetail.tsx",
                            lineNumber: 374,
                            columnNumber: 11
                        }, undefined),
                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                            className: "w-10 h-10 mr-3 rounded-xl flex items-center justify-center relative overflow-hidden",
                            children: [
                                ((_activePanelContent_toolCallId = activePanelContent.toolCallId) === null || _activePanelContent_toolCallId === void 0 ? void 0 : _activePanelContent_toolCallId.startsWith('final-answer')) ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                                    className: "absolute inset-0 bg-gradient-to-br from-accent-400 to-accent-500 opacity-20"
                                }, void 0, false, {
                                    fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Workspace/WorkspaceDetail.tsx",
                                    lineNumber: 387,
                                    columnNumber: 15
                                }, undefined) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                                    className: `absolute inset-0 opacity-20 ${(activePanelContent === null || activePanelContent === void 0 ? void 0 : activePanelContent.type) === 'search' ? 'bg-gradient-to-br from-blue-400 to-indigo-500' : (activePanelContent === null || activePanelContent === void 0 ? void 0 : activePanelContent.type) === 'browser' ? 'bg-gradient-to-br from-purple-400 to-pink-500' : (activePanelContent === null || activePanelContent === void 0 ? void 0 : activePanelContent.type) === 'command' ? 'bg-gradient-to-br from-green-400 to-emerald-500' : (activePanelContent === null || activePanelContent === void 0 ? void 0 : activePanelContent.type) === 'file' ? 'bg-gradient-to-br from-yellow-400 to-amber-500' : (activePanelContent === null || activePanelContent === void 0 ? void 0 : activePanelContent.type) === 'image' ? 'bg-gradient-to-br from-red-400 to-rose-500' : (activePanelContent === null || activePanelContent === void 0 ? void 0 : activePanelContent.type) === 'browser_vision_control' ? 'bg-gradient-to-br from-cyan-400 to-teal-500' : 'bg-gradient-to-br from-gray-400 to-gray-500'}`
                                }, void 0, false, {
                                    fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Workspace/WorkspaceDetail.tsx",
                                    lineNumber: 389,
                                    columnNumber: 15
                                }, undefined),
                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                                    className: "relative z-10",
                                    children: ((_activePanelContent_toolCallId1 = activePanelContent.toolCallId) === null || _activePanelContent_toolCallId1 === void 0 ? void 0 : _activePanelContent_toolCallId1.startsWith('final-answer')) ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_icons_fi__WEBPACK_IMPORTED_MODULE_8__.FiBookOpen, {
                                        className: "text-accent-600 dark:text-accent-400",
                                        size: 20
                                    }, void 0, false, {
                                        fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Workspace/WorkspaceDetail.tsx",
                                        lineNumber: 409,
                                        columnNumber: 17
                                    }, undefined) : getToolIcon((activePanelContent === null || activePanelContent === void 0 ? void 0 : activePanelContent.type) || 'other')
                                }, void 0, false, {
                                    fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Workspace/WorkspaceDetail.tsx",
                                    lineNumber: 407,
                                    columnNumber: 13
                                }, undefined)
                            ]
                        }, void 0, true, {
                            fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Workspace/WorkspaceDetail.tsx",
                            lineNumber: 384,
                            columnNumber: 11
                        }, undefined),
                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                            children: [
                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("h2", {
                                    className: "font-medium text-gray-800 dark:text-gray-200 text-lg leading-tight",
                                    children: activePanelContent.title
                                }, void 0, false, {
                                    fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Workspace/WorkspaceDetail.tsx",
                                    lineNumber: 417,
                                    columnNumber: 13
                                }, undefined),
                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                                    className: "text-xs text-gray-500 dark:text-gray-400",
                                    children: (0,_utils_formatters__WEBPACK_IMPORTED_MODULE_4__.formatTimestamp)(activePanelContent.timestamp)
                                }, void 0, false, {
                                    fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Workspace/WorkspaceDetail.tsx",
                                    lineNumber: 420,
                                    columnNumber: 13
                                }, undefined)
                            ]
                        }, void 0, true, {
                            fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Workspace/WorkspaceDetail.tsx",
                            lineNumber: 416,
                            columnNumber: 11
                        }, undefined)
                    ]
                }, void 0, true, {
                    fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Workspace/WorkspaceDetail.tsx",
                    lineNumber: 373,
                    columnNumber: 9
                }, undefined)
            }, void 0, false, {
                fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Workspace/WorkspaceDetail.tsx",
                lineNumber: 372,
                columnNumber: 7
            }, undefined),
            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                className: "flex-1 overflow-auto bg-gray-50/50 dark:bg-gray-900/30 p-6",
                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_renderers_ToolResultRenderer__WEBPACK_IMPORTED_MODULE_5__.ToolResultRenderer, {
                    content: getStandardizedContent(),
                    onAction: handleContentAction
                }, void 0, false, {
                    fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Workspace/WorkspaceDetail.tsx",
                    lineNumber: 429,
                    columnNumber: 9
                }, undefined)
            }, void 0, false, {
                fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Workspace/WorkspaceDetail.tsx",
                lineNumber: 428,
                columnNumber: 7
            }, undefined)
        ]
    }, void 0, true, {
        fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Workspace/WorkspaceDetail.tsx",
        lineNumber: 365,
        columnNumber: 5
    }, undefined);
};
_s(WorkspaceDetail, "VNNBR3Un3JO5k7MsApKTLgX8me4=", false, function() {
    return [
        _hooks_useSession__WEBPACK_IMPORTED_MODULE_2__.useSession,
        _hooks_useTool__WEBPACK_IMPORTED_MODULE_3__.useTool
    ];
});
_c = WorkspaceDetail;
var _c;
$RefreshReg$(_c, "WorkspaceDetail");

function $RefreshSig$() {
  return $ReactRefreshRuntime$.createSignatureFunctionForTransform();
}
function $RefreshReg$(type, id) {
  $ReactRefreshRuntime$.register(type, module.id + "_" + id);
}
Promise.resolve().then(function() {
  $ReactRefreshRuntime$.refresh(module.id, module.hot);
});


}),
"./src/v2/components/Workspace/renderers/ResearchReportRenderer.tsx": (function (module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  ResearchReportRenderer: () => (ResearchReportRenderer)
});
/* ESM import */var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/react@18.3.1/node_modules/react/jsx-dev-runtime.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../node_modules/.pnpm/react@18.3.1/node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* ESM import */var framer_motion__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../node_modules/.pnpm/framer-motion@10.18.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/render/dom/motion.mjs");
/* ESM import */var react_icons_fi__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../node_modules/.pnpm/react-icons@4.12.0_react@18.3.1/node_modules/react-icons/fi/index.esm.js");
/* ESM import */var _Markdown__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/v2/components/Markdown/index.tsx");
/* provided dependency */ var $ReactRefreshRuntime$ = __webpack_require__("../node_modules/.pnpm/@rspack+plugin-react-refresh@1.0.3_react-refresh@0.16.0/node_modules/@rspack/plugin-react-refresh/client/reactRefresh.js");

var _s = $RefreshSig$();




/**
 * Research Report Renderer - Displays a detailed research report with proper formatting
 *
 * Features:
 * - Elegant markdown rendering with document styling
 * - Download capability for saving reports
 * - Animated indicators for streaming content
 * - Smooth transitions for content updates
 * - Auto-scrolling during streaming updates
 */ const ResearchReportRenderer = (param)=>{
    let { content, title = 'Research Report', isStreaming = false } = param;
    _s();
    const [scrollToBottom, setScrollToBottom] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);
    const contentRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);
    // 处理内容格式化，确保始终是字符串
    const formattedContent = react__WEBPACK_IMPORTED_MODULE_1___default().useMemo(()=>{
        if (typeof content === 'string') {
            return content;
        }
        // 如果不是字符串，尝试转换为 JSON 字符串
        try {
            return JSON.stringify(content, null, 2);
        } catch (e) {
            return String(content);
        }
    }, [
        content
    ]);
    // Auto-scroll to bottom when streaming content
    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{
        if (isStreaming && scrollToBottom && contentRef.current) {
            contentRef.current.scrollTop = contentRef.current.scrollHeight;
        }
    }, [
        content,
        isStreaming,
        scrollToBottom
    ]);
    // Handle content scroll
    const handleScroll = ()=>{
        if (!contentRef.current) return;
        const { scrollTop, scrollHeight, clientHeight } = contentRef.current;
        const isNearBottom = scrollHeight - scrollTop - clientHeight < 100;
        setScrollToBottom(isNearBottom);
    };
    // Handle report download
    const handleDownload = ()=>{
        const blob = new Blob([
            content
        ], {
            type: 'text/markdown'
        });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `${title.replace(/[^\w\s-]/g, '')}.md`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
    };
    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
        className: "h-full flex flex-col",
        children: [
            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                className: "flex items-center justify-between p-4 border-b border-gray-100/40 dark:border-gray-700/20",
                children: [
                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                        className: "flex items-center",
                        children: [
                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                                className: "w-10 h-10 mr-3 rounded-xl bg-gradient-to-br from-accent-100 to-accent-200 dark:from-accent-900/30 dark:to-accent-800/30 flex items-center justify-center border border-accent-200/40 dark:border-accent-700/30",
                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_icons_fi__WEBPACK_IMPORTED_MODULE_3__.FiBookOpen, {
                                    className: "text-accent-600 dark:text-accent-400",
                                    size: 18
                                }, void 0, false, {
                                    fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Workspace/renderers/ResearchReportRenderer.tsx",
                                    lineNumber: 82,
                                    columnNumber: 13
                                }, undefined)
                            }, void 0, false, {
                                fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Workspace/renderers/ResearchReportRenderer.tsx",
                                lineNumber: 81,
                                columnNumber: 11
                            }, undefined),
                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                                children: [
                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("h2", {
                                        className: "font-medium text-gray-800 dark:text-gray-200 text-lg leading-tight",
                                        children: title
                                    }, void 0, false, {
                                        fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Workspace/renderers/ResearchReportRenderer.tsx",
                                        lineNumber: 85,
                                        columnNumber: 13
                                    }, undefined),
                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                                        className: "text-xs text-gray-500 dark:text-gray-400 flex items-center",
                                        children: isStreaming ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {
                                            children: [
                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_icons_fi__WEBPACK_IMPORTED_MODULE_3__.FiLoader, {
                                                    className: "mr-1.5 animate-spin",
                                                    size: 10
                                                }, void 0, false, {
                                                    fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Workspace/renderers/ResearchReportRenderer.tsx",
                                                    lineNumber: 91,
                                                    columnNumber: 19
                                                }, undefined),
                                                "Generating report..."
                                            ]
                                        }, void 0, true) : 'Research Report'
                                    }, void 0, false, {
                                        fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Workspace/renderers/ResearchReportRenderer.tsx",
                                        lineNumber: 88,
                                        columnNumber: 13
                                    }, undefined)
                                ]
                            }, void 0, true, {
                                fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Workspace/renderers/ResearchReportRenderer.tsx",
                                lineNumber: 84,
                                columnNumber: 11
                            }, undefined)
                        ]
                    }, void 0, true, {
                        fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Workspace/renderers/ResearchReportRenderer.tsx",
                        lineNumber: 80,
                        columnNumber: 9
                    }, undefined),
                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_4__.motion.button, {
                        whileHover: {
                            scale: 1.05
                        },
                        whileTap: {
                            scale: 0.95
                        },
                        onClick: handleDownload,
                        className: "ml-3 p-2 rounded-xl text-gray-600 dark:text-gray-400 hover:bg-gray-100/50 dark:hover:bg-gray-700/30 hover:text-accent-600 dark:hover:text-accent-400 transition-colors border border-transparent hover:border-gray-100/40 dark:hover:border-gray-700/30",
                        title: "Download Report",
                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_icons_fi__WEBPACK_IMPORTED_MODULE_3__.FiDownload, {
                            size: 20
                        }, void 0, false, {
                            fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Workspace/renderers/ResearchReportRenderer.tsx",
                            lineNumber: 108,
                            columnNumber: 11
                        }, undefined)
                    }, void 0, false, {
                        fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Workspace/renderers/ResearchReportRenderer.tsx",
                        lineNumber: 101,
                        columnNumber: 9
                    }, undefined)
                ]
            }, void 0, true, {
                fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Workspace/renderers/ResearchReportRenderer.tsx",
                lineNumber: 79,
                columnNumber: 7
            }, undefined),
            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                ref: contentRef,
                className: "flex-1 overflow-auto p-6 bg-white dark:bg-gray-800",
                onScroll: handleScroll,
                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                    className: "max-w-4xl mx-auto",
                    children: [
                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                            className: "research-report prose prose-slate lg:prose-lg dark:prose-invert max-w-none",
                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_Markdown__WEBPACK_IMPORTED_MODULE_2__.MarkdownRenderer, {
                                content: formattedContent
                            }, void 0, false, {
                                fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Workspace/renderers/ResearchReportRenderer.tsx",
                                lineNumber: 120,
                                columnNumber: 13
                            }, undefined)
                        }, void 0, false, {
                            fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Workspace/renderers/ResearchReportRenderer.tsx",
                            lineNumber: 119,
                            columnNumber: 11
                        }, undefined),
                        isStreaming && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                            className: "flex items-center justify-center py-6 text-accent-500 dark:text-accent-400",
                            children: [
                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_icons_fi__WEBPACK_IMPORTED_MODULE_3__.FiLoader, {
                                    className: "animate-spin mr-2",
                                    size: 16
                                }, void 0, false, {
                                    fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Workspace/renderers/ResearchReportRenderer.tsx",
                                    lineNumber: 126,
                                    columnNumber: 15
                                }, undefined),
                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("span", {
                                    className: "text-sm",
                                    children: "Generating report..."
                                }, void 0, false, {
                                    fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Workspace/renderers/ResearchReportRenderer.tsx",
                                    lineNumber: 127,
                                    columnNumber: 15
                                }, undefined)
                            ]
                        }, void 0, true, {
                            fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Workspace/renderers/ResearchReportRenderer.tsx",
                            lineNumber: 125,
                            columnNumber: 13
                        }, undefined)
                    ]
                }, void 0, true, {
                    fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Workspace/renderers/ResearchReportRenderer.tsx",
                    lineNumber: 118,
                    columnNumber: 9
                }, undefined)
            }, void 0, false, {
                fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Workspace/renderers/ResearchReportRenderer.tsx",
                lineNumber: 113,
                columnNumber: 7
            }, undefined)
        ]
    }, void 0, true, {
        fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Workspace/renderers/ResearchReportRenderer.tsx",
        lineNumber: 77,
        columnNumber: 5
    }, undefined);
};
_s(ResearchReportRenderer, "jE30DxOvenMAdiB+cmOybk5Gu/I=");
_c = ResearchReportRenderer;
var _c;
$RefreshReg$(_c, "ResearchReportRenderer");

function $RefreshSig$() {
  return $ReactRefreshRuntime$.createSignatureFunctionForTransform();
}
function $RefreshReg$(type, id) {
  $ReactRefreshRuntime$.register(type, module.id + "_" + id);
}
Promise.resolve().then(function() {
  $ReactRefreshRuntime$.refresh(module.id, module.hot);
});


}),
"./src/v2/state/actions/eventProcessor.ts": (function (module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  processEventAction: () => (processEventAction),
  updateProcessingStatusAction: () => (updateProcessingStatusAction)
});
/* ESM import */var jotai__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("../node_modules/.pnpm/jotai@2.12.5_@types+react@18.3.23_react@18.3.1/node_modules/jotai/esm/vanilla.mjs");
/* ESM import */var uuid__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-browser/v4.js");
/* ESM import */var _atoms_message__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/v2/state/atoms/message.ts");
/* ESM import */var _atoms_tool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/v2/state/atoms/tool.ts");
/* ESM import */var _atoms_ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/v2/state/atoms/ui.ts");
/* ESM import */var _utils_formatters__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/v2/utils/formatters.ts");
/* ESM import */var _atoms_plan__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/v2/state/atoms/plan.ts");
/* ESM import */var _atoms_replay__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./src/v2/state/atoms/replay.ts");
/* provided dependency */ var $ReactRefreshRuntime$ = __webpack_require__("../node_modules/.pnpm/@rspack+plugin-react-refresh@1.0.3_react-refresh@0.16.0/node_modules/@rspack/plugin-react-refresh/client/reactRefresh.js");
/* eslint-disable @typescript-eslint/no-explicit-any */ 







// 存储工具调用参数的映射表 (不是 Atom，是内部缓存)
const toolCallArgumentsMap = new Map();
/**
 * Process a single event and update the appropriate state atoms
 */ const processEventAction = (0,jotai__WEBPACK_IMPORTED_MODULE_6__.atom)(null, (get, set, params)=>{
    const { sessionId, event } = params;
    const replayState = get(_atoms_replay__WEBPACK_IMPORTED_MODULE_5__.replayStateAtom);
    const isReplayMode = replayState.isActive;
    console.log('[GUI] event.type', event.type);
    switch(event.type){
        case 'user_message':
            handleUserMessage(set, sessionId, event);
            break;
        case 'assistant_message':
            handleAssistantMessage(get, set, sessionId, event);
            break;
        case 'assistant_streaming_message':
            if (!isReplayMode) {
                handleStreamingMessage(get, set, sessionId, event);
            }
            break;
        case 'assistant_thinking_message':
        case 'assistant_streaming_thinking_message':
            handleThinkingMessage(get, set, sessionId, event);
            break;
        case 'tool_call':
            handleToolCall(set, sessionId, event);
            break;
        case 'tool_result':
            handleToolResult(set, sessionId, event);
            break;
        case 'system':
            handleSystemMessage(set, sessionId, event);
            break;
        case 'environment_input':
            handleEnvironmentInput(set, sessionId, event);
            break;
        case 'agent_run_start':
            set(_atoms_ui__WEBPACK_IMPORTED_MODULE_2__.isProcessingAtom, true);
            break;
        case 'agent_run_end':
            set(_atoms_ui__WEBPACK_IMPORTED_MODULE_2__.isProcessingAtom, false);
            break;
        case 'plan_start':
            handlePlanStart(set, sessionId, event);
            break;
        case 'plan_update':
            handlePlanUpdate(set, sessionId, event);
            break;
        case 'plan_finish':
            handlePlanFinish(set, sessionId, event);
            break;
        case 'final_answer':
            handleFinalAnswer(get, set, sessionId, event);
            break;
        case 'final_answer_streaming':
            if (!isReplayMode) {
                handleFinalAnswerStreaming(get, set, sessionId, event);
            }
            break;
    }
});
const updateProcessingStatusAction = (0,jotai__WEBPACK_IMPORTED_MODULE_6__.atom)(null, (get, set, status)=>{
    // Update processing state
    set(_atoms_ui__WEBPACK_IMPORTED_MODULE_2__.isProcessingAtom, !!status.isProcessing);
});
/**
 * Handle user message event
 */ function handleUserMessage(set, sessionId, event) {
    const userMessage = {
        id: event.id,
        role: 'user',
        content: event.content,
        timestamp: event.timestamp
    };
    set(_atoms_message__WEBPACK_IMPORTED_MODULE_0__.messagesAtom, (prev)=>{
        const sessionMessages = prev[sessionId] || [];
        return {
            ...prev,
            [sessionId]: [
                ...sessionMessages,
                userMessage
            ]
        };
    });
    // Check for images in user message and set active panel content if found
    if (Array.isArray(event.content)) {
        const images = event.content.filter((part)=>part.type === 'image_url');
        if (images.length > 0) {
            set(_atoms_ui__WEBPACK_IMPORTED_MODULE_2__.activePanelContentAtom, {
                type: 'image',
                source: images[0].image_url.url,
                title: 'User Upload',
                timestamp: Date.now()
            });
        }
    }
}
/**
 * Handle assistant message event (complete message)
 */ function handleAssistantMessage(get, set, sessionId, event) {
    // 获取消息ID
    const messageId = event.messageId;
    set(_atoms_message__WEBPACK_IMPORTED_MODULE_0__.messagesAtom, (prev)=>{
        const sessionMessages = prev[sessionId] || [];
        // 检查是否已存在相同messageId的消息
        if (messageId) {
            const existingMessageIndex = sessionMessages.findIndex((msg)=>msg.messageId === messageId);
            // 如果找到了现有消息，更新它而不是添加新消息
            if (existingMessageIndex !== -1) {
                const updatedMessages = [
                    ...sessionMessages
                ];
                updatedMessages[existingMessageIndex] = {
                    ...updatedMessages[existingMessageIndex],
                    content: event.content,
                    timestamp: event.timestamp,
                    toolCalls: event.toolCalls,
                    finishReason: event.finishReason,
                    isStreaming: false
                };
                return {
                    ...prev,
                    [sessionId]: updatedMessages
                };
            }
        }
        // 没有找到现有消息，添加新消息
        return {
            ...prev,
            [sessionId]: [
                ...sessionMessages,
                {
                    id: event.id,
                    role: 'assistant',
                    content: event.content,
                    timestamp: event.timestamp,
                    toolCalls: event.toolCalls,
                    finishReason: event.finishReason,
                    messageId: messageId
                }
            ]
        };
    });
    set(_atoms_ui__WEBPACK_IMPORTED_MODULE_2__.isProcessingAtom, false);
}
/**
 * Handle streaming message event (incremental content)
 */ function handleStreamingMessage(get, set, sessionId, event) {
    set(_atoms_message__WEBPACK_IMPORTED_MODULE_0__.messagesAtom, (prev)=>{
        const sessionMessages = prev[sessionId] || [];
        const messageIdToFind = event.messageId;
        let existingMessageIndex = -1;
        // 优先按messageId查找
        if (messageIdToFind) {
            existingMessageIndex = sessionMessages.findIndex((msg)=>msg.messageId === messageIdToFind);
        } else if (sessionMessages.length > 0) {
            const lastMessageIndex = sessionMessages.length - 1;
            const lastMessage = sessionMessages[lastMessageIndex];
            if (lastMessage && lastMessage.isStreaming) {
                existingMessageIndex = lastMessageIndex;
            }
        }
        // 更新现有消息
        if (existingMessageIndex !== -1) {
            const existingMessage = sessionMessages[existingMessageIndex];
            const updatedMessage = {
                ...existingMessage,
                content: typeof existingMessage.content === 'string' ? existingMessage.content + event.content : event.content,
                isStreaming: !event.isComplete,
                toolCalls: event.toolCalls || existingMessage.toolCalls
            };
            return {
                ...prev,
                [sessionId]: [
                    ...sessionMessages.slice(0, existingMessageIndex),
                    updatedMessage,
                    ...sessionMessages.slice(existingMessageIndex + 1)
                ]
            };
        }
        // 创建新消息
        const newMessage = {
            id: event.id || (0,uuid__WEBPACK_IMPORTED_MODULE_7__["default"])(),
            role: 'assistant',
            content: event.content,
            timestamp: event.timestamp,
            isStreaming: !event.isComplete,
            toolCalls: event.toolCalls,
            messageId: event.messageId
        };
        return {
            ...prev,
            [sessionId]: [
                ...sessionMessages,
                newMessage
            ]
        };
    });
    if (event.isComplete) {
        set(_atoms_ui__WEBPACK_IMPORTED_MODULE_2__.isProcessingAtom, false);
    }
}
/**
 * Handle thinking message event
 */ function handleThinkingMessage(get, set, sessionId, event) {
    set(_atoms_message__WEBPACK_IMPORTED_MODULE_0__.messagesAtom, (prev)=>{
        const sessionMessages = prev[sessionId] || [];
        const lastAssistantIndex = [
            ...sessionMessages
        ].reverse().findIndex((m)=>m.role === 'assistant');
        if (lastAssistantIndex !== -1) {
            const actualIndex = sessionMessages.length - 1 - lastAssistantIndex;
            const message = sessionMessages[actualIndex];
            return {
                ...prev,
                [sessionId]: [
                    ...sessionMessages.slice(0, actualIndex),
                    {
                        ...message,
                        thinking: event.content
                    },
                    ...sessionMessages.slice(actualIndex + 1)
                ]
            };
        }
        return prev;
    });
}
/**
 * Handle tool call event - store arguments for later use
 */ function handleToolCall(set, sessionId, event) {
    // 保存工具调用的参数信息以便后续使用
    if (event.toolCallId && event.arguments) {
        toolCallArgumentsMap.set(event.toolCallId, event.arguments);
    }
    console.log('Tool call stored:', event.name, event.toolCallId);
}
/**
 * Handle tool result event
 */ function handleToolResult(set, sessionId, event) {
    // 获取之前存储的参数信息
    const args = toolCallArgumentsMap.get(event.toolCallId);
    // 添加调试日志来跟踪内容格式
    console.log(`Tool result for ${event.name}:`, {
        content: event.content,
        isArray: Array.isArray(event.content),
        hasTextItems: Array.isArray(event.content) && event.content.some((item)=>item.type === 'text'),
        names: Array.isArray(event.content) ? event.content.map((item)=>item.name) : 'not-an-array'
    });
    // 如果内容是标准化工具结果格式的数组，则直接使用
    const isStandardFormat = Array.isArray(event.content) && event.content.length > 0 && typeof event.content[0] === 'object' && 'type' in event.content[0];
    const result = {
        id: (0,uuid__WEBPACK_IMPORTED_MODULE_7__["default"])(),
        toolCallId: event.toolCallId,
        name: event.name,
        content: event.content,
        timestamp: event.timestamp,
        error: event.error,
        type: (0,_utils_formatters__WEBPACK_IMPORTED_MODULE_3__.determineToolType)(event.name, event.content),
        arguments: args
    };
    // 添加调试日志，显示确定的类型
    console.log(`Determined type for ${event.name}: ${result.type}`);
    // 如果是browser_vision_control工具，检查是否有关联的环境输入面板
    if (result.type === 'browser_vision_control') {
        // 获取当前活动面板内容
        set(_atoms_ui__WEBPACK_IMPORTED_MODULE_2__.activePanelContentAtom, (prev)=>{
            // 如果当前面板是图片类型且来自环境输入，则进行增强而非替换
            if (prev && prev.type === 'image' && prev.environmentId) {
                return {
                    ...prev,
                    type: 'browser_vision_control',
                    source: event.content,
                    title: prev.title,
                    timestamp: event.timestamp,
                    toolCallId: event.toolCallId,
                    error: event.error,
                    arguments: args,
                    originalContent: prev.source,
                    environmentId: prev.environmentId
                };
            } else {
                // 否则使用标准处理方式
                return {
                    type: result.type,
                    source: result.content,
                    title: result.name,
                    timestamp: result.timestamp,
                    toolCallId: result.toolCallId,
                    error: result.error,
                    arguments: args
                };
            }
        });
    } else {
        // 非browser_vision_control工具使用标准处理
        set(_atoms_ui__WEBPACK_IMPORTED_MODULE_2__.activePanelContentAtom, {
            type: result.type,
            source: result.content,
            title: result.name,
            timestamp: result.timestamp,
            toolCallId: result.toolCallId,
            error: result.error,
            arguments: args
        });
    }
    // Store in the map for future reference
    _atoms_tool__WEBPACK_IMPORTED_MODULE_1__.toolCallResultMap.set(result.toolCallId, result);
    // Add to toolResults atom
    set(_atoms_tool__WEBPACK_IMPORTED_MODULE_1__.toolResultsAtom, (prev)=>{
        const sessionResults = prev[sessionId] || [];
        return {
            ...prev,
            [sessionId]: [
                ...sessionResults,
                result
            ]
        };
    });
    // Link to message with this tool call
    set(_atoms_message__WEBPACK_IMPORTED_MODULE_0__.messagesAtom, (prev)=>{
        const sessionMessages = prev[sessionId] || [];
        // Find message with this tool call
        const messageIndex = [
            ...sessionMessages
        ].reverse().findIndex((m)=>{
            var _m_toolCalls;
            return (_m_toolCalls = m.toolCalls) === null || _m_toolCalls === void 0 ? void 0 : _m_toolCalls.some((tc)=>tc.id === result.toolCallId);
        });
        if (messageIndex !== -1) {
            const actualIndex = sessionMessages.length - 1 - messageIndex;
            const message = sessionMessages[actualIndex];
            const toolResults = message.toolResults || [];
            const updatedMessage = {
                ...message,
                toolResults: [
                    ...toolResults,
                    result
                ]
            };
            return {
                ...prev,
                [sessionId]: [
                    ...sessionMessages.slice(0, actualIndex),
                    updatedMessage,
                    ...sessionMessages.slice(actualIndex + 1)
                ]
            };
        }
        return prev;
    });
}
/**
 * Handle system message event
 */ function handleSystemMessage(set, sessionId, event) {
    const systemMessage = {
        id: (0,uuid__WEBPACK_IMPORTED_MODULE_7__["default"])(),
        role: 'system',
        content: event.message,
        timestamp: event.timestamp || Date.now()
    };
    set(_atoms_message__WEBPACK_IMPORTED_MODULE_0__.messagesAtom, (prev)=>{
        const sessionMessages = prev[sessionId] || [];
        return {
            ...prev,
            [sessionId]: [
                ...sessionMessages,
                systemMessage
            ]
        };
    });
}
/**
 * Handle environment input event
 * Adds it to messages but doesn't set it as active panel content
 */ function handleEnvironmentInput(set, sessionId, event) {
    const environmentMessage = {
        id: event.id,
        role: 'environment',
        content: event.content,
        timestamp: event.timestamp,
        description: event.description || 'Environment Input'
    };
    console.log('[GUI] environmentMessage', environmentMessage);
    set(_atoms_message__WEBPACK_IMPORTED_MODULE_0__.messagesAtom, (prev)=>{
        const sessionMessages = prev[sessionId] || [];
        return {
            ...prev,
            [sessionId]: [
                ...sessionMessages,
                environmentMessage
            ]
        };
    });
    // 检查是否包含图片内容并直接设置为活动面板内容
    if (Array.isArray(event.content)) {
        const imageContent = event.content.find((item)=>item.type === 'image_url' && item.image_url && item.image_url.url);
        if (imageContent && imageContent.image_url) {
            set(_atoms_ui__WEBPACK_IMPORTED_MODULE_2__.activePanelContentAtom, (prev)=>{
                console.log('[GUI] prev', prev === null || prev === void 0 ? void 0 : prev.type);
                // 如果当前面板是来自 browser_vision_control，选择增强而不是替换
                if (prev && prev.type === 'browser_vision_control') {
                    console.log('[GUI] prev event.content', event.content);
                    return {
                        ...prev,
                        type: 'browser_vision_control',
                        title: `${prev.title} - New Screenshot`,
                        timestamp: event.timestamp,
                        originalContent: event.content,
                        environmentId: prev.environmentId
                    };
                } else {
                    console.log('[GUI] prev', 111);
                    // 否则使用标准处理方式
                    return {
                        type: 'image',
                        source: event.content,
                        title: event.description || 'Browser Screenshot',
                        timestamp: event.timestamp,
                        environmentId: event.id
                    };
                }
            });
        }
    }
}
/**
 * Handle plan start event
 */ function handlePlanStart(set, sessionId, event) {
    console.log('Plan start event:', event);
    set(_atoms_plan__WEBPACK_IMPORTED_MODULE_4__.plansAtom, (prev)=>({
            ...prev,
            [sessionId]: {
                steps: [],
                isComplete: false,
                summary: null,
                hasGeneratedPlan: true,
                keyframes: []
            }
        }));
}
/**
 * Handle plan update event
 */ function handlePlanUpdate(set, sessionId, event) {
    console.log('Plan update event:', event);
    set(_atoms_plan__WEBPACK_IMPORTED_MODULE_4__.plansAtom, (prev)=>{
        const currentPlan = prev[sessionId] || {
            steps: [],
            isComplete: false,
            summary: null,
            hasGeneratedPlan: true,
            keyframes: []
        };
        // Create a new keyframe for this update
        const newKeyframe = {
            timestamp: event.timestamp || Date.now(),
            steps: event.steps,
            isComplete: false,
            summary: null
        };
        // Add the keyframe to the history
        const keyframes = [
            ...currentPlan.keyframes || [],
            newKeyframe
        ];
        return {
            ...prev,
            [sessionId]: {
                ...currentPlan,
                steps: event.steps,
                hasGeneratedPlan: true,
                keyframes
            }
        };
    });
}
/**
 * Handle plan finish event
 */ function handlePlanFinish(set, sessionId, event) {
    console.log('Plan finish event:', event);
    set(_atoms_plan__WEBPACK_IMPORTED_MODULE_4__.plansAtom, (prev)=>{
        const currentPlan = prev[sessionId] || {
            steps: [],
            isComplete: false,
            summary: null,
            hasGeneratedPlan: true,
            keyframes: []
        };
        // Create a final keyframe for the completed plan
        const finalKeyframe = {
            timestamp: event.timestamp || Date.now(),
            steps: currentPlan.steps,
            isComplete: true,
            summary: event.summary
        };
        // Add the final keyframe to the history
        const keyframes = [
            ...currentPlan.keyframes || [],
            finalKeyframe
        ];
        return {
            ...prev,
            [sessionId]: {
                ...currentPlan,
                isComplete: true,
                summary: event.summary,
                keyframes
            }
        };
    });
}
/**
 * Handle final answer event (complete answer/report)
 */ function handleFinalAnswer(get, set, sessionId, event) {
    const messageId = event.messageId || `final-answer-${(0,uuid__WEBPACK_IMPORTED_MODULE_7__["default"])()}`;
    // 始终将内容当作研究报告处理，移除JSON_DATA状态
    // 设置活动面板内容为研究报告
    set(_atoms_ui__WEBPACK_IMPORTED_MODULE_2__.activePanelContentAtom, {
        type: 'research_report',
        source: event.content,
        title: event.title || 'Research Report',
        timestamp: event.timestamp,
        isDeepResearch: true,
        messageId
    });
    // 添加消息到聊天引用报告
    const finalAnswerMessage = {
        id: event.id || (0,uuid__WEBPACK_IMPORTED_MODULE_7__["default"])(),
        role: 'final_answer',
        content: event.content,
        timestamp: event.timestamp,
        messageId,
        isDeepResearch: true,
        title: event.title || 'Research Report'
    };
    set(_atoms_message__WEBPACK_IMPORTED_MODULE_0__.messagesAtom, (prev)=>{
        const sessionMessages = prev[sessionId] || [];
        return {
            ...prev,
            [sessionId]: [
                ...sessionMessages,
                finalAnswerMessage
            ]
        };
    });
    // 标记处理完成
    set(_atoms_ui__WEBPACK_IMPORTED_MODULE_2__.isProcessingAtom, false);
}
function handleFinalAnswerStreaming(get, set, sessionId, event) {
    const messageId = event.messageId || `final-answer-${(0,uuid__WEBPACK_IMPORTED_MODULE_7__["default"])()}`;
    // 从当前消息列表中查找已有的相同 messageId 的消息
    const messages = get(_atoms_message__WEBPACK_IMPORTED_MODULE_0__.messagesAtom)[sessionId] || [];
    const existingMessageIndex = messages.findIndex((msg)=>msg.messageId === messageId);
    // 当处理一系列流式事件时，将内容追加到现有消息，或创建新消息
    set(_atoms_message__WEBPACK_IMPORTED_MODULE_0__.messagesAtom, (prev)=>{
        const sessionMessages = prev[sessionId] || [];
        // 如果找到现有消息，则更新它
        if (existingMessageIndex >= 0) {
            const existingMessage = sessionMessages[existingMessageIndex];
            const updatedMessage = {
                ...existingMessage,
                content: typeof existingMessage.content === 'string' ? existingMessage.content + event.content : event.content,
                isStreaming: !event.isComplete,
                timestamp: event.timestamp
            };
            return {
                ...prev,
                [sessionId]: [
                    ...sessionMessages.slice(0, existingMessageIndex),
                    updatedMessage,
                    ...sessionMessages.slice(existingMessageIndex + 1)
                ]
            };
        }
        // 否则创建新消息
        const newMessage = {
            id: event.id || (0,uuid__WEBPACK_IMPORTED_MODULE_7__["default"])(),
            role: 'final_answer',
            content: event.content,
            timestamp: event.timestamp,
            messageId,
            isDeepResearch: true,
            isStreaming: !event.isComplete,
            title: event.title || 'Research Report'
        };
        return {
            ...prev,
            [sessionId]: [
                ...sessionMessages,
                newMessage
            ]
        };
    });
    // 更新活动面板内容 - 同步面板与消息状态
    set(_atoms_ui__WEBPACK_IMPORTED_MODULE_2__.activePanelContentAtom, (prev)=>{
        // 如果是新流或不同的messageId，重新开始
        if (!prev || prev.type !== 'research_report' || prev.messageId !== messageId) {
            return {
                role: 'assistant',
                type: 'research_report',
                source: event.content,
                title: event.title || 'Research Report (Generating...)',
                timestamp: event.timestamp,
                isDeepResearch: true,
                messageId,
                isStreaming: !event.isComplete
            };
        }
        // 否则追加到现有内容
        return {
            ...prev,
            source: prev.source + event.content,
            isStreaming: !event.isComplete,
            timestamp: event.timestamp,
            title: event.title || prev.title
        };
    });
    // 如果这是第一个数据块，也添加一条消息到聊天
    const prevActivePanelContent = get(_atoms_ui__WEBPACK_IMPORTED_MODULE_2__.activePanelContentAtom);
    if (!prevActivePanelContent || prevActivePanelContent.messageId !== messageId) {
        const initialMessage = {
            id: event.id || (0,uuid__WEBPACK_IMPORTED_MODULE_7__["default"])(),
            role: 'final_answer',
            content: event.content,
            timestamp: event.timestamp,
            messageId,
            isDeepResearch: true,
            isStreaming: !event.isComplete,
            title: event.title || 'Research Report'
        };
        set(_atoms_message__WEBPACK_IMPORTED_MODULE_0__.messagesAtom, (prev)=>{
            const sessionMessages = prev[sessionId] || [];
            return {
                ...prev,
                [sessionId]: [
                    ...sessionMessages,
                    initialMessage
                ]
            };
        });
    } else if (event.isComplete) {
        // 当流式生成完成时，更新消息的完整内容
        const fullContent = get(_atoms_ui__WEBPACK_IMPORTED_MODULE_2__.activePanelContentAtom).source;
        set(_atoms_message__WEBPACK_IMPORTED_MODULE_0__.messagesAtom, (prev)=>{
            const sessionMessages = prev[sessionId] || [];
            const messageIndex = sessionMessages.findIndex((msg)=>msg.messageId === messageId);
            if (messageIndex >= 0) {
                const updatedMessages = [
                    ...sessionMessages
                ];
                updatedMessages[messageIndex] = {
                    ...updatedMessages[messageIndex],
                    content: fullContent,
                    isStreaming: false,
                    title: event.title || updatedMessages[messageIndex].title || 'Research Report'
                };
                return {
                    ...prev,
                    [sessionId]: updatedMessages
                };
            }
            return prev;
        });
    }
    // 如果这是最后一个数据块，标记处理完成
    if (event.isComplete) {
        set(_atoms_ui__WEBPACK_IMPORTED_MODULE_2__.isProcessingAtom, false);
    }
}

function $RefreshSig$() {
  return $ReactRefreshRuntime$.createSignatureFunctionForTransform();
}
function $RefreshReg$(type, id) {
  $ReactRefreshRuntime$.register(type, module.id + "_" + id);
}
Promise.resolve().then(function() {
  $ReactRefreshRuntime$.refresh(module.id, module.hot);
});


}),

},function(__webpack_require__) {
// webpack/runtime/get_full_hash
(() => {
__webpack_require__.h = () => ("557d05c1fcf77647")
})();

}
);
//# sourceMappingURL=index.23dd859d03c80225.hot-update.js.map