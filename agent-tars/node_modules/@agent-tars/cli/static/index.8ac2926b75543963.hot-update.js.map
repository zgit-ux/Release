{"version":3,"file":"index.8ac2926b75543963.hot-update.js","sources":["/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/entry.css","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/index.tsx"],"sourcesContent":["// extracted by css-extract-rspack-plugin\nexport {};\n    if(module.hot) {\n      (function() {\n        var localsJsonString = undefined;\n        // 1751739945970\n        var cssReload = require(\"../../node_modules/.pnpm/@rspack+core@1.3.9_@swc+helpers@0.5.17/node_modules/@rspack/core/dist/cssExtractHmr.js\").cssReload(module.id, {});\n        // only invalidate when locals change\n        if (\n          module.hot.data &&\n          module.hot.data.value &&\n          module.hot.data.value !== localsJsonString\n        ) {\n          module.hot.invalidate();\n        } else {\n          module.hot.accept();\n        }\n        module.hot.dispose(function(data) {\n          data.value = localsJsonString;\n          cssReload();\n        });\n      })();\n    }\n  ","import React, { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { isMultimodalContent } from '@/common/utils/typeGuards';\nimport { ChatCompletionContentPart, Message as MessageType } from '@/common/types';\nimport { useSession } from '@/common/hooks/useSession';\nimport { useTool } from '@/common/hooks/useTool';\nimport { MarkdownRenderer } from '@/sdk/markdown-renderer';\nimport './Message.css';\n\n// Import sub-components\nimport { SystemMessage } from './components/SystemMessage';\nimport { MultimodalContent } from './components/MultimodalContent';\nimport { ToolCalls } from './components/ToolCalls';\nimport { ThinkingToggle } from './components/ThinkingToggle';\nimport { MessageTimestamp } from './components/MessageTimestamp';\nimport { useAtomValue } from 'jotai';\nimport { replayStateAtom } from '@/common/state/atoms/replay';\nimport { ReportFileEntry } from './components/ReportFileEntry';\nimport { messagesAtom } from '@/common/state/atoms/message';\nimport { FiMonitor } from 'react-icons/fi';\nimport { ActionButton } from './components/ActionButton';\n\ninterface MessageProps {\n  message: MessageType;\n  shouldDisplayTimestamp?: boolean;\n  isInGroup?: boolean;\n}\n\n/**\n * Message Component - 重构版，移除 isIntermediate 差异\n *\n * 设计原则:\n * - 统一的消息样式，不区分中间和最终状态\n * - 专注于内容，减少视觉干扰\n * - 优雅的样式和排版\n * - 支持便捷的消息复制功能\n */\nexport const Message: React.FC<MessageProps> = ({\n  message,\n  isInGroup = false,\n  shouldDisplayTimestamp = true,\n}) => {\n  const [showThinking, setShowThinking] = useState(false);\n  const [showSteps, setShowSteps] = useState(false);\n  const { setActivePanelContent, activeSessionId } = useSession();\n  const { getToolIcon } = useTool();\n  const replayState = useAtomValue(replayStateAtom);\n  const allMessages = useAtomValue(messagesAtom);\n\n  const isMultimodal = isMultimodalContent(message.content);\n  const isEnvironment = message.role === 'environment';\n  const isUserMessage = message.role === 'user';\n\n  const isFinalAnswer = message.role === 'final_answer' || message.isDeepResearch;\n\n  // Check if this is a final assistant response\n  const isFinalAssistantResponse = message.role === 'assistant' && message.finishReason === 'stop';\n\n  // Handle tool call click - show in panel\n  const handleToolCallClick = (toolCall: any) => {\n    if (message.toolResults && message.toolResults.length > 0) {\n      const result = message.toolResults.find((r) => r.toolCallId === toolCall.id);\n      if (result) {\n        setActivePanelContent({\n          type: result.type,\n          source: result.content,\n          title: result.name,\n          timestamp: result.timestamp,\n          toolCallId: result.toolCallId,\n          error: result.error,\n          arguments: result.arguments,\n          _extra: result._extra,\n        });\n      }\n    }\n  };\n\n  // Handle click on final assistant response to show latest environment state\n  const handleFinalResponseClick = () => {\n    if (!activeSessionId || !isFinalAssistantResponse) return;\n\n    const sessionMessages = allMessages[activeSessionId] || [];\n\n    // Find the most recent environment input\n    for (let i = sessionMessages.length - 1; i >= 0; i--) {\n      const msg = sessionMessages[i];\n      if (msg.role === 'environment' && Array.isArray(msg.content)) {\n        const imageContent = msg.content.find(\n          (item) => item.type === 'image_url' && item.image_url && item.image_url.url,\n        );\n\n        if (imageContent) {\n          setActivePanelContent({\n            type: 'image',\n            source: msg.content,\n            title: msg.description || 'Final Environment State',\n            timestamp: msg.timestamp,\n            environmentId: msg.id,\n          });\n          break;\n        }\n      }\n    }\n  };\n\n  // Render content based on type\n  const renderContent = () => {\n    if (isMultimodal) {\n      return (\n        <MultimodalContent\n          content={message.content as ChatCompletionContentPart[]}\n          timestamp={message.timestamp}\n          setActivePanelContent={setActivePanelContent}\n        />\n      );\n    }\n\n    // For assistant messages with tool calls, first show summary\n    if (message.role === 'assistant' && message.toolCalls && message.toolCalls.length > 0) {\n      return (\n        <div className=\"prose dark:prose-invert prose-sm max-w-none text-xs\">\n          <MarkdownRenderer content={message.content as string} />\n        </div>\n      );\n    }\n\n    if (isUserMessage) {\n      return (\n        <div\n          style={{\n            whiteSpace: 'break-spaces',\n          }}\n        >\n          {message.content as string}\n        </div>\n      );\n    }\n\n    // Use forceDarkTheme for user messages only\n    return <MarkdownRenderer content={message.content as string} forceDarkTheme={isUserMessage} />;\n  };\n\n  // Determine message bubble style based on role and state\n  const getMessageBubbleClasses = () => {\n    let baseClasses = '';\n\n    if (message.role === 'user') {\n      if (isImageOnlyMessage) {\n        baseClasses = 'message-user message-user-image';\n      } else {\n        baseClasses = 'message-user';\n      }\n    } else if (message.role === 'system') {\n      baseClasses = 'message-system';\n    } else if (message.role === 'environment') {\n      baseClasses = 'environment-message-minimal';\n    } else {\n      baseClasses = 'message-assistant';\n    }\n\n    // 添加更平滑的点击样式\n    if (isFinalAssistantResponse) {\n      baseClasses += ' cursor-pointer';\n    }\n\n    return baseClasses;\n  };\n\n  // 检查消息是否只包含图片（用于样式优化）\n  const isImageOnlyMessage = React.useMemo(() => {\n    if (!isMultimodalContent(message.content)) return false;\n\n    const imageContents = message.content.filter((part) => part.type === 'image_url');\n    const textContents = message.content.filter((part) => part.type === 'text');\n\n    return imageContents.length > 0 && textContents.length === 0;\n  }, [message.content]);\n\n  // 检查是否有环境状态可显示\n  const hasEnvironmentState = React.useMemo(() => {\n    if (!activeSessionId || !isFinalAssistantResponse || !allMessages[activeSessionId])\n      return false;\n\n    const sessionMessages = allMessages[activeSessionId] || [];\n    // 检查是否有环境消息\n    return sessionMessages.some(\n      (msg) =>\n        msg.role === 'environment' &&\n        Array.isArray(msg.content) &&\n        msg.content.some(\n          (item) => item.type === 'image_url' && item.image_url && item.image_url.url,\n        ),\n    );\n  }, [activeSessionId, isFinalAssistantResponse, allMessages]);\n\n  // Determine which prose class should be used, based on message type and dark mode\n  const getProseClasses = () => {\n    if (message.role === 'user') {\n      return 'prose prose-invert prose-sm max-w-none';\n    } else {\n      // For helper messages, use normal prose but apply prose-invert in dark mode\n      return 'prose dark:prose-invert prose-sm max-w-none';\n    }\n  };\n\n  return (\n    <div\n      className={`message-container ${message.role === 'user' ? 'message-container-user' : 'message-container-assistant'}`}\n    >\n      <div className={`message-bubble ${getMessageBubbleClasses()}`}>\n        {/* Role-based content */}\n        {message.role === 'system' ? (\n          <SystemMessage content={message.content as string} />\n        ) : (\n          <>\n            <div className={getProseClasses()}>{renderContent()}</div>\n\n            {isFinalAssistantResponse && hasEnvironmentState && (\n              <div className=\"mt-2\">\n                <ActionButton\n                  icon={<FiMonitor size={14} />}\n                  label=\"view final environment state\"\n                  onClick={handleFinalResponseClick}\n                />\n              </div>\n            )}\n\n            {isFinalAnswer && message.title && typeof message.content === 'string' && (\n              <ReportFileEntry\n                title={message.title || 'Research Report'}\n                timestamp={message.timestamp}\n                content={message.content}\n              />\n            )}\n\n            {message.toolCalls && message.toolCalls.length > 0 && (\n              <ToolCalls\n                toolCalls={message.toolCalls}\n                onToolCallClick={handleToolCallClick}\n                getToolIcon={getToolIcon}\n                toolResults={message.toolResults || []} // Pass tool results for status checking\n              />\n            )}\n\n            {message.thinking && (\n              <ThinkingToggle\n                thinking={message.thinking}\n                showThinking={showThinking}\n                setShowThinking={setShowThinking}\n              />\n            )}\n          </>\n        )}\n      </div>\n\n      {/* Timestamp and copy button - only for main messages */}\n      {message.role !== 'system' &&\n        !isInGroup &&\n        shouldDisplayTimestamp &&\n        !replayState.isActive && (\n          <MessageTimestamp\n            timestamp={message.timestamp}\n            content={message.content}\n            role={message.role}\n          />\n        )}\n    </div>\n  );\n};\n\n// ... 保留其他代码 ..."],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvBA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;;;;;;;;AAQA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;AAGA;AAEA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;AAGA;AAEA;AACA;AAEA;AACA;AACA;AAEA;;;;;;AAGA;AAEA;AACA;AAAA;AAAA;;;;;;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAQA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AAEA;AAAA;AAEA;AACA;;;;;AAEA;;AACA;AAAA;AAAA;;;;;;AAEA;AACA;AACA;AACA;AAAA;;;;;;AACA;AACA;;;;;;;;;;;AAKA;AAEA;AACA;AACA;;;;;;AAIA;AAEA;AACA;AACA;AACA;;;;;;AAIA;AAEA;AACA;AACA;;;;;;;;;;;;;AAQA;AAKA;AACA;AACA;;;;;;;;;;;;AAKA;AAvOA;;AAOA;AACA;AACA;AACA;;;AAVA"}