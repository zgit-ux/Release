{"version":3,"file":"index.e55e9c84b1653c90.hot-update.js","sources":["/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/entry.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/App.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/ChatPanel.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/ImagePreview.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/Message/components/MessageGroup.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/Message/components/MultimodalContent.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/Message/index.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/MessageInput.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Layout/index.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Markdown/MarkdownRenderer.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Navbar/Navbar.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Navbar/index.ts","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Replay/ReplayControls.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Router/HomePage.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Router/SessionRouter.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Share/ShareButton.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Share/ShareModal.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Share/index.ts","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Sidebar/ChatSession.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Sidebar/SidebarContainer.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Sidebar/ToolBar.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Sidebar/index.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Welcome/WelcomePage.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/constants/index.ts","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/context/ReplayModeContext.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/hooks/usePro.ts","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/hooks/useReplay.ts","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/hooks/useSession.ts","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/index.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/services/apiService.ts","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/services/shareService.ts","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/state/actions/eventProcessor.ts","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/state/actions/modelInfoAction.ts","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/state/actions/sessionActions.ts","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/state/atoms/replay.ts","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/state/atoms/ui.ts","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/utils/formatters.ts"],"sourcesContent":["import './entry.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { AgentTARSWebUI } from './v2';\n\n// Render the new v2 architecture with router support\nReactDOM.createRoot(document.getElementById('root') as HTMLElement).render(\n  <React.StrictMode>\n    <AgentTARSWebUI />\n  </React.StrictMode>,\n);\n","import React, { useEffect } from 'react';\nimport { Routes, Route, Navigate, useParams, useNavigate, useLocation } from 'react-router-dom';\nimport { Layout } from './Layout';\nimport { useSession } from '../hooks/useSession';\nimport HomePage from './Router/HomePage';\nimport { useAtomValue } from 'jotai';\nimport { replayStateAtom } from '../state/atoms/replay';\nimport { useReplayMode } from '../context/ReplayModeContext';\nimport { SessionRouter } from './Router/SessionRouter';\n\n/**\n * App Component - Main application container with routing\n */\nexport const App: React.FC = () => {\n  const { initConnectionMonitoring, loadSessions, connectionStatus, activeSessionId } =\n    useSession();\n  const isReplayMode = useReplayMode();\n\n  // Initialize connection monitoring and load sessions on mount - but not in replay mode\n  useEffect(() => {\n    // In replay mode, skip connection monitoring and session loading\n    if (isReplayMode) {\n      console.log('[ReplayMode] Skipping connection initialization in replay mode');\n      return;\n    }\n\n    const initialize = async () => {\n      // Initialize connection monitoring\n      const cleanup = initConnectionMonitoring();\n\n      // Load sessions if connected\n      if (connectionStatus.connected) {\n        await loadSessions();\n      }\n\n      return cleanup;\n    };\n\n    const cleanupPromise = initialize();\n\n    // Cleanup on unmount\n    return () => {\n      cleanupPromise.then((cleanup) => {\n        if (typeof cleanup === 'function') {\n          cleanup();\n        }\n      });\n    };\n  }, [initConnectionMonitoring, loadSessions, connectionStatus.connected, isReplayMode]);\n\n  // Special handling for replay mode - bypass normal routing\n  if (isReplayMode) {\n    console.log('[ReplayMode] Rendering replay layout directly');\n    return <Layout isReplayMode={true} />;\n  }\n\n  return (\n    <Routes>\n      <Route path=\"/\" element={<HomePage />} />\n      <Route\n        path=\"/:sessionId\"\n        element={\n          <SessionRouter>\n            <Layout />\n          </SessionRouter>\n        }\n      />\n    </Routes>\n  );\n};\n","import React, { useRef, useEffect, useState } from 'react';\nimport { useSession } from '../../hooks/useSession';\nimport { MessageGroup } from './Message/components/MessageGroup';\nimport { MessageInput } from './MessageInput';\nimport {\n  FiInfo,\n  FiMessageSquare,\n  FiArrowDown,\n  FiRefreshCw,\n  FiWifiOff,\n  FiFileText,\n  FiClock,\n  FiX,\n} from 'react-icons/fi';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { useAtom, useAtomValue } from 'jotai';\nimport { offlineModeAtom } from '../../state/atoms/ui';\nimport { groupedMessagesAtom, messagesAtom } from '../../state/atoms/message';\n\nimport { useReplay } from '../../hooks/useReplay';\nimport { replayStateAtom } from '../../state/atoms/replay';\nimport { MessageGroup as MessageGroupType } from '../../types';\nimport { usePro } from '../../hooks/usePro';\nimport { ShareButton } from '../Share';\nimport { useReplayMode } from '../../context/ReplayModeContext';\n\nimport './ChatPanel.css';\nimport { apiService } from '@/v2/services/apiService';\nimport { ResearchReportEntry } from './ResearchReportEntry';\n\nimport { useLocation } from 'react-router-dom';\n\n/**\n * ChatPanel Component - Main chat interface\n *\n * Design principles:\n * - Clean, distraction-free message display area with ample whitespace\n * - Elegant loading indicators and status messages with subtle animations\n * - Visually distinct message bubbles with refined spacing\n * - Clear visual hierarchy through typography and subtle borders\n */\nexport const ChatPanel: React.FC = () => {\n  const { activeSessionId, isProcessing, connectionStatus, checkServerStatus } = useSession();\n\n  const groupedMessages = useAtomValue(groupedMessagesAtom);\n  const allMessages = useAtomValue(messagesAtom);\n  const [offlineMode, setOfflineMode] = useAtom(offlineModeAtom);\n\n  const [replayState] = useAtom(replayStateAtom);\n  const isReplayMode = useReplayMode();\n  const { cancelAutoPlay } = useReplay();\n\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const messagesContainerRef = useRef<HTMLDivElement>(null);\n\n  const [showScrollButton, setShowScrollButton] = useState(false);\n\n  const location = useLocation();\n\n  const isProMode = usePro();\n\n  // 使用当前会话的消息 - 这样与正常渲染保持一致\n  // 回放模式下会通过 processEvent 来更新这些消息\n  const activeMessages = activeSessionId ? groupedMessages[activeSessionId] || [] : [];\n\n  // 检查滚动位置以确定是否显示滚动按钮\n  useEffect(() => {\n    const checkScroll = () => {\n      const container = messagesContainerRef.current;\n      if (!container) return;\n\n      const { scrollTop, scrollHeight, clientHeight } = container;\n      const atBottom = Math.abs(scrollHeight - scrollTop - clientHeight) < 10;\n      setShowScrollButton(!atBottom);\n    };\n\n    const container = messagesContainerRef.current;\n    if (container) {\n      container.addEventListener('scroll', checkScroll);\n      return () => container.removeEventListener('scroll', checkScroll);\n    }\n  }, []);\n\n  // Auto-scroll when new messages arrive\n  useEffect(() => {\n    if (messagesEndRef.current && messagesContainerRef.current) {\n      const container = messagesContainerRef.current;\n\n      // Check if user is already at bottom\n      const { scrollTop, scrollHeight, clientHeight } = container;\n      const isAtBottom = Math.abs(scrollHeight - scrollTop - clientHeight) < 30;\n\n      // Auto-scroll if at bottom or if new user message\n      if (\n        isAtBottom ||\n        (activeMessages.length > 0 &&\n          activeMessages[activeMessages.length - 1].messages[0]?.role === 'user')\n      ) {\n        setTimeout(() => {\n          container.scrollTo({\n            top: container.scrollHeight,\n            behavior: 'smooth',\n          });\n        }, 100);\n      }\n    }\n  }, [activeMessages]);\n\n  const scrollToBottom = () => {\n    if (messagesEndRef.current && messagesContainerRef.current) {\n      messagesContainerRef.current.scrollTo({\n        top: messagesContainerRef.current.scrollHeight,\n        behavior: 'smooth',\n      });\n    }\n  };\n\n  // Animation variants\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        duration: 0.4,\n        staggerChildren: 0.1,\n      },\n    },\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, y: 20 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: { duration: 0.4 },\n    },\n  };\n\n  // Add loading indicator component with improved visibility\n  const renderLoadingIndicator = () => {\n    if (!isProcessing) return null;\n\n    // Determine if there are already messages to show a different style\n    const hasMessages = activeSessionId && activeMessages.length > 0;\n\n    if (!hasMessages) return null;\n\n    return (\n      <motion.div\n        initial={{ opacity: 0, y: 10 }}\n        animate={{ opacity: 1, y: 0 }}\n        className=\"flex items-center gap-2 p-3 bg-white dark:bg-gray-800 rounded-3xl mb-4 border border-gray-100/40 dark:border-gray-700/20\"\n      >\n        <div className=\"w-6 h-6 rounded-full bg-gray-100 dark:bg-gray-800 border border-gray-200/40 dark:border-gray-700/20 flex items-center justify-center\">\n          <div className=\"w-3 h-3 rounded-full bg-accent-500 animate-pulse\" />\n        </div>\n        <span className=\"text-sm text-gray-600 dark:text-gray-300\">Agent TARS is thinking...</span>\n      </motion.div>\n    );\n  };\n\n  const renderOfflineBanner = () => {\n    if (connectionStatus.connected || !activeSessionId || isReplayMode) return null;\n\n    return (\n      <motion.div\n        initial={{ opacity: 0, y: -10 }}\n        animate={{ opacity: 1, y: 0 }}\n        className=\"mb-4 px-4 py-3 bg-red-50/30 dark:bg-red-900/15 text-red-700 dark:text-red-300 text-sm rounded-xl\"\n      >\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <div className=\"font-medium flex items-center\">\n              <FiWifiOff className=\"mr-2 text-red-500 dark:text-red-400\" />\n              Viewing in offline mode\n            </div>\n            <div className=\"text-sm mt-1\">\n              You can view previous messages but cannot send new ones until reconnected.\n            </div>\n          </div>\n          <motion.button\n            whileHover={{ scale: 1.05 }}\n            whileTap={{ scale: 0.95 }}\n            onClick={() => checkServerStatus()}\n            className=\"ml-3 px-3 py-1.5 bg-red-100/70 dark:bg-red-800/30 hover:bg-red-200/70 dark:hover:bg-red-700/40 rounded-2xl text-sm font-medium transition-colors flex items-center border border-red-200/30 dark:border-red-700/30\"\n          >\n            <FiRefreshCw\n              className={`mr-1.5 ${connectionStatus.reconnecting ? 'animate-spin' : ''}`}\n              size={14}\n            />\n            {connectionStatus.reconnecting ? 'Reconnecting...' : 'Reconnect'}\n          </motion.button>\n        </div>\n      </motion.div>\n    );\n  };\n\n  // 新增：查找会话中的研究报告\n  const findResearchReport = () => {\n    if (!activeSessionId || !allMessages[activeSessionId]) return null;\n\n    const sessionMessages = allMessages[activeSessionId];\n    // 查找类型为 final_answer 且 isDeepResearch 为 true 的最后一条消息\n    const reportMessage = [...sessionMessages]\n      .reverse()\n      .find(\n        (msg) =>\n          (msg.role === 'final_answer' || msg.role === 'assistant') &&\n          msg.isDeepResearch === true &&\n          msg.title,\n      );\n\n    return reportMessage;\n  };\n\n  const researchReport = findResearchReport();\n\n  return (\n    <div className=\"flex flex-col h-full\">\n      {!activeSessionId ? (\n        <motion.div\n          initial=\"hidden\"\n          animate=\"visible\"\n          variants={containerVariants}\n          className=\"flex items-center justify-center flex-1\"\n        >\n          <div className=\"text-center p-6 max-w-md\">\n            <motion.div\n              variants={itemVariants}\n              className=\"w-16 h-16 bg-white dark:bg-gray-800 rounded-2xl flex items-center justify-center mx-auto mb-6 text-gray-500 dark:text-gray-400 border border-gray-100/50 dark:border-gray-700/20\"\n            >\n              <FiMessageSquare size={24} />\n            </motion.div>\n            <motion.h2\n              variants={itemVariants}\n              className=\"text-xl font-display font-bold mb-3 text-gray-800 dark:text-gray-200\"\n            >\n              Welcome to Agent TARS\n            </motion.h2>\n            <motion.p\n              variants={itemVariants}\n              className=\"text-gray-600 dark:text-gray-400 mb-5 text-sm leading-relaxed\"\n            >\n              Create a new chat session to get started with the AI assistant.\n            </motion.p>\n            <motion.div\n              variants={itemVariants}\n              whileHover={{ y: -2 }}\n              className=\"flex items-center p-4 bg-white dark:bg-gray-800 rounded-2xl mb-3 text-gray-600 dark:text-gray-400 text-sm border border-gray-100/40 dark:border-gray-700/20\"\n            >\n              <FiInfo className=\"mr-3 text-gray-400 flex-shrink-0\" />\n              <span>\n                TARS can help with tasks involving web search, browsing, and file operations.\n              </span>\n            </motion.div>\n          </div>\n        </motion.div>\n      ) : (\n        <>\n          <div\n            ref={messagesContainerRef}\n            className=\"flex-1 overflow-y-auto px-5 py-5 overflow-x-hidden min-h-0 chat-scrollbar relative\"\n          >\n            {renderOfflineBanner()}\n\n            <AnimatePresence>\n              {!connectionStatus.connected && !activeSessionId && (\n                <motion.div\n                  initial={{ opacity: 0, y: -10 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  exit={{ opacity: 0, y: -10 }}\n                  className=\"mb-4 px-4 py-3 bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 text-sm rounded-3xl border border-gray-100/40 dark:border-gray-700/20\"\n                >\n                  <div className=\"font-medium\">Server disconnected</div>\n                  <div className=\"text-sm mt-1\">\n                    {connectionStatus.reconnecting\n                      ? 'Attempting to reconnect...'\n                      : 'Please check your connection and try again.'}\n                  </div>\n                </motion.div>\n              )}\n            </AnimatePresence>\n\n            {/* 空状态 */}\n            {activeMessages.length === 0 ? (\n              <motion.div\n                initial={{ opacity: 0 }}\n                animate={{ opacity: 1 }}\n                transition={{ duration: 0.3 }}\n                className=\"flex items-center justify-center h-full\"\n              >\n                <div className=\"text-center p-6 max-w-md\">\n                  <h3 className=\"text-lg font-display font-medium mb-2\">\n                    {replayState.isActive ? 'Replay starting...' : 'Start a conversation'}\n                  </h3>\n                  {replayState.isActive && replayState.autoPlayCountdown !== null ? (\n                    <div className=\"mt-2\">\n                      <p className=\"text-gray-600 dark:text-gray-400 text-sm mb-2\">\n                        Auto-play in {replayState.autoPlayCountdown} seconds...\n                      </p>\n                      <motion.button\n                        whileHover={{ scale: 1.05 }}\n                        whileTap={{ scale: 0.95 }}\n                        onClick={cancelAutoPlay}\n                        className=\"px-3 py-1.5 text-xs bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-lg border border-gray-200/50 dark:border-gray-700/30 flex items-center mx-auto\"\n                      >\n                        <FiX size={12} className=\"mr-1.5\" />\n                        Cancel auto-play\n                      </motion.button>\n                    </div>\n                  ) : (\n                    <p className=\"text-gray-600 dark:text-gray-400 text-sm\">\n                      {replayState.isActive\n                        ? 'Please wait while the replay loads or press play to begin'\n                        : 'Ask Agent TARS a question or provide a command to begin.'}\n                    </p>\n                  )}\n                </div>\n              </motion.div>\n            ) : (\n              <div className=\"space-y-6 pb-2\">\n                {activeMessages.map((group, index) => (\n                  <MessageGroup\n                    key={`group-${index}-${group.messages[0].id}`}\n                    messages={group.messages}\n                    isThinking={\n                      isProcessing && !replayState.isActive && index === activeMessages.length - 1\n                    }\n                  />\n                ))}\n              </div>\n            )}\n\n            {/* Add loading indicator */}\n            {renderLoadingIndicator()}\n\n            <div ref={messagesEndRef} />\n          </div>\n\n          {/* 消息输入区域 */}\n          <div className=\"p-4\">\n            {/* 新增：研究报告入口 */}\n            {researchReport && !isProcessing && (\n              <div className=\"mb-4\">\n                <ResearchReportEntry\n                  title={researchReport.title || 'Research Report'}\n                  timestamp={researchReport.timestamp}\n                  content={typeof researchReport.content === 'string' ? researchReport.content : ''}\n                />\n              </div>\n            )}\n\n            {/* 按钮区域 - 移除分享按钮 */}\n            <div className=\"flex justify-center gap-3 mb-3\">\n              {/* 分享按钮已移至Navbar */}\n            </div>\n\n            <MessageInput\n              isDisabled={\n                !activeSessionId || isProcessing || !connectionStatus.connected || isReplayMode\n              }\n              onReconnect={checkServerStatus}\n              connectionStatus={connectionStatus}\n            />\n          </div>\n        </>\n      )}\n    </div>\n  );\n};","import React from 'react';\nimport { motion } from 'framer-motion';\nimport { FiX } from 'react-icons/fi';\nimport { ChatCompletionContentPart } from '@multimodal/agent-interface';\n\ninterface ImagePreviewProps {\n  image: ChatCompletionContentPart;\n  onRemove: () => void;\n}\n\n/**\n * ImagePreview Component - Displays an uploaded image with a remove button\n *\n * Design principles:\n * - Clean, thumbnail representation of uploaded images\n * - Easy removal with a clear delete button\n * - Consistent styling with the overall UI design language\n * - Subtle animations for improved user experience\n */\nexport const ImagePreview: React.FC<ImagePreviewProps> = ({ image, onRemove }) => {\n  if (image.type !== 'image_url' || !image.image_url) {\n    return null;\n  }\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, scale: 0.9 }}\n      animate={{ opacity: 1, scale: 1 }}\n      exit={{ opacity: 0, scale: 0.9 }}\n      className=\"relative rounded-lg overflow-hidden group\"\n    >\n      <div className=\"relative w-20 h-20\">\n        <img\n          src={image.image_url.url}\n          alt=\"Preview\"\n          className=\"w-full h-full object-cover rounded-lg border border-gray-200/50 dark:border-gray-700/30\"\n        />\n\n        {/* Remove button */}\n        <motion.button\n          whileHover={{ scale: 1.1 }}\n          whileTap={{ scale: 0.9 }}\n          onClick={onRemove}\n          className=\"absolute -top-1 -right-1 bg-gray-800/80 dark:bg-gray-900/80 text-white rounded-full p-1 opacity-0 group-hover:opacity-100 transition-opacity duration-200 border border-gray-700/30\"\n        >\n          <FiX size={12} />\n        </motion.button>\n\n        {/* Overlay effect on hover */}\n        <div className=\"absolute inset-0 bg-black/10 dark:bg-black/30 opacity-0 group-hover:opacity-100 transition-opacity duration-200\"></div>\n      </div>\n    </motion.div>\n  );\n};\n","import React from 'react';\nimport { motion } from 'framer-motion';\nimport { Message as MessageType } from '../../../../types';\nimport { Message } from '../index';\nimport { FiClock } from 'react-icons/fi';\nimport { formatTimestamp } from '../../../../utils/formatters';\nimport { isMultimodalContent } from '../../../../utils/typeGuards';\n\ninterface MessageGroupProps {\n  messages: MessageType[];\n  isThinking: boolean;\n}\n\n/**\n * MessageGroup Component - Groups related messages in a thinking sequence\n *\n * Design principles:\n * - Minimalist design with no avatars or indentation\n * - Clean, full-width message layout\n * - All intermediate thinking steps are always visible\n * - Visual hierarchy emphasizing final answers\n * - Consistent monochromatic styling\n */\nexport const MessageGroup: React.FC<MessageGroupProps> = ({ messages, isThinking }) => {\n  // 过滤掉环境消息\n  const filteredMessages = messages.filter((msg) => msg.role !== 'environment');\n\n  // 如果过滤后没有消息，则不渲染任何内容\n  if (filteredMessages.length === 0) {\n    return null;\n  }\n\n  // 如果只有一条消息，检查是否需要拆分\n  if (filteredMessages.length === 1) {\n    const message = filteredMessages[0];\n    \n    // 检查是否是包含图片和文本的多模态用户消息\n    if (message.role === 'user' && isMultimodalContent(message.content)) {\n      const imageContents = message.content.filter(part => part.type === 'image_url');\n      const textContents = message.content.filter(part => part.type === 'text');\n      \n      // 只有同时包含图片和文本时才拆分显示\n      if (imageContents.length > 0 && textContents.length > 0) {\n        return (\n          <div className=\"space-y-3\">\n            {/* 先显示图片消息 */}\n            <Message\n              key={`${message.id}-images`}\n              message={{\n                ...message,\n                content: imageContents,\n                id: `${message.id}-images`,\n              }}\n            />\n            \n            {/* 再显示文本消息 */}\n            <Message\n              key={`${message.id}-text`}\n              message={{\n                ...message,\n                content: textContents,\n                id: `${message.id}-text`,\n              }}\n            />\n          </div>\n        );\n      }\n    }\n    \n    return <Message message={filteredMessages[0]} />;\n  }\n\n  // 获取第一条消息 - 通常是用户消息\n  const firstMessage = filteredMessages[0];\n\n  // If not a user message, use simplified rendering\n  if (firstMessage.role !== 'user') {\n    return (\n      <div className=\"space-y-3\">\n        {filteredMessages.map((message, index) => (\n          <Message\n            key={message.id}\n            message={message}\n            isInGroup={index > 0 && index < filteredMessages.length - 1}\n            isIntermediate={index > 0 && index < filteredMessages.length - 1}\n            shouldDisplayTimestamp={false}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  // For user-initiated groups, use enhanced rendering with thinking sequence\n\n  const responseMessage = filteredMessages.length > 1 ? filteredMessages[1] : null;\n  const intermediateMessages = filteredMessages.slice(2, -1);\n  const lastMessage = filteredMessages[filteredMessages.length - 1];\n\n  const hasFinalAnswer = lastMessage.role === 'assistant' && lastMessage.finishReason === 'stop';\n  const finalMessage = hasFinalAnswer ? lastMessage : null;\n\n  const hasThinkingSteps = intermediateMessages.length > 0;\n\n  // 检查用户消息是否需要拆分\n  if (isMultimodalContent(firstMessage.content)) {\n    const imageContents = firstMessage.content.filter(part => part.type === 'image_url');\n    const textContents = firstMessage.content.filter(part => part.type === 'text');\n    \n    // 只有同时包含图片和文本时才拆分显示\n    if (imageContents.length > 0 && textContents.length > 0) {\n      return (\n        <div className=\"message-group-container space-y-3\">\n          {/* 先显示图片消息 */}\n          <Message \n            message={{\n              ...firstMessage,\n              content: imageContents,\n              id: `${firstMessage.id}-images`,\n            }} \n          />\n          \n          {/* 再显示文本消息 */}\n          <Message \n            message={{\n              ...firstMessage,\n              content: textContents,\n              id: `${firstMessage.id}-text`,\n            }} \n          />\n\n          {/* Assistant response section with all assistant-related messages */}\n          {responseMessage && (\n            <div className=\"assistant-response-container\">\n              {/* Initial response message - marked as in-group */}\n              <Message message={responseMessage} isInGroup={true} />\n\n              {/* Thinking process section - always shown */}\n              {hasThinkingSteps && (\n                <div className=\"thinking-steps-container\">\n                  {intermediateMessages.map((msg) => (\n                    <Message key={msg.id} message={msg} isIntermediate={true} isInGroup={true} />\n                  ))}\n\n                  {!isThinking && (\n                    <div className=\"mt-1 mb-2\">\n                      <div className=\"flex items-center text-xs text-gray-500 dark:text-gray-400 py-1\">\n                        <FiClock size={10} className=\"mr-1\" />\n                        {responseMessage && formatTimestamp(responseMessage.timestamp)}\n                      </div>\n                    </div>\n                  )}\n                </div>\n              )}\n\n              {/* Final answer - if exists and not currently thinking */}\n              {finalMessage && finalMessage !== responseMessage && !isThinking && (\n                <Message message={finalMessage} isInGroup={false} />\n              )}\n\n              {/* Thinking indicator */}\n              {isThinking && (\n                <div className=\"mt-2 flex items-center text-xs text-gray-500 dark:text-gray-400\">\n                  <div className=\"flex items-center justify-center bg-gray-50/70 dark:bg-gray-700/40 rounded-full w-5 h-5 mr-2 text-gray-500 dark:text-gray-400\">\n                    <div className=\"w-1.5 h-1.5 bg-gray-500 dark:bg-gray-400 rounded-full animate-pulse\"></div>\n                  </div>\n                  Agent TARS is thinking...\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      );\n    }\n  }\n\n  return (\n    <div className=\"message-group-container space-y-3\">\n      {/* User message is always displayed */}\n      <Message message={firstMessage} />\n\n      {/* Assistant response section with all assistant-related messages */}\n      {responseMessage && (\n        <div className=\"assistant-response-container\">\n          {/* Initial response message - marked as in-group */}\n          <Message message={responseMessage} isInGroup={true} />\n\n          {/* Thinking process section - always shown */}\n          {hasThinkingSteps && (\n            <div className=\"thinking-steps-container\">\n              {intermediateMessages.map((msg) => (\n                <Message key={msg.id} message={msg} isIntermediate={true} isInGroup={true} />\n              ))}\n\n              {!isThinking && (\n                <div className=\"mt-1 mb-2\">\n                  <div className=\"flex items-center text-xs text-gray-500 dark:text-gray-400 py-1\">\n                    <FiClock size={10} className=\"mr-1\" />\n                    {responseMessage && formatTimestamp(responseMessage.timestamp)}\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n\n          {/* Final answer - if exists and not currently thinking */}\n          {finalMessage && finalMessage !== responseMessage && !isThinking && (\n            <Message message={finalMessage} isInGroup={false} />\n          )}\n\n          {/* Thinking indicator */}\n          {isThinking && (\n            <div className=\"mt-2 flex items-center text-xs text-gray-500 dark:text-gray-400\">\n              <div className=\"flex items-center justify-center bg-gray-50/70 dark:bg-gray-700/40 rounded-full w-5 h-5 mr-2 text-gray-500 dark:text-gray-400\">\n                <div className=\"w-1.5 h-1.5 bg-gray-500 dark:bg-gray-400 rounded-full animate-pulse\"></div>\n              </div>\n              Agent TARS is thinking...\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};","import React from 'react';\nimport { motion } from 'framer-motion';\nimport { FiMaximize } from 'react-icons/fi';\nimport { MarkdownRenderer } from '../../../Markdown';\n\ninterface MultimodalContentProps {\n  content: any[];\n  timestamp: number;\n  setActivePanelContent: any;\n}\n\n/**\n * Component for rendering multimodal content (text and images)\n *\n * Design principles:\n * - Seamless integration of different content types\n * - Interactive image previews with expansion capability\n * - Consistent formatting of text and visual elements\n */\nexport const MultimodalContent: React.FC<MultimodalContentProps> = ({\n  content,\n  timestamp,\n  setActivePanelContent,\n}) => {\n  // 筛选出图片和文本内容\n  const imageContents = content.filter((part) => part.type === 'image_url');\n  const textContents = content.filter((part) => part.type === 'text');\n\n  // 仅包含图片的情况 - 优化布局\n  const isImageOnly = imageContents.length > 0 && textContents.length === 0;\n\n  return (\n    <>\n      {/* 渲染图片内容 */}\n      {imageContents.length > 0 && (\n        <div\n          className={`${isImageOnly ? '' : 'mt-2 mb-2'} ${imageContents.length > 1 ? 'flex flex-wrap gap-2' : ''}`}\n        >\n          {imageContents.map((part, index) => (\n            <motion.div\n              key={`image-${index}`}\n              whileHover={{ scale: 1.02 }}\n              onClick={() =>\n                setActivePanelContent({\n                  type: 'image',\n                  source: part.image_url.url,\n                  title: part.image_url.alt || 'Image',\n                  timestamp,\n                })\n              }\n              className=\"relative group cursor-pointer inline-block\"\n            >\n              {/* Render the actual image thumbnail */}\n              <img\n                src={part.image_url.url}\n                alt={part.image_url.alt || 'Image'}\n                className={`${isImageOnly ? 'max-h-48' : 'h-24'} rounded-3xl object-cover border`}\n              />\n\n              {/* Hover overlay */}\n              {/* <div className=\"absolute inset-0 bg-black/30 opacity-0 group-hover:opacity-100 rounded-lg transition-opacity duration-200 flex items-center justify-center\">\n                <FiMaximize className=\"text-white\" size={20} />\n              </div> */}\n            </motion.div>\n          ))}\n        </div>\n      )}\n\n      {/* 渲染文本内容 */}\n      {textContents.map((part, index) => (\n        <MarkdownRenderer key={`text-${index}`} content={part.text} />\n      ))}\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { isMultimodalContent } from '../../../utils/typeGuards';\nimport { Message as MessageType } from '../../../types';\nimport { useSession } from '../../../hooks/useSession';\nimport { useTool } from '../../../hooks/useTool';\nimport { MarkdownRenderer } from '../../Markdown';\nimport './Message.css';\n\n// Import sub-components\nimport { SystemMessage } from './components/SystemMessage';\nimport { EnvironmentMessage } from './components/EnvironmentMessage';\nimport { MultimodalContent } from './components/MultimodalContent';\nimport { AssistantExpandableContent } from './components/AssistantExpandableContent';\nimport { ToolCalls } from './components/ToolCalls';\nimport { ThinkingToggle } from './components/ThinkingToggle';\nimport { MessageTimestamp } from './components/MessageTimestamp';\nimport { useAtomValue } from 'jotai';\nimport { replayStateAtom } from '../../../state/atoms/replay';\nimport { ReportFileEntry } from './components/ReportFileEntry';\n\ninterface MessageProps {\n  message: MessageType;\n  shouldDisplayTimestamp?: boolean;\n  isIntermediate?: boolean;\n  isInGroup?: boolean;\n}\n\n/**\n * Message Component - Displays a single message in the chat\n *\n * Design principles:\n * - Minimalist black & white design with no avatars\n * - Clean, full-width message bubbles with subtle differentiation\n * - Focus on content with minimal visual distractions\n * - Elegant spacing and typography\n * - Progressive disclosure for detailed content\n */\nexport const Message: React.FC<MessageProps> = ({\n  message,\n  isIntermediate = false,\n  isInGroup = false,\n  shouldDisplayTimestamp = true,\n}) => {\n  console.log('message', message);\n\n  const [showThinking, setShowThinking] = useState(false);\n  const [showSteps, setShowSteps] = useState(false);\n  const { setActivePanelContent } = useSession();\n  const { getToolIcon } = useTool();\n  const replayState = useAtomValue(replayStateAtom);\n\n  const isMultimodal = isMultimodalContent(message.content);\n  const isEnvironment = message.role === 'environment';\n  const isUserMessage = message.role === 'user';\n  console.log('message.role', message);\n\n  const isFinalAnswer = message.role === 'final_answer' || message.isDeepResearch;\n\n  // Handle tool call click - show in panel\n  const handleToolCallClick = (toolCall: any) => {\n    if (message.toolResults && message.toolResults.length > 0) {\n      const result = message.toolResults.find((r) => r.toolCallId === toolCall.id);\n      if (result) {\n        setActivePanelContent({\n          type: result.type,\n          source: result.content,\n          title: result.name,\n          timestamp: result.timestamp,\n          toolCallId: result.toolCallId,\n          error: result.error,\n          arguments: result.arguments,\n        });\n      }\n    }\n  };\n\n  // Render content based on type\n  const renderContent = () => {\n    if (isMultimodal) {\n      return (\n        <MultimodalContent\n          content={message.content as any[]}\n          timestamp={message.timestamp}\n          setActivePanelContent={setActivePanelContent}\n        />\n      );\n    }\n\n    // For assistant messages with tool calls, first show summary\n    if (message.role === 'assistant' && message.toolCalls && message.toolCalls.length > 0) {\n      return (\n        <AssistantExpandableContent\n          content={message.content as string}\n          showSteps={showSteps}\n          setShowSteps={setShowSteps}\n        />\n      );\n    }\n\n    return <MarkdownRenderer content={message.content as string} forceDarkTheme={isUserMessage} />;\n  };\n\n  // Message animation variants\n  const messageVariants = {\n    initial: { opacity: 0, y: 10 },\n    animate: { opacity: 1, y: 0 },\n    transition: { duration: 0.3 },\n  };\n\n  // Determine message bubble style based on role and state\n  const getMessageBubbleClasses = () => {\n    if (message.role === 'user') {\n      if (isImageOnlyMessage) {\n        return 'message-user message-user-image';\n      }\n      return 'message-user';\n    } else if (message.role === 'system') {\n      return 'message-system';\n    } else if (message.role === 'environment') {\n      return 'environment-message-minimal';\n    } else {\n      return 'message-assistant';\n    }\n  };\n\n  // 检查消息是否只包含图片（用于样式优化）\n  const isImageOnlyMessage = React.useMemo(() => {\n    if (!isMultimodalContent(message.content)) return false;\n    \n    const imageContents = message.content.filter(part => part.type === 'image_url');\n    const textContents = message.content.filter(part => part.type === 'text');\n    \n    return imageContents.length > 0 && textContents.length === 0;\n  }, [message.content]);\n  \n  // 检查消息是否只包含文本（用于样式优化）\n  const isTextOnlyMessage = React.useMemo(() => {\n    if (!isMultimodalContent(message.content)) return true;\n    \n    const imageContents = message.content.filter(part => part.type === 'image_url');\n    const textContents = message.content.filter(part => part.type === 'text');\n    \n    return textContents.length > 0 && imageContents.length === 0;\n  }, [message.content]);\n  \n  return (\n    <motion.div\n      initial=\"initial\"\n      animate=\"animate\"\n      variants={messageVariants}\n      className={`message-container ${message.role === 'user' ? 'message-container-user' : 'message-container-assistant'} ${isIntermediate ? 'message-container-intermediate' : ''}`}\n    >\n      <div\n        className={`message-bubble ${getMessageBubbleClasses()} ${isIntermediate ? 'message-bubble-intermediate' : ''}`}\n      >\n        {/* Role-based content */}\n        {message.role === 'system' ? (\n          <SystemMessage content={message.content as string} />\n        ) : message.role === 'environment' ? (\n          <EnvironmentMessage\n            content={message.content}\n            description={message.description}\n            timestamp={message.timestamp}\n            setActivePanelContent={setActivePanelContent}\n            isIntermediate={isIntermediate}\n          />\n        ) : (\n          <>\n            <div className=\"prose dark:prose-invert prose-sm max-w-none text-sm\">\n              {renderContent()}\n            </div>\n\n            {/* 总是显示最终答案/研究报告的文件入口，除非是中间消息或组内消息 */}\n            {isFinalAnswer && message.title && typeof message.content === 'string' && \n              !isIntermediate && !isInGroup && (\n                <ReportFileEntry\n                  title={message.title || 'Research Report'}\n                  timestamp={message.timestamp}\n                  content={message.content}\n                />\n              )}\n\n            {/* Tool calls section */}\n            {message.toolCalls && message.toolCalls.length > 0 && (\n              <ToolCalls\n                toolCalls={message.toolCalls}\n                onToolCallClick={handleToolCallClick}\n                getToolIcon={getToolIcon}\n                isIntermediate={isIntermediate}\n              />\n            )}\n\n            {/* Thinking section */}\n            {message.thinking && (\n              <ThinkingToggle\n                thinking={message.thinking}\n                showThinking={showThinking}\n                setShowThinking={setShowThinking}\n              />\n            )}\n          </>\n        )}\n      </div>\n\n      {/* Timestamp and copy button - only for main messages */}\n      {message.role !== 'system' &&\n        !isIntermediate &&\n        !isInGroup &&\n        shouldDisplayTimestamp &&\n        !replayState.isActive && (\n          <MessageTimestamp\n            timestamp={message.timestamp}\n            content={message.content}\n            role={message.role}\n          />\n        )}\n    </motion.div>\n  );\n};","import React, { useState, useRef, useEffect } from 'react';\nimport { useSession } from '../../hooks/useSession';\nimport { usePlan } from '../../hooks/usePlan';\nimport { FiSend, FiX, FiRefreshCw, FiPaperclip, FiImage, FiLoader, FiCpu } from 'react-icons/fi';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { ConnectionStatus } from '../../types';\nimport { useLocation } from 'react-router-dom';\nimport './MessageInput.css';\nimport { usePro } from '@/v2/hooks/usePro';\nimport { ChatCompletionContentPart } from '@multimodal/agent-interface';\nimport { ImagePreview } from './ImagePreview';\n\ninterface MessageInputProps {\n  isDisabled?: boolean;\n  onReconnect?: () => void;\n  connectionStatus?: ConnectionStatus;\n  initialQuery?: string;\n}\n\n/**\n * MessageInput Component - Input for sending messages\n */\nexport const MessageInput: React.FC<MessageInputProps> = ({\n  isDisabled = false,\n  onReconnect,\n  connectionStatus,\n}) => {\n  const [input, setInput] = useState('');\n  const [isAborting, setIsAborting] = useState(false);\n  const [isFocused, setIsFocused] = useState(false);\n  const [uploadedImages, setUploadedImages] = useState<ChatCompletionContentPart[]>([]);\n  const inputRef = useRef<HTMLTextAreaElement>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const location = useLocation();\n\n  const {\n    sendMessage,\n    isProcessing,\n    abortQuery,\n    activeSessionId,\n    checkSessionStatus,\n    setActivePanelContent,\n  } = useSession();\n\n  const isProMode = usePro();\n\n  const { currentPlan } = usePlan(activeSessionId);\n\n  // Process query from URL parameters on component mount\n  useEffect(() => {\n    const searchParams = new URLSearchParams(location.search);\n    const query = searchParams.get('q');\n\n    if (query && !isProcessing && activeSessionId) {\n      setInput(query);\n\n      // Submit the query automatically\n      const submitQuery = async () => {\n        try {\n          await sendMessage(query);\n          // Clear input after sending\n          setInput('');\n        } catch (error) {\n          console.error('Failed to send message:', error);\n        }\n      };\n\n      submitQuery();\n    }\n  }, [location.search, activeSessionId, isProcessing, sendMessage]);\n\n  // Ensure processing state is handled correctly\n  useEffect(() => {\n    if (activeSessionId && connectionStatus?.connected) {\n      // Initial check of session status\n      checkSessionStatus(activeSessionId);\n\n      // If session status changes, increase polling\n      const intervalId = setInterval(() => {\n        checkSessionStatus(activeSessionId);\n      }, 2000); // Check status every 2 seconds\n\n      return () => clearInterval(intervalId);\n    }\n  }, [activeSessionId, connectionStatus?.connected, checkSessionStatus]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if ((!input.trim() && uploadedImages.length === 0) || isDisabled) return;\n\n    // Immediately clear input field, don't wait for message to be sent\n    const messageToSend = input.trim();\n    setInput('');\n\n    // Build multimodal content if there are images\n    const messageContent =\n      uploadedImages.length > 0\n        ? [\n            ...uploadedImages,\n            ...(messageToSend\n              ? [{ type: 'text', text: messageToSend } as ChatCompletionContentPart]\n              : []),\n          ]\n        : messageToSend;\n\n    // Clear uploaded images\n    setUploadedImages([]);\n\n    // Reset textarea height immediately\n    if (inputRef.current) {\n      inputRef.current.style.height = 'auto';\n    }\n\n    try {\n      // Use previously saved message content to send\n      await sendMessage(messageContent);\n    } catch (error) {\n      console.error('Failed to send message:', error);\n    }\n  };\n\n  // Modified to not trigger send on Enter\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n    // Ctrl+Enter as optional shortcut to send\n    if (e.key === 'Enter' && e.ctrlKey) {\n      e.preventDefault();\n      handleSubmit(e);\n    }\n  };\n\n  const handleAbort = async () => {\n    if (!isProcessing) return;\n\n    setIsAborting(true);\n    try {\n      await abortQuery();\n    } catch (error) {\n      console.error('Failed to abort:', error);\n    } finally {\n      setIsAborting(false);\n    }\n  };\n\n  // Adjust textarea height based on content\n  const handleInput = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const target = e.target;\n    setInput(target.value);\n\n    // Reset height to recalculate proper scrollHeight\n    target.style.height = 'auto';\n    // Set to scrollHeight but max 200px\n    target.style.height = `${Math.min(target.scrollHeight, 200)}px`;\n  };\n\n  // Auto-focus input when available\n  useEffect(() => {\n    if (!isDisabled && inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [isDisabled]);\n\n  // Dummy handler for file upload button\n  const handleFileUpload = () => {\n    if (fileInputRef.current) {\n      fileInputRef.current.click();\n    }\n  };\n\n  // Handle file selection\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = e.target.files;\n    if (!files || files.length === 0) return;\n\n    Array.from(files).forEach((file) => {\n      if (!file.type.startsWith('image/')) return;\n\n      const reader = new FileReader();\n      reader.onload = (event) => {\n        if (event.target?.result) {\n          const newImage: ChatCompletionContentPart = {\n            type: 'image_url',\n            image_url: {\n              url: event.target.result as string,\n              detail: 'auto',\n            },\n          };\n          setUploadedImages((prev) => [...prev, newImage]);\n        }\n      };\n      reader.readAsDataURL(file);\n    });\n\n    // Reset the input so the same file can be selected again\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n\n  // Remove an image from the uploaded images list\n  const handleRemoveImage = (index: number) => {\n    setUploadedImages((prev) => prev.filter((_, i) => i !== index));\n  };\n\n  // 添加一个查看计划按钮\n  const renderPlanButton = () => {\n    // 只在实际有计划且计划已经生成时显示按钮\n    if (!currentPlan || !currentPlan.hasGeneratedPlan || currentPlan.steps.length === 0)\n      return null;\n\n    const completedSteps = currentPlan.steps.filter((step) => step.done).length;\n    const totalSteps = currentPlan.steps.length;\n    const isComplete = currentPlan.isComplete;\n\n    return (\n      <motion.button\n        initial={{ opacity: 0, scale: 0.8 }}\n        animate={{ opacity: 1, scale: 1 }}\n        exit={{ opacity: 0, scale: 0.8 }}\n        whileTap={{ scale: 0.9 }}\n        whileHover={{ scale: 1.05, y: -2 }}\n        onClick={() =>\n          setActivePanelContent({\n            type: 'plan',\n            source: null,\n            title: 'Task Plan',\n            timestamp: Date.now(),\n          })\n        }\n        className=\"flex items-center gap-1 px-3 py-1 text-xs font-medium rounded-full bg-white/80 dark:bg-gray-800 text-gray-600 dark:text-gray-300 border border-gray-200/50 dark:border-gray-700/30 hover:bg-white hover:border-gray-300/50 dark:hover:bg-gray-700/50 dark:hover:border-gray-600/50 transition-all duration-200 shadow-sm\"\n      >\n        {isComplete ? (\n          <FiCpu size={12} className=\"mr-0.5 text-green-500 dark:text-green-400\" />\n        ) : (\n          <FiCpu size={12} className=\"mr-0.5 text-accent-500 dark:text-accent-400 animate-pulse\" />\n        )}\n        View Plan\n        <span\n          className={`ml-1 px-1.5 py-0.5 rounded-full ${\n            isComplete\n              ? 'bg-green-50 dark:bg-green-900/20 text-green-600 dark:text-green-400'\n              : 'bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300'\n          } text-[10px]`}\n        >\n          {completedSteps}/{totalSteps}\n        </span>\n      </motion.button>\n    );\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"relative\">\n      {/* Plan button - 仅在计划实际存在且已生成时显示 */}\n      {isProMode && currentPlan && currentPlan.hasGeneratedPlan && currentPlan.steps.length > 0 && (\n        <div className=\"flex justify-center mb-3\">{renderPlanButton()}</div>\n      )}\n\n      {/* Image preview area */}\n      {uploadedImages.length > 0 && (\n        <div className=\"mb-3 flex flex-wrap gap-2\">\n          {uploadedImages.map((image, index) => (\n            <ImagePreview key={index} image={image} onRemove={() => handleRemoveImage(index)} />\n          ))}\n        </div>\n      )}\n\n      {/* 修复的圆角容器结构 */}\n      <div\n        className={`relative overflow-hidden rounded-3xl transition-all duration-300 ${\n          isFocused ? 'shadow-md' : ''\n        }`}\n      >\n        {/* 渐变边框背景 - 现在填充整个容器而不是使用padding */}\n        <div\n          className={`absolute inset-0 bg-gradient-to-r ${\n            isFocused || input.trim() || uploadedImages.length > 0\n              ? 'from-indigo-500 via-purple-500 to-pink-500 dark:from-indigo-400 dark:via-purple-400 dark:to-pink-400 animate-border-flow'\n              : 'from-gray-200 via-gray-300 to-gray-200 dark:from-gray-700 dark:via-gray-600 dark:to-gray-700'\n          } bg-[length:200%_200%] ${isFocused ? 'opacity-100' : 'opacity-70'}`}\n        ></div>\n\n        {/* 内容容器 - 稍微缩小以显示边框 */}\n        <div\n          className={`relative m-[2px] rounded-[1.4rem] bg-white dark:bg-gray-800 backdrop-blur-sm ${\n            isDisabled ? 'opacity-90' : ''\n          }`}\n        >\n          <textarea\n            ref={inputRef}\n            value={input}\n            onChange={handleInput}\n            onKeyDown={handleKeyDown}\n            onFocus={() => setIsFocused(true)}\n            onBlur={() => setIsFocused(false)}\n            placeholder={\n              connectionStatus && !connectionStatus.connected\n                ? 'Server disconnected...'\n                : isProcessing\n                  ? 'Agent TARS is thinking...'\n                  : 'Ask Agent TARS something... (Ctrl+Enter to send)'\n            }\n            disabled={isDisabled}\n            className=\"w-full px-5 pt-4 pb-10 focus:outline-none resize-none min-h-[90px] max-h-[200px] bg-transparent text-sm leading-relaxed rounded-[1.4rem]\"\n            rows={2}\n          />\n\n          {/* File upload buttons */}\n          <div className=\"absolute left-3 bottom-2 flex items-center gap-2\">\n            <motion.button\n              whileHover={{ scale: 1.05 }}\n              whileTap={{ scale: 0.95 }}\n              type=\"button\"\n              onClick={handleFileUpload}\n              disabled={isDisabled || isProcessing}\n              className={`p-2 rounded-full transition-colors ${\n                isDisabled || isProcessing\n                  ? 'text-gray-300 dark:text-gray-600 cursor-not-allowed'\n                  : 'text-gray-400 hover:text-accent-500 hover:bg-gray-50 dark:hover:bg-gray-700/30 dark:text-gray-400'\n              }`}\n              title=\"Attach image\"\n            >\n              <FiImage size={18} />\n            </motion.button>\n            <input\n              type=\"file\"\n              ref={fileInputRef}\n              onChange={handleFileChange}\n              accept=\"image/*\"\n              multiple\n              className=\"hidden\"\n              disabled={isDisabled || isProcessing}\n            />\n          </div>\n\n          <AnimatePresence mode=\"wait\">\n            {connectionStatus && !connectionStatus.connected ? (\n              <motion.button\n                key=\"reconnect\"\n                initial={{ opacity: 0, scale: 0.8 }}\n                animate={{ opacity: 1, scale: 1 }}\n                exit={{ opacity: 0, scale: 0.8 }}\n                whileTap={{ scale: 0.9 }}\n                whileHover={{ scale: 1.05 }}\n                type=\"button\"\n                onClick={onReconnect}\n                className=\"absolute right-3 bottom-2 p-2 rounded-full text-gray-500 hover:bg-gray-50 dark:hover:bg-gray-700/30 dark:text-gray-400 transition-all duration-200\"\n                title=\"Try to reconnect\"\n              >\n                <FiRefreshCw\n                  size={20}\n                  className={connectionStatus.reconnecting ? 'animate-spin' : ''}\n                />\n              </motion.button>\n            ) : isProcessing ? (\n              <motion.button\n                key=\"abort\"\n                initial={{ opacity: 0, scale: 0.8 }}\n                animate={{ opacity: 1, scale: 1 }}\n                exit={{ opacity: 0, scale: 0.8 }}\n                whileTap={{ scale: 0.9 }}\n                whileHover={{ scale: 1.05 }}\n                type=\"button\"\n                onClick={handleAbort}\n                disabled={isAborting}\n                className={`absolute right-3 bottom-2 p-2 rounded-full ${\n                  isAborting\n                    ? 'text-gray-300 dark:text-gray-600 cursor-not-allowed'\n                    : 'text-gray-500 hover:bg-gray-50 dark:hover:bg-gray-700/30 dark:text-gray-400'\n                } transition-all duration-200`}\n                title=\"Abort current operation\"\n              >\n                {isAborting ? <FiLoader className=\"animate-spin\" size={20} /> : <FiX size={20} />}\n              </motion.button>\n            ) : (\n              <motion.button\n                key=\"send\"\n                initial={{ opacity: 0, scale: 0.8 }}\n                animate={{ opacity: 1, scale: 1 }}\n                exit={{ opacity: 0, scale: 0.8 }}\n                whileTap={{ scale: 0.9 }}\n                whileHover={{ scale: 1.05 }}\n                type=\"submit\"\n                disabled={(!input.trim() && uploadedImages.length === 0) || isDisabled}\n                className={`absolute right-3 bottom-2 p-3 rounded-full ${\n                  (!input.trim() && uploadedImages.length === 0) || isDisabled\n                    ? 'bg-gray-100 dark:bg-gray-700 text-gray-400 cursor-not-allowed'\n                    : 'bg-gradient-to-r from-indigo-500 to-purple-500 dark:from-indigo-400 dark:via-purple-400 dark:to-pink-400 text-white shadow-sm'\n                } transition-all duration-200`}\n              >\n                <FiSend size={18} />\n              </motion.button>\n            )}\n          </AnimatePresence>\n        </div>\n      </div>\n\n      <div className=\"flex justify-center mt-2 text-xs\">\n        {connectionStatus && !connectionStatus.connected ? (\n          <motion.span\n            initial={{ opacity: 0.7 }}\n            animate={{ opacity: 1 }}\n            className=\"text-red-500 dark:text-red-400 flex items-center font-medium\"\n          >\n            {connectionStatus.reconnecting\n              ? 'Attempting to reconnect...'\n              : 'Server disconnected. Click the button to reconnect.'}\n          </motion.span>\n        ) : isProcessing ? (\n          <motion.span\n            initial={{ opacity: 0.7 }}\n            whileHover={{ opacity: 1 }}\n            className=\"text-accent-500 dark:text-accent-400 flex items-center\"\n          >\n            <span className=\"typing-indicator mr-2\">\n              <span></span>\n              <span></span>\n              <span></span>\n            </span>\n            Agent is processing your request...\n          </motion.span>\n        ) : (\n          <motion.span\n            initial={{ opacity: 0.7 }}\n            whileHover={{ opacity: 1 }}\n            className=\"text-gray-500 dark:text-gray-400 transition-opacity\"\n          >\n            Use Ctrl+Enter to quickly send\n          </motion.span>\n        )}\n      </div>\n    </form>\n  );\n};\n","import React from 'react';\nimport { Sidebar } from '../Sidebar';\nimport { ChatPanel } from '../Chat/ChatPanel';\nimport { WorkspacePanel } from '../Workspace/WorkspacePanel';\nimport { useSession } from '../../hooks/useSession';\nimport { motion } from 'framer-motion';\nimport { Shell } from '../Common/Shell';\nimport { useReplayMode } from '../../context/ReplayModeContext';\nimport { Navbar } from '../Navbar';\nimport './Layout.css';\n\ninterface LayoutProps {\n  isReplayMode?: boolean;\n}\n\n/**\n * Layout Component - Main application layout\n *\n * Design principles:\n * - Clean, minimalist aesthetic with refined borders and subtle shadows\n * - Neutral color palette with elegant accent colors\n * - Consistent spacing and typography for optimal readability\n * - Seamless visual flow between different interface elements\n * - Adapts layout based on replay mode status\n */\nexport const Layout: React.FC<LayoutProps> = ({ isReplayMode: propIsReplayMode }) => {\n  const { connectionStatus } = useSession();\n\n  // Use the context hook to get global replay mode status\n  const contextIsReplayMode = useReplayMode();\n\n  // Prioritize props for backward compatibility, but fall back to context\n  const isReplayMode = propIsReplayMode !== undefined ? propIsReplayMode : contextIsReplayMode;\n\n  return (\n    <div className=\"flex flex-col h-screen bg-[#F2F3F5] dark:bg-white/5 text-gray-900 dark:text-gray-100 overflow-hidden\">\n      {/* Global navbar at the top */}\n      <Navbar />\n\n      {/* Main content area */}\n      <div className=\"flex flex-1 overflow-hidden\">\n        {/* Sidebar with ToolBar and ChatSession - only show when not in replay mode */}\n        {!isReplayMode && <Sidebar />}\n\n        {/* Content area - using flex-col to properly distribute vertical space */}\n        <div className=\"flex-1 flex flex-col overflow-hidden p-2 lg:p-3\">\n          {/* Panels container - apply flex-1 to take remaining vertical space */}\n          <div className=\"flex gap-3 flex-1 min-h-0\">\n            {/* Chat panel - adjust width based on replay mode */}\n            <motion.div\n              layout\n              className={isReplayMode ? 'w-[50%] flex flex-col' : 'w-[50%] flex flex-col'}\n            >\n              <Shell className=\"h-full rounded-xl bg-white/95 dark:bg-gray-800/95 backdrop-blur-sm border border-[#E5E6EC] dark:border-none bg-[#FFFFFFE5] dark:shadow-gray-950/5\">\n                <ChatPanel />\n              </Shell>\n            </motion.div>\n\n            {/* Workspace panel */}\n            <motion.div layout className=\"w-[50%] flex flex-col\">\n              <Shell className=\"h-full rounded-xl bg-white/95 dark:bg-gray-800/95 backdrop-blur-sm border border-[#E5E6EC] dark:border-none bg-[#FFFFFFE5] dark:shadow-gray-950/5\">\n                <WorkspacePanel />\n              </Shell>\n            </motion.div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useState, useRef, useEffect } from 'react';\nimport ReactMarkdown, { Components } from 'react-markdown';\nimport remarkGfm from 'remark-gfm';\nimport rehypeRaw from 'rehype-raw';\nimport { remarkAlert } from 'remark-github-blockquote-alert';\nimport rehypeHighlight from 'rehype-highlight';\nimport { Dialog } from '@headlessui/react';\nimport { Link } from 'react-router-dom';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { HeaderAnchor } from './HeaderAnchor';\nimport { CodeBlock } from './CodeBlock';\nimport 'highlight.js/styles/github.css';\nimport 'remark-github-blockquote-alert/alert.css';\n\ninterface MarkdownRendererProps {\n  content: string;\n  publishDate?: string;\n  author?: string;\n  className?: string;\n  forceDarkTheme?: boolean;\n}\n\n/**\n * MarkdownRenderer component\n * Renders markdown content with custom styling and enhanced functionality\n */\nexport const MarkdownRenderer: React.FC<MarkdownRendererProps> = ({\n  content,\n  publishDate,\n  author,\n  className = '',\n  forceDarkTheme = false,\n}) => {\n  const [openImage, setOpenImage] = useState<string | null>(null);\n  const [imageLoaded, setImageLoaded] = useState(false);\n  const [renderError, setRenderError] = useState<Error | null>(null);\n  // Add a ref to track if we've rendered the first h1\n  const firstH1Ref = useRef(false);\n\n  const handleImageClick = (src: string) => {\n    setOpenImage(src);\n    setImageLoaded(false);\n  };\n\n  const handleCloseModal = () => {\n    setOpenImage(null);\n  };\n\n  // Handle hash navigation on page load\n  useEffect(() => {\n    if (window.location.hash) {\n      const id = window.location.hash.substring(1);\n      const element = document.getElementById(id);\n      if (element) {\n        // Use setTimeout to ensure page is fully rendered before scrolling\n        setTimeout(() => {\n          element.scrollIntoView({ behavior: 'smooth' });\n        }, 100);\n      }\n    }\n  }, [content]); // Re-check when content changes\n\n  // Reset the first h1 flag when content changes\n  useEffect(() => {\n    firstH1Ref.current = false;\n    setRenderError(null); // Reset any previous errors when content changes\n  }, [content]);\n\n  // If there was a rendering error, show a fallback\n  if (renderError) {\n    return (\n      <div className=\"p-3 border border-amber-200 dark:border-amber-800 bg-amber-50 dark:bg-amber-900/30 rounded-md text-amber-800 dark:text-amber-200\">\n        <p className=\"font-medium mb-1\">Markdown rendering error:</p>\n        <pre className=\"text-xs overflow-auto\">{content}</pre>\n      </div>\n    );\n  }\n\n  // Determine the theme class based on the forceDarkTheme prop\n  const themeClass = forceDarkTheme ? 'dark' : '';\n\n  const components: Components = {\n    h1: ({ node, children, ...props }) => {\n      // Generate ID from heading text for anchor links\n      const id = children\n        ?.toString()\n        .toLowerCase()\n        .replace(/[^\\w\\s]/g, '')\n        .replace(/\\s+/g, '-');\n\n      // Check if this is the first h1 and set the flag\n      const isFirstH1 = !firstH1Ref.current;\n      if (isFirstH1) {\n        firstH1Ref.current = true;\n      }\n\n      return (\n        <>\n          <h1\n            id={id}\n            className=\"group text-4xl font-bold mb-2 pb-2 border-b border-white/10 bg-gradient-to-r from-white via-gray-200 to-gray-400 bg-clip-text text-transparent scroll-mt-20 flex items-center\"\n            {...props}\n          >\n            {children}\n            {id && <HeaderAnchor id={id} />}\n          </h1>\n\n          {/* Display metadata only after the first h1 */}\n          {isFirstH1 && (publishDate || author) && (\n            <div className=\"flex items-center gap-1 mb-6 text-sm text-gray-400 mb-10\">\n              {publishDate && <span>{publishDate}</span>}\n              {author && (\n                <>\n                  {publishDate && <span>•</span>}\n                  <span>{author}</span>\n                </>\n              )}\n            </div>\n          )}\n        </>\n      );\n    },\n    h2: ({ node, children, ...props }) => {\n      const id = children\n        ?.toString()\n        .toLowerCase()\n        .replace(/[^\\w\\s]/g, '')\n        .replace(/\\s+/g, '-');\n      return (\n        <h2\n          id={id}\n          className=\"group text-3xl font-bold mt-12 mb-4 bg-gradient-to-r from-white to-gray-300 bg-clip-text text-transparent scroll-mt-20 flex items-center\"\n          {...props}\n        >\n          {children}\n          {id && <HeaderAnchor id={id} />}\n        </h2>\n      );\n    },\n    h3: ({ node, children, ...props }) => {\n      const id = children\n        ?.toString()\n        .toLowerCase()\n        .replace(/[^\\w\\s]/g, '')\n        .replace(/\\s+/g, '-');\n      return (\n        <h3\n          id={id}\n          className=\"group text-2xl font-semibold mt-8 mb-3 text-gray-800 dark:text-gray-200 scroll-mt-20 flex items-center\"\n          {...props}\n        >\n          {children}\n          {id && <HeaderAnchor id={id} />}\n        </h3>\n      );\n    },\n    h4: ({ node, children, ...props }) => {\n      const id = children\n        ?.toString()\n        .toLowerCase()\n        .replace(/[^\\w\\s]/g, '')\n        .replace(/\\s+/g, '-');\n      return (\n        <h4\n          id={id}\n          className=\"group text-xl font-semibold mt-6 mb-2 text-white/80 scroll-mt-20 flex items-center\"\n          {...props}\n        >\n          {children}\n          {id && <HeaderAnchor id={id} />}\n        </h4>\n      );\n    },\n    p: ({ node, ...props }) => (\n      <p className=\"my-0 text-gray-800 dark:text-gray-200 leading-relaxed\" {...props} />\n    ),\n    a: ({ node, href, ...props }) => {\n      // Handle three types of links:\n      // 1. Hash links (#section)\n      // 2. Internal path links (/path)\n      // 3. External links (https://...)\n\n      if (href && href.startsWith('#')) {\n        // Hash links - use smooth scrolling\n        return (\n          <a\n            href={href}\n            className=\"text-blue-400 hover:text-blue-300 transition-colors underline underline-offset-2\"\n            onClick={(e) => {\n              e.preventDefault();\n              // Find target element and scroll into view\n              const element = document.getElementById(href.substring(1));\n              if (element) {\n                element.scrollIntoView({ behavior: 'smooth' });\n                // Update URL without page reload\n                window.history.pushState(null, '', href);\n              }\n            }}\n            {...props}\n          />\n        );\n      } else if (href && !href.match(/^(https?:)?\\/\\//) && href.startsWith('/')) {\n        // Internal links - use React Router's Link\n        return (\n          <Link\n            to={href}\n            className=\"text-blue-400 hover:text-blue-300 transition-colors underline underline-offset-2\"\n            {...props}\n          />\n        );\n      }\n\n      // External links - open in new tab\n      return (\n        <a\n          href={href}\n          className=\"text-blue-400 hover:text-blue-300 transition-colors underline underline-offset-2\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          {...props}\n        />\n      );\n    },\n    ul: ({ node, ...props }) => (\n      <ul className=\"my-4 list-disc pl-6 text-gray-800 dark:text-gray-200\" {...props} />\n    ),\n    ol: ({ node, ...props }) => (\n      <ol className=\"my-4 list-decimal pl-6 text-gray-800 dark:text-gray-200\" {...props} />\n    ),\n    li: ({ node, ...props }) => <li className=\"my-1\" {...props} />,\n    blockquote: ({ node, ...props }) => (\n      <blockquote\n        className=\"border-l-4 border-purple-500 pl-4 my-4 italic text-gray-400\"\n        {...props}\n      />\n    ),\n    code: ({ node, className, children, ...props }) => {\n      return (\n        <CodeBlock className={`${className} dark:text-gray-200 dark:bg-gray-800`} {...props}>\n          {children}\n        </CodeBlock>\n      );\n    },\n    table: ({ node, ...props }) => (\n      <div className=\"overflow-x-auto my-6\">\n        <table className=\"min-w-full border-collapse border border-white/20 text-sm\" {...props} />\n      </div>\n    ),\n    thead: ({ node, ...props }) => <thead className=\"bg-white/5\" {...props} />,\n    tbody: ({ node, ...props }) => <tbody className=\"divide-y divide-white/10\" {...props} />,\n    tr: ({ node, ...props }) => <tr className=\"hover:bg-white/5 transition-colors\" {...props} />,\n    th: ({ node, ...props }) => (\n      <th\n        className=\"px-4 py-3 text-left text-xs font-medium text-gray-800 dark:text-gray-200 uppercase tracking-wider border-b border-white/20\"\n        {...props}\n      />\n    ),\n    td: ({ node, ...props }) => (\n      <td className=\"px-4 py-3 text-gray-800 border-white/10\" {...props} />\n    ),\n    img: ({ node, src, ...props }) => (\n      // @ts-expect-error\n      <motion.img\n        className=\"max-w-full h-auto my-6 rounded-lg border border-white/10 cursor-pointer\"\n        src={src}\n        onClick={() => src && handleImageClick(src)}\n        {...props}\n        alt={props.alt || 'Documentation image'}\n        whileHover={{ scale: 1.01 }}\n        transition={{ duration: 0.2 }}\n      />\n    ),\n    hr: ({ node, ...props }) => <hr className=\"my-8 border-t border-white/10\" {...props} />,\n  };\n\n  try {\n    return (\n      <div className={`${themeClass} markdown-content`}>\n        <ReactMarkdown\n          remarkPlugins={[remarkGfm, remarkAlert]}\n          rehypePlugins={[rehypeRaw, [rehypeHighlight, { detect: true, ignoreMissing: true }]]}\n          className={className}\n          components={components}\n        >\n          {content}\n        </ReactMarkdown>\n        \n        {/* 图片预览对话框 */}\n        <Dialog open={!!openImage} onClose={handleCloseModal} className=\"relative z-[9999]\">\n          {/* 背景遮罩 */}\n          <div className=\"fixed inset-0 bg-black/70 backdrop-blur-sm\" aria-hidden=\"true\" />\n          \n          {/* 图片容器 */}\n          <div className=\"fixed inset-0 flex items-center justify-center p-4\">\n            <Dialog.Panel className=\"max-w-[90vw] max-h-[90vh] outline-none\">\n              <motion.img\n                src={openImage || ''}\n                alt=\"Enlarged view\"\n                onLoad={() => setImageLoaded(true)}\n                className=\"max-w-full max-h-[85vh] object-contain rounded-lg\"\n                initial={{ opacity: 0, scale: 0.9 }}\n                animate={{\n                  opacity: imageLoaded ? 1 : 0.3,\n                  scale: imageLoaded ? 1 : 0.95,\n                }}\n                exit={{ opacity: 0, scale: 0.9 }}\n                transition={{ type: 'spring', duration: 0.3 }}\n                onClick={handleCloseModal}\n              />\n            </Dialog.Panel>\n          </div>\n        </Dialog>\n      </div>\n    );\n  } catch (error) {\n    console.error('Error rendering markdown:', error);\n    setRenderError(error instanceof Error ? error : new Error(String(error)));\n\n    // Fallback render for raw content\n    return (\n      <pre className=\"p-3 text-sm bg-gray-50 dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-md overflow-auto\">\n        {content}\n      </pre>\n    );\n  }\n};\n","import React, { useCallback } from 'react';\nimport { motion } from 'framer-motion';\nimport { FiChevronLeft, FiChevronRight, FiMoon, FiSun } from 'react-icons/fi';\nimport { GoSidebarCollapse, GoSidebarExpand } from 'react-icons/go';\nimport { useLayout } from '../../hooks/useLayout';\nimport { useSession } from '../../hooks/useSession';\nimport { ShareButton } from '../Share';\nimport { useReplayMode } from '../../context/ReplayModeContext';\n\nimport './Navbar.css';\n\nexport const Navbar: React.FC = () => {\n  const { isSidebarCollapsed, toggleSidebar } = useLayout();\n  const { activeSessionId, isProcessing, modelInfo } = useSession();\n  const isReplayMode = useReplayMode();\n  const [isDarkMode, setIsDarkMode] = React.useState(\n    document.documentElement.classList.contains('dark'),\n  );\n\n  // Toggle dark mode\n  const toggleDarkMode = useCallback(() => {\n    const newMode = !isDarkMode;\n    setIsDarkMode(newMode);\n    document.documentElement.classList.toggle('dark', newMode);\n\n    // Save preference to localStorage\n    localStorage.setItem('agent-tars-theme', newMode ? 'dark' : 'light');\n  }, [isDarkMode]);\n\n  return (\n    <div className=\"h-12 border-b border-gray-300/40 dark:border-gray-600/20 backdrop-blur-sm flex items-center px-3\">\n      {/* Left section with macOS-style traffic lights */}\n      <div className=\"flex items-center\">\n        {/* macOS-style traffic lights */}\n        <div className=\"flex space-x-1.5 mr-3\">\n          <div className=\"traffic-light traffic-light-red\" />\n          <div className=\"traffic-light traffic-light-yellow\" />\n          <div className=\"traffic-light traffic-light-green\" />\n        </div>\n      </div>\n\n      {/* Sidebar toggle button - positioned at the right edge aligned with Chat area */}\n      {!isReplayMode && (\n        <div className={`${isSidebarCollapsed ? 'ml-0' : 'ml-[245px]'}`}>\n          <motion.button\n            whileHover={{ scale: 1.1 }}\n            whileTap={{ scale: 0.95 }}\n            onClick={toggleSidebar}\n            className=\"text-gray-500 hover:text-gray-700 dark:hover:text-gray-300 p-1.5 hover:bg-gray-100/40 dark:hover:bg-gray-800/40 rounded-full transition-colors\"\n            title={isSidebarCollapsed ? 'Expand sidebar' : 'Collapse sidebar'}\n          >\n            {isSidebarCollapsed ? <GoSidebarCollapse size={20} /> : <GoSidebarExpand size={20} />}\n          </motion.button>\n        </div>\n      )}\n\n      {/* Center section - Model info */}\n      <div className=\"flex-1 flex items-center justify-center\">\n        {modelInfo.model && (\n          <div className=\"px-3 py-1 rounded-full bg-gray-100/80 dark:bg-gray-700/80 text-xs text-gray-700 dark:text-gray-300 border border-gray-200/40 dark:border-gray-700/30 flex items-center\">\n            <div className=\"w-4 h-4 rounded-full bg-purple-400 dark:bg-purple-500 mr-2 flex-shrink-0\"></div>\n            <span className=\"font-mono\">{modelInfo.model}</span>\n            {modelInfo.provider && (\n              <span className=\"ml-2 px-1.5 py-0.5 rounded-md bg-gray-200/80 dark:bg-gray-600/80 text-gray-600 dark:text-gray-400 text-[10px]\">\n                {modelInfo.provider}\n              </span>\n            )}\n          </div>\n        )}\n      </div>\n\n      {/* Right section - with share button and dark mode toggle */}\n      <div className=\"flex items-center space-x-2\">\n        {activeSessionId && !isProcessing && <ShareButton variant=\"navbar\" />}\n\n        {/* Dark mode toggle */}\n        <motion.button\n          whileHover={{ scale: 1.1 }}\n          whileTap={{ scale: 0.95 }}\n          onClick={toggleDarkMode}\n          className=\"w-8 h-8 rounded-full flex items-center justify-center text-gray-500 hover:text-gray-700 dark:hover:text-gray-300 hover:bg-gray-100/40 dark:hover:bg-gray-800/40 transition-colors\"\n          title={isDarkMode ? 'Light Mode' : 'Dark Mode'}\n        >\n          {isDarkMode ? <FiSun size={16} /> : <FiMoon size={16} />}\n        </motion.button>\n      </div>\n    </div>\n  );\n};\n","export { Navbar } from './Navbar';\n","import React from 'react';\nimport { motion } from 'framer-motion';\nimport { FiPlay, FiPause, FiSkipForward, FiX, FiClock } from 'react-icons/fi';\nimport { useReplay } from '../../hooks/useReplay';\n\n/**\n * ReplayControls - Provides playback controls for the replay functionality\n *\n * Design principles:\n * - Monochromatic black/gray design that matches the UI\n * - Minimalist controls with subtle hover states\n * - No box shadows or excessive decorations\n */\nexport const ReplayControls: React.FC = () => {\n  const {\n    replayState,\n    startReplay,\n    pauseReplay,\n    jumpToResult,\n    exitReplay,\n    setPlaybackSpeed,\n    cancelAutoPlay,\n  } = useReplay();\n\n  const { isPaused, playbackSpeed, autoPlayCountdown } = replayState;\n\n  // 确定按钮状态 - 添加倒计时判断\n  const isCountingDown = autoPlayCountdown !== null;\n  const showPlayButton = isPaused || isCountingDown;\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 10 }}\n      animate={{ opacity: 1, y: 0 }}\n      exit={{ opacity: 0, y: 10 }}\n      transition={{ duration: 0.3 }}\n      className=\"flex items-center justify-between gap-2 px-4 py-3 rounded-xl bg-gray-100 dark:bg-gray-800 border border-gray-200/50 dark:border-gray-700/30\"\n    >\n      {/* Exit button - moved to left side */}\n      <motion.button\n        whileHover={{ scale: 1.05 }}\n        whileTap={{ scale: 0.95 }}\n        onClick={exitReplay}\n        className=\"p-1.5 rounded-full text-gray-500 dark:text-gray-400 hover:bg-gray-200/70 dark:hover:bg-gray-700/50 transition-colors\"\n        title=\"Exit replay\"\n      >\n        <FiX size={16} />\n      </motion.button>\n\n      {/* Center playback controls */}\n      <div className=\"flex items-center gap-3\">\n        {/* Play/Pause button - now larger and more prominent */}\n        <motion.button\n          whileHover={{ scale: 1.05 }}\n          whileTap={{ scale: 0.95 }}\n          onClick={() => {\n            if (isCountingDown) {\n              // 如果在倒计时，取消倒计时并开始播放\n              cancelAutoPlay();\n              startReplay();\n            } else if (isPaused) {\n              startReplay();\n            } else {\n              pauseReplay();\n            }\n          }}\n          className=\"w-10 h-10 flex items-center justify-center rounded-full bg-gray-800 dark:bg-gray-200 text-white dark:text-gray-800\"\n        >\n          {showPlayButton ? <FiPlay size={18} /> : <FiPause size={18} />}\n        </motion.button>\n\n        {/* Skip to end button */}\n        <motion.button\n          whileHover={{ scale: 1.05 }}\n          whileTap={{ scale: 0.95 }}\n          onClick={() => {\n            // 如果在倒计时，先取消倒计时\n            if (isCountingDown) {\n              cancelAutoPlay();\n            }\n            jumpToResult();\n          }}\n          className=\"flex items-center justify-center w-8 h-8 rounded-full bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600\"\n          title=\"Skip to end\"\n        >\n          <FiSkipForward size={16} />\n        </motion.button>\n      </div>\n\n      {/* Playback speed controls */}\n      <div className=\"flex items-center gap-1\">\n        <span className=\"text-xs text-gray-500 dark:text-gray-400 mr-1\">\n          <FiClock size={12} className=\"inline mr-1\" />\n          Speed\n        </span>\n        {[1, 2, 3].map((speed) => (\n          <motion.button\n            key={speed}\n            whileHover={{ scale: 1.05 }}\n            whileTap={{ scale: 0.95 }}\n            onClick={() => setPlaybackSpeed(speed)}\n            className={`w-6 h-6 flex items-center justify-center rounded-full text-xs font-medium ${\n              playbackSpeed === speed\n                ? 'bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-200 border border-gray-300/50 dark:border-gray-600/30'\n                : 'text-gray-500 dark:text-gray-400 hover:bg-gray-200/70 dark:hover:bg-gray-700/50'\n            }`}\n          >\n            {speed}x\n          </motion.button>\n        ))}\n      </div>\n    </motion.div>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport WelcomePage from '../Welcome/WelcomePage';\nimport { useSession } from '../../hooks/useSession';\n\n/**\n * HomePage Component - Handles the welcome page and query parameter processing\n */\nconst HomePage: React.FC = () => {\n  const { activeSessionId, sendMessage, createSession } = useSession();\n  const location = useLocation();\n  const navigate = useNavigate();\n\n  // Process query parameters if any (for direct query submissions)\n  useEffect(() => {\n    const processQueryParam = async () => {\n      const searchParams = new URLSearchParams(location.search);\n      const query = searchParams.get('q');\n\n      // If there's a query parameter but no active session, create one and send the query\n      if (query && !activeSessionId) {\n        try {\n          const sessionId = await createSession();\n\n          // Navigate to the session without the query parameter\n          navigate(`/${sessionId}`);\n\n          // Send the query after a short delay to ensure session is ready\n          setTimeout(() => {\n            sendMessage(query);\n          }, 500);\n        } catch (error) {\n          console.error('Failed to process query:', error);\n        }\n      }\n    };\n\n    processQueryParam();\n  }, [location, activeSessionId, createSession, navigate, sendMessage]);\n\n  return <WelcomePage />;\n};\n\nexport default HomePage;\n","import React, { useEffect } from 'react';\nimport { useParams, Navigate, useLocation } from 'react-router-dom';\nimport { useSession } from '../../hooks/useSession';\nimport { useReplayMode } from '../../context/ReplayModeContext';\n\ninterface SessionRouterProps {\n  children: React.ReactNode;\n}\n\n/**\n * SessionRouter Component - Handles session routing logic\n */\nexport const SessionRouter: React.FC<SessionRouterProps> = ({ children }) => {\n  const { sessionId } = useParams<{ sessionId: string }>();\n  const { setActiveSession, sessions, connectionStatus, activeSessionId, sendMessage } =\n    useSession();\n  const isReplayMode = useReplayMode();\n  const location = useLocation();\n\n  // Check if session exists in our loaded sessions\n  const sessionExists = sessions.some((session) => session.id === sessionId);\n\n  // Handle query parameter if present\n  useEffect(() => {\n    const searchParams = new URLSearchParams(location.search);\n    const query = searchParams.get('q');\n\n    if (\n      query &&\n      sessionId &&\n      activeSessionId === sessionId &&\n      !location.pathname.includes('/welcome')\n    ) {\n      // Process the query\n      sendMessage(query).catch((error) => {\n        console.error(`Failed to send query: ${error}`);\n      });\n    }\n  }, [location.search, sessionId, activeSessionId, sendMessage, location.pathname]);\n\n  // Setup session - but skip in replay mode as it's handled by ReplayModeProvider\n  useEffect(() => {\n    // Skip this logic in replay mode since session is already set\n    if (isReplayMode) {\n      console.log('[ReplayMode] SessionRouter: Skipping session setup in replay mode');\n      return;\n    }\n\n    // Only set active session if:\n    // 1. We have a session ID from URL\n    // 2. It exists in our sessions list\n    // 3. We're connected\n    if (sessionId && sessionExists && connectionStatus.connected) {\n      console.log(`SessionRouter: Loading session ${sessionId} from URL`);\n\n      setActiveSession(sessionId).catch((error) => {\n        console.error(`Failed to load session ${sessionId}:`, error);\n      });\n    }\n  }, [sessionId, sessionExists, connectionStatus.connected, setActiveSession, isReplayMode]);\n\n  // In replay mode, always show content regardless of session existence\n  if (isReplayMode) {\n    console.log('[ReplayMode] SessionRouter: Rendering children in replay mode');\n    return <>{children}</>;\n  }\n\n  // For normal mode, redirect if session doesn't exist\n  if (!sessionExists && sessions.length > 0 && sessionId) {\n    return <Navigate to=\"/\" replace />;\n  }\n\n  return <>{children}</>;\n};\n","import React, { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { FiShare2 } from 'react-icons/fi';\nimport { useSession } from '../../hooks/useSession';\nimport { ShareModal } from './ShareModal';\n\ninterface ShareButtonProps {\n  variant?: 'default' | 'navbar';\n}\n\n/**\n * 分享按钮组件 - 显示在聊天面板底部或导航栏\n *\n * 设计原则:\n * - 简洁的单色图标，与整体黑白灰风格保持一致\n * - 圆形按钮设计，保持优雅的视觉效果\n * - 精细的悬停和点击动画，提升交互体验\n * - 支持不同的展示变体以适应不同位置\n */\nexport const ShareButton: React.FC<ShareButtonProps> = ({ variant = 'default' }) => {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const { activeSessionId } = useSession();\n\n  const handleOpenModal = () => {\n    setIsModalOpen(true);\n  };\n\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n  };\n\n  if (!activeSessionId) {\n    return null;\n  }\n\n  // Navbar variant has different styling\n  if (variant === 'navbar') {\n    return (\n      <>\n        <motion.button\n          whileHover={{ scale: 1.05 }}\n          whileTap={{ scale: 0.95 }}\n          onClick={handleOpenModal}\n          className=\"p-2 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 hover:bg-gray-100/40 dark:hover:bg-gray-700/40 rounded-full transition-all duration-200\"\n          title=\"Share this conversation\"\n        >\n          <FiShare2 size={16} />\n        </motion.button>\n\n        <ShareModal isOpen={isModalOpen} onClose={handleCloseModal} sessionId={activeSessionId} />\n      </>\n    );\n  }\n\n  // Default variant (original styling)\n  return (\n    <>\n      <motion.button\n        whileHover={{ scale: 1.05 }}\n        whileTap={{ scale: 0.95 }}\n        onClick={handleOpenModal}\n        className=\"flex items-center gap-1.5 px-3 py-1.5 rounded-3xl text-xs text-gray-700 dark:text-gray-200 bg-white dark:bg-gray-800 border border-gray-200/70 dark:border-gray-700/30 shadow-sm hover:bg-gray-50 dark:hover:bg-gray-700/70 transition-all duration-200\"\n        title=\"Share this conversation\"\n      >\n        <FiShare2 className=\"text-gray-500 dark:text-gray-400\" size={14} />\n        <span>Share</span>\n      </motion.button>\n\n      <ShareModal isOpen={isModalOpen} onClose={handleCloseModal} sessionId={activeSessionId} />\n    </>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { motion } from 'framer-motion';\nimport { FiX, FiShare2, FiLink, FiDownload, FiCheck, FiLoader } from 'react-icons/fi';\nimport { shareService, ShareConfig, ShareResult } from '../../services/shareService';\nimport { Dialog } from '@headlessui/react';\n\ninterface ShareModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  sessionId: string;\n}\n\n/**\n * 分享模态框组件\n *\n * 设计原则:\n * - 简洁优雅的黑白灰风格，符合整体设计语言\n * - 大圆角和精细边框，呈现精致的视觉效果\n * - 动态过渡和微妙动画，提升用户体验\n * - 清晰的状态反馈，包括加载、成功和错误状态\n */\nexport const ShareModal: React.FC<ShareModalProps> = ({ isOpen, onClose, sessionId }) => {\n  const [shareConfig, setShareConfig] = useState<ShareConfig | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [shareResult, setShareResult] = useState<ShareResult | null>(null);\n  const [copied, setCopied] = useState(false);\n\n  // 获取分享配置\n  useEffect(() => {\n    if (isOpen) {\n      const fetchConfig = async () => {\n        try {\n          const config = await shareService.getShareConfig();\n          setShareConfig(config);\n        } catch (error) {\n          console.error('Failed to get share config:', error);\n          // 设置默认配置\n          setShareConfig({ hasShareProvider: false, shareProvider: null });\n        }\n      };\n\n      fetchConfig();\n    }\n  }, [isOpen]);\n\n  // 当模态框关闭时重置状态，允许重新分享\n  useEffect(() => {\n    if (!isOpen) {\n      setShareResult(null);\n    }\n  }, [isOpen]);\n\n  // 处理上传分享\n  const handleUpload = async () => {\n    if (!sessionId || !shareConfig) return;\n\n    setIsLoading(true);\n    setShareResult(null);\n\n    try {\n      const result = await shareService.shareSession(sessionId, true);\n      setShareResult(result);\n    } catch (error) {\n      console.error('Failed to share session:', error);\n      setShareResult({\n        success: false,\n        error: error instanceof Error ? error.message : String(error),\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // 处理下载分享\n  const handleDownload = async () => {\n    if (!sessionId) return;\n\n    setIsLoading(true);\n    setShareResult(null);\n\n    try {\n      const result = await shareService.shareSession(sessionId, false);\n      setShareResult(result);\n\n      if (result.success && result.html) {\n        shareService.downloadShareHtml(result.html, sessionId);\n      }\n    } catch (error) {\n      console.error('Failed to download share HTML:', error);\n      setShareResult({\n        success: false,\n        error: error instanceof Error ? error.message : String(error),\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // 复制分享链接\n  const handleCopyLink = () => {\n    if (shareResult?.url) {\n      navigator.clipboard.writeText(shareResult.url);\n      setCopied(true);\n      setTimeout(() => setCopied(false), 2000);\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onClose={onClose} className=\"relative z-[9999]\">\n      {/* 背景遮罩层 */}\n      <div className=\"fixed inset-0 bg-black bg-opacity-40 backdrop-blur-md\" aria-hidden=\"true\" />\n\n      {/* 模态框内容容器 */}\n      <div className=\"fixed inset-0 flex items-center justify-center p-4\">\n        <Dialog.Panel className=\"w-full max-w-md p-6 bg-white dark:bg-gray-800 rounded-3xl border border-[#E5E6EC] dark:border-gray-700/30 shadow-lg\">\n          {/* 标题和关闭按钮 */}\n          <div className=\"flex items-center justify-between mb-6\">\n            <Dialog.Title className=\"text-xl font-medium text-gray-800 dark:text-gray-200 flex items-center\">\n              <FiShare2 className=\"mr-3 text-gray-500 dark:text-gray-400\" />\n              Share Conversation\n            </Dialog.Title>\n            <motion.button\n              whileHover={{ scale: 1.1 }}\n              whileTap={{ scale: 0.9 }}\n              onClick={onClose}\n              className=\"p-2 rounded-full text-gray-500 hover:bg-gray-100 dark:hover:bg-gray-700/50 transition-colors\"\n            >\n              <FiX size={20} />\n            </motion.button>\n          </div>\n\n          {/* 正在加载配置 */}\n          {!shareConfig && (\n            <div className=\"flex items-center justify-center py-8\">\n              <div className=\"flex items-center space-x-2 text-gray-500 dark:text-gray-400\">\n                <motion.div\n                  animate={{ rotate: 360 }}\n                  transition={{ duration: 1, repeat: Infinity, ease: 'linear' }}\n                >\n                  <FiLoader size={20} />\n                </motion.div>\n                <span>Loading share options...</span>\n              </div>\n            </div>\n          )}\n\n          {/* 分享选项 */}\n          {shareConfig && !isLoading && !shareResult && (\n            <div className=\"space-y-6\">\n              <p className=\"text-gray-600 dark:text-gray-400 text-sm\">\n                Choose how you want to share this conversation:\n              </p>\n\n              <div className=\"space-y-4\">\n                {/* 上传选项 - 仅当配置了分享提供者时显示 */}\n                {shareConfig.hasShareProvider && (\n                  <motion.button\n                    whileHover={{ y: -2 }}\n                    whileTap={{ scale: 0.98 }}\n                    onClick={handleUpload}\n                    className=\"w-full flex items-center justify-between p-4 bg-white dark:bg-gray-800 rounded-xl border border-[#E5E6EC] dark:border-gray-700/30 hover:border-gray-300 dark:hover:border-gray-600/70 transition-all duration-200\"\n                  >\n                    <div className=\"flex items-center\">\n                      <div className=\"w-10 h-10 rounded-full bg-gray-100 dark:bg-gray-700 flex items-center justify-center text-gray-700 dark:text-gray-300 mr-3\">\n                        <FiLink size={20} />\n                      </div>\n                      <div className=\"text-left\">\n                        <h4 className=\"font-medium text-gray-800 dark:text-gray-200\">\n                          Get shareable link\n                        </h4>\n                        <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                          Upload and get a link to share\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"w-8 h-8 rounded-full bg-gray-100 dark:bg-gray-700 flex items-center justify-center\">\n                      <FiShare2 size={16} className=\"text-gray-500 dark:text-gray-400\" />\n                    </div>\n                  </motion.button>\n                )}\n\n                {/* 下载选项 - 始终显示 */}\n                <motion.button\n                  whileHover={{ y: -2 }}\n                  whileTap={{ scale: 0.98 }}\n                  onClick={handleDownload}\n                  className=\"w-full flex items-center justify-between p-4 bg-white dark:bg-gray-800 rounded-xl border border-[#E5E6EC] dark:border-gray-700/30 hover:border-gray-300 dark:hover:border-gray-600/70 transition-all duration-200\"\n                >\n                  <div className=\"flex items-center\">\n                    <div className=\"w-10 h-10 rounded-full bg-gray-100 dark:bg-gray-700 flex items-center justify-center text-gray-700 dark:text-gray-300 mr-3\">\n                      <FiDownload size={20} />\n                    </div>\n                    <div className=\"text-left\">\n                      <h4 className=\"font-medium text-gray-800 dark:text-gray-200\">\n                        Download HTML\n                      </h4>\n                      <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                        Save the conversation as HTML file\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"w-8 h-8 rounded-full bg-gray-100 dark:bg-gray-700 flex items-center justify-center\">\n                    <FiDownload size={16} className=\"text-gray-500 dark:text-gray-400\" />\n                  </div>\n                </motion.button>\n              </div>\n\n              <p className=\"text-xs text-gray-500 dark:text-gray-400 text-center\">\n                Sharing includes all messages and tool results in this conversation.\n              </p>\n            </div>\n          )}\n\n          {/* 加载状态 */}\n          {isLoading && (\n            <div className=\"flex flex-col items-center justify-center py-10\">\n              <motion.div\n                animate={{ rotate: 360 }}\n                transition={{ duration: 2, repeat: Infinity, ease: 'linear' }}\n                className=\"w-12 h-12 rounded-full border-2 border-gray-200 dark:border-gray-700 border-t-gray-600 dark:border-t-gray-300 mb-4\"\n              />\n              <p className=\"text-gray-700 dark:text-gray-300 text-center\">\n                Preparing your conversation for sharing...\n              </p>\n            </div>\n          )}\n\n          {/* 分享结果 - 成功 */}\n          {shareResult && shareResult.success && shareResult.url && (\n            <div className=\"space-y-6\">\n              <div className=\"bg-green-50/50 dark:bg-green-900/20 rounded-xl p-4 border border-green-100/60 dark:border-green-800/30 flex items-start\">\n                <div className=\"w-8 h-8 rounded-full bg-green-100 dark:bg-green-800/40 flex items-center justify-center flex-shrink-0 mr-3\">\n                  <FiCheck className=\"text-green-600 dark:text-green-400\" size={16} />\n                </div>\n                <div>\n                  <p className=\"font-medium text-gray-800 dark:text-gray-200\">\n                    Share link created!\n                  </p>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">\n                    Your conversation is now available at the link below.\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"relative\">\n                <input\n                  type=\"text\"\n                  value={shareResult.url}\n                  readOnly\n                  className=\"w-full pr-24 pl-4 py-3 bg-gray-50 dark:bg-gray-700/60 rounded-xl border border-[#E5E6EC] dark:border-gray-700/30 text-gray-800 dark:text-gray-200 text-sm focus:outline-none\"\n                />\n                <button\n                  onClick={handleCopyLink}\n                  className=\"absolute right-1.5 top-1.5 px-3 py-1.5 bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 rounded-lg text-xs font-medium text-gray-700 dark:text-gray-300 transition-colors\"\n                >\n                  {copied ? (\n                    <span className=\"flex items-center\">\n                      <FiCheck className=\"mr-1\" size={12} />\n                      Copied!\n                    </span>\n                  ) : (\n                    'Copy Link'\n                  )}\n                </button>\n              </div>\n\n              <p className=\"text-xs text-gray-500 dark:text-gray-400 text-center\">\n                This link will be accessible to anyone who has it.\n              </p>\n\n              <div className=\"flex justify-end\">\n                <motion.button\n                  whileHover={{ scale: 1.02 }}\n                  whileTap={{ scale: 0.98 }}\n                  onClick={onClose}\n                  className=\"px-4 py-2 bg-gray-100 dark:bg-gray-700 rounded-xl text-sm font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors\"\n                >\n                  Close\n                </motion.button>\n              </div>\n            </div>\n          )}\n\n          {/* 分享结果 - 下载HTML成功 */}\n          {shareResult && shareResult.success && shareResult.html && (\n            <div className=\"space-y-6\">\n              <div className=\"bg-green-50/50 dark:bg-green-900/20 rounded-xl p-4 border border-green-100/60 dark:border-green-800/30 flex items-start\">\n                <div className=\"w-8 h-8 rounded-full bg-green-100 dark:bg-green-800/40 flex items-center justify-center flex-shrink-0 mr-3\">\n                  <FiCheck className=\"text-green-600 dark:text-green-400\" size={16} />\n                </div>\n                <div>\n                  <p className=\"font-medium text-gray-800 dark:text-gray-200\">\n                    HTML file downloaded!\n                  </p>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">\n                    The HTML file contains all messages and tool results from this conversation.\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"flex justify-end\">\n                <motion.button\n                  whileHover={{ scale: 1.02 }}\n                  whileTap={{ scale: 0.98 }}\n                  onClick={onClose}\n                  className=\"px-4 py-2 bg-gray-100 dark:bg-gray-700 rounded-xl text-sm font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors\"\n                >\n                  Close\n                </motion.button>\n              </div>\n            </div>\n          )}\n\n          {/* 分享结果 - 错误 */}\n          {shareResult && !shareResult.success && (\n            <div className=\"space-y-6\">\n              <div className=\"bg-red-50/50 dark:bg-red-900/20 rounded-xl p-4 border border-red-100/60 dark:border-red-800/30 flex items-start\">\n                <div className=\"w-8 h-8 rounded-full bg-red-100 dark:bg-red-800/40 flex items-center justify-center flex-shrink-0 mr-3\">\n                  <FiX className=\"text-red-600 dark:text-red-400\" size={16} />\n                </div>\n                <div>\n                  <p className=\"font-medium text-gray-800 dark:text-gray-200\">Failed to share</p>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">\n                    {shareResult.error ||\n                      'An error occurred while trying to share the conversation.'}\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"flex justify-end\">\n                <motion.button\n                  whileHover={{ scale: 1.02 }}\n                  whileTap={{ scale: 0.98 }}\n                  onClick={onClose}\n                  className=\"px-4 py-2 bg-gray-100 dark:bg-gray-700 rounded-xl text-sm font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors\"\n                >\n                  Close\n                </motion.button>\n              </div>\n            </div>\n          )}\n        </Dialog.Panel>\n      </div>\n    </Dialog>\n  );\n};\n","export { ShareButton } from './ShareButton';\nexport { ShareModal } from './ShareModal';\n","import React, { useState, useMemo, useCallback } from 'react';\nimport { useSession } from '../../hooks/useSession';\nimport { useNavigate } from 'react-router-dom';\nimport { FiRefreshCw, FiWifiOff, FiChevronDown, FiChevronUp } from 'react-icons/fi';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport SessionItem from './SessionItem';\n\ninterface ChatSessionProps {\n  isCollapsed: boolean;\n}\n\n/**\n * ChatSession Component - Collapsible sidebar for session management\n *\n * Design principles:\n * - Clean, consistent visual hierarchy\n * - Collapsible interface to maximize workspace\n * - Time-based grouping for easy navigation\n * - Offline mode support with clear visual feedback\n */\nexport const ChatSession: React.FC<ChatSessionProps> = ({ isCollapsed }) => {\n  const {\n    sessions,\n    activeSessionId,\n    setActiveSession,\n    updateSessionMetadata,\n    deleteSession,\n    loadSessions,\n    connectionStatus,\n    checkServerStatus,\n  } = useSession();\n\n  const navigate = useNavigate();\n\n  const [editingSessionId, setEditingSessionId] = useState<string | null>(null);\n  const [editedName, setEditedName] = useState('');\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [loadingSessionId, setLoadingSessionId] = useState<string | null>(null);\n  const [collapsedSections, setCollapsedSections] = useState<Record<string, boolean>>({});\n\n  // Toggle section collapse state\n  const toggleSectionCollapse = useCallback((sectionKey: string) => {\n    setCollapsedSections((prev) => ({\n      ...prev,\n      [sectionKey]: !prev[sectionKey],\n    }));\n  }, []);\n\n  // Group sessions by time period\n  const groupedSessions = useMemo(() => {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n\n    const yesterday = new Date(today);\n    yesterday.setDate(yesterday.getDate() - 1);\n\n    const lastWeek = new Date(today);\n    lastWeek.setDate(lastWeek.getDate() - 7);\n\n    // Initialize groups\n    const groups: Array<{ label: string; sessions: Array<any>; key: string }> = [\n      { label: 'Today', sessions: [], key: 'today' },\n      { label: 'Yesterday', sessions: [], key: 'yesterday' },\n      { label: 'This Week', sessions: [], key: 'thisWeek' },\n      { label: 'Earlier', sessions: [], key: 'earlier' },\n    ];\n\n    // Categorize sessions\n    sessions.forEach((session) => {\n      const sessionDate = new Date(session.updatedAt || session.createdAt);\n\n      if (sessionDate >= today) {\n        groups[0].sessions.push(session);\n      } else if (sessionDate >= yesterday) {\n        groups[1].sessions.push(session);\n      } else if (sessionDate >= lastWeek) {\n        groups[2].sessions.push(session);\n      } else {\n        groups[3].sessions.push(session);\n      }\n    });\n\n    // Only return non-empty groups\n    return groups.filter((group) => group.sessions.length > 0);\n  }, [sessions]);\n\n  // Event handlers\n  const handleEditSession = useCallback((sessionId: string, currentName?: string) => {\n    setEditingSessionId(sessionId);\n    setEditedName(currentName || '');\n  }, []);\n\n  const handleSaveEdit = useCallback(\n    async (sessionId: string) => {\n      try {\n        await updateSessionMetadata({ sessionId, updates: { name: editedName } });\n        setEditingSessionId(null);\n      } catch (error) {\n        console.error('Failed to update session name:', error);\n      }\n    },\n    [updateSessionMetadata, editedName],\n  );\n\n  const handleDeleteSession = useCallback(\n    async (sessionId: string, e: React.MouseEvent) => {\n      e.stopPropagation();\n\n      if (window.confirm('Are you sure you want to delete this session?')) {\n        try {\n          await deleteSession(sessionId);\n        } catch (error) {\n          console.error('Failed to delete session:', error);\n        }\n      }\n    },\n    [deleteSession],\n  );\n\n  const refreshSessions = useCallback(async () => {\n    setIsRefreshing(true);\n    try {\n      const isConnected = await checkServerStatus();\n      if (isConnected) {\n        await loadSessions();\n      }\n    } catch (error) {\n      console.error('Failed to refresh sessions:', error);\n    } finally {\n      setIsRefreshing(false);\n    }\n  }, [checkServerStatus, loadSessions]);\n\n  const handleSessionClick = useCallback(\n    async (sessionId: string) => {\n      if (loadingSessionId || !connectionStatus.connected) return;\n\n      try {\n        setLoadingSessionId(sessionId);\n        navigate(`/${sessionId}`);\n      } catch (error) {\n        console.error('Failed to switch session:', error);\n        checkServerStatus();\n      } finally {\n        setLoadingSessionId(null);\n      }\n    },\n    [loadingSessionId, connectionStatus.connected, navigate, checkServerStatus],\n  );\n\n  // If collapsed, render minimal sidebar\n  if (isCollapsed) {\n    return (\n      <div className=\"flex flex-col h-full bg-transparent w-0 border-r border-gray-100/40 dark:border-gray-700/20\">\n        {/* No collapse button here anymore - moved to Navbar */}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"w-64 flex flex-col h-full duration-200 backdrop-blur-sm border-r border-gray-100/40 dark:border-gray-700/20\">\n      {/* Header with title - no collapse button anymore */}\n      <div className=\"p-4 flex items-center justify-between border-b border-gray-100/40 dark:border-gray-700/20\">\n        <div className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Recent Tasks</div>\n        <div className=\"flex items-center gap-2\">\n          {/* Connection status indicator */}\n          <div\n            className={`h-2 w-2 rounded-full ${\n              connectionStatus.connected\n                ? 'bg-green-500 animate-pulse'\n                : connectionStatus.reconnecting\n                  ? 'bg-yellow-500 animate-ping'\n                  : 'bg-gray-400'\n            }`}\n            title={\n              connectionStatus.connected\n                ? 'Connected to server'\n                : connectionStatus.reconnecting\n                  ? 'Reconnecting...'\n                  : 'Disconnected from server'\n            }\n          />\n\n          <motion.button\n            whileHover={{ rotate: 180 }}\n            transition={{ duration: 0.3 }}\n            onClick={refreshSessions}\n            disabled={isRefreshing || !connectionStatus.connected}\n            className={`text-gray-500 hover:text-gray-700 dark:hover:text-gray-300 p-1 rounded-full hover:bg-gray-100/40 dark:hover:bg-gray-800/40 text-xs transition-all ${\n              !connectionStatus.connected && 'opacity-50 cursor-not-allowed'\n            }`}\n            title={connectionStatus.connected ? 'Refresh tasks' : 'Server disconnected'}\n          >\n            <FiRefreshCw className={isRefreshing ? 'animate-spin' : ''} size={12} />\n          </motion.button>\n        </div>\n      </div>\n\n      {/* Offline mode banner */}\n      {!connectionStatus.connected && sessions.length > 0 && (\n        <div className=\"px-3 py-2\">\n          <div className=\"p-3 rounded-xl bg-red-50/30 dark:bg-red-900/15 text-gray-700 dark:text-gray-300 text-sm border border-red-200/50 dark:border-red-800/30 shadow-sm\">\n            <div className=\"flex items-center\">\n              <FiWifiOff className=\"mr-2 flex-shrink-0 text-red-500 dark:text-red-400\" />\n              <div className=\"font-medium text-red-700 dark:text-red-400\">Offline Mode</div>\n            </div>\n            <p className=\"mt-1 text-xs\">\n              You can view tasks but can't create new ones until reconnected.\n            </p>\n            <motion.button\n              whileHover={{ scale: 1.02 }}\n              whileTap={{ scale: 0.98 }}\n              onClick={() => checkServerStatus()}\n              className=\"w-full mt-2 py-1.5 px-3 bg-red-100/70 dark:bg-red-800/30 hover:bg-red-200/70 dark:hover:bg-red-700/40 rounded-xl text-xs font-medium transition-colors flex items-center justify-center border border-red-200/30 dark:border-red-700/30 text-red-700 dark:text-red-300\"\n            >\n              <FiRefreshCw\n                className={`mr-1.5 ${connectionStatus.reconnecting ? 'animate-spin' : ''}`}\n                size={12}\n              />\n              {connectionStatus.reconnecting ? 'Reconnecting...' : 'Reconnect to Server'}\n            </motion.button>\n          </div>\n        </div>\n      )}\n\n      {/* Sessions list */}\n      <div className=\"flex-1 overflow-y-auto sidebar-scrollbar p-3\">\n        <AnimatePresence>\n          {groupedSessions.map((group) => (\n            <div key={group.key} className=\"mb-4\">\n              {/* Group header and toggle */}\n              <motion.button\n                onClick={() => toggleSectionCollapse(group.key)}\n                className=\"w-full flex items-center justify-between px-1 py-2 text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider hover:text-gray-700 dark:hover:text-gray-300\"\n                whileHover={{ x: 2 }}\n              >\n                <span>{group.label}</span>\n                <motion.div\n                  animate={{ rotate: collapsedSections[group.key] ? 0 : 180 }}\n                  transition={{ duration: 0.2 }}\n                >\n                  <FiChevronUp size={14} />\n                </motion.div>\n              </motion.button>\n\n              {/* Sessions in this group */}\n              <AnimatePresence>\n                {!collapsedSections[group.key] && (\n                  <motion.div\n                    initial={{ height: 0, opacity: 0 }}\n                    animate={{ height: 'auto', opacity: 1 }}\n                    exit={{ height: 0, opacity: 0 }}\n                    transition={{ duration: 0.3 }}\n                    className=\"overflow-hidden\"\n                  >\n                    <div className=\"space-y-1\">\n                      {group.sessions.map((session) => (\n                        <SessionItem\n                          key={session.id}\n                          session={session}\n                          isActive={activeSessionId === session.id}\n                          isLoading={loadingSessionId === session.id}\n                          isConnected={connectionStatus.connected}\n                          onSessionClick={handleSessionClick}\n                          onEditSession={handleEditSession}\n                          onDeleteSession={handleDeleteSession}\n                          onSaveEdit={handleSaveEdit}\n                          editingSessionId={editingSessionId}\n                          editedName={editedName}\n                          setEditedName={setEditedName}\n                        />\n                      ))}\n                    </div>\n                  </motion.div>\n                )}\n              </AnimatePresence>\n            </div>\n          ))}\n        </AnimatePresence>\n      </div>\n    </div>\n  );\n};","import React from 'react';\nimport { ToolBar } from './ToolBar';\nimport { ChatSession } from './ChatSession';\nimport { useLayout } from '../../hooks/useLayout';\nimport { useReplayMode } from '../../context/ReplayModeContext';\n\n/**\n * SidebarContainer - Container component that orchestrates the sidebar layout\n *\n * Design principles:\n * - Manages the layout of ToolBar and ChatSession components\n * - Handles conditional rendering based on replay mode\n * - Maintains proper spacing and alignment between components\n * - Provides a clean interface for the main layout\n */\nexport const SidebarContainer: React.FC = () => {\n  const { isSidebarCollapsed } = useLayout();\n  const isReplayMode = useReplayMode();\n\n  // In replay mode, only show the ToolBar\n  if (isReplayMode) {\n    return (\n      <div className=\"flex h-full\">\n        <ToolBar />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-full\">\n      <ToolBar />\n      <ChatSession isCollapsed={isSidebarCollapsed} />\n    </div>\n  );\n};\n\nexport default SidebarContainer;\n","import React, { useCallback } from 'react';\nimport { motion } from 'framer-motion';\nimport { FiPlus, FiHome, FiCpu, FiMonitor } from 'react-icons/fi';\nimport { useNavigate } from 'react-router-dom';\nimport { useSession } from '../../hooks/useSession';\nimport { useReplayMode } from '../../context/ReplayModeContext';\n\n/**\n * ToolBar Component - Vertical toolbar inspired by modern IDE designs\n *\n * Design principles:\n * - Minimalist vertical bar with icon-only actions\n * - Consistent visual language with subtle animations\n * - Quick access to essential functionality\n * - Always visible regardless of sidebar collapse state\n */\nexport const ToolBar: React.FC = () => {\n  const navigate = useNavigate();\n  const isReplayMode = useReplayMode();\n  const { createSession, connectionStatus } = useSession();\n\n  // Create new session\n  const handleNewSession = useCallback(async () => {\n    try {\n      const sessionId = await createSession();\n      navigate(`/${sessionId}`);\n    } catch (error) {\n      console.error('Failed to create new session:', error);\n    }\n  }, [createSession, navigate]);\n\n  // Navigate to home\n  const handleNavigateHome = useCallback(() => {\n    navigate('/');\n  }, [navigate]);\n\n  return (\n    <div className=\"w-14 h-full flex flex-col backdrop-blur-sm border-r border-gray-300/40 dark:border-gray-600/20\">\n      {/* Logo */}\n      <motion.img\n        whileHover={{ scale: 1.05 }}\n        whileTap={{ scale: 0.95 }}\n        src=\"https://lf3-static.bytednsdoc.com/obj/eden-cn/psvhouloj/agent-tars/icon.png\"\n        className=\"w-10 h-10 rounded-xl flex items-center justify-center text-white dark:text-gray-900 font-bold mx-auto mt-4 mb-6 cursor-pointer\"\n        onClick={handleNavigateHome}\n      ></motion.img>\n\n      {/* Tool buttons */}\n      <div className=\"flex-1 flex flex-col items-center gap-4 py-4\">\n        {/* New session button */}\n        {!isReplayMode && (\n          <motion.button\n            whileHover={{ scale: 1.1, y: -2 }}\n            whileTap={{ scale: 0.95 }}\n            onClick={handleNewSession}\n            disabled={!connectionStatus.connected}\n            className={`w-8 h-8 rounded-3xl flex items-center justify-center transition-all duration-200 ${\n              connectionStatus.connected\n                ? 'bg-gradient-to-r from-[#141414] to-[#1e1e1e] dark:from-gray-900 dark:to-gray-800 text-white hover:shadow-md'\n                : 'bg-gray-400 text-white cursor-not-allowed opacity-60'\n            }`}\n            title={connectionStatus.connected ? 'New Task' : 'Server disconnected'}\n          >\n            <FiPlus size={20} />\n          </motion.button>\n        )}\n\n        {/* Home button */}\n        {!isReplayMode && (\n          <motion.button\n            whileHover={{ scale: 1.1, y: -2 }}\n            whileTap={{ scale: 0.95 }}\n            onClick={handleNavigateHome}\n            className=\"w-10 h-10 rounded-xl flex items-center justify-center text-gray-700 dark:text-gray-300 hover:bg-gray-100/80 dark:hover:bg-gray-700/80 transition-all duration-200\"\n            title=\"Home\"\n          >\n            <FiHome size={20} />\n          </motion.button>\n        )}\n\n        {/* Workspace button */}\n        <motion.button\n          whileHover={{ scale: 1.1, y: -2 }}\n          whileTap={{ scale: 0.95 }}\n          className=\"w-10 h-10 rounded-xl flex items-center justify-center text-gray-700 dark:text-gray-300 hover:bg-gray-100/80 dark:hover:bg-gray-700/80 transition-all duration-200\"\n          title=\"Workspace\"\n        >\n          <FiMonitor size={20} />\n        </motion.button>\n      </div>\n    </div>\n  );\n};\n","import SidebarContainer from './SidebarContainer';\n\nexport { SidebarContainer as Sidebar };\n","import React, { useState, useRef, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { useNavigate } from 'react-router-dom';\nimport {\n  FiArrowRight,\n  FiCommand,\n  FiSearch,\n  FiMonitor,\n  FiFile,\n  FiZap,\n  FiArrowUpRight,\n} from 'react-icons/fi';\nimport { useSession } from '../../hooks/useSession';\n\nconst WelcomePage: React.FC = () => {\n  const navigate = useNavigate();\n\n  const { createSession, sendMessage, sessions } = useSession();\n  const [query, setQuery] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDirectChatLoading, setIsDirectChatLoading] = useState(false);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [showCapabilities, setShowCapabilities] = useState(false);\n  // Added to fix layout shift\n  const [pageHeight, setPageHeight] = useState<number | null>(null);\n\n  useEffect(() => {\n    // Focus the input field when component mounts\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n\n    // Get initial page height before showing capabilities\n    setPageHeight(document.body.scrollHeight);\n\n    // Show capabilities after a delay\n    const timer = setTimeout(() => {\n      setShowCapabilities(true);\n    }, 1000);\n\n    return () => clearTimeout(timer);\n  }, []);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!query.trim() || isLoading) return;\n\n    setIsLoading(true);\n\n    try {\n      // Create a new session\n      const sessionId = await createNewSession();\n      navigate(`/${sessionId}`);\n\n      // Store the query for later use but navigate without query parameter\n      const userQuery = query;\n\n      // Navigate to the session route without query parameters\n      navigate(`/${sessionId}`);\n\n      // After navigation, the SessionRouter component will handle setting the active session\n      // We can send the message after a short delay to ensure the session is properly initialized\n      setTimeout(() => {\n        sendMessage(userQuery).catch((error) => {\n          console.error('Failed to send initial message:', error);\n        });\n      }, 500);\n    } catch (error) {\n      console.error('Failed to create session:', error);\n      setIsLoading(false);\n    }\n  };\n\n  // New function to handle direct chat without entering a query\n  const handleDirectChat = async () => {\n    if (isDirectChatLoading) return;\n\n    setIsDirectChatLoading(true);\n\n    try {\n      // Check if there are existing sessions\n      if (sessions && sessions.length > 0) {\n        // Find the latest session and navigate\n        const latestSession = sessions[0]; // Assuming sessions are sorted by time in descending order\n        navigate(`/${latestSession.id}`);\n      } else {\n        // If no existing sessions, create a new session\n        const sessionId = await createSession();\n        navigate(`/${sessionId}`);\n      }\n    } catch (error) {\n      console.error('Failed to navigate to chat:', error);\n    } finally {\n      setIsDirectChatLoading(false);\n    }\n  };\n\n  const createNewSession = async () => {\n    const sessionId = await createSession();\n    return sessionId;\n  };\n\n  const capabilities = [\n    {\n      icon: <FiSearch className=\"text-blue-500\" />,\n      title: 'Web Search',\n      description: 'Find information from across the web',\n    },\n    {\n      icon: <FiMonitor className=\"text-purple-500\" />,\n      title: 'Web Browsing',\n      description: 'Navigate and interact with websites',\n    },\n    {\n      icon: <FiCommand className=\"text-green-500\" />,\n      title: 'Execute Commands',\n      description: 'Run system commands and scripts',\n    },\n    {\n      icon: <FiFile className=\"text-amber-500\" />,\n      title: 'File Operations',\n      description: 'Create, read, and manipulate files',\n    },\n  ];\n\n  const examplePrompts = [\n    'Search for the latest GUI Agent papers',\n    'Find information about UI TARS',\n    'Tell me the top 5 most popular projects on ProductHunt today',\n    'Please book me the earliest flight from Hangzhou to Shenzhen on 10.1',\n  ];\n\n  return (\n    <div\n      className=\"min-h-screen flex flex-col bg-gradient-to-br from-gray-50 via-gray-50 to-gray-100 dark:from-gray-900 dark:via-gray-900 dark:to-gray-800\"\n      style={pageHeight ? { minHeight: `${pageHeight}px` } : undefined}\n    >\n      {/* Animated background elements */}\n      <div className=\"fixed inset-0 overflow-hidden pointer-events-none z-0\">\n        <div className=\"absolute -top-40 -right-40 w-96 h-96 bg-accent-100/30 dark:bg-accent-900/10 rounded-full blur-3xl\"></div>\n        <div className=\"absolute top-1/3 -left-40 w-96 h-96 bg-blue-100/30 dark:bg-blue-900/10 rounded-full blur-3xl\"></div>\n        <div className=\"absolute bottom-0 right-1/4 w-96 h-96 bg-purple-100/20 dark:bg-purple-900/10 rounded-full blur-3xl\"></div>\n      </div>\n\n      {/* Header with logo */}\n      <header className=\"relative z-10 pt-8 px-8\">\n        <div className=\"max-w-7xl mx-auto flex justify-between items-center\">\n          <div className=\"flex items-center\">\n            <motion.img\n              whileHover={{ scale: 1.05 }}\n              whileTap={{ scale: 0.95 }}\n              src=\"https://lf3-static.bytednsdoc.com/obj/eden-cn/psvhouloj/agent-tars/icon.png\"\n              className=\"w-12 h-12 rounded-xl flex items-center justify-center mx-auto text-white dark:text-gray-900 cursor-pointer mr-3\"\n              alt=\"Agent TARS\"\n            />\n            <span className=\"text-xl font-display font-bold text-gray-900 dark:text-gray-100\">\n              Agent TARS\n            </span>\n          </div>\n        </div>\n      </header>\n\n      {/* Main content */}\n      <main className=\"flex-1 relative z-10 flex flex-col items-center justify-center px-4 py-12\">\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.5 }}\n          className=\"text-center mb-8\"\n        >\n          <h1 className=\"text-4xl md:text-5xl lg:text-6xl font-display font-bold bg-gradient-to-r from-gray-900 via-gray-800 to-gray-700 dark:from-gray-100 dark:via-gray-200 dark:to-gray-300 text-transparent bg-clip-text mb-4\">\n            An multimodal AI agent\n          </h1>\n          <p className=\"text-lg text-gray-600 dark:text-gray-300 max-w-2xl mx-auto\">\n            An open-source multimodal AI agent Offering seamless integration with a wide range of\n            real-world tools.\n          </p>\n        </motion.div>\n\n        {/* Search form */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.95 }}\n          animate={{ opacity: 1, scale: 1 }}\n          transition={{ duration: 0.5, delay: 0.2 }}\n          className=\"w-full max-w-2xl mx-auto mb-6\"\n        >\n          <form onSubmit={handleSubmit} className=\"relative\">\n            <div className=\"relative overflow-hidden rounded-2xl transition-all duration-300 group\">\n              {/* Animated gradient border */}\n              <div className=\"absolute inset-0 bg-gradient-to-r from-indigo-500 via-purple-500 to-pink-500 dark:from-indigo-400 dark:via-purple-400 dark:to-pink-400 animate-border-flow opacity-70 group-hover:opacity-100 transition-opacity\"></div>\n\n              {/* Input field */}\n              <div className=\"relative m-[2px] rounded-[calc(1rem-2px)] bg-white dark:bg-gray-800 p-2\">\n                <input\n                  ref={inputRef}\n                  type=\"text\"\n                  value={query}\n                  onChange={(e) => setQuery(e.target.value)}\n                  placeholder=\"Ask Agent TARS anything...\"\n                  className=\"w-full px-4 py-5 text-lg bg-transparent outline-none text-gray-800 dark:text-gray-100 placeholder-gray-400 dark:placeholder-gray-500\"\n                  disabled={isLoading || isDirectChatLoading}\n                />\n\n                {/* Submit button */}\n                <div className=\"absolute right-3 inset-y-0 flex items-center\">\n                  <motion.button\n                    whileTap={{ scale: 0.95 }}\n                    type=\"submit\"\n                    disabled={!query.trim() || isLoading || isDirectChatLoading}\n                    className={`p-3 rounded-xl transition-all duration-200 ${\n                      !query.trim() || isLoading || isDirectChatLoading\n                        ? 'bg-gray-100 dark:bg-gray-700 text-gray-400 cursor-not-allowed'\n                        : 'bg-gradient-to-r from-indigo-500 to-purple-600 text-white shadow-md'\n                    }`}\n                  >\n                    {isLoading ? (\n                      <motion.div\n                        animate={{ rotate: 360 }}\n                        transition={{ duration: 1, repeat: Infinity, ease: 'linear' }}\n                      >\n                        <svg\n                          className=\"w-6 h-6\"\n                          viewBox=\"0 0 24 24\"\n                          fill=\"none\"\n                          xmlns=\"http://www.w3.org/2000/svg\"\n                        >\n                          <path\n                            d=\"M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12\"\n                            stroke=\"currentColor\"\n                            strokeWidth=\"2\"\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                          />\n                        </svg>\n                      </motion.div>\n                    ) : (\n                      <FiArrowRight size={20} />\n                    )}\n                  </motion.button>\n                </div>\n              </div>\n            </div>\n\n            {/* New: Direct chat button */}\n            <motion.div\n              initial={{ opacity: 0, y: 10 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.3, delay: 0.4 }}\n              className=\"flex justify-end mt-2 mr-1\"\n            >\n              <motion.button\n                whileHover={{ scale: 1.01 }}\n                whileTap={{ scale: 0.98 }}\n                onClick={handleDirectChat}\n                disabled={isLoading || isDirectChatLoading}\n                className={`flex items-center gap-1.5 py-1 text-sm text-gray-500 dark:text-gray-400 relative group transition-colors duration-300 ${\n                  isLoading || isDirectChatLoading\n                    ? 'opacity-60 cursor-not-allowed'\n                    : 'cursor-pointer group-hover:text-gray-900 dark:group-hover:text-gray-100'\n                }`}\n                type=\"button\"\n              >\n                <span className=\"group-hover:text-gray-900 dark:group-hover:text-gray-100 transition-colors duration-300\">\n                  Go to task history\n                </span>\n                {isDirectChatLoading ? (\n                  <motion.div\n                    animate={{ rotate: 360 }}\n                    transition={{ duration: 1, repeat: Infinity, ease: 'linear' }}\n                    className=\"w-4 h-4\"\n                  >\n                    <svg\n                      className=\"w-4 h-4 text-gray-500 dark:text-gray-400\"\n                      viewBox=\"0 0 24 24\"\n                      fill=\"none\"\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                    >\n                      <path\n                        d=\"M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12\"\n                        stroke=\"currentColor\"\n                        strokeWidth=\"2\"\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                      />\n                    </svg>\n                  </motion.div>\n                ) : (\n                  <FiArrowUpRight\n                    className=\"text-gray-500 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-gray-100 transition-colors duration-300\"\n                    size={14}\n                  />\n                )}\n                {/* 添加下划线动画效果 - 黑白风格 */}\n                <span className=\"absolute bottom-0 left-0 w-0 h-[1px] bg-gray-500 dark:bg-gray-400 group-hover:w-full group-hover:bg-gray-900 dark:group-hover:bg-gray-100 transition-all duration-300\"></span>\n              </motion.button>\n            </motion.div>\n\n            {/* Example prompts */}\n            <div className=\"mt-4 flex flex-wrap justify-center gap-2\">\n              {examplePrompts.map((prompt, index) => (\n                <motion.button\n                  key={index}\n                  initial={{ opacity: 0, y: 10 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ duration: 0.3, delay: 0.4 + index * 0.1 }}\n                  type=\"button\"\n                  onClick={() => setQuery(prompt)}\n                  className=\"text-xs px-3 py-1.5 rounded-full bg-white dark:bg-gray-800 border border-gray-200/50 dark:border-gray-700/30 hover:bg-gray-50 dark:hover:bg-gray-700/50 text-gray-600 dark:text-gray-300 transition-colors\"\n                >\n                  {prompt}\n                </motion.button>\n              ))}\n            </div>\n          </form>\n        </motion.div>\n\n        {/* Reserve space for capabilities with a fixed height container */}\n        <div\n          className={`w-full max-w-4xl mx-auto transition-all duration-500 ease-in-out ${showCapabilities ? 'opacity-100' : 'opacity-0'}`}\n          style={{ minHeight: '300px' }}\n        >\n          <AnimatePresence>\n            {showCapabilities && (\n              <motion.div\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                exit={{ opacity: 0, y: 20 }}\n                transition={{ duration: 0.5 }}\n                className=\"w-full max-w-4xl mx-auto\"\n              >\n                <h2 className=\"text-xl font-display font-semibold text-gray-800 dark:text-gray-200 text-center mb-6\">\n                  Agent TARS Capabilities\n                </h2>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                  {capabilities.map((capability, index) => (\n                    <motion.div\n                      key={index}\n                      initial={{ opacity: 0, y: 20 }}\n                      animate={{ opacity: 1, y: 0 }}\n                      transition={{ duration: 0.3, delay: 0.6 + index * 0.1 }}\n                      className=\"bg-white dark:bg-gray-800/80 backdrop-blur-sm rounded-xl p-4 border border-gray-100/50 dark:border-gray-700/30 group hover:border-accent-200/60 dark:hover:border-accent-700/40 transition-colors\"\n                    >\n                      <div className=\"w-10 h-10 rounded-full bg-gray-50 dark:bg-gray-700 flex items-center justify-center mb-3\">\n                        {capability.icon}\n                      </div>\n                      <h3 className=\"font-medium text-gray-900 dark:text-gray-100 mb-1\">\n                        {capability.title}\n                      </h3>\n                      <p className=\"text-sm text-gray-500 dark:text-gray-400\">\n                        {capability.description}\n                      </p>\n                    </motion.div>\n                  ))}\n                </div>\n\n                {/* Additional info */}\n                <motion.div\n                  initial={{ opacity: 0 }}\n                  animate={{ opacity: 1 }}\n                  transition={{ duration: 0.5, delay: 1 }}\n                  className=\"mt-10 text-center\"\n                >\n                  <div className=\"inline-flex items-center gap-2 text-sm text-gray-500 dark:text-gray-400 bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm px-4 py-2 rounded-full border border-gray-100/50 dark:border-gray-700/30\">\n                    <FiZap className=\"text-amber-500\" size={16} />\n                    <span>Powered by UI-TARS Vision-Language Model</span>\n                  </div>\n                </motion.div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default WelcomePage;\n","/**\n * Base API URL for server communication\n */\n// @ts-expect-error\nexport const API_BASE_URL = window.AGENT_TARS_BASE_URL ?? 'http://localhost:3000';\nconsole.log('API_BASE_URL', API_BASE_URL);\n\n/**\n * Default API endpoints\n */\nexport const API_ENDPOINTS = {\n  SESSIONS: '/api/sessions',\n  CREATE_SESSION: '/api/sessions/create',\n  SESSION_DETAILS: '/api/sessions/details',\n  SESSION_EVENTS: '/api/sessions/events',\n  SESSION_STATUS: '/api/sessions/status',\n  UPDATE_SESSION: '/api/sessions/update',\n  DELETE_SESSION: '/api/sessions/delete',\n  RESTORE_SESSION: '/api/sessions/restore',\n  QUERY: '/api/sessions/query',\n  QUERY_STREAM: '/api/sessions/query/stream',\n  ABORT: '/api/sessions/abort',\n  GENERATE_SUMMARY: '/api/sessions/generate-summary',\n  HEALTH: '/api/health',\n  BROWSER_CONTROL_INFO: '/api/sessions/browser-control',\n  MODEL_INFO: '/api/model-info', // 新增模型信息端点\n};\n\n/**\n * WebSocket events\n */\nexport const SOCKET_EVENTS = {\n  CONNECT: 'connect',\n  DISCONNECT: 'disconnect',\n  ERROR: 'error',\n  RECONNECT_ATTEMPT: 'reconnect_attempt',\n  RECONNECT_FAILED: 'reconnect_failed',\n  JOIN_SESSION: 'join-session',\n  AGENT_EVENT: 'agent-event',\n  AGENT_STATUS: 'agent-status',\n  PING: 'ping',\n  SEND_QUERY: 'send-query',\n  ABORT_QUERY: 'abort-query',\n};\n\n/**\n * Local storage keys\n */\nexport const STORAGE_KEYS = {\n  ACTIVE_SESSION: 'agent-tars-active-session',\n  THEME: 'agent-tars-theme',\n};\n\n/**\n * Tool types\n */\nexport const TOOL_TYPES = {\n  SEARCH: 'search',\n  BROWSER: 'browser',\n  COMMAND: 'command',\n  IMAGE: 'image',\n  FILE: 'file',\n  BROWSER_CONTROL: 'browser_vision_control', // 添加新的工具类型\n  OTHER: 'other',\n} as const;\n\n/**\n * Message roles\n */\nexport const MESSAGE_ROLES = {\n  USER: 'user',\n  ASSISTANT: 'assistant',\n  SYSTEM: 'system',\n  TOOL: 'tool',\n} as const;\n\n/**\n * Connection settings\n */\nexport const CONNECTION_SETTINGS = {\n  HEARTBEAT_INTERVAL: 15000,\n  MAX_MISSED_HEARTBEATS: 2,\n  MAX_RECONNECT_ATTEMPTS: 5,\n  RECONNECTION_DELAY: 1000,\n  RECONNECTION_DELAY_MAX: 5000,\n};","import React, { createContext, useContext, ReactNode, useEffect } from 'react';\nimport { atom, useAtom, useAtomValue, useSetAtom } from 'jotai';\nimport { replayStateAtom } from '../state/atoms/replay';\nimport { activeSessionIdAtom, sessionsAtom } from '../state/atoms/session';\nimport { messagesAtom } from '../state/atoms/message';\nimport { connectionStatusAtom, modelInfoAtom } from '../state/atoms/ui';\nimport { setModelInfoAction } from '../state/actions/modelInfoAction';\n\n/**\n * ReplayModeContext - Global context for sharing replay mode state\n *\n * This context provides a centralized way to check if the application\n * is currently in replay mode, allowing components to adapt their behavior\n * without needing to directly access the replay state atom.\n */\ninterface ReplayModeContextType {\n  isReplayMode: boolean;\n  modelInfo: { provider: string; model: string } | null;\n}\n\nconst ReplayModeContext = createContext<ReplayModeContextType>({\n  isReplayMode: false,\n  modelInfo: null,\n});\n\n/**\n * ReplayModeProvider - Provides replay mode state to the application and initializes replay data\n *\n * 1. Detects replay mode from window variables\n * 2. Initializes application state with replay data when in replay mode\n * 3. Prevents server communication in replay mode\n * 4. Provides the replay mode status to all child components\n */\nexport const ReplayModeProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  // Access necessary atoms\n  const [replayState, setReplayState] = useAtom(replayStateAtom);\n  const [, setMessages] = useAtom(messagesAtom);\n  const [, setSessions] = useAtom(sessionsAtom);\n  const [, setActiveSessionId] = useAtom(activeSessionIdAtom);\n  const [, setConnectionStatus] = useAtom(connectionStatusAtom);\n  const modelInfo = useAtomValue(modelInfoAtom);\n  const setModelInfo = useSetAtom(setModelInfoAction);\n\n  // Initialize replay mode if window variables are present\n  useEffect(() => {\n    // Check if in replay mode\n    if (window.AGENT_TARS_REPLAY_MODE && window.AGENT_TARS_EVENT_STREAM) {\n      // Get session data and event stream\n      const sessionData = window.AGENT_TARS_SESSION_DATA;\n      const events = window.AGENT_TARS_EVENT_STREAM;\n      const modelData = window.AGENT_TARS_MODEL_INFO;\n\n      console.log('[ReplayMode] Initializing replay mode with', events.length, 'events');\n\n      if (sessionData && sessionData.id) {\n        // Set connection status to \"offline\" to prevent health checks\n        setConnectionStatus({\n          connected: false, // Mark as disconnected to prevent API calls\n          lastConnected: null,\n          lastError: null,\n          reconnecting: false,\n        });\n\n        // Set model info if available using the action\n        if (modelData) {\n          setModelInfo(modelData);\n          console.log('[ReplayMode] Model info loaded:', modelData);\n        }\n\n        // Set sessions data\n        setSessions([sessionData]);\n\n        // When in replay mode, the session ID must be set immediately\n        setActiveSessionId(sessionData.id);\n\n        // Add debug logging\n        console.log('[ReplayMode] Active session set to:', sessionData.id);\n\n        // Initialize replay state with autoPlayCountdown\n        setReplayState({\n          isActive: true,\n          isPaused: true, // 始终从暂停状态开始\n          events: events,\n          currentEventIndex: -1,\n          startTimestamp: events.length > 0 ? events[0].timestamp : null,\n          endTimestamp: events.length > 0 ? events[events.length - 1].timestamp : null,\n          playbackSpeed: 1,\n          autoPlayCountdown: 2, // 设置2秒倒计时\n          visibleTimeWindow:\n            events.length > 0\n              ? {\n                  start: events[0].timestamp,\n                  end: events[events.length - 1].timestamp,\n                }\n              : null,\n          processedEvents: {},\n        });\n\n        // Initialize empty messages state\n        setMessages({\n          [sessionData.id]: [],\n        });\n\n        console.log('[ReplayMode] Replay mode initialized successfully');\n\n        // 启动倒计时\n        const countdownTimer = setInterval(() => {\n          setReplayState((prev) => {\n            // 如果倒计时结束或已被取消\n            if (prev.autoPlayCountdown === null || prev.autoPlayCountdown <= 0) {\n              clearInterval(countdownTimer);\n\n              // 只在倒计时完成时准备开始播放，但不直接改变isPaused状态\n              // 这样将由useReplay中的startReplay函数正确启动播放过程\n              if (prev.autoPlayCountdown === 0) {\n                // 设置一个延迟启动标记，在下一个useEffect中捕获并启动播放\n                setTimeout(() => {\n                  console.log('[ReplayMode] Auto-play countdown finished, starting replay...');\n                  // 触发一个事件通知播放开始\n                  window.dispatchEvent(new CustomEvent('replay-autostart'));\n                }, 0);\n              }\n\n              return {\n                ...prev,\n                autoPlayCountdown: null, // 只清除倒计时，不改变播放状态\n              };\n            }\n\n            // 继续倒计时\n            return {\n              ...prev,\n              autoPlayCountdown: prev.autoPlayCountdown - 1,\n            };\n          });\n        }, 1000);\n      } else {\n        console.error('[ReplayMode] Missing session data or session ID');\n      }\n    }\n  }, [setMessages, setSessions, setActiveSessionId, setReplayState, setConnectionStatus, setModelInfo]);\n\n  // Check both the atom and global window variable for replay mode\n  const isReplayMode = replayState.isActive || !!window.AGENT_TARS_REPLAY_MODE;\n\n  return (\n    <ReplayModeContext.Provider\n      value={{\n        isReplayMode,\n        modelInfo: isReplayMode ? modelInfo : null,\n      }}\n    >\n      {children}\n    </ReplayModeContext.Provider>\n  );\n};\n\n/**\n * useReplayMode - Hook to access replay mode state\n */\nexport const useReplayMode = (): boolean => {\n  const { isReplayMode } = useContext(ReplayModeContext);\n  return isReplayMode;\n};\n\n/**\n * useReplayModelInfo - Hook to access model info in replay mode\n */\nexport const useReplayModelInfo = (): { provider: string; model: string } | null => {\n  const { modelInfo } = useContext(ReplayModeContext);\n  return modelInfo;\n};","import { useLocation } from 'react-router-dom';\nimport { useMemo } from 'react';\n\n/**\n * Hook to check if pro mode is enabled via URL parameter\n *\n * Pro mode enables additional features like replay and plan buttons\n */\nexport function usePro(): boolean {\n  const location = useLocation();\n\n  return useMemo(() => {\n    const searchParams = new URLSearchParams(location.search);\n    return searchParams.has('pro');\n  }, [location.search]);\n}\n","// /agent-tars-web-ui/src/v2/hooks/useReplay.ts\nimport { useAtom } from 'jotai';\nimport { useCallback, useEffect, useState } from 'react';\nimport { replayStateAtom } from '../state/atoms/replay';\nimport { Event, EventType } from '../types';\nimport { useSession } from './useSession';\nimport { messagesAtom } from '../state/atoms/message';\nimport { toolResultsAtom } from '../state/atoms/tool';\nimport { processEventAction } from '../state/actions/eventProcessor';\nimport { atom, useSetAtom } from 'jotai';\nimport { plansAtom } from '../state/atoms/plan';\n\n/**\n * Custom hook for managing replay functionality\n *\n * Provides:\n * - Control for playback (play, pause, jump, etc.)\n * - Event processing through the standard event processor\n * - Timeline calculations and positioning\n */\nexport function useReplay() {\n  const [replayState, setReplayState] = useAtom(replayStateAtom);\n  const { activeSessionId } = useSession();\n  const [playbackInterval, setPlaybackInterval] = useState<NodeJS.Timeout | null>(null);\n  const [, setMessages] = useAtom(messagesAtom);\n  const [, setToolResults] = useAtom(toolResultsAtom);\n  const [, setPlans] = useAtom(plansAtom);\n  const processEvent = useSetAtom(processEventAction);\n\n  /**\n   * 重置会话状态并处理事件至指定索引\n   */\n  const processEventsUpToIndex = useCallback(\n    (targetIndex: number) => {\n      if (!activeSessionId || !replayState.events.length || targetIndex < 0) return;\n\n      // 获取需要处理的事件\n      const eventsToProcess = replayState.events.slice(0, targetIndex + 1);\n\n      // 清空当前会话状态\n      setMessages((prev) => ({\n        ...prev,\n        [activeSessionId]: [],\n      }));\n\n      setToolResults((prev) => ({\n        ...prev,\n        [activeSessionId]: [],\n      }));\n\n      setPlans((prev) => ({\n        ...prev,\n        [activeSessionId]: {\n          steps: [],\n          isComplete: false,\n          summary: null,\n          hasGeneratedPlan: false,\n          keyframes: [],\n        },\n      }));\n\n      // 处理环境输入事件优先，确保图片资源先加载\n      const envEvents = eventsToProcess.filter(\n        (event) => event.type === EventType.ENVIRONMENT_INPUT,\n      );\n      const nonEnvEvents = eventsToProcess.filter(\n        (event) => event.type !== EventType.ENVIRONMENT_INPUT,\n      );\n\n      // 先处理环境输入事件\n      for (const event of envEvents) {\n        processEvent({ sessionId: activeSessionId, event });\n      }\n\n      // 然后处理其他事件\n      for (const event of nonEnvEvents) {\n        processEvent({ sessionId: activeSessionId, event });\n      }\n    },\n    [activeSessionId, replayState.events, setMessages, setToolResults, setPlans, processEvent],\n  );\n\n  /**\n   * 开始回放\n   */\n  const startReplay = useCallback(() => {\n    // 清除现有的定时器\n    if (playbackInterval) {\n      clearInterval(playbackInterval);\n    }\n\n    setReplayState((prev) => ({\n      ...prev,\n      isPaused: false,\n    }));\n\n    // 设置定时器按间隔前进\n    const interval = setInterval(() => {\n      setReplayState((prev) => {\n        // 到达末尾时停止\n        if (prev.currentEventIndex >= prev.events.length - 1) {\n          clearInterval(interval);\n          return {\n            ...prev,\n            isPaused: true,\n            currentEventIndex: prev.events.length - 1,\n          };\n        }\n\n        // 前进到下一个事件\n        const nextIndex = prev.currentEventIndex + 1;\n\n        // 处理到新位置\n        if (activeSessionId) {\n          processEvent({\n            sessionId: activeSessionId,\n            event: prev.events[nextIndex],\n          });\n        }\n\n        return {\n          ...prev,\n          currentEventIndex: nextIndex,\n        };\n      });\n    }, 500 / replayState.playbackSpeed);\n\n    setPlaybackInterval(interval);\n  }, [activeSessionId, playbackInterval, processEvent, replayState.playbackSpeed, setReplayState]);\n\n  /**\n   * 暂停回放\n   */\n  const pauseReplay = useCallback(() => {\n    if (playbackInterval) {\n      clearInterval(playbackInterval);\n      setPlaybackInterval(null);\n    }\n\n    setReplayState((prev) => ({\n      ...prev,\n      isPaused: true,\n    }));\n  }, [playbackInterval, setReplayState]);\n\n  /**\n   * 跳转到时间轴上的指定位置\n   */\n  const jumpToPosition = useCallback(\n    (position: number) => {\n      // 确保位置在有效范围内\n      const normalizedPosition = Math.max(0, Math.min(1, position));\n\n      if (replayState.events.length === 0 || !activeSessionId) return;\n\n      // 根据位置计算目标事件索引\n      const targetIndex = Math.floor(normalizedPosition * (replayState.events.length - 1));\n\n      // 暂停任何正在进行的回放\n      if (playbackInterval) {\n        clearInterval(playbackInterval);\n        setPlaybackInterval(null);\n      }\n\n      // 处理到新位置\n      processEventsUpToIndex(targetIndex);\n\n      setReplayState((prev) => ({\n        ...prev,\n        isPaused: true,\n        currentEventIndex: targetIndex,\n      }));\n    },\n    [\n      activeSessionId,\n      playbackInterval,\n      processEventsUpToIndex,\n      replayState.events.length,\n      setReplayState,\n    ],\n  );\n\n  /**\n   * 跳转到最终结果\n   */\n  const jumpToResult = useCallback(() => {\n    if (replayState.events.length === 0 || !activeSessionId) return;\n\n    const finalIndex = replayState.events.length - 1;\n\n    // 暂停任何正在进行的回放\n    if (playbackInterval) {\n      clearInterval(playbackInterval);\n      setPlaybackInterval(null);\n    }\n\n    // 处理到最终位置\n    processEventsUpToIndex(finalIndex);\n\n    setReplayState((prev) => ({\n      ...prev,\n      isPaused: true,\n      currentEventIndex: finalIndex,\n    }));\n  }, [\n    activeSessionId,\n    playbackInterval,\n    processEventsUpToIndex,\n    replayState.events.length,\n    setReplayState,\n  ]);\n\n  /**\n   * 设置播放速度\n   */\n  const setPlaybackSpeed = useCallback(\n    (speed: number) => {\n      setReplayState((prev) => ({\n        ...prev,\n        playbackSpeed: speed,\n      }));\n\n      // 如果正在播放，以新速度重启\n      if (!replayState.isPaused && playbackInterval) {\n        clearInterval(playbackInterval);\n        startReplay();\n      }\n    },\n    [playbackInterval, replayState.isPaused, setReplayState, startReplay],\n  );\n\n  /**\n   * 退出回放模式\n   */\n  const exitReplay = useCallback(() => {\n    if (playbackInterval) {\n      clearInterval(playbackInterval);\n    }\n\n    setReplayState((prev) => ({\n      ...prev,\n      isActive: false,\n      isPaused: true,\n      currentEventIndex: -1,\n      events: [],\n      processedEvents: {},\n    }));\n  }, [playbackInterval, setReplayState]);\n\n  /**\n   * 获取当前事件\n   */\n  const getCurrentEvent = useCallback(() => {\n    if (\n      !replayState.isActive ||\n      replayState.currentEventIndex < 0 ||\n      replayState.currentEventIndex >= replayState.events.length\n    ) {\n      return null;\n    }\n\n    return replayState.events[replayState.currentEventIndex];\n  }, [replayState.currentEventIndex, replayState.events, replayState.isActive]);\n\n  /**\n   * 获取当前位置百分比 (0-100)\n   */\n  const getCurrentPosition = useCallback(() => {\n    if (!replayState.isActive || replayState.events.length <= 1) {\n      return 0;\n    }\n\n    return (replayState.currentEventIndex / (replayState.events.length - 1)) * 100;\n  }, [replayState.currentEventIndex, replayState.events.length, replayState.isActive]);\n\n  /**\n   * 获取当前所有事件\n   */\n  const getCurrentEvents = useCallback(() => {\n    if (!replayState.isActive || replayState.currentEventIndex < 0) {\n      return [];\n    }\n\n    return replayState.events.slice(0, replayState.currentEventIndex + 1);\n  }, [replayState.currentEventIndex, replayState.events, replayState.isActive]);\n\n  // 组件卸载时清理定时器\n  useEffect(() => {\n    return () => {\n      if (playbackInterval) {\n        clearInterval(playbackInterval);\n      }\n    };\n  }, [playbackInterval]);\n\n  // 回放模式初始化时：如果索引为-1，需要手动触发第一步，否则会显示为空白\n  useEffect(() => {\n    if (\n      replayState.isActive &&\n      replayState.currentEventIndex === -1 &&\n      replayState.events.length > 0\n    ) {\n      // 如果启动回放后立即跳到第一个事件\n      processEventsUpToIndex(0);\n      setReplayState((prev) => ({\n        ...prev,\n        currentEventIndex: 0,\n      }));\n    }\n  }, [\n    replayState.isActive,\n    replayState.currentEventIndex,\n    replayState.events.length,\n    processEventsUpToIndex,\n    setReplayState,\n  ]);\n\n  /**\n   * 取消自动播放倒计时\n   */\n  const cancelAutoPlay = useCallback(() => {\n    setReplayState((prev) => ({\n      ...prev,\n      autoPlayCountdown: null,\n    }));\n  }, [setReplayState]);\n\n  // 添加对自动播放事件的监听\n  useEffect(() => {\n    const handleAutoStart = () => {\n      console.log('Auto-play event received, starting replay...');\n      startReplay();\n    };\n\n    // 添加事件监听器\n    window.addEventListener('replay-autostart', handleAutoStart);\n\n    // 清理函数\n    return () => {\n      window.removeEventListener('replay-autostart', handleAutoStart);\n    };\n  }, [startReplay]); // 依赖于startReplay函数\n\n  return {\n    // 状态\n    replayState,\n\n    // 操作方法\n    startReplay,\n    pauseReplay,\n    jumpToPosition,\n    jumpToResult,\n    setPlaybackSpeed,\n    exitReplay,\n    cancelAutoPlay,\n\n    // 工具方法\n    getCurrentEvents,\n    getCurrentPosition,\n    getCurrentEvent,\n  };\n}\n","import { useAtom, useAtomValue, useSetAtom } from 'jotai';\nimport { useLocation } from 'react-router-dom';\nimport { sessionsAtom, activeSessionIdAtom } from '../state/atoms/session';\nimport { messagesAtom, groupedMessagesAtom } from '../state/atoms/message';\nimport { toolResultsAtom } from '../state/atoms/tool';\nimport { plansAtom, planUIStateAtom } from '../state/atoms/plan';\nimport { \n  isProcessingAtom, \n  activePanelContentAtom, \n  connectionStatusAtom,\n  modelInfoAtom \n} from '../state/atoms/ui';\nimport { replayStateAtom } from '../state/atoms/replay';\nimport {\n  loadSessionsAction,\n  createSessionAction,\n  setActiveSessionAction,\n  updateSessionAction,\n  deleteSessionAction,\n  sendMessageAction,\n  abortQueryAction,\n  checkSessionStatusAction,\n} from '../state/actions/sessionActions';\nimport {\n  initConnectionMonitoringAction,\n  checkConnectionStatusAction,\n} from '../state/actions/connectionActions';\nimport { fetchModelInfoAction, setModelInfoAction } from '../state/actions/modelInfoAction';\nimport { socketService } from '../services/socketService';\n\nimport { useEffect, useCallback, useMemo } from 'react';\nimport { useReplayMode, useReplayModelInfo } from '../context/ReplayModeContext';\n\n/**\n * Hook for session management functionality\n */\nexport function useSession() {\n  // State\n  const [sessions, setSessions] = useAtom(sessionsAtom);\n  const [activeSessionId, setActiveSessionId] = useAtom(activeSessionIdAtom);\n  const messages = useAtomValue(messagesAtom);\n  const groupedMessages = useAtomValue(groupedMessagesAtom);\n  const toolResults = useAtomValue(toolResultsAtom);\n  const [isProcessing, setIsProcessing] = useAtom(isProcessingAtom);\n  const [activePanelContent, setActivePanelContent] = useAtom(activePanelContentAtom);\n  const [connectionStatus, setConnectionStatus] = useAtom(connectionStatusAtom);\n  const [plans, setPlans] = useAtom(plansAtom);\n  const setPlanUIState = useSetAtom(planUIStateAtom);\n  const [replayState, setReplayState] = useAtom(replayStateAtom);\n  const modelInfo = useAtomValue(modelInfoAtom);\n\n  // Check if we're in replay mode using the context hook\n  const isReplayMode = useReplayMode();\n  // 获取回放模式下的模型信息\n  const replayModelInfo = useReplayModelInfo();\n\n  // Actions\n  const loadSessions = useSetAtom(loadSessionsAction);\n  const createSession = useSetAtom(createSessionAction);\n  const setActiveSession = useSetAtom(setActiveSessionAction);\n  const updateSessionMetadata = useSetAtom(updateSessionAction);\n  const deleteSession = useSetAtom(deleteSessionAction);\n  const sendMessage = useSetAtom(sendMessageAction);\n  const abortQuery = useSetAtom(abortQueryAction);\n  const initConnectionMonitoring = useSetAtom(initConnectionMonitoringAction);\n  const checkServerStatus = useSetAtom(checkConnectionStatusAction);\n  const checkSessionStatus = useSetAtom(checkSessionStatusAction);\n  const fetchModelInfo = useSetAtom(fetchModelInfoAction);\n  const setModelInfo = useSetAtom(setModelInfoAction);\n\n  // Get current location\n  const location = useLocation();\n\n  // 保留这个工具函数，但移除自动同步逻辑\n  const getSessionIdFromUrl = useCallback(() => {\n    const pathParts = location.pathname.split('/').filter(Boolean);\n    return pathParts.length > 0 ? pathParts[0] : null;\n  }, [location]);\n\n  // Periodic status checking for active session - 在回放模式下不检查状态\n  useEffect(() => {\n    if (!activeSessionId || !connectionStatus.connected || isReplayMode) return;\n\n    // Initial status check when session becomes active\n    checkSessionStatus(activeSessionId);\n  }, [activeSessionId, connectionStatus.connected, checkSessionStatus, isReplayMode]);\n\n  // Enhanced socket handler for session status sync - 在回放模式下不更新状态\n  const handleSessionStatusUpdate = useCallback(\n    (status: any) => {\n      if (status && typeof status.isProcessing === 'boolean' && !isReplayMode) {\n        setIsProcessing(status.isProcessing);\n      }\n    },\n    [setIsProcessing, isReplayMode],\n  );\n\n  // Set up socket event handlers when active session changes - 在回放模式下不设置socket事件处理\n  useEffect(() => {\n    if (!activeSessionId || !socketService.isConnected() || isReplayMode) return;\n\n    // Join session and listen for status updates\n    socketService.joinSession(\n      activeSessionId,\n      () => {\n        /* existing event handling */\n      },\n      handleSessionStatusUpdate,\n    );\n\n    // Register global status handler\n    socketService.on('agent-status', handleSessionStatusUpdate);\n\n    return () => {\n      // Clean up handlers\n      socketService.off('agent-status', handleSessionStatusUpdate);\n    };\n  }, [activeSessionId, handleSessionStatusUpdate, isReplayMode]);\n\n  // Auto-show plan when it's first created - 在回放模式下不自动显示计划\n  useEffect(() => {\n    if (activeSessionId && plans[activeSessionId]?.hasGeneratedPlan && !isReplayMode) {\n      const currentPlan = plans[activeSessionId];\n\n      // If this is a newly generated plan, automatically show it\n      if (currentPlan.steps.length > 0 && currentPlan.steps.every((step) => !step.done)) {\n        setPlanUIState((prev) => ({\n          ...prev,\n          isVisible: true,\n        }));\n      }\n    }\n  }, [activeSessionId, plans, setPlanUIState, isReplayMode]);\n\n  // 添加获取模型信息的效果\n  useEffect(() => {\n    // 在回放模式下使用回放模式的模型信息\n    if (isReplayMode && replayModelInfo) {\n      setModelInfo(replayModelInfo);\n      return;\n    }\n\n    // 在回放模式或未连接时不获取模型信息\n    if (isReplayMode || !connectionStatus.connected) return;\n\n    // 使用新的 action 获取模型信息\n    fetchModelInfo();\n  }, [connectionStatus.connected, isReplayMode, replayModelInfo, fetchModelInfo, setModelInfo]);\n\n  // Memoize the session state object to avoid unnecessary re-renders\n  const sessionState = useMemo(\n    () => ({\n      // State\n      sessions,\n      activeSessionId,\n      messages,\n      groupedMessages,\n      toolResults,\n      isProcessing,\n      activePanelContent,\n      connectionStatus,\n      plans,\n      replayState,\n      modelInfo, // Now from atom\n\n      // Session operations\n      loadSessions,\n      createSession,\n      setActiveSession,\n      updateSessionMetadata,\n      deleteSession,\n\n      // Message operations\n      sendMessage,\n      abortQuery,\n\n      // UI operations\n      setActivePanelContent,\n\n      // Connection operations\n      initConnectionMonitoring,\n      checkServerStatus,\n\n      // Status operations\n      checkSessionStatus,\n      getSessionIdFromUrl,\n    }),\n    [\n      sessions,\n      activeSessionId,\n      messages,\n      groupedMessages,\n      toolResults,\n      isProcessing,\n      activePanelContent,\n      connectionStatus,\n      plans,\n      replayState,\n      modelInfo,\n      loadSessions,\n      createSession,\n      setActiveSession,\n      updateSessionMetadata,\n      deleteSession,\n      sendMessage,\n      abortQuery,\n      setActivePanelContent,\n      initConnectionMonitoring,\n      checkServerStatus,\n      checkSessionStatus,\n      getSessionIdFromUrl,\n    ],\n  );\n\n  return sessionState;\n}","import React from 'react';\nimport { Provider } from 'jotai';\nimport { App } from './components/App';\nimport { ReplayModeProvider } from './context/ReplayModeContext';\nimport { HashRouter, BrowserRouter } from 'react-router-dom';\n\n/**\n * Agent TARS Web UI v2 - Entry Component\n *\n * Provides the Jotai atom provider and initializes theme based on user preference.\n * Uses the enhanced ReplayModeProvider that now handles both context provision and initialization.\n */\nexport const AgentTARSWebUI: React.FC = () => {\n  // Initialize theme based on user preference\n  React.useEffect(() => {\n    // Check if user prefers dark mode\n    const prefersDarkMode = window.matchMedia('(prefers-color-scheme: dark)').matches;\n\n    // Check if theme is stored in localStorage\n    const storedTheme = localStorage.getItem('agent-tars-theme');\n\n    // Apply dark mode if preferred or stored\n    if (storedTheme === 'dark' || (storedTheme === null && prefersDarkMode)) {\n      document.documentElement.classList.add('dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n    }\n\n    // Listen for theme preference changes\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleChange = (e: MediaQueryListEvent) => {\n      if (storedTheme === null) {\n        if (e.matches) {\n          document.documentElement.classList.add('dark');\n        } else {\n          document.documentElement.classList.remove('dark');\n        }\n      }\n    };\n\n    mediaQuery.addEventListener('change', handleChange);\n\n    return () => {\n      mediaQuery.removeEventListener('change', handleChange);\n    };\n  }, []);\n\n  // Use HashRouter for shared HTML files (replay mode) to prevent routing issues\n  const isReplayMode = window.AGENT_TARS_REPLAY_MODE === true;\n  console.log('isReplayMode', isReplayMode);\n  const Router = isReplayMode ? HashRouter : BrowserRouter;\n\n  return (\n    <Provider>\n      <ReplayModeProvider>\n        <Router>\n          <App />\n        </Router>\n      </ReplayModeProvider>\n    </Provider>\n  );\n};\n","import { API_BASE_URL, API_ENDPOINTS } from '../constants';\nimport { Event, SessionInfo, SessionMetadata } from '../types';\nimport { socketService } from './socketService';\nimport { ChatCompletionContentPart } from '@multimodal/agent-interface';\n\n/**\n * API Service - Handles HTTP requests to the Agent TARS Server\n *\n * Provides methods for:\n * - Session management (create, get, update, delete)\n * - Query execution (streaming and non-streaming)\n * - Server health checks\n */\nclass ApiService {\n  /**\n   * Check server health status\n   */\n  async checkServerHealth(): Promise<boolean> {\n    try {\n      // Try ping through socket if connected\n      if (socketService.isConnected()) {\n        const pingSuccessful = await socketService.ping();\n        if (pingSuccessful) return true;\n      }\n\n      // Fall back to API health endpoint\n      const response = await fetch(`${API_BASE_URL}${API_ENDPOINTS.HEALTH}`, {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' },\n        signal: AbortSignal.timeout(3000),\n      });\n\n      return response.ok;\n    } catch (error) {\n      console.error('Error checking server health:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Create a new session\n   */\n  async createSession(): Promise<SessionInfo> {\n    try {\n      const response = await fetch(`${API_BASE_URL}${API_ENDPOINTS.CREATE_SESSION}`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to create session: ${response.statusText}`);\n      }\n\n      const { sessionId } = await response.json();\n      return this.getSessionDetails(sessionId);\n    } catch (error) {\n      console.error('Error creating session:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get all sessions\n   */\n  async getSessions(): Promise<SessionInfo[]> {\n    try {\n      const response = await fetch(`${API_BASE_URL}${API_ENDPOINTS.SESSIONS}`, {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' },\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to get sessions: ${response.statusText}`);\n      }\n\n      const { sessions } = await response.json();\n      return sessions;\n    } catch (error) {\n      console.error('Error getting sessions:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get details for a specific session\n   */\n  async getSessionDetails(sessionId: string): Promise<SessionInfo> {\n    try {\n      const response = await fetch(\n        `${API_BASE_URL}${API_ENDPOINTS.SESSION_DETAILS}?sessionId=${sessionId}`,\n        {\n          method: 'GET',\n          headers: { 'Content-Type': 'application/json' },\n          signal: AbortSignal.timeout(5000), // 添加 5 秒超时\n        },\n      );\n\n      if (!response.ok) {\n        throw new Error(`Failed to get session details: ${response.statusText}`);\n      }\n\n      const { session } = await response.json();\n      return session;\n    } catch (error) {\n      console.error(`Error getting session details (${sessionId}):`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get events for a specific session\n   */\n  async getSessionEvents(sessionId: string): Promise<Event[]> {\n    try {\n      const response = await fetch(\n        `${API_BASE_URL}${API_ENDPOINTS.SESSION_EVENTS}?sessionId=${sessionId}`,\n        {\n          method: 'GET',\n          headers: { 'Content-Type': 'application/json' },\n          signal: AbortSignal.timeout(5000), // 添加 5 秒超时\n        },\n      );\n\n      if (!response.ok) {\n        throw new Error(`Failed to get session events: ${response.statusText}`);\n      }\n\n      const { events } = await response.json();\n      return events;\n    } catch (error) {\n      console.error(`Error getting session events (${sessionId}):`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get current status of a session\n   */\n  async getSessionStatus(sessionId: string): Promise<{ isProcessing: boolean; state: string }> {\n    try {\n      const response = await fetch(\n        `${API_BASE_URL}${API_ENDPOINTS.SESSION_STATUS}?sessionId=${sessionId}`,\n        {\n          method: 'GET',\n          headers: { 'Content-Type': 'application/json' },\n          signal: AbortSignal.timeout(3000), // 3 second timeout\n        },\n      );\n\n      if (!response.ok) {\n        throw new Error(`Failed to get session status: ${response.statusText}`);\n      }\n\n      const { status } = await response.json();\n      return status;\n    } catch (error) {\n      console.error(`Error getting session status (${sessionId}):`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Update session metadata\n   */\n  async updateSessionMetadata(\n    sessionId: string,\n    updates: { name?: string; tags?: string[] },\n  ): Promise<SessionInfo> {\n    try {\n      const response = await fetch(`${API_BASE_URL}${API_ENDPOINTS.UPDATE_SESSION}`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ sessionId, ...updates }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to update session: ${response.statusText}`);\n      }\n\n      const { session } = await response.json();\n      return session;\n    } catch (error) {\n      console.error(`Error updating session (${sessionId}):`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Delete a session\n   */\n  async deleteSession(sessionId: string): Promise<boolean> {\n    try {\n      const response = await fetch(`${API_BASE_URL}${API_ENDPOINTS.DELETE_SESSION}`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ sessionId }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to delete session: ${response.statusText}`);\n      }\n\n      const { success } = await response.json();\n      return success;\n    } catch (error) {\n      console.error(`Error deleting session (${sessionId}):`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Restore a session\n   */\n  async restoreSession(sessionId: string): Promise<SessionInfo> {\n    try {\n      const response = await fetch(`${API_BASE_URL}${API_ENDPOINTS.RESTORE_SESSION}`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ sessionId }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to restore session: ${response.statusText}`);\n      }\n\n      const { success, session } = await response.json();\n      if (!success) {\n        throw new Error('Failed to restore session');\n      }\n\n      return session;\n    } catch (error) {\n      console.error(`Error restoring session (${sessionId}):`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Send a streaming query\n   */\n  async sendStreamingQuery(\n    sessionId: string,\n    query: string | ChatCompletionContentPart[],\n    onEvent: (event: Event) => void,\n  ): Promise<void> {\n    try {\n      const response = await fetch(`${API_BASE_URL}${API_ENDPOINTS.QUERY_STREAM}`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ sessionId, query }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to send query: ${response.statusText}`);\n      }\n\n      const reader = response.body?.getReader();\n      if (!reader) {\n        throw new Error('ReadableStream not supported');\n      }\n\n      const decoder = new TextDecoder();\n\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) break;\n\n        const chunk = decoder.decode(value, { stream: true });\n        const lines = chunk.split('\\n\\n');\n\n        for (const line of lines) {\n          if (line.startsWith('data: ')) {\n            try {\n              const eventData = JSON.parse(line.substring(6));\n              onEvent(eventData);\n            } catch (e) {\n              console.error('Error parsing event data:', e);\n            }\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Error in streaming query:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Send a non-streaming query\n   */\n  async sendQuery(sessionId: string, query: string | ChatCompletionContentPart[]): Promise<string> {\n    try {\n      const response = await fetch(`${API_BASE_URL}${API_ENDPOINTS.QUERY}`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ sessionId, query }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to send query: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      return data.result;\n    } catch (error) {\n      console.error('Error sending query:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Abort a running query\n   */\n  async abortQuery(sessionId: string): Promise<boolean> {\n    try {\n      const response = await fetch(`${API_BASE_URL}${API_ENDPOINTS.ABORT}`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ sessionId }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to abort query: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      return data.success;\n    } catch (error) {\n      console.error('Error aborting query:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Generate a summary for a conversation\n   */\n  async generateSummary(sessionId: string, messages: any[]): Promise<string> {\n    try {\n      const response = await fetch(`${API_BASE_URL}${API_ENDPOINTS.GENERATE_SUMMARY}`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ sessionId, messages }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to generate summary: ${response.statusText}`);\n      }\n\n      const { summary } = await response.json();\n      return summary;\n    } catch (error) {\n      console.error('Error generating summary:', error);\n      return 'Untitled Conversation';\n    }\n  }\n\n  /**\n   * Get browser control information for a session\n   */\n  async getBrowserControlInfo(sessionId: string): Promise<{ mode: string; tools: string[] }> {\n    try {\n      const response = await fetch(\n        `${API_BASE_URL}/api/sessions/browser-control?sessionId=${sessionId}`,\n        {\n          method: 'GET',\n          headers: { 'Content-Type': 'application/json' },\n          signal: AbortSignal.timeout(3000),\n        },\n      );\n\n      if (!response.ok) {\n        throw new Error(`Failed to get browser control info: ${response.statusText}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error(`Error getting browser control info (${sessionId}):`, error);\n      // 返回默认值作为回退\n      return { mode: 'default', tools: [] };\n    }\n  }\n\n  /**\n   * Get model information from the server\n   * @returns Model provider and model name information\n   */\n  async getModelInfo(): Promise<{ provider: string; model: string }> {\n    try {\n      const response = await fetch(`${API_BASE_URL}${API_ENDPOINTS.MODEL_INFO}`, {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' },\n        signal: AbortSignal.timeout(3000), // 3 second timeout\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to get model info: ${response.statusText}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error getting model info:', error);\n      // Return default values in case of error\n      return { provider: 'Unknown Provider', model: 'Unknown Model' };\n    }\n  }\n}\n\n// Export singleton instance\nexport const apiService = new ApiService();","import { API_BASE_URL, API_ENDPOINTS } from '../constants';\n\n/**\n * 分享配置接口\n */\nexport interface ShareConfig {\n  hasShareProvider: boolean;\n  shareProvider: string | null;\n}\n\n/**\n * 分享结果接口\n */\nexport interface ShareResult {\n  success: boolean;\n  url?: string;\n  html?: string;\n  sessionId?: string;\n  error?: string;\n}\n\n/**\n * 分享服务类 - 处理分享相关功能\n */\nclass ShareService {\n  private shareConfig: ShareConfig | null = null;\n\n  /**\n   * 获取分享配置\n   */\n  async getShareConfig(): Promise<ShareConfig> {\n    if (this.shareConfig) {\n      return this.shareConfig;\n    }\n\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/share/config`, {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' },\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to get share config: ${response.statusText}`);\n      }\n\n      this.shareConfig = await response.json();\n      return this.shareConfig as ShareConfig;\n    } catch (error) {\n      console.error('Failed to get share config:', error);\n      // 默认配置\n      return { hasShareProvider: false, shareProvider: null };\n    }\n  }\n\n  /**\n   * 分享会话\n   * @param sessionId 会话ID\n   * @param upload 是否上传到分享提供者（如果存在）\n   */\n  async shareSession(sessionId: string, upload = false): Promise<ShareResult> {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/sessions/share`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ sessionId, upload }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || `Failed to share session: ${response.statusText}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Failed to share session:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : String(error),\n      };\n    }\n  }\n\n  /**\n   * 下载 HTML 分享文件\n   * @param html HTML 内容\n   * @param sessionId 会话ID\n   */\n  downloadShareHtml(html: string, sessionId: string): void {\n    const blob = new Blob([html], { type: 'text/html' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `agent-tars-${sessionId}-${Date.now()}.html`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  }\n}\n\nexport const shareService = new ShareService();\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { atom } from 'jotai';\nimport { v4 as uuidv4 } from 'uuid';\nimport { Event, EventType, Message, ToolResult } from '../../types';\nimport { messagesAtom } from '../atoms/message';\nimport { toolResultsAtom, toolCallResultMap } from '../atoms/tool';\nimport { isProcessingAtom, activePanelContentAtom } from '../atoms/ui';\nimport { determineToolType } from '../../utils/formatters';\nimport { plansAtom, PlanKeyframe } from '../atoms/plan';\nimport type { PlanStep } from '@multimodal/agent-interface';\nimport { replayStateAtom } from '../atoms/replay';\n\n// 存储工具调用参数的映射表 (不是 Atom，是内部缓存)\nconst toolCallArgumentsMap = new Map<string, any>();\n\n/**\n * Process a single event and update the appropriate state atoms\n */\nexport const processEventAction = atom(\n  null,\n  (get, set, params: { sessionId: string; event: Event }) => {\n    const { sessionId, event } = params;\n    const replayState = get(replayStateAtom);\n    const isReplayMode = replayState.isActive;\n\n    switch (event.type) {\n      case EventType.USER_MESSAGE:\n        handleUserMessage(set, sessionId, event);\n        break;\n\n      case EventType.ASSISTANT_MESSAGE:\n        handleAssistantMessage(get, set, sessionId, event);\n        break;\n\n      case EventType.ASSISTANT_STREAMING_MESSAGE:\n        if (!isReplayMode) {\n          handleStreamingMessage(get, set, sessionId, event);\n        }\n        break;\n\n      case EventType.ASSISTANT_THINKING_MESSAGE:\n      case EventType.ASSISTANT_STREAMING_THINKING_MESSAGE:\n        handleThinkingMessage(get, set, sessionId, event);\n        break;\n\n      case EventType.TOOL_CALL:\n        handleToolCall(set, sessionId, event);\n        break;\n\n      case EventType.TOOL_RESULT:\n        handleToolResult(set, sessionId, event);\n        break;\n\n      case EventType.SYSTEM:\n        handleSystemMessage(set, sessionId, event);\n        break;\n\n      case EventType.ENVIRONMENT_INPUT:\n        handleEnvironmentInput(set, sessionId, event);\n        break;\n\n      case EventType.AGENT_RUN_START:\n        set(isProcessingAtom, true);\n        break;\n\n      case EventType.AGENT_RUN_END:\n        set(isProcessingAtom, false);\n        break;\n\n      case EventType.PLAN_START:\n        handlePlanStart(set, sessionId, event);\n        break;\n\n      case EventType.PLAN_UPDATE:\n        handlePlanUpdate(set, sessionId, event);\n        break;\n\n      case EventType.PLAN_FINISH:\n        handlePlanFinish(set, sessionId, event);\n        break;\n\n      case EventType.FINAL_ANSWER:\n        handleFinalAnswer(get, set, sessionId, event);\n        break;\n\n      case EventType.FINAL_ANSWER_STREAMING:\n        if (!isReplayMode) {\n          handleFinalAnswerStreaming(get, set, sessionId, event);\n        }\n        break;\n    }\n  },\n);\n\nexport const updateProcessingStatusAction = atom(\n  null,\n  (get, set, status: { isProcessing: boolean; state?: string }) => {\n    // Update processing state\n    set(isProcessingAtom, !!status.isProcessing);\n  },\n);\n\n/**\n * Handle user message event\n */\nfunction handleUserMessage(set: any, sessionId: string, event: Event): void {\n  const userMessage: Message = {\n    id: event.id,\n    role: 'user',\n    content: event.content,\n    timestamp: event.timestamp,\n  };\n\n  set(messagesAtom, (prev: Record<string, Message[]>) => {\n    const sessionMessages = prev[sessionId] || [];\n    return {\n      ...prev,\n      [sessionId]: [...sessionMessages, userMessage],\n    };\n  });\n\n  // Check for images in user message and set active panel content if found\n  if (Array.isArray(event.content)) {\n    const images = event.content.filter((part) => part.type === 'image_url');\n    if (images.length > 0) {\n      set(activePanelContentAtom, {\n        type: 'image',\n        source: images[0].image_url.url,\n        title: 'User Upload',\n        timestamp: Date.now(),\n      });\n    }\n  }\n}\n\n/**\n * Handle assistant message event (complete message)\n */\nfunction handleAssistantMessage(\n  get: any,\n  set: any,\n  sessionId: string,\n  event: Event & { messageId?: string; finishReason?: string },\n): void {\n  // 获取消息ID\n  const messageId = event.messageId;\n\n  set(messagesAtom, (prev: Record<string, Message[]>) => {\n    const sessionMessages = prev[sessionId] || [];\n\n    // 检查是否已存在相同messageId的消息\n    if (messageId) {\n      const existingMessageIndex = sessionMessages.findIndex((msg) => msg.messageId === messageId);\n\n      // 如果找到了现有消息，更新它而不是添加新消息\n      if (existingMessageIndex !== -1) {\n        const updatedMessages = [...sessionMessages];\n        updatedMessages[existingMessageIndex] = {\n          ...updatedMessages[existingMessageIndex],\n          content: event.content,\n          timestamp: event.timestamp,\n          toolCalls: event.toolCalls,\n          finishReason: event.finishReason,\n          isStreaming: false,\n        };\n\n        return {\n          ...prev,\n          [sessionId]: updatedMessages,\n        };\n      }\n    }\n\n    // 没有找到现有消息，添加新消息\n    return {\n      ...prev,\n      [sessionId]: [\n        ...sessionMessages,\n        {\n          id: event.id,\n          role: 'assistant',\n          content: event.content,\n          timestamp: event.timestamp,\n          toolCalls: event.toolCalls,\n          finishReason: event.finishReason,\n          messageId: messageId,\n        },\n      ],\n    };\n  });\n\n  set(isProcessingAtom, false);\n}\n\n/**\n * Handle streaming message event (incremental content)\n */\nfunction handleStreamingMessage(\n  get: any,\n  set: any,\n  sessionId: string,\n  event: Event & {\n    content: string;\n    isComplete?: boolean;\n    messageId?: string;\n    toolCalls?: any[];\n  },\n): void {\n  set(messagesAtom, (prev: Record<string, Message[]>) => {\n    const sessionMessages = prev[sessionId] || [];\n    const messageIdToFind = event.messageId;\n    let existingMessageIndex = -1;\n\n    // 优先按messageId查找\n    if (messageIdToFind) {\n      existingMessageIndex = sessionMessages.findIndex((msg) => msg.messageId === messageIdToFind);\n    }\n    // 没有messageId或未找到，尝试查找标记为streaming的最后一条消息\n    else if (sessionMessages.length > 0) {\n      const lastMessageIndex = sessionMessages.length - 1;\n      const lastMessage = sessionMessages[lastMessageIndex];\n      if (lastMessage && lastMessage.isStreaming) {\n        existingMessageIndex = lastMessageIndex;\n      }\n    }\n\n    // 更新现有消息\n    if (existingMessageIndex !== -1) {\n      const existingMessage = sessionMessages[existingMessageIndex];\n      const updatedMessage = {\n        ...existingMessage,\n        content:\n          typeof existingMessage.content === 'string'\n            ? existingMessage.content + event.content\n            : event.content,\n        isStreaming: !event.isComplete,\n        toolCalls: event.toolCalls || existingMessage.toolCalls,\n      };\n\n      return {\n        ...prev,\n        [sessionId]: [\n          ...sessionMessages.slice(0, existingMessageIndex),\n          updatedMessage,\n          ...sessionMessages.slice(existingMessageIndex + 1),\n        ],\n      };\n    }\n\n    // 创建新消息\n    const newMessage: Message = {\n      id: event.id || uuidv4(),\n      role: 'assistant',\n      content: event.content,\n      timestamp: event.timestamp,\n      isStreaming: !event.isComplete,\n      toolCalls: event.toolCalls,\n      messageId: event.messageId,\n    };\n\n    return {\n      ...prev,\n      [sessionId]: [...sessionMessages, newMessage],\n    };\n  });\n\n  if (event.isComplete) {\n    set(isProcessingAtom, false);\n  }\n}\n\n/**\n * Handle thinking message event\n */\nfunction handleThinkingMessage(\n  get: any,\n  set: any,\n  sessionId: string,\n  event: Event & { content: string; isComplete?: boolean },\n): void {\n  set(messagesAtom, (prev: Record<string, Message[]>) => {\n    const sessionMessages = prev[sessionId] || [];\n    const lastAssistantIndex = [...sessionMessages]\n      .reverse()\n      .findIndex((m) => m.role === 'assistant');\n\n    if (lastAssistantIndex !== -1) {\n      const actualIndex = sessionMessages.length - 1 - lastAssistantIndex;\n      const message = sessionMessages[actualIndex];\n\n      return {\n        ...prev,\n        [sessionId]: [\n          ...sessionMessages.slice(0, actualIndex),\n          { ...message, thinking: event.content },\n          ...sessionMessages.slice(actualIndex + 1),\n        ],\n      };\n    }\n\n    return prev;\n  });\n}\n\n/**\n * Handle tool call event - store arguments for later use\n */\nfunction handleToolCall(\n  set: any,\n  sessionId: string,\n  event: Event & {\n    toolCallId: string;\n    name: string;\n    arguments: any;\n    startTime?: number;\n  },\n): void {\n  // 保存工具调用的参数信息以便后续使用\n  if (event.toolCallId && event.arguments) {\n    toolCallArgumentsMap.set(event.toolCallId, event.arguments);\n  }\n\n  console.log('Tool call stored:', event.name, event.toolCallId);\n}\n\n/**\n * Handle tool result event\n */\nfunction handleToolResult(\n  set: any,\n  sessionId: string,\n  event: Event & {\n    toolCallId: string;\n    name: string;\n    content: any;\n    error?: string;\n  },\n): void {\n  // 获取之前存储的参数信息\n  const args = toolCallArgumentsMap.get(event.toolCallId);\n\n  // 添加调试日志来跟踪内容格式\n  console.log(`Tool result for ${event.name}:`, {\n    content: event.content,\n    isArray: Array.isArray(event.content),\n    hasTextItems:\n      Array.isArray(event.content) && event.content.some((item) => item.type === 'text'),\n    names: Array.isArray(event.content) ? event.content.map((item) => item.name) : 'not-an-array',\n  });\n\n  // 如果内容是标准化工具结果格式的数组，则直接使用\n  const isStandardFormat =\n    Array.isArray(event.content) &&\n    event.content.length > 0 &&\n    typeof event.content[0] === 'object' &&\n    'type' in event.content[0];\n\n  const result: ToolResult = {\n    id: uuidv4(),\n    toolCallId: event.toolCallId,\n    name: event.name,\n    content: event.content,\n    timestamp: event.timestamp,\n    error: event.error,\n    type: determineToolType(event.name, event.content),\n    arguments: args, // 使用保存的参数信息\n  };\n\n  // 添加调试日志，显示确定的类型\n  console.log(`Determined type for ${event.name}: ${result.type}`);\n\n  // Store in the map for future reference\n  toolCallResultMap.set(result.toolCallId, result);\n\n  // Add to toolResults atom\n  set(toolResultsAtom, (prev: Record<string, ToolResult[]>) => {\n    const sessionResults = prev[sessionId] || [];\n    return {\n      ...prev,\n      [sessionId]: [...sessionResults, result],\n    };\n  });\n\n  // Set as active panel content\n  set(activePanelContentAtom, {\n    type: result.type,\n    source: result.content,\n    title: result.name,\n    timestamp: result.timestamp,\n    toolCallId: result.toolCallId,\n    error: result.error,\n    arguments: args, // 使用正确的变量 args 而不是全局的 arguments\n  });\n\n  // Link to message with this tool call\n  set(messagesAtom, (prev: Record<string, Message[]>) => {\n    const sessionMessages = prev[sessionId] || [];\n\n    // Find message with this tool call\n    const messageIndex = [...sessionMessages]\n      .reverse()\n      .findIndex((m) => m.toolCalls?.some((tc) => tc.id === result.toolCallId));\n\n    if (messageIndex !== -1) {\n      const actualIndex = sessionMessages.length - 1 - messageIndex;\n      const message = sessionMessages[actualIndex];\n      const toolResults = message.toolResults || [];\n\n      const updatedMessage = {\n        ...message,\n        toolResults: [...toolResults, result],\n      };\n\n      return {\n        ...prev,\n        [sessionId]: [\n          ...sessionMessages.slice(0, actualIndex),\n          updatedMessage,\n          ...sessionMessages.slice(actualIndex + 1),\n        ],\n      };\n    }\n\n    return prev;\n  });\n}\n\n/**\n * Handle system message event\n */\nfunction handleSystemMessage(\n  set: any,\n  sessionId: string,\n  event: Event & { message: string; level?: string },\n): void {\n  const systemMessage: Message = {\n    id: uuidv4(),\n    role: 'system',\n    content: event.message,\n    timestamp: event.timestamp || Date.now(),\n  };\n\n  set(messagesAtom, (prev: Record<string, Message[]>) => {\n    const sessionMessages = prev[sessionId] || [];\n    return {\n      ...prev,\n      [sessionId]: [...sessionMessages, systemMessage],\n    };\n  });\n}\n\n/**\n * Handle environment input event\n * Adds it to messages but doesn't set it as active panel content\n */\nfunction handleEnvironmentInput(\n  set: any,\n  sessionId: string,\n  event: Event & { description?: string },\n): void {\n  const environmentMessage: Message = {\n    id: event.id,\n    role: 'environment',\n    content: event.content,\n    timestamp: event.timestamp,\n    description: event.description || 'Environment Input',\n  };\n\n  set(messagesAtom, (prev: Record<string, Message[]>) => {\n    const sessionMessages = prev[sessionId] || [];\n    return {\n      ...prev,\n      [sessionId]: [...sessionMessages, environmentMessage],\n    };\n  });\n}\n\n/**\n * Handle plan start event\n */\nfunction handlePlanStart(set: any, sessionId: string, event: Event & { sessionId: string }): void {\n  console.log('Plan start event:', event);\n  set(plansAtom, (prev: Record<string, any>) => ({\n    ...prev,\n    [sessionId]: {\n      steps: [],\n      isComplete: false,\n      summary: null,\n      hasGeneratedPlan: true,\n      keyframes: [], // Initialize empty keyframes array\n    },\n  }));\n}\n\n/**\n * Handle plan update event\n */\nfunction handlePlanUpdate(\n  set: any,\n  sessionId: string,\n  event: Event & { sessionId: string; steps: PlanStep[] },\n): void {\n  console.log('Plan update event:', event);\n  set(plansAtom, (prev: Record<string, any>) => {\n    const currentPlan = prev[sessionId] || {\n      steps: [],\n      isComplete: false,\n      summary: null,\n      hasGeneratedPlan: true,\n      keyframes: [],\n    };\n\n    // Create a new keyframe for this update\n    const newKeyframe: PlanKeyframe = {\n      timestamp: event.timestamp || Date.now(),\n      steps: event.steps,\n      isComplete: false,\n      summary: null,\n    };\n\n    // Add the keyframe to the history\n    const keyframes = [...(currentPlan.keyframes || []), newKeyframe];\n\n    return {\n      ...prev,\n      [sessionId]: {\n        ...currentPlan,\n        steps: event.steps,\n        hasGeneratedPlan: true,\n        keyframes,\n      },\n    };\n  });\n}\n\n/**\n * Handle plan finish event\n */\nfunction handlePlanFinish(\n  set: any,\n  sessionId: string,\n  event: Event & { sessionId: string; summary: string },\n): void {\n  console.log('Plan finish event:', event);\n  set(plansAtom, (prev: Record<string, any>) => {\n    const currentPlan = prev[sessionId] || {\n      steps: [],\n      isComplete: false,\n      summary: null,\n      hasGeneratedPlan: true,\n      keyframes: [],\n    };\n\n    // Create a final keyframe for the completed plan\n    const finalKeyframe: PlanKeyframe = {\n      timestamp: event.timestamp || Date.now(),\n      steps: currentPlan.steps,\n      isComplete: true,\n      summary: event.summary,\n    };\n\n    // Add the final keyframe to the history\n    const keyframes = [...(currentPlan.keyframes || []), finalKeyframe];\n\n    return {\n      ...prev,\n      [sessionId]: {\n        ...currentPlan,\n        isComplete: true,\n        summary: event.summary,\n        keyframes,\n      },\n    };\n  });\n}\n\n/**\n * Handle final answer event (complete answer/report)\n */\nfunction handleFinalAnswer(\n  get: any,\n  set: any,\n  sessionId: string,\n  event: Event & {\n    content: string;\n    isDeepResearch: boolean;\n    title?: string;\n    format?: string;\n    messageId?: string;\n  },\n): void {\n  const messageId = event.messageId || `final-answer-${uuidv4()}`;\n\n  // 始终将内容当作研究报告处理，移除JSON_DATA状态\n  // 设置活动面板内容为研究报告\n  set(activePanelContentAtom, {\n    type: 'research_report',\n    source: event.content,\n    title: event.title || 'Research Report',\n    timestamp: event.timestamp,\n    isDeepResearch: true,\n    messageId,\n  });\n\n  // 添加消息到聊天引用报告\n  const finalAnswerMessage: Message = {\n    id: event.id || uuidv4(),\n    role: 'final_answer',\n    content: event.content, // 存储完整内容以便后续访问\n    timestamp: event.timestamp,\n    messageId,\n    isDeepResearch: true,\n    title: event.title || 'Research Report',\n  };\n\n  set(messagesAtom, (prev: Record<string, Message[]>) => {\n    const sessionMessages = prev[sessionId] || [];\n    return {\n      ...prev,\n      [sessionId]: [...sessionMessages, finalAnswerMessage],\n    };\n  });\n\n  // 标记处理完成\n  set(isProcessingAtom, false);\n}\n\nfunction handleFinalAnswerStreaming(\n  get: any,\n  set: any,\n  sessionId: string,\n  event: Event & {\n    content: string;\n    isDeepResearch: boolean;\n    isComplete?: boolean;\n    messageId?: string;\n    title?: string;\n  },\n): void {\n  const messageId = event.messageId || `final-answer-${uuidv4()}`;\n\n  // 从当前消息列表中查找已有的相同 messageId 的消息\n  const messages = get(messagesAtom)[sessionId] || [];\n  const existingMessageIndex = messages.findIndex((msg) => msg.messageId === messageId);\n\n  // 当处理一系列流式事件时，将内容追加到现有消息，或创建新消息\n  set(messagesAtom, (prev: Record<string, Message[]>) => {\n    const sessionMessages = prev[sessionId] || [];\n\n    // 如果找到现有消息，则更新它\n    if (existingMessageIndex >= 0) {\n      const existingMessage = sessionMessages[existingMessageIndex];\n      const updatedMessage = {\n        ...existingMessage,\n        content:\n          typeof existingMessage.content === 'string'\n            ? existingMessage.content + event.content\n            : event.content,\n        isStreaming: !event.isComplete,\n        timestamp: event.timestamp,\n      };\n\n      return {\n        ...prev,\n        [sessionId]: [\n          ...sessionMessages.slice(0, existingMessageIndex),\n          updatedMessage,\n          ...sessionMessages.slice(existingMessageIndex + 1),\n        ],\n      };\n    }\n\n    // 否则创建新消息\n    const newMessage: Message = {\n      id: event.id || uuidv4(),\n      role: 'final_answer',\n      content: event.content,\n      timestamp: event.timestamp,\n      messageId,\n      isDeepResearch: true,\n      isStreaming: !event.isComplete,\n      title: event.title || 'Research Report',\n    };\n\n    return {\n      ...prev,\n      [sessionId]: [...sessionMessages, newMessage],\n    };\n  });\n\n  // 更新活动面板内容 - 同步面板与消息状态\n  set(activePanelContentAtom, (prev: any) => {\n    // 如果是新流或不同的messageId，重新开始\n    if (!prev || prev.type !== 'research_report' || prev.messageId !== messageId) {\n      return {\n        role: 'assistant',\n        type: 'research_report',\n        source: event.content,\n        title: event.title || 'Research Report (Generating...)',\n        timestamp: event.timestamp,\n        isDeepResearch: true,\n        messageId,\n        isStreaming: !event.isComplete,\n      };\n    }\n\n    // 否则追加到现有内容\n    return {\n      ...prev,\n      source: prev.source + event.content,\n      isStreaming: !event.isComplete,\n      timestamp: event.timestamp,\n      title: event.title || prev.title,\n    };\n  });\n\n  // 如果这是第一个数据块，也添加一条消息到聊天\n  const prevActivePanelContent = get(activePanelContentAtom);\n  if (!prevActivePanelContent || prevActivePanelContent.messageId !== messageId) {\n    const initialMessage: Message = {\n      id: event.id || uuidv4(),\n      role: 'final_answer',\n      content: event.content, // 存储初始内容\n      timestamp: event.timestamp,\n      messageId,\n      isDeepResearch: true,\n      isStreaming: !event.isComplete,\n      title: event.title || 'Research Report',\n    };\n\n    set(messagesAtom, (prev: Record<string, Message[]>) => {\n      const sessionMessages = prev[sessionId] || [];\n      return {\n        ...prev,\n        [sessionId]: [...sessionMessages, initialMessage],\n      };\n    });\n  } else if (event.isComplete) {\n    // 当流式生成完成时，更新消息的完整内容\n    const fullContent = get(activePanelContentAtom).source;\n\n    set(messagesAtom, (prev: Record<string, Message[]>) => {\n      const sessionMessages = prev[sessionId] || [];\n      const messageIndex = sessionMessages.findIndex((msg) => msg.messageId === messageId);\n\n      if (messageIndex >= 0) {\n        const updatedMessages = [...sessionMessages];\n        updatedMessages[messageIndex] = {\n          ...updatedMessages[messageIndex],\n          content: fullContent,\n          isStreaming: false,\n          title: event.title || updatedMessages[messageIndex].title || 'Research Report',\n        };\n\n        return {\n          ...prev,\n          [sessionId]: updatedMessages,\n        };\n      }\n\n      return prev;\n    });\n  }\n\n  // 如果这是最后一个数据块，标记处理完成\n  if (event.isComplete) {\n    set(isProcessingAtom, false);\n  }\n}\n","import { atom } from 'jotai';\nimport { apiService } from '../../services/apiService';\nimport { modelInfoAtom } from '../atoms/ui';\n\n/**\n * Action to fetch and update model information\n */\nexport const fetchModelInfoAction = atom(\n  null,\n  async (get, set) => {\n    try {\n      const info = await apiService.getModelInfo();\n      set(modelInfoAtom, info);\n      return info;\n    } catch (error) {\n      console.error('Failed to fetch model info:', error);\n      return { provider: 'Unknown', model: 'Unknown' };\n    }\n  }\n);\n\n/**\n * Action to directly set model information (used in replay mode)\n */\nexport const setModelInfoAction = atom(\n  null,\n  (get, set, modelInfo: { provider: string; model: string }) => {\n    set(modelInfoAtom, modelInfo);\n  }\n);\n","import { atom } from 'jotai';\nimport { v4 as uuidv4 } from 'uuid';\nimport { apiService } from '../../services/apiService';\nimport { sessionsAtom, activeSessionIdAtom } from '../atoms/session';\nimport { messagesAtom } from '../atoms/message';\nimport { toolResultsAtom, toolCallResultMap } from '../atoms/tool';\nimport { isProcessingAtom } from '../atoms/ui';\nimport { processEventAction } from './eventProcessor';\nimport { Message, EventType } from '../../types';\nimport { connectionStatusAtom } from '../atoms/ui'; // 假设 connectionStatusAtom 已经存在\nimport { replayStateAtom } from '../atoms/replay'; // 添加引入回放状态atom\nimport { ChatCompletionContentPart } from '@multimodal/agent-interface';\n\n/**\n * Load all available sessions\n */\nexport const loadSessionsAction = atom(null, async (get, set) => {\n  try {\n    const loadedSessions = await apiService.getSessions();\n    set(sessionsAtom, loadedSessions);\n  } catch (error) {\n    console.error('Failed to load sessions:', error);\n    throw error;\n  }\n});\n\n/**\n * Create a new session\n */\nexport const createSessionAction = atom(null, async (get, set) => {\n  try {\n    const newSession = await apiService.createSession();\n\n    // Add to sessions list\n    set(sessionsAtom, (prev) => [newSession, ...prev]);\n\n    // Initialize session data\n    set(messagesAtom, (prev) => ({\n      ...prev,\n      [newSession.id]: [],\n    }));\n\n    set(toolResultsAtom, (prev) => ({\n      ...prev,\n      [newSession.id]: [],\n    }));\n\n    // Set as active session\n    set(activeSessionIdAtom, newSession.id);\n\n    return newSession.id;\n  } catch (error) {\n    console.error('Failed to create session:', error);\n    throw error;\n  }\n});\n\n/**\n * Set the active session\n * 修改加载逻辑以避免重复处理事件\n */\nexport const setActiveSessionAction = atom(null, async (get, set, sessionId: string) => {\n  try {\n    // 检查是否已经是活动会话\n    const currentActiveSessionId = get(activeSessionIdAtom);\n    if (currentActiveSessionId === sessionId) {\n      console.log(`Session ${sessionId} is already active, skipping load`);\n      return;\n    }\n\n    // 检查回放状态并退出回放模式（除非是同一会话）\n    const replayState = get(replayStateAtom);\n    if (replayState.isActive) {\n      console.log('Exiting replay mode due to session change');\n      set(replayStateAtom, {\n        isActive: false,\n\n        isPaused: true,\n        events: [],\n        currentEventIndex: -1,\n        startTimestamp: null,\n        endTimestamp: null,\n        playbackSpeed: 1,\n\n        visibleTimeWindow: null,\n        processedEvents: {},\n      });\n    }\n\n    // 检查会话是否处于活动状态，如果不是则恢复\n\n    const sessionDetails = await apiService.getSessionDetails(sessionId);\n\n    if (!sessionDetails.active) {\n      await apiService.restoreSession(sessionId);\n    }\n\n    // 获取当前会话状态以更新 isProcessing 状态\n    try {\n      const status = await apiService.getSessionStatus(sessionId);\n      set(isProcessingAtom, status.isProcessing);\n    } catch (error) {\n      console.warn('Failed to get session status:', error);\n      set(isProcessingAtom, false);\n    }\n\n    // 清理工具调用映射缓存\n    toolCallResultMap.clear();\n\n    // 只有在消息不存在时才加载会话事件\n    const messages = get(messagesAtom);\n    if (!messages[sessionId] || messages[sessionId].length === 0) {\n      console.log(`Loading events for session ${sessionId}`);\n      const events = await apiService.getSessionEvents(sessionId);\n\n      // 对流式事件进行预处理，确保正确的连续性\n      const processedEvents = preprocessStreamingEvents(events);\n\n      // 处理每个事件以构建消息和工具结果\n      for (const event of processedEvents) {\n        set(processEventAction, { sessionId, event });\n      }\n    } else {\n      console.log(`Session ${sessionId} already has messages, skipping event loading`);\n    }\n\n    // 设置为活动会话\n    set(activeSessionIdAtom, sessionId);\n  } catch (error) {\n    console.error('Failed to set active session:', error);\n    set(connectionStatusAtom, (prev) => ({\n      ...prev,\n      connected: false,\n      lastError: error instanceof Error ? error.message : String(error),\n    }));\n    throw error;\n  }\n});\n\n/**\n * Update session metadata\n */\nexport const updateSessionAction = atom(\n  null,\n  async (get, set, params: { sessionId: string; updates: { name?: string; tags?: string[] } }) => {\n    const { sessionId, updates } = params;\n\n    try {\n      const updatedSession = await apiService.updateSessionMetadata(sessionId, updates);\n\n      // Update session in the list\n      set(sessionsAtom, (prev) =>\n        prev.map((session) =>\n          session.id === sessionId ? { ...session, ...updatedSession } : session,\n        ),\n      );\n\n      return updatedSession;\n    } catch (error) {\n      console.error('Failed to update session:', error);\n      throw error;\n    }\n  },\n);\n\n/**\n * 预处理事件，确保流式事件按正确顺序处理\n */\nfunction preprocessStreamingEvents(events: Event[]): Event[] {\n  // 对流式消息进行整理\n  const messageStreams: Record<string, Event[]> = {};\n\n  // 收集所有流式事件，按messageId分组\n  events.forEach((event) => {\n    if (event.type === EventType.FINAL_ANSWER_STREAMING && 'messageId' in event) {\n      const messageId = event.messageId as string;\n      if (!messageStreams[messageId]) {\n        messageStreams[messageId] = [];\n      }\n      messageStreams[messageId].push(event);\n    }\n  });\n\n  // 返回预处理后的事件，确保流式事件以正确顺序处理\n  return events;\n}\n\n/**\n * Delete a session\n */\nexport const deleteSessionAction = atom(null, async (get, set, sessionId: string) => {\n  try {\n    const success = await apiService.deleteSession(sessionId);\n    const activeSessionId = get(activeSessionIdAtom);\n\n    if (success) {\n      // Remove from sessions list\n      set(sessionsAtom, (prev) => prev.filter((session) => session.id !== sessionId));\n\n      // Clear active session if it was deleted\n      if (activeSessionId === sessionId) {\n        set(activeSessionIdAtom, null);\n      }\n\n      // Clear session data\n      set(messagesAtom, (prev) => {\n        const newMessages = { ...prev };\n        delete newMessages[sessionId];\n        return newMessages;\n      });\n\n      set(toolResultsAtom, (prev) => {\n        const newResults = { ...prev };\n        delete newResults[sessionId];\n        return newResults;\n      });\n    }\n\n    return success;\n  } catch (error) {\n    console.error('Failed to delete session:', error);\n    throw error;\n  }\n});\n\n/**\n * Send a message in the current session\n */\nexport const sendMessageAction = atom(\n  null,\n  async (get, set, content: string | ChatCompletionContentPart[]) => {\n    const activeSessionId = get(activeSessionIdAtom);\n\n    if (!activeSessionId) {\n      throw new Error('No active session');\n    }\n\n    // 明确设置处理状态\n    set(isProcessingAtom, true);\n\n    // 添加用户消息到状态\n    const userMessage: Message = {\n      id: uuidv4(),\n      role: 'user',\n      content,\n      timestamp: Date.now(),\n    };\n\n    set(messagesAtom, (prev) => {\n      const sessionMessages = prev[activeSessionId] || [];\n      return {\n        ...prev,\n        [activeSessionId]: [...sessionMessages, userMessage],\n      };\n    });\n\n    // 立即更新会话名称，使用用户查询作为 Summary\n    // 这样即使后续更新失败也至少有一个基本的名称\n    try {\n      // 检查是否是第一条消息，如果是则直接用查询内容作为会话名称\n      const messages = get(messagesAtom)[activeSessionId] || [];\n      if (messages.length <= 2) {\n        // 算上刚刚添加的用户消息\n        let summary = '';\n        if (typeof content === 'string') {\n          summary = content.length > 50 ? content.substring(0, 47) + '...' : content;\n        } else {\n          // 从多模态内容中提取文本部分\n          const textPart = content.find((part) => part.type === 'text');\n          if (textPart && 'text' in textPart) {\n            summary =\n              textPart.text.length > 50 ? textPart.text.substring(0, 47) + '...' : textPart.text;\n          } else {\n            summary = 'Image message';\n          }\n        }\n\n        await apiService.updateSessionMetadata(activeSessionId, { name: summary });\n\n        // 更新 sessions atom\n        set(sessionsAtom, (prev) =>\n          prev.map((session) =>\n            session.id === activeSessionId ? { ...session, name: summary } : session,\n          ),\n        );\n      }\n    } catch (error) {\n      console.log('Failed to update initial summary, continuing anyway:', error);\n      // 错误不中断主流程\n    }\n\n    try {\n      // 使用流式查询\n      await apiService.sendStreamingQuery(activeSessionId, content, (event) => {\n        // 处理每个事件\n        set(processEventAction, { sessionId: activeSessionId, event });\n\n        // 确保状态保持为处理中，直到明确收到结束事件\n        if (event.type !== EventType.AGENT_RUN_END && event.type !== EventType.ASSISTANT_MESSAGE) {\n          set(isProcessingAtom, true);\n        }\n      });\n    } catch (error) {\n      console.error('Error sending message:', error);\n      // 错误时重置处理状态\n      set(isProcessingAtom, false);\n      throw error;\n    }\n  },\n);\n\n/**\n * Abort the current running query\n */\nexport const abortQueryAction = atom(null, async (get, set) => {\n  const activeSessionId = get(activeSessionIdAtom);\n\n  if (!activeSessionId) {\n    return false;\n  }\n\n  try {\n    const success = await apiService.abortQuery(activeSessionId);\n\n    if (success) {\n      set(isProcessingAtom, false);\n\n      // Add system message about abort\n      const abortMessage: Message = {\n        id: uuidv4(),\n        role: 'system',\n        content: 'The operation was aborted.',\n        timestamp: Date.now(),\n      };\n\n      set(messagesAtom, (prev) => {\n        const sessionMessages = prev[activeSessionId] || [];\n        return {\n          ...prev,\n          [activeSessionId]: [...sessionMessages, abortMessage],\n        };\n      });\n    }\n\n    return success;\n  } catch (error) {\n    console.error('Error aborting query:', error);\n    return false;\n  }\n});\n\n/**\n * Check the current status of a session\n */\nexport const checkSessionStatusAction = atom(null, async (get, set, sessionId: string) => {\n  if (!sessionId) return;\n\n  try {\n    console.log(`Checking status for session: ${sessionId}`);\n    const status = await apiService.getSessionStatus(sessionId);\n\n    console.log(`Status for session ${sessionId}:`, status);\n\n    // 根据服务器响应更新处理状态\n    set(isProcessingAtom, status.isProcessing);\n\n    return status;\n  } catch (error) {\n    console.error('Failed to check session status:', error);\n    // 错误时不更新处理状态，避免误报\n  }\n});\n\n/**\n * Handle the end of a conversation\n * 仍然保留此函数，但减少其重要性，避免更新失败带来的影响\n */\nasync function handleConversationEnd(get: any, set: any, sessionId: string): Promise<void> {\n  // 我们不再依赖这个函数来设置会话名称，但仍然保留它作为备份机制\n  const allMessages = get(messagesAtom)[sessionId] || [];\n\n  // 只在有足够的消息并且会话没有名称时才尝试生成摘要\n  const sessions = get(sessionsAtom);\n  const currentSession = sessions.find((s) => s.id === sessionId);\n\n  // 如果会话已经有名称，则不需要再生成\n  if (currentSession && currentSession.name) {\n    return;\n  }\n\n  // 只在有实际对话时才尝试生成摘要\n  if (allMessages.length > 1) {\n    try {\n      // 转换消息为 API 期望的格式\n      const apiMessages = allMessages.map((msg: Message) => ({\n        role: msg.role,\n        content: typeof msg.content === 'string' ? msg.content : 'multimodal content',\n      }));\n\n      // 生成摘要\n      const summary = await apiService.generateSummary(sessionId, apiMessages);\n\n      if (summary) {\n        // 更新会话名称\n        await apiService.updateSessionMetadata(sessionId, { name: summary });\n\n        // 更新 sessions atom\n        set(sessionsAtom, (prev: any[]) =>\n          prev.map((session) =>\n            session.id === sessionId ? { ...session, name: summary } : session,\n          ),\n        );\n      }\n    } catch (error) {\n      console.error('Failed to generate or update summary, continuing anyway:', error);\n      // 错误不影响主流程\n    }\n  }\n}\n","import { atom } from 'jotai';\nimport { Event } from '../../types';\n\n/**\n * Replay state interface for storing replay data\n *\n * This represents the current state of the replay functionality,\n * including timing, event positioning, and playback control\n */\nexport interface ReplayState {\n  // Active state\n  isActive: boolean;\n  isPaused: boolean;\n\n  // Events and timing\n  events: Event[];\n  currentEventIndex: number;\n  startTimestamp: number | null;\n  endTimestamp: number | null;\n\n  // Playback control\n  playbackSpeed: number; // 1 = normal, 2 = 2x speed, etc.\n  autoPlayCountdown: number | null; // Countdown in seconds before autoplay starts\n\n  // Current visible range\n  visibleTimeWindow: {\n    start: number;\n    end: number;\n  } | null;\n\n  // Tracking processed events to avoid duplicates\n  processedEvents?: Record<string, boolean>;\n}\n\n/**\n * Default replay state\n */\nconst DEFAULT_REPLAY_STATE: ReplayState = {\n  isActive: false,\n  isPaused: true,\n  events: [],\n  currentEventIndex: -1,\n  startTimestamp: null,\n  endTimestamp: null,\n  playbackSpeed: 1,\n  autoPlayCountdown: null,\n  visibleTimeWindow: null,\n  processedEvents: {},\n};\n\n/**\n * Atom for storing replay state\n * This manages the entire replay experience including timeline position and events\n */\nexport const replayStateAtom = atom<ReplayState>(DEFAULT_REPLAY_STATE);\n","import { atom } from 'jotai';\nimport { ConnectionStatus, PanelContent } from '../../types';\n\n/**\n * Atom for the content currently displayed in the panel\n */\nexport const activePanelContentAtom = atom<PanelContent | null>(null);\n\n/**\n * Atom for server connection status\n */\nexport const connectionStatusAtom = atom<ConnectionStatus>({\n  connected: false,\n  lastConnected: null,\n  lastError: null,\n  reconnecting: false,\n});\n\n/**\n * Atom for model info (provider and model name)\n */\nexport const modelInfoAtom = atom<{ provider: string; model: string }>({\n  provider: '',\n  model: '',\n});\n\n/**\n * Atom for sidebar collapsed state\n */\nexport const sidebarCollapsedAtom = atom<boolean>(false);\n\n/**\n * Atom for workspace panel collapsed state\n */\nexport const workspacePanelCollapsedAtom = atom<boolean>(false);\n\n/**\n * Atom for tracking processing status (when agent is running)\n */\nexport const isProcessingAtom = atom<boolean>(false);\n\n/**\n * Atom for offline mode state (view-only when disconnected)\n */\nexport const offlineModeAtom = atom<boolean>(false);","import { ToolResult } from '../types';\nimport { TOOL_TYPES } from '../constants';\n\n/**\n * Format a timestamp to a user-friendly date string\n */\nexport function formatTimestamp(timestamp: number): string {\n  const date = new Date(timestamp);\n  return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n}\n\n/**\n * Format a date relative to today (Today, Yesterday, or date)\n */\nexport function formatRelativeDate(timestamp: number): string {\n  const date = new Date(timestamp);\n  const today = new Date();\n  today.setHours(0, 0, 0, 0);\n\n  const yesterday = new Date(today);\n  yesterday.setDate(yesterday.getDate() - 1);\n\n  if (date.toDateString() === today.toDateString()) {\n    return 'Today';\n  } else if (date.toDateString() === yesterday.toDateString()) {\n    return 'Yesterday';\n  } else {\n    return date.toLocaleDateString([], { month: 'short', day: 'numeric' });\n  }\n}\n\n/**\n * Determine the tool type from name and content\n */\nexport function determineToolType(name: string, content: any): ToolResult['type'] {\n  const lowerName = name.toLowerCase();\n\n  // Add specialized browser_vision_control detection\n  if (lowerName === 'browser_vision_control') {\n    return 'browser_vision_control';\n  }\n\n  // Check the tool name first\n  if (lowerName.includes('search') || lowerName.includes('web_search')) return TOOL_TYPES.SEARCH;\n  if (lowerName.includes('browser')) return TOOL_TYPES.BROWSER;\n  if (\n    lowerName.includes('command') ||\n    lowerName.includes('terminal') ||\n    lowerName === 'run_command'\n  )\n    return TOOL_TYPES.COMMAND;\n  if (lowerName.includes('file') || lowerName.includes('document')) return TOOL_TYPES.FILE;\n\n  // 检查内容是否是新格式的搜索结果\n  if (\n    Array.isArray(content) &&\n    content.some(\n      (item) => item.type === 'text' && (item.name === 'RESULTS' || item.name === 'QUERY'),\n    )\n  ) {\n    return TOOL_TYPES.SEARCH;\n  }\n\n  // 检查内容是否是新格式的浏览器导航结果\n  if (\n    Array.isArray(content) &&\n    content.some(\n      (item) => item.type === 'text' && item.text && item.text.startsWith('Navigated to'),\n    )\n  ) {\n    return TOOL_TYPES.BROWSER;\n  }\n\n  // Check if content contains image data\n  if (\n    content &&\n    ((typeof content === 'object' && content.type === 'image') ||\n      (typeof content === 'string' && content.startsWith('data:image/')))\n  ) {\n    return TOOL_TYPES.IMAGE;\n  }\n\n  // 检查内容是否是新格式的命令执行结果\n  if (\n    Array.isArray(content) &&\n    content.some(\n      (item) => item.type === 'text' && (item.name === 'STDOUT' || item.name === 'COMMAND'),\n    )\n  ) {\n    return TOOL_TYPES.COMMAND;\n  }\n\n  return TOOL_TYPES.OTHER;\n}\n\n/**\n * Agent TARS options interface\n * Simple version just for type checking\n */\ninterface AgentTARSOptions {\n  model?: {\n    provider?: string;\n    name?: string;\n    [key: string]: any;\n  };\n  browser?: {\n    control?: string;\n    [key: string]: any;\n  };\n  [key: string]: any;\n}\n\n/**\n * Merges command line options into loaded config\n * Prioritizes command line options over config file values\n */\nexport function mergeCommandLineOptions(\n  config: AgentTARSOptions,\n  options: Record<string, any>,\n): AgentTARSOptions {\n  // Create a copy of the config to avoid mutation\n  const mergedConfig: AgentTARSOptions = { ...config };\n\n  // ... 现有代码 ...\n\n  // Handle browser control mode\n  if (options.browserControl) {\n    if (!mergedConfig.browser) {\n      mergedConfig.browser = {};\n    }\n    mergedConfig.browser.control = options.browserControl;\n  }\n\n  // ... 现有代码 ...\n\n  return mergedConfig;\n}"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACTA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;;AAEA;;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;;;;;;AACA;AAEA;;AAEA;AAAA;AAAA;;;;;;;;;;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;AAMA;AAxDA;;AAEA;AACA;;;AAHA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;;;;;;;;AAQA;;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAWA;AAVA;AAEA;AACA;AACA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;;AAEA;AAAA;AACA;AAAA;;;;;;;;;;;AAEA;AAAA;AAAA;;;;;;;;;;;;AAGA;AAEA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;;AACA;;AACA;AAAA;;AACA;AAAA;;;;;;AAAA;;;;;;;AAGA;AAAA;AAAA;;;;;;;;;;;;AAIA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;;AAEA;AACA;AACA;;;;;;AAEA;;;;;;;;;;;;;;;;;;AAKA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AASA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;;AACA;AACA;AACA;AAEA;AAAA;;;;;;;;;;;AAEA;AACA;AACA;AACA;;;;;;AAGA;AACA;AACA;AACA;;;;;;AAGA;AACA;AACA;AAAA;AAAA;AACA;;AAEA;AAAA;;;;;;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;AAOA;;AACA;AACA;AACA;;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;;AAEA;AAAA;AAAA;;;;;;AACA;AAAA;AACA;;;;;;;;;;;;;;;;;AASA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;;AACA;AAAA;AACA;;;;;;AAEA;AACA;;AACA;AAAA;;AAAA;AACA;AAAA;;;;;;;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;;AAEA;AAAA;AAAA;;;;;;AAAA;;;;;;;;;;;;AAKA;AAAA;AACA;;;;;;;;;;;;;;;;AAQA;AAAA;AACA;AAGA;AACA;AAFA;;;;;;;;;;AAWA;AAEA;AAAA;;;;;;;;;;;;AAIA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAMA;AAAA;;;;;;AAIA;AACA;AAGA;AACA;;;;;;;;;;;;;;;;;;;AAOA;AAxUA;;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAOA;AAEA;;;AAlBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzCA;AACA;AACA;AAQA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;;AACA;AACA;AACA;AACA;;;;;;AAIA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;;;;;;;;;;;AAIA;AAAA;;;;;;;;;;;;;;;;;AAIA;AAlCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnBA;AAGA;AACA;AACA;AACA;AAOA;;;;;;;;;AASA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AALA;;;;;AASA;AAEA;AACA;AACA;AACA;AACA;AALA;;;;;;;;;;;AASA;AACA;AAEA;AAAA;;;;;;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAJA;;;;;;;;;;AASA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;AAIA;AACA;AACA;AACA;AACA;AACA;;;;;;AAIA;AACA;;AAEA;AAAA;AAAA;;;;;;AAGA;AACA;;AACA;AACA;AAAA;AAAA;AAAA;;;;;AAGA;AACA;AACA;AAAA;;AACA;AAAA;AAAA;;;;;;AACA;;;;;;;;;;;;;;;;;;AAQA;AACA;AAAA;;;;;;AAIA;AACA;;AACA;AAAA;AACA;AAAA;;;;;;;;;;;AACA;;;;;;;;;;;;;;;;;;;AAQA;AACA;AAEA;AACA;;AAEA;AAAA;;;;;;AAGA;AACA;;AAEA;AAAA;AAAA;;;;;;AAGA;AACA;;AACA;AACA;AAAA;AAAA;AAAA;;;;;AAGA;AACA;AACA;AAAA;;AACA;AAAA;AAAA;;;;;;AACA;;;;;;;;;;;;;;;;;;AAQA;AACA;AAAA;;;;;;AAIA;AACA;;AACA;AAAA;AACA;AAAA;;;;;;;;;;;AACA;;;;;;;;;;;;;;;;;;;AAQA;AAvMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvBA;AACA;AAEA;AAQA;;;;;;;AAOA;AACA;AAKA;AACA;AACA;AAEA;AACA;AAEA;;AAGA;AAEA;AAEA;AAGA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;;;;;;AAhBA;;;;;;;;;;AA6BA;AACA;AAAA;;;;;;;AAIA;AAvDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnBA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;;;;;;;;;AASA;AACA;;AAMA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;;;;AAGA;AAEA;AAAA;AAAA;;;;;;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AAGA;AACA;;;;;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;AAGA;;AACA;AAAA;AACA;;;;;;AAIA;AAGA;AACA;AACA;;;;;;AAKA;AAEA;AACA;AACA;AACA;;;;;;AAKA;AAEA;AACA;AACA;;;;;;;;;;;;;AAQA;AAMA;AACA;AACA;;;;;;;;;;;;AAKA;AArLA;;AAUA;AACA;AACA;;;AAZA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AASA;;AAEA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AASA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AAAA;;;;;AAEA;AAAA;AAAA;;;;;;AACA;AAEA;AACA;;AAMA;AAAA;AAAA;;;;;;;;;;;;;AAIA;AAEA;AACA;AAAA;;AAEA;AACA;AAAA;;;;;;AAIA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;;;AAMA;AACA;;AAKA;AACA;;;;;;AAQA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;;;;;;AAIA;AAAA;;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAKA;AAEA;AAAA;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AAIA;AAAA;AACA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;AAbA;;;;AAgBA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAKA;AAEA;AAAA;AAAA;;;;;AAAA;AAAA;;;;;;AAhBA;;;;AAmBA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAMA;AAAA;;;;;;AAdA;;;;;;;;;;;;;;;;;;;;;;AAqBA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;;;;;AAIA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AAEA;AAAA;;AACA;;;;;AACA;;;;;AACA;;;;;;;;;;;AACA;;;;;;AAIA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;;;;;AAOA;AA1ZA;;AAWA;AASA;AAEA;AAEA;;;AAxBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;;;;;;;;;AASA;AACA;;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;;AAEA;;;;;AAGA;AAAA;;AAEA;;;;;AAGA;AAAA;AAEA;AAAA;;AAEA;AACA;AACA;AAEA;AAAA;AACA;;;;;;;;;;;;;;;AAKA;AAAA;AAAA;AACA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA;AA5CA;;AACA;AAGA;;;AAJA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAUA;;;AAGA;AACA;;AAOA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;;AACA;AAAA;AAAA;;;;;;AACA;AAAA;AAAA;;;;;;;;;;;;AAGA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AAAA;;;;;;;;;;;;AAIA;AACA;;AACA;AAAA;;;;;;AACA;;AAEA;AAAA;;;;;;AACA;AAAA;;;;;;;;;;;;;;;;AAOA;AACA;AAAA;AACA;AAKA;AAEA;AACA;AACA;;AAEA;AACA;AAAA;;;;;;;;;;;;AAGA;AACA;AAAA;AACA;AAKA;AAEA;AACA;AACA;;AAEA;AACA;AAAA;;;;;;;;;;;;AAGA;AACA;AAAA;AACA;AAKA;AAEA;AACA;AACA;;AAEA;AACA;AAAA;;;;;;;;;;;;AAGA;AACA;AAAA;AACA;AAAA;AAAA;;;;;;;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;AAGA;AACA;AACA;AAEA;AACA;AACA;;;;;;AAGA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;AAGA;AACA;AAAA;AACA;AAAA;AAAA;;;;;;;AAEA;AAAA;AACA;AAAA;AAAA;;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;;;;;;;AACA;AAAA;AACA;AACA;AACA;;;;;;;AAGA;AAAA;AACA;AACA;AAAA;AACA;;;;;;AAGA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;;;;;;;;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;;;;;;;AACA;AAAA;AACA;AACA;AACA;;;;;;;AAGA;AAAA;AACA;AAAA;AAAA;;;;;;;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;;;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;;;;;;;AACA;AAEA;AACA;AACA;;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;;;;;;AAIA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;;;;;;AAGA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;AAGA;AACA;AA3SA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;;AAEA;AAAA;AAEA;AAAA;;AACA;AAAA;;;;;;AACA;AAAA;;;;;;AACA;AAAA;;;;;;;;;;;;;;;;;AAKA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAAA;;;;;AAAA;AAAA;;;;;;;;;;;;;;;;AAMA;AAAA;AACA;AACA;;AACA;AAAA;;;;;;AACA;AAAA;AAAA;;;;;;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AAQA;AAAA;;AACA;AAAA;;;;;;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAAA;;;;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;AAKA;AA7EA;;AACA;AACA;AACA;;;AAHA;;;;;;;;;;;;;;;;;;;;;;;;ACXA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AAEA;;;;;;;AAOA;;AAEA;AAUA;AAEA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAAA;;;;;;;;;;;AAIA;AAAA;;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;;;;;AAAA;AAAA;;;;;;;;;;;AAIA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;;;;;;;;;;;;;;;;;AAKA;AAAA;;AACA;AAAA;;AACA;AAAA;AAAA;;;;;;AAAA;;;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;;AAMA;AAAA;;AAVA;;;;;;;;;;;;;;;;;AAgBA;AApGA;;AASA;;;AATA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AAEA;;AAEA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;;AACA;AAjCA;;AACA;AACA;AACA;;;AAHA;AAmCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3CA;AACA;AACA;AACA;AAMA;;AAEA;AACA;;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAMA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;;AACA;AAEA;AACA;AACA;AAAA;AAAA;;;;;;AACA;AAEA;AAAA;;AACA;AA7DA;;AACA;AAEA;AACA;AACA;;;AALA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AAMA;;;;;;;;AAQA;AACA;;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAAA;;;;;;;;;;;AAGA;AAAA;AAAA;AAAA;;;;;;;;AAGA;AAEA;AACA;;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;;AAEA;AAAA;AAAA;;;;;;AACA;AAAA;;;;;;;;;;;;AAGA;AAAA;AAAA;AAAA;;;;;;;;AAGA;AApDA;;AAEA;;;AAFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AAQA;;;;;;;;AAQA;AACA;;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;;AAEA;AAAA;AAAA;;;;;;AAGA;AAAA;AACA;AAAA;;AAEA;AAAA;;AACA;AAAA;;AACA;AAAA;;;;;;AAAA;;;;;;;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;;;;;;;;;;;;;;;;;AAKA;AACA;AACA;AAAA;;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;;;;;;;;;;AAEA;AAAA;;;;;;;;;;;;;;;;;AAMA;AACA;;AACA;AAAA;AAAA;;;;;;AAIA;AAAA;;AAEA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;;AAEA;AAAA;;AACA;AAAA;AACA;AAAA;;;;;;;;;;;AAEA;AAAA;;AACA;AAAA;AAAA;;;;;;AAGA;AAAA;AAAA;;;;;;;;;;;;;;;;;;AAKA;AAAA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;AAMA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;;AAEA;AAAA;;AACA;AAAA;AACA;AAAA;;;;;;;;;;;AAEA;AAAA;;AACA;AAAA;AAAA;;;;;;AAGA;AAAA;AAAA;;;;;;;;;;;;;;;;;;AAKA;AAAA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;AAKA;AAAA;AAAA;;;;;;;;;;;;AAOA;AACA;;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AAEA;AAAA;AAAA;;;;;;;;;;;;AAOA;AACA;;AACA;AAAA;;AACA;AAAA;AACA;AAAA;AAAA;;;;;;;;;;;AAEA;;AACA;AAAA;AAAA;;;;;;AAGA;AAAA;AAAA;;;;;;;;;;;;;;;;;;AAMA;AAAA;;AACA;AACA;AACA;AACA;AACA;;;;;;AAEA;AACA;AACA;AAEA;AACA;;AACA;AAAA;AAAA;;;;;;AAAA;;;;;;AAIA;;;;;;;;;;;;AAKA;AAAA;AAAA;;;;;;AAIA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AAQA;AACA;;AACA;AAAA;;AACA;AAAA;AACA;AAAA;AAAA;;;;;;;;;;;AAEA;;AACA;AAAA;AAAA;;;;;;AAGA;AAAA;AAAA;;;;;;;;;;;;;;;;;;AAMA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AAQA;AACA;;AACA;AAAA;;AACA;AAAA;AACA;AAAA;AAAA;;;;;;;;;;;AAEA;;AACA;AAAA;AAAA;;;;;;AACA;AAAA;AACA;;;;;;;;;;;;;;;;;;AAMA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUA;AApUA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;ACrBA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AAMA;;;;;;;;AAQA;AACA;;AACA;AAWA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;;;;;;AAIA;AAEA;AACA;;AAEA;AAAA;;AACA;AAAA;AAAA;;;;;;AACA;AAAA;;AAEA;AACA;AAOA;;;;;;AASA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AAEA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;AAMA;AACA;AACA;AAAA;;AACA;AAAA;;AACA;AAAA;;;;;;AACA;AAAA;AAAA;;;;;;;;;;;;AAEA;AAAA;AAAA;;;;;;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;;AAEA;AACA;AACA;;;;;;AAEA;;;;;;;;;;;;;;;;;;AAOA;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AAAA;;AAEA;AAAA;;;;;;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;;;;;;;;;;;;;;;;;AAKA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;;;;;;;;;;;;;;;;;;;;;AA7BA;;;;;;;;;;;;;;;;;;;;;AAqDA;AAtQA;;AAUA;AAEA;;;AAZA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;AAQA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;AAGA;AAEA;AACA;;AACA;;;;;AACA;AAAA;;;;;;;;;;;;AAGA;AAnBA;;AACA;AACA;;;AAFA;AAqBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpCA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;AAQA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;;;;;;AAIA;AAAA;;AAEA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAKA;AAEA;AAAA;;;;;;;;;;;AAKA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAAA;;;;;;;;;;;AAKA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;;;;;;;;;;;;;;;;;;;;;;;AAKA;AA5EA;;AACA;AACA;AACA;;;AAHA;;;;;;;;;;;;;;;;;;;;;;;;AChBA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AASA;AAEA;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;;;;;;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;;AAGA;AAAA;;AACA;AAAA;;;;;;AACA;AAAA;;;;;;AACA;AAAA;;;;;;;;;;;;AAIA;AAAA;AACA;AAAA;AACA;AAAA;;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;;;;;;AAEA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;AAQA;AAAA;;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AAEA;AAAA;AAAA;;;;;;AAGA;AAAA;AAAA;;;;;;;;;;;;AAOA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;;AACA;AAAA;;AAEA;AAAA;;;;;;AAGA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAIA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAMA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AAKA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAKA;;AAEA;AAAA;AAAA;;;;;;AAGA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AAKA;AACA;AACA;;;;;;AAIA;AAAA;;;;;;;;;;;;;;;;;AAKA;AAAA;AACA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AARA;;;;;;;;;;;;;;;;;;;;;AAgBA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AAEA;AAAA;AAAA;;;;;;AAIA;AAAA;AACA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;;AAEA;AAAA;AACA;;;;;;AAEA;AAAA;AACA;;;;;;AAEA;AAAA;AACA;;;;;;;AAbA;;;;;;;;;;AAoBA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;;AACA;AAAA;AAAA;;;;;;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUA;AAzWA;;AACA;AAEA;;;AAHA;AA2WA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzXA;;AAEA;AAEA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrFA;AACA;AACA;AACA;AACA;AACA;AACA;AAcA;AACA;AACA;AACA;AAEA;;;;;;;AAOA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;;;;;;AAGA;AA1HA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AARA;AA4HA;;AAEA;;AAEA;AACA;AACA;AAHA;AAKA;;AAEA;;AAEA;AACA;AACA;AAHA;;;;;;;;;;;;;;;;;;;;;;;;;;ACxKA;AACA;AAEA;;;;AAIA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;;AAEA;AAGA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;;AAEA;AAEA;AAKA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzWA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAUA;AAIA;AACA;AAEA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AAEA;AACA;AAGA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvNA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AAKA;AAjDA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;ACZA;AAEA;AAGA;;;;;;;AAOA;AAEA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAMA;AAWA;AAVA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;;;AAGA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;ACxZA;AAqBA;;AAEA;AAIA;;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAxEA;;AAyEA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;;AAEA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AAGA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAOA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;AAEA;AAYA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;AAEA;AAOA;AACA;AACA;AAAA;AAAA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AAEA;AAWA;AACA;AACA;AACA;AAEA;AACA;AAEA;;AAEA;AAWA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AAAA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AAEA;AAMA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;;;AAGA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAaA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAYA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AChwBA;AACA;AACA;AAEA;;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;;AAEA;AAIA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAIA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AAGA;;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AAEA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AClaA;AAkCA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrDA;AAGA;;AAEA;AAGA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AAEA;;AAEA;AAGA;;AAEA;AAGA;;AAEA;AAGA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;AC1CA;AAEA;;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAMA;AAEA;AACA;AAMA;AACA;AAEA;AACA;AAMA;AACA;AAEA;AACA;AAKA;AACA;AAEA;AACA;AAMA;AACA;AAEA;AACA;AAmBA;;;AAGA;AAKA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA"}