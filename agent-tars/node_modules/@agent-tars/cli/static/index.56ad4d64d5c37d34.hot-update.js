"use strict";
self["webpackHotUpdate_agent_tars_web_ui"]("index", {
"./src/entry.css": (function (module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
// extracted by css-extract-rspack-plugin

    if(true) {
      (function() {
        var localsJsonString = undefined;
        // 1749334314458
        var cssReload = (__webpack_require__("../node_modules/.pnpm/@rspack+core@1.3.9_@swc+helpers@0.5.17/node_modules/@rspack/core/dist/cssExtractHmr.js")/* .cssReload */.cssReload)(module.id, {});
        // only invalidate when locals change
        if (
          module.hot.data &&
          module.hot.data.value &&
          module.hot.data.value !== localsJsonString
        ) {
          module.hot.invalidate();
        } else {
          module.hot.accept();
        }
        module.hot.dispose(function(data) {
          data.value = localsJsonString;
          cssReload();
        });
      })();
    }
  

}),
"./src/v2/state/actions/eventProcessor.ts": (function (module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  processEventAction: () => (processEventAction),
  updateProcessingStatusAction: () => (updateProcessingStatusAction)
});
/* ESM import */var jotai__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("../node_modules/.pnpm/jotai@2.12.5_@types+react@18.3.23_react@18.3.1/node_modules/jotai/esm/vanilla.mjs");
/* ESM import */var uuid__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-browser/v4.js");
/* ESM import */var _atoms_message__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/v2/state/atoms/message.ts");
/* ESM import */var _atoms_tool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/v2/state/atoms/tool.ts");
/* ESM import */var _atoms_ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/v2/state/atoms/ui.ts");
/* ESM import */var _utils_formatters__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/v2/utils/formatters.ts");
/* ESM import */var _atoms_plan__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/v2/state/atoms/plan.ts");
/* ESM import */var _atoms_replay__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./src/v2/state/atoms/replay.ts");
/* provided dependency */ var $ReactRefreshRuntime$ = __webpack_require__("../node_modules/.pnpm/@rspack+plugin-react-refresh@1.0.3_react-refresh@0.16.0/node_modules/@rspack/plugin-react-refresh/client/reactRefresh.js");
/* eslint-disable @typescript-eslint/no-explicit-any */ 







// 存储工具调用参数的映射表 (不是 Atom，是内部缓存)
const toolCallArgumentsMap = new Map();
/**
 * Process a single event and update the appropriate state atoms
 */ const processEventAction = (0,jotai__WEBPACK_IMPORTED_MODULE_6__.atom)(null, (get, set, params)=>{
    const { sessionId, event } = params;
    const replayState = get(_atoms_replay__WEBPACK_IMPORTED_MODULE_5__.replayStateAtom);
    const isReplayMode = replayState.isActive;
    switch(event.type){
        case 'user_message':
            handleUserMessage(set, sessionId, event);
            break;
        case 'assistant_message':
            handleAssistantMessage(get, set, sessionId, event);
            break;
        case 'assistant_streaming_message':
            if (!isReplayMode) {
                handleStreamingMessage(get, set, sessionId, event);
            }
            break;
        case 'assistant_thinking_message':
        case 'assistant_streaming_thinking_message':
            handleThinkingMessage(get, set, sessionId, event);
            break;
        case 'tool_call':
            handleToolCall(set, sessionId, event);
            break;
        case 'tool_result':
            handleToolResult(set, sessionId, event);
            break;
        case 'system':
            handleSystemMessage(set, sessionId, event);
            break;
        case 'environment_input':
            handleEnvironmentInput(set, sessionId, event);
            break;
        case 'agent_run_start':
            set(_atoms_ui__WEBPACK_IMPORTED_MODULE_2__.isProcessingAtom, true);
            break;
        case 'agent_run_end':
            set(_atoms_ui__WEBPACK_IMPORTED_MODULE_2__.isProcessingAtom, false);
            break;
        case 'plan_start':
            handlePlanStart(set, sessionId, event);
            break;
        case 'plan_update':
            handlePlanUpdate(set, sessionId, event);
            break;
        case 'plan_finish':
            handlePlanFinish(set, sessionId, event);
            break;
        case 'final_answer':
            handleFinalAnswer(get, set, sessionId, event);
            break;
        case 'final_answer_streaming':
            if (!isReplayMode) {
                handleFinalAnswerStreaming(get, set, sessionId, event);
            }
            break;
    }
});
const updateProcessingStatusAction = (0,jotai__WEBPACK_IMPORTED_MODULE_6__.atom)(null, (get, set, status)=>{
    // Update processing state
    set(_atoms_ui__WEBPACK_IMPORTED_MODULE_2__.isProcessingAtom, !!status.isProcessing);
});
/**
 * Handle user message event
 */ function handleUserMessage(set, sessionId, event) {
    const userMessage = {
        id: event.id,
        role: 'user',
        content: event.content,
        timestamp: event.timestamp
    };
    set(_atoms_message__WEBPACK_IMPORTED_MODULE_0__.messagesAtom, (prev)=>{
        const sessionMessages = prev[sessionId] || [];
        return {
            ...prev,
            [sessionId]: [
                ...sessionMessages,
                userMessage
            ]
        };
    });
    // Check for images in user message and set active panel content if found
    if (Array.isArray(event.content)) {
        const images = event.content.filter((part)=>part.type === 'image_url');
        if (images.length > 0) {
            set(_atoms_ui__WEBPACK_IMPORTED_MODULE_2__.activePanelContentAtom, {
                type: 'image',
                source: images[0].image_url.url,
                title: 'User Upload',
                timestamp: Date.now()
            });
        }
    }
}
/**
 * Handle assistant message event (complete message)
 */ function handleAssistantMessage(get, set, sessionId, event) {
    // 获取消息ID
    const messageId = event.messageId;
    set(_atoms_message__WEBPACK_IMPORTED_MODULE_0__.messagesAtom, (prev)=>{
        const sessionMessages = prev[sessionId] || [];
        // 检查是否已存在相同messageId的消息
        if (messageId) {
            const existingMessageIndex = sessionMessages.findIndex((msg)=>msg.messageId === messageId);
            // 如果找到了现有消息，更新它而不是添加新消息
            if (existingMessageIndex !== -1) {
                const updatedMessages = [
                    ...sessionMessages
                ];
                updatedMessages[existingMessageIndex] = {
                    ...updatedMessages[existingMessageIndex],
                    content: event.content,
                    timestamp: event.timestamp,
                    toolCalls: event.toolCalls,
                    finishReason: event.finishReason,
                    isStreaming: false
                };
                return {
                    ...prev,
                    [sessionId]: updatedMessages
                };
            }
        }
        // 没有找到现有消息，添加新消息
        return {
            ...prev,
            [sessionId]: [
                ...sessionMessages,
                {
                    id: event.id,
                    role: 'assistant',
                    content: event.content,
                    timestamp: event.timestamp,
                    toolCalls: event.toolCalls,
                    finishReason: event.finishReason,
                    messageId: messageId
                }
            ]
        };
    });
    set(_atoms_ui__WEBPACK_IMPORTED_MODULE_2__.isProcessingAtom, false);
}
/**
 * Handle streaming message event (incremental content)
 */ function handleStreamingMessage(get, set, sessionId, event) {
    set(_atoms_message__WEBPACK_IMPORTED_MODULE_0__.messagesAtom, (prev)=>{
        const sessionMessages = prev[sessionId] || [];
        const messageIdToFind = event.messageId;
        let existingMessageIndex = -1;
        // 优先按messageId查找
        if (messageIdToFind) {
            existingMessageIndex = sessionMessages.findIndex((msg)=>msg.messageId === messageIdToFind);
        } else if (sessionMessages.length > 0) {
            const lastMessageIndex = sessionMessages.length - 1;
            const lastMessage = sessionMessages[lastMessageIndex];
            if (lastMessage && lastMessage.isStreaming) {
                existingMessageIndex = lastMessageIndex;
            }
        }
        // 更新现有消息
        if (existingMessageIndex !== -1) {
            const existingMessage = sessionMessages[existingMessageIndex];
            const updatedMessage = {
                ...existingMessage,
                content: typeof existingMessage.content === 'string' ? existingMessage.content + event.content : event.content,
                isStreaming: !event.isComplete,
                toolCalls: event.toolCalls || existingMessage.toolCalls
            };
            return {
                ...prev,
                [sessionId]: [
                    ...sessionMessages.slice(0, existingMessageIndex),
                    updatedMessage,
                    ...sessionMessages.slice(existingMessageIndex + 1)
                ]
            };
        }
        // 创建新消息
        const newMessage = {
            id: event.id || (0,uuid__WEBPACK_IMPORTED_MODULE_7__["default"])(),
            role: 'assistant',
            content: event.content,
            timestamp: event.timestamp,
            isStreaming: !event.isComplete,
            toolCalls: event.toolCalls,
            messageId: event.messageId
        };
        return {
            ...prev,
            [sessionId]: [
                ...sessionMessages,
                newMessage
            ]
        };
    });
    if (event.isComplete) {
        set(_atoms_ui__WEBPACK_IMPORTED_MODULE_2__.isProcessingAtom, false);
    }
}
/**
 * Handle thinking message event
 */ function handleThinkingMessage(get, set, sessionId, event) {
    set(_atoms_message__WEBPACK_IMPORTED_MODULE_0__.messagesAtom, (prev)=>{
        const sessionMessages = prev[sessionId] || [];
        const lastAssistantIndex = [
            ...sessionMessages
        ].reverse().findIndex((m)=>m.role === 'assistant');
        if (lastAssistantIndex !== -1) {
            const actualIndex = sessionMessages.length - 1 - lastAssistantIndex;
            const message = sessionMessages[actualIndex];
            return {
                ...prev,
                [sessionId]: [
                    ...sessionMessages.slice(0, actualIndex),
                    {
                        ...message,
                        thinking: event.content
                    },
                    ...sessionMessages.slice(actualIndex + 1)
                ]
            };
        }
        return prev;
    });
}
/**
 * Handle tool call event - store arguments for later use
 */ function handleToolCall(set, sessionId, event) {
    // 保存工具调用的参数信息以便后续使用
    if (event.toolCallId && event.arguments) {
        toolCallArgumentsMap.set(event.toolCallId, event.arguments);
    }
    console.log('Tool call stored:', event.name, event.toolCallId);
}
/**
 * Handle tool result event
 */ function handleToolResult(set, sessionId, event) {
    // 获取之前存储的参数信息
    const args = toolCallArgumentsMap.get(event.toolCallId);
    // 添加调试日志来跟踪内容格式
    console.log(`Tool result for ${event.name}:`, {
        content: event.content,
        isArray: Array.isArray(event.content),
        hasTextItems: Array.isArray(event.content) && event.content.some((item)=>item.type === 'text'),
        names: Array.isArray(event.content) ? event.content.map((item)=>item.name) : 'not-an-array'
    });
    // 如果内容是标准化工具结果格式的数组，则直接使用
    const isStandardFormat = Array.isArray(event.content) && event.content.length > 0 && typeof event.content[0] === 'object' && 'type' in event.content[0];
    const result = {
        id: (0,uuid__WEBPACK_IMPORTED_MODULE_7__["default"])(),
        toolCallId: event.toolCallId,
        name: event.name,
        content: event.content,
        timestamp: event.timestamp,
        error: event.error,
        type: (0,_utils_formatters__WEBPACK_IMPORTED_MODULE_3__.determineToolType)(event.name, event.content),
        arguments: args
    };
    // 添加调试日志，显示确定的类型
    console.log(`Determined type for ${event.name}: ${result.type}`);
    // Store in the map for future reference
    _atoms_tool__WEBPACK_IMPORTED_MODULE_1__.toolCallResultMap.set(result.toolCallId, result);
    // Add to toolResults atom
    set(_atoms_tool__WEBPACK_IMPORTED_MODULE_1__.toolResultsAtom, (prev)=>{
        const sessionResults = prev[sessionId] || [];
        return {
            ...prev,
            [sessionId]: [
                ...sessionResults,
                result
            ]
        };
    });
    // Set as active panel content
    set(_atoms_ui__WEBPACK_IMPORTED_MODULE_2__.activePanelContentAtom, {
        type: result.type,
        source: result.content,
        title: result.name,
        timestamp: result.timestamp,
        toolCallId: result.toolCallId,
        error: result.error,
        arguments: args
    });
    // Link to message with this tool call
    set(_atoms_message__WEBPACK_IMPORTED_MODULE_0__.messagesAtom, (prev)=>{
        const sessionMessages = prev[sessionId] || [];
        // Find message with this tool call
        const messageIndex = [
            ...sessionMessages
        ].reverse().findIndex((m)=>{
            var _m_toolCalls;
            return (_m_toolCalls = m.toolCalls) === null || _m_toolCalls === void 0 ? void 0 : _m_toolCalls.some((tc)=>tc.id === result.toolCallId);
        });
        if (messageIndex !== -1) {
            const actualIndex = sessionMessages.length - 1 - messageIndex;
            const message = sessionMessages[actualIndex];
            const toolResults = message.toolResults || [];
            const updatedMessage = {
                ...message,
                toolResults: [
                    ...toolResults,
                    result
                ]
            };
            return {
                ...prev,
                [sessionId]: [
                    ...sessionMessages.slice(0, actualIndex),
                    updatedMessage,
                    ...sessionMessages.slice(actualIndex + 1)
                ]
            };
        }
        return prev;
    });
}
/**
 * Handle system message event
 */ function handleSystemMessage(set, sessionId, event) {
    const systemMessage = {
        id: (0,uuid__WEBPACK_IMPORTED_MODULE_7__["default"])(),
        role: 'system',
        content: event.message,
        timestamp: event.timestamp || Date.now()
    };
    set(_atoms_message__WEBPACK_IMPORTED_MODULE_0__.messagesAtom, (prev)=>{
        const sessionMessages = prev[sessionId] || [];
        return {
            ...prev,
            [sessionId]: [
                ...sessionMessages,
                systemMessage
            ]
        };
    });
}
/**
 * Handle environment input event
 * Adds it to messages but doesn't set it as active panel content
 */ function handleEnvironmentInput(set, sessionId, event) {
    const environmentMessage = {
        id: event.id,
        role: 'environment',
        content: event.content,
        timestamp: event.timestamp,
        description: event.description || 'Environment Input'
    };
    set(_atoms_message__WEBPACK_IMPORTED_MODULE_0__.messagesAtom, (prev)=>{
        const sessionMessages = prev[sessionId] || [];
        return {
            ...prev,
            [sessionId]: [
                ...sessionMessages,
                environmentMessage
            ]
        };
    });
}
/**
 * Handle plan start event
 */ function handlePlanStart(set, sessionId, event) {
    console.log('Plan start event:', event);
    set(_atoms_plan__WEBPACK_IMPORTED_MODULE_4__.plansAtom, (prev)=>({
            ...prev,
            [sessionId]: {
                steps: [],
                isComplete: false,
                summary: null,
                hasGeneratedPlan: true,
                keyframes: []
            }
        }));
}
/**
 * Handle plan update event
 */ function handlePlanUpdate(set, sessionId, event) {
    console.log('Plan update event:', event);
    set(_atoms_plan__WEBPACK_IMPORTED_MODULE_4__.plansAtom, (prev)=>{
        const currentPlan = prev[sessionId] || {
            steps: [],
            isComplete: false,
            summary: null,
            hasGeneratedPlan: true,
            keyframes: []
        };
        // Create a new keyframe for this update
        const newKeyframe = {
            timestamp: event.timestamp || Date.now(),
            steps: event.steps,
            isComplete: false,
            summary: null
        };
        // Add the keyframe to the history
        const keyframes = [
            ...currentPlan.keyframes || [],
            newKeyframe
        ];
        return {
            ...prev,
            [sessionId]: {
                ...currentPlan,
                steps: event.steps,
                hasGeneratedPlan: true,
                keyframes
            }
        };
    });
}
/**
 * Handle plan finish event
 */ function handlePlanFinish(set, sessionId, event) {
    console.log('Plan finish event:', event);
    set(_atoms_plan__WEBPACK_IMPORTED_MODULE_4__.plansAtom, (prev)=>{
        const currentPlan = prev[sessionId] || {
            steps: [],
            isComplete: false,
            summary: null,
            hasGeneratedPlan: true,
            keyframes: []
        };
        // Create a final keyframe for the completed plan
        const finalKeyframe = {
            timestamp: event.timestamp || Date.now(),
            steps: currentPlan.steps,
            isComplete: true,
            summary: event.summary
        };
        // Add the final keyframe to the history
        const keyframes = [
            ...currentPlan.keyframes || [],
            finalKeyframe
        ];
        return {
            ...prev,
            [sessionId]: {
                ...currentPlan,
                isComplete: true,
                summary: event.summary,
                keyframes
            }
        };
    });
}
/**
 * Handle final answer event (complete answer/report)
 */ function handleFinalAnswer(get, set, sessionId, event) {
    const messageId = event.messageId || `final-answer-${(0,uuid__WEBPACK_IMPORTED_MODULE_7__["default"])()}`;
    // 始终将内容当作研究报告处理，移除JSON_DATA状态
    // 设置活动面板内容为研究报告
    set(_atoms_ui__WEBPACK_IMPORTED_MODULE_2__.activePanelContentAtom, {
        type: 'research_report',
        source: event.content,
        title: event.title || 'Research Report',
        timestamp: event.timestamp,
        isDeepResearch: true,
        messageId
    });
    // 添加消息到聊天引用报告
    const finalAnswerMessage = {
        id: event.id || (0,uuid__WEBPACK_IMPORTED_MODULE_7__["default"])(),
        role: 'final_answer',
        content: event.content,
        timestamp: event.timestamp,
        messageId,
        isDeepResearch: true,
        title: event.title || 'Research Report'
    };
    set(_atoms_message__WEBPACK_IMPORTED_MODULE_0__.messagesAtom, (prev)=>{
        const sessionMessages = prev[sessionId] || [];
        return {
            ...prev,
            [sessionId]: [
                ...sessionMessages,
                finalAnswerMessage
            ]
        };
    });
    // 标记处理完成
    set(_atoms_ui__WEBPACK_IMPORTED_MODULE_2__.isProcessingAtom, false);
}
function handleFinalAnswerStreaming(get, set, sessionId, event) {
    const messageId = event.messageId || `final-answer-${(0,uuid__WEBPACK_IMPORTED_MODULE_7__["default"])()}`;
    // 从当前消息列表中查找已有的相同 messageId 的消息
    const messages = get(_atoms_message__WEBPACK_IMPORTED_MODULE_0__.messagesAtom)[sessionId] || [];
    const existingMessageIndex = messages.findIndex((msg)=>msg.messageId === messageId);
    // 当处理一系列流式事件时，将内容追加到现有消息，或创建新消息
    set(_atoms_message__WEBPACK_IMPORTED_MODULE_0__.messagesAtom, (prev)=>{
        const sessionMessages = prev[sessionId] || [];
        // 如果找到现有消息，则更新它
        if (existingMessageIndex >= 0) {
            const existingMessage = sessionMessages[existingMessageIndex];
            const updatedMessage = {
                ...existingMessage,
                content: typeof existingMessage.content === 'string' ? existingMessage.content + event.content : event.content,
                isStreaming: !event.isComplete,
                timestamp: event.timestamp
            };
            return {
                ...prev,
                [sessionId]: [
                    ...sessionMessages.slice(0, existingMessageIndex),
                    updatedMessage,
                    ...sessionMessages.slice(existingMessageIndex + 1)
                ]
            };
        }
        // 否则创建新消息
        const newMessage = {
            id: event.id || (0,uuid__WEBPACK_IMPORTED_MODULE_7__["default"])(),
            role: 'final_answer',
            content: event.content,
            timestamp: event.timestamp,
            messageId,
            isDeepResearch: true,
            isStreaming: !event.isComplete,
            title: event.title || 'Research Report'
        };
        return {
            ...prev,
            [sessionId]: [
                ...sessionMessages,
                newMessage
            ]
        };
    });
    // 更新活动面板内容 - 同步面板与消息状态
    set(_atoms_ui__WEBPACK_IMPORTED_MODULE_2__.activePanelContentAtom, (prev)=>{
        // 如果是新流或不同的messageId，重新开始
        if (!prev || prev.type !== 'research_report' || prev.messageId !== messageId) {
            return {
                role: 'assistant',
                type: 'research_report',
                source: event.content,
                title: event.title || 'Research Report (Generating...)',
                timestamp: event.timestamp,
                isDeepResearch: true,
                messageId,
                isStreaming: !event.isComplete
            };
        }
        // 否则追加到现有内容
        return {
            ...prev,
            source: prev.source + event.content,
            isStreaming: !event.isComplete,
            timestamp: event.timestamp,
            title: event.title || prev.title
        };
    });
    // 如果这是第一个数据块，也添加一条消息到聊天
    const prevActivePanelContent = get(_atoms_ui__WEBPACK_IMPORTED_MODULE_2__.activePanelContentAtom);
    if (!prevActivePanelContent || prevActivePanelContent.messageId !== messageId) {
        const initialMessage = {
            id: event.id || (0,uuid__WEBPACK_IMPORTED_MODULE_7__["default"])(),
            role: 'final_answer',
            content: event.content,
            timestamp: event.timestamp,
            messageId,
            isDeepResearch: true,
            isStreaming: !event.isComplete,
            title: event.title || 'Research Report'
        };
        set(_atoms_message__WEBPACK_IMPORTED_MODULE_0__.messagesAtom, (prev)=>{
            const sessionMessages = prev[sessionId] || [];
            return {
                ...prev,
                [sessionId]: [
                    ...sessionMessages,
                    initialMessage
                ]
            };
        });
    } else if (event.isComplete) {
        // 当流式生成完成时，更新消息的完整内容
        const fullContent = get(_atoms_ui__WEBPACK_IMPORTED_MODULE_2__.activePanelContentAtom).source;
        set(_atoms_message__WEBPACK_IMPORTED_MODULE_0__.messagesAtom, (prev)=>{
            const sessionMessages = prev[sessionId] || [];
            const messageIndex = sessionMessages.findIndex((msg)=>msg.messageId === messageId);
            if (messageIndex >= 0) {
                const updatedMessages = [
                    ...sessionMessages
                ];
                updatedMessages[messageIndex] = {
                    ...updatedMessages[messageIndex],
                    content: fullContent,
                    isStreaming: false,
                    title: event.title || updatedMessages[messageIndex].title || 'Research Report'
                };
                return {
                    ...prev,
                    [sessionId]: updatedMessages
                };
            }
            return prev;
        });
    }
    // 如果这是最后一个数据块，标记处理完成
    if (event.isComplete) {
        set(_atoms_ui__WEBPACK_IMPORTED_MODULE_2__.isProcessingAtom, false);
    }
}

function $RefreshSig$() {
  return $ReactRefreshRuntime$.createSignatureFunctionForTransform();
}
function $RefreshReg$(type, id) {
  $ReactRefreshRuntime$.register(type, module.id + "_" + id);
}
Promise.resolve().then(function() {
  $ReactRefreshRuntime$.refresh(module.id, module.hot);
});


}),

},function(__webpack_require__) {
// webpack/runtime/get_full_hash
(() => {
__webpack_require__.h = () => ("26ce7390cd08ac25")
})();

}
);
//# sourceMappingURL=index.56ad4d64d5c37d34.hot-update.js.map