{"version":3,"file":"index.2ca28fe9fde068c1.hot-update.js","sources":["/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/entry.css","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Workspace/renderers/ToolResultRenderer.tsx"],"sourcesContent":["// extracted by css-extract-rspack-plugin\nexport {};\n    if(module.hot) {\n      (function() {\n        var localsJsonString = undefined;\n        // 1749657879426\n        var cssReload = require(\"../../node_modules/.pnpm/@rspack+core@1.3.9_@swc+helpers@0.5.17/node_modules/@rspack/core/dist/cssExtractHmr.js\").cssReload(module.id, {});\n        // only invalidate when locals change\n        if (\n          module.hot.data &&\n          module.hot.data.value &&\n          module.hot.data.value !== localsJsonString\n        ) {\n          module.hot.invalidate();\n        } else {\n          module.hot.accept();\n        }\n        module.hot.dispose(function(data) {\n          data.value = localsJsonString;\n          cssReload();\n        });\n      })();\n    }\n  ","import React from 'react';\nimport { TextRenderer } from './TextRenderer';\nimport { ImageRenderer } from './ImageRenderer';\nimport { LinkRenderer } from './LinkRenderer';\nimport { SearchResultRenderer } from './SearchResultRenderer';\nimport { CommandResultRenderer } from './CommandResultRenderer';\nimport { BrowserResultRenderer } from './BrowserResultRenderer';\nimport { BrowserControlRenderer } from './BrowserControlRenderer';\nimport { PlanViewerRenderer } from './PlanViewerRenderer';\nimport { ResearchReportRenderer } from './ResearchReportRenderer';\nimport { FileResultRenderer } from './FileResultRenderer';\nimport { GenericResultRenderer } from './GenericResultRenderer';\nimport { DeliverableRenderer } from './DeliverableRenderer';\nimport { ToolResultContentPart } from '@/v2/types';\n\n/**\n * Registry of content part renderers\n * Maps content types to their renderer components\n *\n * Design pattern: Component Registry pattern - allows dynamic registration of\n * renderers for different content types without modifying the core renderer\n */\nconst CONTENT_RENDERERS: Record<\n  string,\n  React.FC<{ part: ToolResultContentPart; onAction?: (action: string, data: any) => void }>\n> = {\n  text: TextRenderer,\n  image: ImageRenderer,\n  link: LinkRenderer,\n  search_result: SearchResultRenderer,\n  command_result: CommandResultRenderer,\n  browser_result: BrowserResultRenderer,\n  browser_control: BrowserControlRenderer,\n  plan: PlanViewerRenderer,\n  research_report: ResearchReportRenderer,\n  file_result: FileResultRenderer,\n  json: GenericResultRenderer,\n  deliverable: DeliverableRenderer, // Add new deliverable renderer\n};\n\ninterface ToolResultRendererProps {\n  /**\n   * Array of content parts to render\n   */\n  content: ToolResultContentPart[];\n\n  /**\n   * Optional handler for interactive actions\n   */\n  onAction?: (action: string, data: any) => void;\n\n  /**\n   * Optional className for the container\n   */\n  className?: string;\n}\n\n/**\n * Renders tool result content parts using the appropriate renderer for each part\n *\n * This component acts as a router that delegates rendering to specialized components\n * based on the content type, making it easily extensible to new content types.\n *\n * Improvements:\n * - Special handling for browser_get_markdown content\n * - Uses browser shell for browser-related tool results\n * - Consistent styling across all tool result types\n * - Intelligent generic renderer for unknown formats\n */\nexport const ToolResultRenderer: React.FC<ToolResultRendererProps> = ({\n  content,\n  onAction,\n  className = '',\n}) => {\n  if (!content || content.length === 0) {\n    return (\n      <div className=\"p-4 text-gray-500 dark:text-gray-400 text-sm italic\">\n        No content to display\n      </div>\n    );\n  }\n\n  return (\n    <div className={`space-y-4 ${className}`}>\n      {content.map((part, index) => {\n        // 特殊处理: 如果是 json 类型的部分，使用智能渲染器\n        if (part.type === 'json') {\n          return (\n            <div key={`json-${part.name || ''}-${index}`} className=\"tool-result-part\">\n              <GenericResultRenderer part={part} onAction={onAction} />\n            </div>\n          );\n        }\n\n        // 正常渲染其他类型\n        const Renderer = CONTENT_RENDERERS[part.type] || TextRenderer;\n\n        return (\n          <div key={`${part.type}-${part.name || ''}-${index}`} className=\"tool-result-part\">\n            <Renderer part={part} onAction={onAction} />\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\n/**\n * Register a custom renderer for a specific content type\n * This allows extending the system with new renderers without modifying this file\n */\nexport function registerRenderer(\n  contentType: string,\n  renderer: React.FC<{\n    part: ToolResultContentPart;\n    onAction?: (action: string, data: any) => void;\n  }>,\n): void {\n  CONTENT_RENDERERS[contentType] = renderer;\n}"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;;;AAMA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAmBA;;;;;;;;;;;AAWA;AACA;AAKA;AACA;AACA;AAAA;;;;;;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;AADA;;;;;AAIA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;;;;;;AADA;;;;;AAIA;;;;;;AAGA;AApCA;AAsCA;;;AAGA;AAQA;AACA"}