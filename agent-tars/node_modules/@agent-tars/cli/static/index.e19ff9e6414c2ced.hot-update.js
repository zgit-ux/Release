self["webpackHotUpdate_agent_tars_web_ui"]("index", {
"./src/entry.css": (function (module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by css-extract-rspack-plugin

    if(true) {
      (function() {
        var localsJsonString = undefined;
        // 1751743831210
        var cssReload = (__webpack_require__("../node_modules/.pnpm/@rspack+core@1.3.9_@swc+helpers@0.5.17/node_modules/@rspack/core/dist/cssExtractHmr.js")/* .cssReload */.cssReload)(module.id, {});
        // only invalidate when locals change
        if (
          module.hot.data &&
          module.hot.data.value &&
          module.hot.data.value !== localsJsonString
        ) {
          module.hot.invalidate();
        } else {
          module.hot.accept();
        }
        module.hot.dispose(function(data) {
          data.value = localsJsonString;
          cssReload();
        });
      })();
    }
  

}),
"./src/common/hooks/useReplay.ts": (function (module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useReplay: () => (useReplay)
});
/* ESM import */var jotai__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("../node_modules/.pnpm/jotai@2.12.5_@types+react@18.3.23_react@18.3.1/node_modules/jotai/esm/react.mjs");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/react@18.3.1/node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* ESM import */var _state_atoms_replay__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/common/state/atoms/replay.ts");
/* ESM import */var _useSession__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/common/hooks/useSession.ts");
/* ESM import */var _state_atoms_message__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/common/state/atoms/message.ts");
/* ESM import */var _state_atoms_tool__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/common/state/atoms/tool.ts");
/* ESM import */var _state_actions_eventProcessor__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./src/common/state/actions/eventProcessor.ts");
/* ESM import */var _state_actions_eventProcessor__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_state_actions_eventProcessor__WEBPACK_IMPORTED_MODULE_5__);
/* ESM import */var _state_atoms_plan__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./src/common/state/atoms/plan.ts");
/* provided dependency */ var $ReactRefreshRuntime$ = __webpack_require__("../node_modules/.pnpm/@rspack+plugin-react-refresh@1.0.3_react-refresh@0.16.0/node_modules/@rspack/plugin-react-refresh/client/reactRefresh.js");
// /agent-tars-web-ui/src/v2/hooks/useReplay.ts









/**
 * Custom hook for managing replay functionality
 *
 * Provides:
 * - Control for playback (play, pause, jump, etc.)
 * - Event processing through the standard event processor
 * - Timeline calculations and positioning
 */ function useReplay() {
    const [replayState, setReplayState] = (0,jotai__WEBPACK_IMPORTED_MODULE_7__.useAtom)(_state_atoms_replay__WEBPACK_IMPORTED_MODULE_1__.replayStateAtom);
    const { activeSessionId } = (0,_useSession__WEBPACK_IMPORTED_MODULE_2__.useSession)();
    const [playbackInterval, setPlaybackInterval] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);
    const [, setMessages] = (0,jotai__WEBPACK_IMPORTED_MODULE_7__.useAtom)(_state_atoms_message__WEBPACK_IMPORTED_MODULE_3__.messagesAtom);
    const [, setToolResults] = (0,jotai__WEBPACK_IMPORTED_MODULE_7__.useAtom)(_state_atoms_tool__WEBPACK_IMPORTED_MODULE_4__.toolResultsAtom);
    const [, setPlans] = (0,jotai__WEBPACK_IMPORTED_MODULE_7__.useAtom)(_state_atoms_plan__WEBPACK_IMPORTED_MODULE_6__.plansAtom);
    const processEvent = (0,jotai__WEBPACK_IMPORTED_MODULE_7__.useSetAtom)(_state_actions_eventProcessor__WEBPACK_IMPORTED_MODULE_5__.processEventAction);
    /**
   * 重置会话状态并处理事件至指定索引
   */ const processEventsUpToIndex = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((targetIndex)=>{
        if (!activeSessionId || !replayState.events.length || targetIndex < 0) return;
        // 获取需要处理的事件
        const eventsToProcess = replayState.events.slice(0, targetIndex + 1);
        // 清空当前会话状态
        setMessages((prev)=>({
                ...prev,
                [activeSessionId]: []
            }));
        setToolResults((prev)=>({
                ...prev,
                [activeSessionId]: []
            }));
        setPlans((prev)=>({
                ...prev,
                [activeSessionId]: {
                    steps: [],
                    isComplete: false,
                    summary: null,
                    hasGeneratedPlan: false,
                    keyframes: []
                }
            }));
        // 处理环境输入事件优先，确保图片资源先加载
        const envEvents = eventsToProcess.filter((event)=>event.type === 'environment_input');
        const nonEnvEvents = eventsToProcess.filter((event)=>event.type !== 'environment_input');
        // 先处理环境输入事件
        for (const event of envEvents){
            processEvent({
                sessionId: activeSessionId,
                event
            });
        }
        // 然后处理其他事件
        for (const event of nonEnvEvents){
            processEvent({
                sessionId: activeSessionId,
                event
            });
        }
    }, [
        activeSessionId,
        replayState.events,
        setMessages,
        setToolResults,
        setPlans,
        processEvent
    ]);
    /**
   * 开始回放
   */ const startReplay = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{
        // 清除现有的定时器
        if (playbackInterval) {
            clearInterval(playbackInterval);
        }
        setReplayState((prev)=>({
                ...prev,
                isPaused: false
            }));
        // 设置定时器按间隔前进
        const interval = setInterval(()=>{
            setReplayState((prev)=>{
                // 到达末尾时停止
                if (prev.currentEventIndex >= prev.events.length - 1) {
                    clearInterval(interval);
                    return {
                        ...prev,
                        isPaused: true,
                        currentEventIndex: prev.events.length - 1
                    };
                }
                // 前进到下一个事件
                const nextIndex = prev.currentEventIndex + 1;
                // 处理到新位置
                if (activeSessionId) {
                    processEvent({
                        sessionId: activeSessionId,
                        event: prev.events[nextIndex]
                    });
                }
                return {
                    ...prev,
                    currentEventIndex: nextIndex
                };
            });
        }, 500 / replayState.playbackSpeed);
        setPlaybackInterval(interval);
    }, [
        activeSessionId,
        playbackInterval,
        processEvent,
        replayState.playbackSpeed,
        setReplayState
    ]);
    /**
   * 暂停回放
   */ const pauseReplay = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{
        if (playbackInterval) {
            clearInterval(playbackInterval);
            setPlaybackInterval(null);
        }
        setReplayState((prev)=>({
                ...prev,
                isPaused: true
            }));
    }, [
        playbackInterval,
        setReplayState
    ]);
    /**
   * 跳转到时间轴上的指定位置
   */ const jumpToPosition = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((position)=>{
        // 确保位置在有效范围内
        const normalizedPosition = Math.max(0, Math.min(1, position));
        if (replayState.events.length === 0 || !activeSessionId) return;
        // 根据位置计算目标事件索引
        const targetIndex = Math.floor(normalizedPosition * (replayState.events.length - 1));
        // 暂停任何正在进行的回放
        if (playbackInterval) {
            clearInterval(playbackInterval);
            setPlaybackInterval(null);
        }
        // 处理到新位置
        processEventsUpToIndex(targetIndex);
        setReplayState((prev)=>({
                ...prev,
                isPaused: true,
                currentEventIndex: targetIndex
            }));
    }, [
        activeSessionId,
        playbackInterval,
        processEventsUpToIndex,
        replayState.events.length,
        setReplayState
    ]);
    /**
   * 跳转到最终结果
   */ const jumpToResult = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{
        if (replayState.events.length === 0 || !activeSessionId) return;
        const finalIndex = replayState.events.length - 1;
        // 暂停任何正在进行的回放
        if (playbackInterval) {
            clearInterval(playbackInterval);
            setPlaybackInterval(null);
        }
        // 处理到最终位置
        processEventsUpToIndex(finalIndex);
        setReplayState((prev)=>({
                ...prev,
                isPaused: true,
                currentEventIndex: finalIndex
            }));
    }, [
        activeSessionId,
        playbackInterval,
        processEventsUpToIndex,
        replayState.events.length,
        setReplayState
    ]);
    /**
   * 重置回放到初始状态，允许从头开始播放
   */ const resetReplay = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{
        // 暂停任何正在进行的回放
        if (playbackInterval) {
            clearInterval(playbackInterval);
            setPlaybackInterval(null);
        }
        // 处理到初始位置
        processEventsUpToIndex(0);
        setReplayState((prev)=>({
                ...prev,
                isPaused: true,
                currentEventIndex: 0
            }));
    }, [
        playbackInterval,
        processEventsUpToIndex,
        setReplayState
    ]);
    /**
   * 设置播放速度
   */ const setPlaybackSpeed = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((speed)=>{
        setReplayState((prev)=>({
                ...prev,
                playbackSpeed: speed
            }));
        // 如果正在播放，以新速度重启
        if (!replayState.isPaused && playbackInterval) {
            clearInterval(playbackInterval);
            startReplay();
        }
    }, [
        playbackInterval,
        replayState.isPaused,
        setReplayState,
        startReplay
    ]);
    /**
   * 退出回放模式
   */ const exitReplay = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{
        if (playbackInterval) {
            clearInterval(playbackInterval);
        }
        setReplayState((prev)=>({
                ...prev,
                isActive: false,
                isPaused: true,
                currentEventIndex: -1,
                events: [],
                processedEvents: {}
            }));
    }, [
        playbackInterval,
        setReplayState
    ]);
    /**
   * 获取当前事件
   */ const getCurrentEvent = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{
        if (!replayState.isActive || replayState.currentEventIndex < 0 || replayState.currentEventIndex >= replayState.events.length) {
            return null;
        }
        return replayState.events[replayState.currentEventIndex];
    }, [
        replayState.currentEventIndex,
        replayState.events,
        replayState.isActive
    ]);
    /**
   * 获取当前位置百分比 (0-100)
   */ const getCurrentPosition = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{
        if (!replayState.isActive || replayState.events.length <= 1) {
            return 0;
        }
        return replayState.currentEventIndex / (replayState.events.length - 1) * 100;
    }, [
        replayState.currentEventIndex,
        replayState.events.length,
        replayState.isActive
    ]);
    /**
   * 获取当前所有事件
   */ const getCurrentEvents = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{
        if (!replayState.isActive || replayState.currentEventIndex < 0) {
            return [];
        }
        return replayState.events.slice(0, replayState.currentEventIndex + 1);
    }, [
        replayState.currentEventIndex,
        replayState.events,
        replayState.isActive
    ]);
    // 组件卸载时清理定时器
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{
        return ()=>{
            if (playbackInterval) {
                clearInterval(playbackInterval);
            }
        };
    }, [
        playbackInterval
    ]);
    // 回放模式初始化时：如果索引为-1，需要手动触发第一步，否则会显示为空白
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{
        if (replayState.isActive && replayState.currentEventIndex === -1 && replayState.events.length > 0 && replayState.autoPlayCountdown === null // 只在倒计时完成或取消后才初始化
        ) {
            // 如果启动回放后立即跳到第一个事件
            processEventsUpToIndex(0);
            setReplayState((prev)=>({
                    ...prev,
                    currentEventIndex: 0
                }));
        }
    }, [
        replayState.isActive,
        replayState.currentEventIndex,
        replayState.events.length,
        replayState.autoPlayCountdown,
        processEventsUpToIndex,
        setReplayState
    ]);
    /**
   * 取消自动播放倒计时
   */ const cancelAutoPlay = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{
        setReplayState((prev)=>({
                ...prev,
                autoPlayCountdown: null
            }));
    }, [
        setReplayState
    ]);
    // 添加对自动播放事件的监听
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{
        const handleAutoStart = ()=>{
            console.log('Auto-play event received, starting replay...');
            startReplay();
        };
        // 添加事件监听器
        window.addEventListener('replay-autostart', handleAutoStart);
        // 清理函数
        return ()=>{
            window.removeEventListener('replay-autostart', handleAutoStart);
        };
    }, [
        startReplay
    ]); // 依赖于startReplay函数
    return {
        // 状态
        replayState,
        // 操作方法
        startReplay,
        pauseReplay,
        jumpToPosition,
        jumpToResult,
        setPlaybackSpeed,
        exitReplay,
        cancelAutoPlay,
        resetReplay,
        // 工具方法
        getCurrentEvents,
        getCurrentPosition,
        getCurrentEvent
    };
}

function $RefreshSig$() {
  return $ReactRefreshRuntime$.createSignatureFunctionForTransform();
}
function $RefreshReg$(type, id) {
  $ReactRefreshRuntime$.register(type, module.id + "_" + id);
}
Promise.resolve().then(function() {
  $ReactRefreshRuntime$.refresh(module.id, module.hot);
});


}),
"./src/common/state/actions/eventProcessor.ts": (function (module, __unused_webpack_exports, __webpack_require__) {
/* provided dependency */ var $ReactRefreshRuntime$ = __webpack_require__("../node_modules/.pnpm/@rspack+plugin-react-refresh@1.0.3_react-refresh@0.16.0/node_modules/@rspack/plugin-react-refresh/client/reactRefresh.js");

function $RefreshSig$() {
  return $ReactRefreshRuntime$.createSignatureFunctionForTransform();
}
function $RefreshReg$(type, id) {
  $ReactRefreshRuntime$.register(type, module.id + "_" + id);
}
Promise.resolve().then(function() {
  $ReactRefreshRuntime$.refresh(module.id, module.hot);
});


}),
"./src/common/state/actions/sessionActions.ts": (function (module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  abortQueryAction: () => (abortQueryAction),
  checkSessionStatusAction: () => (checkSessionStatusAction),
  createSessionAction: () => (createSessionAction),
  deleteSessionAction: () => (deleteSessionAction),
  loadSessionsAction: () => (loadSessionsAction),
  sendMessageAction: () => (sendMessageAction),
  setActiveSessionAction: () => (setActiveSessionAction),
  updateSessionAction: () => (updateSessionAction)
});
/* ESM import */var jotai__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("../node_modules/.pnpm/jotai@2.12.5_@types+react@18.3.23_react@18.3.1/node_modules/jotai/esm/vanilla.mjs");
/* ESM import */var uuid__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-browser/v4.js");
/* ESM import */var _services_apiService__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/common/services/apiService.ts");
/* ESM import */var _atoms_session__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/common/state/atoms/session.ts");
/* ESM import */var _atoms_message__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/common/state/atoms/message.ts");
/* ESM import */var _atoms_tool__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/common/state/atoms/tool.ts");
/* ESM import */var _atoms_ui__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/common/state/atoms/ui.ts");
/* ESM import */var _eventProcessor__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./src/common/state/actions/eventProcessor.ts");
/* ESM import */var _eventProcessor__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_eventProcessor__WEBPACK_IMPORTED_MODULE_5__);
/* ESM import */var _atoms_replay__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./src/common/state/atoms/replay.ts");
/* provided dependency */ var $ReactRefreshRuntime$ = __webpack_require__("../node_modules/.pnpm/@rspack+plugin-react-refresh@1.0.3_react-refresh@0.16.0/node_modules/@rspack/plugin-react-refresh/client/reactRefresh.js");










/**
 * Add a session metadata cache to store model information for each session
 */ const sessionMetadataCache = new Map();
/**
 * Load all available sessions
 */ const loadSessionsAction = (0,jotai__WEBPACK_IMPORTED_MODULE_7__.atom)(null, async (get, set)=>{
    try {
        const loadedSessions = await _services_apiService__WEBPACK_IMPORTED_MODULE_0__.apiService.getSessions();
        set(_atoms_session__WEBPACK_IMPORTED_MODULE_1__.sessionsAtom, loadedSessions);
    } catch (error) {
        console.error('Failed to load sessions:', error);
        throw error;
    }
});
/**
 * Create a new session
 */ const createSessionAction = (0,jotai__WEBPACK_IMPORTED_MODULE_7__.atom)(null, async (get, set)=>{
    try {
        const newSession = await _services_apiService__WEBPACK_IMPORTED_MODULE_0__.apiService.createSession();
        // Add to sessions list
        set(_atoms_session__WEBPACK_IMPORTED_MODULE_1__.sessionsAtom, (prev)=>[
                newSession,
                ...prev
            ]);
        // Initialize session data
        set(_atoms_message__WEBPACK_IMPORTED_MODULE_2__.messagesAtom, (prev)=>({
                ...prev,
                [newSession.id]: []
            }));
        set(_atoms_tool__WEBPACK_IMPORTED_MODULE_3__.toolResultsAtom, (prev)=>({
                ...prev,
                [newSession.id]: []
            }));
        // Clear workspace panel content to show empty state
        set(_atoms_ui__WEBPACK_IMPORTED_MODULE_4__.activePanelContentAtom, null);
        // Set as active session
        set(_atoms_session__WEBPACK_IMPORTED_MODULE_1__.activeSessionIdAtom, newSession.id);
        return newSession.id;
    } catch (error) {
        console.error('Failed to create session:', error);
        throw error;
    }
});
/**
 * Set the active session
 * 简化加载逻辑，移除恢复会话的复杂性
 */ const setActiveSessionAction = (0,jotai__WEBPACK_IMPORTED_MODULE_7__.atom)(null, async (get, set, sessionId)=>{
    try {
        // 检查是否已经是活动会话
        const currentActiveSessionId = get(_atoms_session__WEBPACK_IMPORTED_MODULE_1__.activeSessionIdAtom);
        if (currentActiveSessionId === sessionId) {
            console.log(`Session ${sessionId} is already active, skipping load`);
            return;
        }
        // 检查回放状态并退出回放模式（除非是同一会话）
        const replayState = get(_atoms_replay__WEBPACK_IMPORTED_MODULE_6__.replayStateAtom);
        if (replayState.isActive) {
            console.log('Exiting replay mode due to session change');
            set(_atoms_replay__WEBPACK_IMPORTED_MODULE_6__.replayStateAtom, {
                isActive: false,
                isPaused: true,
                events: [],
                currentEventIndex: -1,
                startTimestamp: null,
                endTimestamp: null,
                playbackSpeed: 1,
                visibleTimeWindow: null,
                processedEvents: {}
            });
        }
        // 直接获取会话详情，不需要检查 active 状态
        const sessionDetails = await _services_apiService__WEBPACK_IMPORTED_MODULE_0__.apiService.getSessionDetails(sessionId);
        // 获取当前会话状态以更新 isProcessing 状态
        try {
            const status = await _services_apiService__WEBPACK_IMPORTED_MODULE_0__.apiService.getSessionStatus(sessionId);
            set(_atoms_ui__WEBPACK_IMPORTED_MODULE_4__.isProcessingAtom, status.isProcessing);
        } catch (error) {
            console.warn('Failed to get session status:', error);
            set(_atoms_ui__WEBPACK_IMPORTED_MODULE_4__.isProcessingAtom, false);
        }
        // 清理工具调用映射缓存
        _atoms_tool__WEBPACK_IMPORTED_MODULE_3__.toolCallResultMap.clear();
        // Check if the session message is loaded
        const messages = get(_atoms_message__WEBPACK_IMPORTED_MODULE_2__.messagesAtom);
        const hasExistingMessages = messages[sessionId] && messages[sessionId].length > 0;
        if (!hasExistingMessages) {
            console.log(`Loading events for session ${sessionId}`);
            const events = await _services_apiService__WEBPACK_IMPORTED_MODULE_0__.apiService.getSessionEvents(sessionId);
            // Pre-process streaming events to ensure correct continuity
            const processedEvents = preprocessStreamingEvents(events);
            // Process each event to construct messages and tool results
            for (const event of processedEvents){
                set(_eventProcessor__WEBPACK_IMPORTED_MODULE_5__.processEventAction, {
                    sessionId,
                    event
                });
            }
            // Cache key session metadata
            const runStartEvent = events.find((e)=>e.type === 'agent_run_start');
            if (runStartEvent && ('provider' in runStartEvent || 'model' in runStartEvent)) {
                sessionMetadataCache.set(sessionId, {
                    modelInfo: {
                        provider: runStartEvent.provider || '',
                        model: runStartEvent.model || ''
                    }
                });
            }
        } else {
            console.log(`Session ${sessionId} already has messages, skipping event loading`);
            const cachedMetadata = sessionMetadataCache.get(sessionId);
            if (cachedMetadata === null || cachedMetadata === void 0 ? void 0 : cachedMetadata.modelInfo) {
                console.log(`Restoring model info from cache for session ${sessionId}`);
                set(_atoms_ui__WEBPACK_IMPORTED_MODULE_4__.modelInfoAtom, cachedMetadata.modelInfo);
            } else {
                console.log(`No cached model info for session ${sessionId}, loading events to find model info`);
                // If not in the cache, the load event only looks for model information
                try {
                    const events = await _services_apiService__WEBPACK_IMPORTED_MODULE_0__.apiService.getSessionEvents(sessionId);
                    const runStartEvent = events.find((e)=>e.type === 'agent_run_start');
                    if (runStartEvent && ('provider' in runStartEvent || 'model' in runStartEvent)) {
                        const modelInfo = {
                            provider: runStartEvent.provider || '',
                            model: runStartEvent.model || ''
                        };
                        // Update model information status
                        set(_atoms_ui__WEBPACK_IMPORTED_MODULE_4__.modelInfoAtom, modelInfo);
                        // Cache for future use
                        sessionMetadataCache.set(sessionId, {
                            modelInfo
                        });
                        console.log(`Found and cached model info for session ${sessionId}:`, modelInfo);
                    }
                } catch (error) {
                    console.warn(`Failed to load events for model info recovery:`, error);
                }
            }
        }
        // 设置为活动会话
        set(_atoms_session__WEBPACK_IMPORTED_MODULE_1__.activeSessionIdAtom, sessionId);
    } catch (error) {
        console.error('Failed to set active session:', error);
        set(_atoms_ui__WEBPACK_IMPORTED_MODULE_4__.connectionStatusAtom, (prev)=>({
                ...prev,
                connected: false,
                lastError: error instanceof Error ? error.message : String(error)
            }));
        throw error;
    }
});
/**
 * Update session metadata
 */ const updateSessionAction = (0,jotai__WEBPACK_IMPORTED_MODULE_7__.atom)(null, async (get, set, params)=>{
    const { sessionId, updates } = params;
    try {
        const updatedSession = await _services_apiService__WEBPACK_IMPORTED_MODULE_0__.apiService.updateSessionMetadata(sessionId, updates);
        // Update session in the list
        set(_atoms_session__WEBPACK_IMPORTED_MODULE_1__.sessionsAtom, (prev)=>prev.map((session)=>session.id === sessionId ? {
                    ...session,
                    ...updatedSession
                } : session));
        return updatedSession;
    } catch (error) {
        console.error('Failed to update session:', error);
        throw error;
    }
});
/**
 * 预处理事件，确保流式事件按正确顺序处理
 */ function preprocessStreamingEvents(events) {
    // 对流式消息进行整理
    const messageStreams = {};
    // 收集所有流式事件，按messageId分组
    events.forEach((event)=>{
        if (event.type === 'final_answer_streaming' && 'messageId' in event) {
            const messageId = event.messageId;
            if (!messageStreams[messageId]) {
                messageStreams[messageId] = [];
            }
            messageStreams[messageId].push(event);
        }
    });
    // 返回预处理后的事件，确保流式事件以正确顺序处理
    return events;
}
/**
 * Delete a session
 */ const deleteSessionAction = (0,jotai__WEBPACK_IMPORTED_MODULE_7__.atom)(null, async (get, set, sessionId)=>{
    try {
        const success = await _services_apiService__WEBPACK_IMPORTED_MODULE_0__.apiService.deleteSession(sessionId);
        const activeSessionId = get(_atoms_session__WEBPACK_IMPORTED_MODULE_1__.activeSessionIdAtom);
        if (success) {
            // 从会话元数据缓存中删除
            sessionMetadataCache.delete(sessionId);
            // Remove from sessions list
            set(_atoms_session__WEBPACK_IMPORTED_MODULE_1__.sessionsAtom, (prev)=>prev.filter((session)=>session.id !== sessionId));
            // Clear active session if it was deleted
            if (activeSessionId === sessionId) {
                set(_atoms_session__WEBPACK_IMPORTED_MODULE_1__.activeSessionIdAtom, null);
            }
            // Clear session data
            set(_atoms_message__WEBPACK_IMPORTED_MODULE_2__.messagesAtom, (prev)=>{
                const newMessages = {
                    ...prev
                };
                delete newMessages[sessionId];
                return newMessages;
            });
            set(_atoms_tool__WEBPACK_IMPORTED_MODULE_3__.toolResultsAtom, (prev)=>{
                const newResults = {
                    ...prev
                };
                delete newResults[sessionId];
                return newResults;
            });
        }
        return success;
    } catch (error) {
        console.error('Failed to delete session:', error);
        throw error;
    }
});
/**
 * Send a message in the current session
 */ const sendMessageAction = (0,jotai__WEBPACK_IMPORTED_MODULE_7__.atom)(null, async (get, set, content)=>{
    const activeSessionId = get(_atoms_session__WEBPACK_IMPORTED_MODULE_1__.activeSessionIdAtom);
    if (!activeSessionId) {
        throw new Error('No active session');
    }
    // 明确设置处理状态
    set(_atoms_ui__WEBPACK_IMPORTED_MODULE_4__.isProcessingAtom, true);
    // 添加用户消息到状态
    const userMessage = {
        id: (0,uuid__WEBPACK_IMPORTED_MODULE_8__["default"])(),
        role: 'user',
        content,
        timestamp: Date.now()
    };
    set(_atoms_message__WEBPACK_IMPORTED_MODULE_2__.messagesAtom, (prev)=>{
        const sessionMessages = prev[activeSessionId] || [];
        return {
            ...prev,
            [activeSessionId]: [
                ...sessionMessages,
                userMessage
            ]
        };
    });
    // 立即更新会话名称，使用用户查询作为 Summary
    // 这样即使后续更新失败也至少有一个基本的名称
    try {
        // 检查是否是第一条消息，如果是则直接用查询内容作为会话名称
        const messages = get(_atoms_message__WEBPACK_IMPORTED_MODULE_2__.messagesAtom)[activeSessionId] || [];
        if (messages.length <= 2) {
            // 算上刚刚添加的用户消息
            let summary = '';
            if (typeof content === 'string') {
                summary = content.length > 50 ? content.substring(0, 47) + '...' : content;
            } else {
                // 从多模态内容中提取文本部分
                const textPart = content.find((part)=>part.type === 'text');
                if (textPart && 'text' in textPart) {
                    summary = textPart.text.length > 50 ? textPart.text.substring(0, 47) + '...' : textPart.text;
                } else {
                    summary = 'Image message';
                }
            }
            await _services_apiService__WEBPACK_IMPORTED_MODULE_0__.apiService.updateSessionMetadata(activeSessionId, {
                name: summary
            });
            // 更新 sessions atom
            set(_atoms_session__WEBPACK_IMPORTED_MODULE_1__.sessionsAtom, (prev)=>prev.map((session)=>session.id === activeSessionId ? {
                        ...session,
                        name: summary
                    } : session));
        }
    } catch (error) {
        console.log('Failed to update initial summary, continuing anyway:', error);
    // 错误不中断主流程
    }
    try {
        // 使用流式查询
        await _services_apiService__WEBPACK_IMPORTED_MODULE_0__.apiService.sendStreamingQuery(activeSessionId, content, (event)=>{
            // 处理每个事件
            set(_eventProcessor__WEBPACK_IMPORTED_MODULE_5__.processEventAction, {
                sessionId: activeSessionId,
                event
            });
            // 确保状态保持为处理中，直到明确收到结束事件
            if (event.type !== 'agent_run_end' && event.type !== 'assistant_message') {
                set(_atoms_ui__WEBPACK_IMPORTED_MODULE_4__.isProcessingAtom, true);
            }
        });
    } catch (error) {
        console.error('Error sending message:', error);
        // 错误时重置处理状态
        set(_atoms_ui__WEBPACK_IMPORTED_MODULE_4__.isProcessingAtom, false);
        throw error;
    }
});
/**
 * Abort the current running query
 */ const abortQueryAction = (0,jotai__WEBPACK_IMPORTED_MODULE_7__.atom)(null, async (get, set)=>{
    const activeSessionId = get(_atoms_session__WEBPACK_IMPORTED_MODULE_1__.activeSessionIdAtom);
    if (!activeSessionId) {
        return false;
    }
    try {
        const success = await _services_apiService__WEBPACK_IMPORTED_MODULE_0__.apiService.abortQuery(activeSessionId);
        if (success) {
            set(_atoms_ui__WEBPACK_IMPORTED_MODULE_4__.isProcessingAtom, false);
            // Add system message about abort
            const abortMessage = {
                id: (0,uuid__WEBPACK_IMPORTED_MODULE_8__["default"])(),
                role: 'system',
                content: 'The operation was aborted.',
                timestamp: Date.now()
            };
            set(_atoms_message__WEBPACK_IMPORTED_MODULE_2__.messagesAtom, (prev)=>{
                const sessionMessages = prev[activeSessionId] || [];
                return {
                    ...prev,
                    [activeSessionId]: [
                        ...sessionMessages,
                        abortMessage
                    ]
                };
            });
        }
        return success;
    } catch (error) {
        console.error('Error aborting query:', error);
        return false;
    }
});
/**
 * Check the current status of a session
 */ const checkSessionStatusAction = (0,jotai__WEBPACK_IMPORTED_MODULE_7__.atom)(null, async (get, set, sessionId)=>{
    if (!sessionId) return;
    try {
        const status = await _services_apiService__WEBPACK_IMPORTED_MODULE_0__.apiService.getSessionStatus(sessionId);
        set(_atoms_ui__WEBPACK_IMPORTED_MODULE_4__.isProcessingAtom, status.isProcessing);
        return status;
    } catch (error) {
        console.error('Failed to check session status:', error);
    // 错误时不更新处理状态，避免误报
    }
});
/**
 * Handle the end of a conversation
 * 仍然保留此函数，但减少其重要性，避免更新失败带来的影响
 */ async function handleConversationEnd(get, set, sessionId) {
    // 我们不再依赖这个函数来设置会话名称，但仍然保留它作为备份机制
    const allMessages = get(_atoms_message__WEBPACK_IMPORTED_MODULE_2__.messagesAtom)[sessionId] || [];
    // 只在有足够的消息并且会话没有名称时才尝试生成摘要
    const sessions = get(_atoms_session__WEBPACK_IMPORTED_MODULE_1__.sessionsAtom);
    const currentSession = sessions.find((s)=>s.id === sessionId);
    // 如果会话已经有名称，则不需要再生成
    if (currentSession && currentSession.name) {
        return;
    }
    // 只在有实际对话时才尝试生成摘要
    if (allMessages.length > 1) {
        try {
            // 转换消息为 API 期望的格式
            const apiMessages = allMessages.map((msg)=>({
                    role: msg.role,
                    content: typeof msg.content === 'string' ? msg.content : 'multimodal content'
                }));
            // 生成摘要
            const summary = await _services_apiService__WEBPACK_IMPORTED_MODULE_0__.apiService.generateSummary(sessionId, apiMessages);
            if (summary) {
                // 更新会话名称
                await _services_apiService__WEBPACK_IMPORTED_MODULE_0__.apiService.updateSessionMetadata(sessionId, {
                    name: summary
                });
                // 更新 sessions atom
                set(_atoms_session__WEBPACK_IMPORTED_MODULE_1__.sessionsAtom, (prev)=>prev.map((session)=>session.id === sessionId ? {
                            ...session,
                            name: summary
                        } : session));
            }
        } catch (error) {
            console.error('Failed to generate or update summary, continuing anyway:', error);
        // 错误不影响主流程
        }
    }
}

function $RefreshSig$() {
  return $ReactRefreshRuntime$.createSignatureFunctionForTransform();
}
function $RefreshReg$(type, id) {
  $ReactRefreshRuntime$.register(type, module.id + "_" + id);
}
Promise.resolve().then(function() {
  $ReactRefreshRuntime$.refresh(module.id, module.hot);
});


}),

},function(__webpack_require__) {
// webpack/runtime/get_full_hash
(() => {
__webpack_require__.h = () => ("0ae6255e216ab60a")
})();

}
);
//# sourceMappingURL=index.e19ff9e6414c2ced.hot-update.js.map