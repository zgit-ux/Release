{"version":3,"file":"index.3f225a2a61fc9f7a.hot-update.js","sources":["/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/entry.css","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/components/ToolCalls.tsx"],"sourcesContent":["// extracted by css-extract-rspack-plugin\nexport {};\n    if(module.hot) {\n      (function() {\n        var localsJsonString = undefined;\n        // 1751742169336\n        var cssReload = require(\"../../node_modules/.pnpm/@rspack+core@1.3.9_@swc+helpers@0.5.17/node_modules/@rspack/core/dist/cssExtractHmr.js\").cssReload(module.id, {});\n        // only invalidate when locals change\n        if (\n          module.hot.data &&\n          module.hot.data.value &&\n          module.hot.data.value !== localsJsonString\n        ) {\n          module.hot.invalidate();\n        } else {\n          module.hot.accept();\n        }\n        module.hot.dispose(function(data) {\n          data.value = localsJsonString;\n          cssReload();\n        });\n      })();\n    }\n  ","import React from 'react';\nimport { FiLoader, FiCheck, FiX, FiClock, FiAlertCircle } from 'react-icons/fi';\nimport { motion } from 'framer-motion';\nimport { ActionButton } from './ActionButton';\n\ninterface ToolCallsProps {\n  toolCalls: any[];\n  onToolCallClick: (toolCall: any) => void;\n  getToolIcon: (name: string) => React.ReactNode;\n  isIntermediate?: boolean;\n  toolResults?: any[]; // Add toolResults to check completion status\n}\n\n/**\n * Component for displaying tool calls with enhanced icons and loading states\n *\n * Design principles:\n * - Distinct visual identity for different tool types\n * - Shows loading state for pending tool calls\n * - Displays success/error status with appropriate icons\n * - Provides clear visual feedback with enhanced tool-specific colors\n * - Supports streaming tool calls with real-time argument updates\n */\nexport const ToolCalls: React.FC<ToolCallsProps> = ({\n  toolCalls,\n  onToolCallClick,\n  getToolIcon,\n  isIntermediate = false,\n  toolResults = [],\n}) => {\n  // Helper function to get tool call status\n  const getToolCallStatus = (toolCall: any): 'pending' | 'streaming' | 'success' | 'error' => {\n    const result = toolResults.find((result) => result.toolCallId === toolCall.id);\n\n    if (!result) {\n      // Check if this is a streaming tool call with incomplete arguments\n      const hasIncompleteArgs = isStreamingToolCall(toolCall);\n      return hasIncompleteArgs ? 'streaming' : 'pending';\n    }\n\n    if (result.error) {\n      return 'error'; // Tool execution failed\n    }\n\n    return 'success'; // Tool completed successfully\n  };\n\n  // Helper function to detect streaming tool calls\n  const isStreamingToolCall = (toolCall: any): boolean => {\n    try {\n      // For write_file and other large operations, check if arguments seem incomplete\n      if (!toolCall.function.arguments) return true;\n      \n      const args = JSON.parse(toolCall.function.arguments);\n      \n      // For write_file, if content is being streamed, it might be incomplete\n      if (toolCall.function.name === 'write_file') {\n        return !args.path || args.content === undefined;\n      }\n      \n      return false;\n    } catch (error) {\n      // If arguments can't be parsed, likely still streaming\n      return true;\n    }\n  };\n\n  // Helper function to get status icon with enhanced visual styling\n  const getStatusIcon = (status: string, toolName: string) => {\n    switch (status) {\n      case 'streaming':\n        return (\n          <motion.div\n            animate={{ rotate: 360 }}\n            transition={{ duration: 2, repeat: Infinity, ease: 'linear' }}\n          >\n            <FiLoader size={16} className=\"text-blue-500 dark:text-blue-400\" />\n          </motion.div>\n        );\n      case 'pending':\n        return (\n          <motion.div\n            animate={{ rotate: 360 }}\n            transition={{ duration: 1, repeat: Infinity, ease: 'linear' }}\n          >\n            <FiLoader size={16} className=\"text-slate-500 dark:text-slate-400\" />\n          </motion.div>\n        );\n      case 'success':\n        return <FiCheck size={16} className=\"text-green-600 dark:text-green-400\" />;\n      case 'error':\n        return <FiAlertCircle size={16} className=\"text-red-600 dark:text-red-400\" />;\n      default:\n        return <FiClock size={16} className=\"text-slate-500 dark:text-slate-400\" />;\n    }\n  };\n\n  // Generate tool description text - enhanced description readability\n  const getToolDescription = (toolCall: any, status: string) => {\n    try {\n      const args = JSON.parse(toolCall.function.arguments || '{}');\n\n      switch (toolCall.function.name) {\n        case 'write_file':\n          if (status === 'streaming') {\n            return args.path ? `writing to ${args.path.split('/').pop()}...` : 'preparing to write file...';\n          }\n          return args.path ? `file: ${args.path.split('/').pop()}` : '';\n        case 'web_search':\n          return args.query ? `\"${args.query}\"` : '';\n        case 'browser_navigate':\n          return args.url;\n        case 'browser_vision_control':\n        case 'browser_control':\n          return args.action ? `${args.action}` : '';\n        case 'browser_click':\n          return args.selector || args.text ? `click: ${args.selector || args.text}` : 'click';\n        case 'list_directory':\n          return args.path ? `path: ${args.path}` : '';\n        case 'run_command':\n          return args.command;\n        case 'read_file':\n          return args.path ? `file: ${args.path.split('/').pop()}` : '';\n        default:\n          return '';\n      }\n    } catch (error) {\n      // For streaming tool calls, arguments might be incomplete JSON\n      if (status === 'streaming') {\n        return 'loading arguments...';\n      }\n      return '';\n    }\n  };\n\n  // Get browser operation result info\n  const getResultInfo = (toolCall: any, status: string) => {\n    const result = toolResults.find((result) => result.toolCallId === toolCall.id);\n\n    if (status === 'error' && result?.error) {\n      return '\"operation failed\"';\n    } else if (status === 'success') {\n      if (toolCall.function.name === 'browser_get_markdown') {\n        return '\"content retrieved\"';\n      } else if (toolCall.function.name === 'browser_navigate') {\n        return '\"navigation success\"';\n      } else if (toolCall.function.name === 'browser_click') {\n        return '\"click successful\"';\n      } else if (toolCall.function.name.startsWith('run_')) {\n        return '\"command executed\"';\n      } else if (toolCall.function.name.startsWith('list_')) {\n        return '\"files listed\"';\n      } else if (toolCall.function.name.startsWith('read_')) {\n        return '\"file read\"';\n      } else if (toolCall.function.name.startsWith('write_')) {\n        return '\"file saved\"';\n      }\n    }\n\n    return '';\n  };\n\n  // Get formatted tool name for better readability\n  const getToolDisplayName = (toolName: string) => {\n    // Replace underscores with spaces\n    const nameWithSpaces = toolName.replace(/_/g, ' ');\n\n    // Special case handling\n    switch (toolName) {\n      case 'browser_navigate':\n        return 'Navigate';\n      case 'browser_get_markdown':\n        return 'Extract Content';\n      case 'browser_click':\n        return 'Click Element';\n      case 'web_search':\n        return 'Web Search';\n      case 'list_directory':\n        return 'List Files';\n      case 'run_command':\n        return 'Run Command';\n      case 'read_file':\n        return 'Read File';\n      case 'write_file':\n        return 'Write File';\n      default:\n        // Capitalize first letter\n        return nameWithSpaces\n          .split(' ')\n          .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n          .join(' ');\n    }\n  };\n\n  return (\n    <div className=\"mt-2 space-y-1.5\">\n      {toolCalls.map((toolCall) => {\n        const status = getToolCallStatus(toolCall);\n        const description = getToolDescription(toolCall, status);\n        const browserInfo = getResultInfo(toolCall, status);\n        const displayName = getToolDisplayName(toolCall.function.name);\n\n        return (\n          <ActionButton\n            key={toolCall.id}\n            icon={getToolIcon(toolCall.function.name)}\n            label={displayName}\n            onClick={() => onToolCallClick(toolCall)}\n            status={status}\n            statusIcon={getStatusIcon(status, toolCall.function.name)}\n            description={description || browserInfo || undefined}\n          />\n        );\n      })}\n    </div>\n  );\n};\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACvBA;AACA;AACA;AACA;AAUA;;;;;;;;;AASA;AACA;AAOA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;;;;;;;;;;;AAGA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;;;;;;;;;;;AAGA;AACA;AAAA;AAAA;;;;;;AACA;AACA;AAAA;AAAA;;;;;;AACA;AACA;AAAA;AAAA;;;;;;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AANA;;;;;AASA;;;;;;AAGA;AAjMA"}