{"version":3,"file":"index.827e3186b8605e0e.hot-update.js","sources":["/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/entry.css","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/context/ReplayModeContext.tsx"],"sourcesContent":["// extracted by css-extract-rspack-plugin\nexport {};\n    if(module.hot) {\n      (function() {\n        var localsJsonString = undefined;\n        // 1748915587940\n        var cssReload = require(\"../../node_modules/.pnpm/@rspack+core@1.3.9_@swc+helpers@0.5.17/node_modules/@rspack/core/dist/cssExtractHmr.js\").cssReload(module.id, {});\n        // only invalidate when locals change\n        if (\n          module.hot.data &&\n          module.hot.data.value &&\n          module.hot.data.value !== localsJsonString\n        ) {\n          module.hot.invalidate();\n        } else {\n          module.hot.accept();\n        }\n        module.hot.dispose(function(data) {\n          data.value = localsJsonString;\n          cssReload();\n        });\n      })();\n    }\n  ","import React, { createContext, useContext, ReactNode, useEffect } from 'react';\nimport { atom, useAtom, useAtomValue } from 'jotai';\nimport { replayStateAtom } from '../state/atoms/replay';\nimport { activeSessionIdAtom, sessionsAtom } from '../state/atoms/session';\nimport { messagesAtom } from '../state/atoms/message';\nimport { connectionStatusAtom } from '../state/atoms/ui';\nimport { processEventAction } from '../state/actions/eventProcessor'; // 新增引入\n\nconst replayModelInfoAtom = atom<{ provider: string; model: string } | null>(null);\n\n/**\n * ReplayModeContext - Global context for sharing replay mode state\n *\n * This context provides a centralized way to check if the application\n * is currently in replay mode, allowing components to adapt their behavior\n * without needing to directly access the replay state atom.\n */\ninterface ReplayModeContextType {\n  isReplayMode: boolean;\n  modelInfo: { provider: string; model: string } | null;\n}\n\nconst ReplayModeContext = createContext<ReplayModeContextType>({ \n  isReplayMode: false,\n  modelInfo: null\n});\n\n/**\n * ReplayModeProvider - Provides replay mode state to the application and initializes replay data\n *\n * 1. Detects replay mode from window variables\n * 2. Initializes application state with replay data when in replay mode\n * 3. Prevents server communication in replay mode\n * 4. Provides the replay mode status to all child components\n */\nexport const ReplayModeProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  // Access necessary atoms\n  const [replayState, setReplayState] = useAtom(replayStateAtom);\n  const [, setMessages] = useAtom(messagesAtom);\n  const [, setSessions] = useAtom(sessionsAtom);\n  const [, setActiveSessionId] = useAtom(activeSessionIdAtom);\n  const [, setConnectionStatus] = useAtom(connectionStatusAtom);\n  const [modelInfo, setModelInfo] = useAtom(replayModelInfoAtom);\n  const processEvent = useContext(processEventAction); // 获取事件处理器\n\n  // Initialize replay mode if window variables are present\n  useEffect(() => {\n    // Check if in replay mode\n    if (window.AGENT_TARS_REPLAY_MODE && window.AGENT_TARS_EVENT_STREAM) {\n      // Get session data and event stream\n      const sessionData = window.AGENT_TARS_SESSION_DATA;\n      const events = window.AGENT_TARS_EVENT_STREAM;\n      const modelData = window.AGENT_TARS_MODEL_INFO;\n\n      console.log('[ReplayMode] Initializing replay mode with', events.length, 'events');\n\n      if (sessionData && sessionData.id) {\n        // Set connection status to \"offline\" to prevent health checks\n        setConnectionStatus({\n          connected: false, // Mark as disconnected to prevent API calls\n          lastConnected: null,\n          lastError: null,\n          reconnecting: false,\n        });\n\n        // Set model info if available\n        if (modelData) {\n          setModelInfo(modelData);\n          console.log('[ReplayMode] Model info loaded:', modelData);\n        }\n\n        // Set sessions data\n        setSessions([sessionData]);\n\n        // When in replay mode, the session ID must be set immediately\n        setActiveSessionId(sessionData.id);\n\n        // Add debug logging\n        console.log('[ReplayMode] Active session set to:', sessionData.id);\n\n        // Initialize replay state with autoPlayCountdown\n        setReplayState({\n          isActive: true,\n          isPaused: true, // 始终从暂停状态开始\n          events: events,\n          currentEventIndex: -1,\n          startTimestamp: events.length > 0 ? events[0].timestamp : null,\n          endTimestamp: events.length > 0 ? events[events.length - 1].timestamp : null,\n          playbackSpeed: 1,\n          autoPlayCountdown: 2, // 设置2秒倒计时\n          visibleTimeWindow:\n            events.length > 0\n              ? {\n                  start: events[0].timestamp,\n                  end: events[events.length - 1].timestamp,\n                }\n              : null,\n          processedEvents: {},\n        });\n\n        // Initialize empty messages state\n        setMessages({\n          [sessionData.id]: [],\n        });\n\n        console.log('[ReplayMode] Replay mode initialized successfully');\n\n        // 启动倒计时\n        const countdownTimer = setInterval(() => {\n          setReplayState((prev) => {\n            // 如果倒计时结束或已被取消\n            if (prev.autoPlayCountdown === null || prev.autoPlayCountdown <= 0) {\n              clearInterval(countdownTimer);\n\n              // 只在倒计时完成时准备开始播放，但不直接改变isPaused状态\n              // 这样将由useReplay中的startReplay函数正确启动播放过程\n              if (prev.autoPlayCountdown === 0) {\n                // 设置一个延迟启动标记，在下一个useEffect中捕获并启动播放\n                setTimeout(() => {\n                  console.log('[ReplayMode] Auto-play countdown finished, starting replay...');\n                  // 触发一个事件通知播放开始\n                  window.dispatchEvent(new CustomEvent('replay-autostart'));\n                }, 0);\n              }\n\n              return {\n                ...prev,\n                autoPlayCountdown: null, // 只清除倒计时，不改变播放状态\n              };\n            }\n\n            // 继续倒计时\n            return {\n              ...prev,\n              autoPlayCountdown: prev.autoPlayCountdown - 1,\n            };\n          });\n        }, 1000);\n      } else {\n        console.error('[ReplayMode] Missing session data or session ID');\n      }\n    }\n  }, [setMessages, setSessions, setActiveSessionId, setReplayState, setConnectionStatus]);\n\n  // Check both the atom and global window variable for replay mode\n  const isReplayMode = replayState.isActive || !!window.AGENT_TARS_REPLAY_MODE;\n\n  return (\n    <ReplayModeContext.Provider\n      value={{\n        isReplayMode,\n        modelInfo,\n      }}\n    >\n      {children}\n    </ReplayModeContext.Provider>\n  );\n};\n\n/**\n * useReplayMode - Hook to access replay mode state\n *\n * This hook provides a convenient way for components to check if the\n * application is currently in replay mode and adapt their behavior accordingly.\n */\nexport const useReplayMode = (): boolean => {\n  const { isReplayMode } = useContext(ReplayModeContext);\n  return isReplayMode;\n};\n\n/**\n * useReplayModelInfo - Hook to access model info in replay mode\n *\n * Provides access to the model information when in replay mode\n */\nexport const useReplayModelInfo = (): { provider: string; model: string } | null => {\n  const { modelInfo } = useContext(ReplayModeContext);\n  return modelInfo;\n};\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAcA;AACA;AACA;AACA;AAEA;;;;;;;AAOA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;;;;;;AAGA;AA1HA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAPA;AA4HA;;;;;AAKA;;AAEA;AACA;AACA;AAHA;AAKA;;;;AAIA;;AAEA;AACA;AACA;AAHA"}