{"version":3,"file":"index.13a8c076c261dd46.hot-update.js","sources":["/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/entry.css","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Workspace/WorkspaceDetail.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Workspace/renderers/BrowserControlRenderer.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/state/actions/sessionActions.ts"],"sourcesContent":["// extracted by css-extract-rspack-plugin\nexport {};\n    if(module.hot) {\n      (function() {\n        var localsJsonString = undefined;\n        // 1749556545575\n        var cssReload = require(\"../../node_modules/.pnpm/@rspack+core@1.3.9_@swc+helpers@0.5.17/node_modules/@rspack/core/dist/cssExtractHmr.js\").cssReload(module.id, {});\n        // only invalidate when locals change\n        if (\n          module.hot.data &&\n          module.hot.data.value &&\n          module.hot.data.value !== localsJsonString\n        ) {\n          module.hot.invalidate();\n        } else {\n          module.hot.accept();\n        }\n        module.hot.dispose(function(data) {\n          data.value = localsJsonString;\n          cssReload();\n        });\n      })();\n    }\n  ","import React from 'react';\nimport { motion } from 'framer-motion';\nimport { useSession } from '../../hooks/useSession';\nimport { useTool } from '../../hooks/useTool';\nimport { FiArrowLeft, FiLayout, FiFileText, FiBookOpen } from 'react-icons/fi';\nimport { formatTimestamp } from '../../utils/formatters';\nimport { ToolResultRenderer } from './renderers/ToolResultRenderer';\nimport { ResearchReportRenderer } from './renderers/ResearchReportRenderer';\n\n/**\n * WorkspaceDetail Component - Displays details of a single tool result or report\n */\nexport const WorkspaceDetail: React.FC = () => {\n  const { activePanelContent, setActivePanelContent, toolResults, activeSessionId } = useSession();\n\n  const { getToolIcon } = useTool();\n\n  if (!activePanelContent) {\n    return null;\n  }\n\n  const handleBackToList = () => {\n    setActivePanelContent(null);\n  };\n\n  // 特殊处理 final_answer 类型或研究报告内容\n  if (\n    activePanelContent?.type === 'research_report' ||\n    (activePanelContent.toolCallId && activePanelContent.toolCallId.startsWith('final-answer'))\n  ) {\n    return (\n      <ResearchReportRenderer\n        content={\n          typeof activePanelContent.source === 'string'\n            ? activePanelContent.source\n            : JSON.stringify(activePanelContent.source, null, 2)\n        }\n        title={activePanelContent.title || 'Research Report'}\n        isStreaming={activePanelContent.isStreaming}\n      />\n    );\n  }\n\n  // 特殊处理研究报告内容\n  if (activePanelContent?.type === 'research_report') {\n    return (\n      <ResearchReportRenderer\n        content={activePanelContent.source}\n        title={activePanelContent.title}\n        isStreaming={activePanelContent.isStreaming}\n      />\n    );\n  }\n\n  // Convert legacy format content to standardized tool result parts\n  const getStandardizedContent = (): ToolResultContentPart[] => {\n    const { type, source, title, error, arguments: toolArguments } = activePanelContent;\n\n    // Show error if present\n    if (error) {\n      return [\n        {\n          type: 'text',\n          name: 'ERROR',\n          text: error,\n        },\n      ];\n    }\n\n    // Handle browser_vision_control type specifically\n    if (type === 'browser_vision_control') {\n      // Create browser_control part for the specialized renderer\n      return [\n        {\n          type: 'browser_control',\n          name: 'BROWSER_CONTROL',\n          toolCallId: activePanelContent.toolCallId,\n          thought: toolArguments?.thought || '',\n          step: toolArguments?.step || '',\n          action: toolArguments?.action || '',\n          status: source?.status || 'unknown',\n        },\n      ];\n    }\n\n    // Handle array of content parts from environment_input\n    if (Array.isArray(source) && source.some((part) => part.type === 'image_url')) {\n      const imagePart = source.find((part) => part.type === 'image_url');\n      if (imagePart && imagePart.image_url && imagePart.image_url.url) {\n        const imgSrc = imagePart.image_url.url;\n        if (imgSrc.startsWith('data:image/')) {\n          const [mimeTypePrefix, base64Data] = imgSrc.split(',');\n          const mimeType = mimeTypePrefix.split(':')[1].split(';')[0];\n          return [\n            {\n              type: 'image',\n              imageData: base64Data,\n              mimeType,\n              name: activePanelContent.title,\n            },\n          ];\n        }\n      }\n    }\n\n    // Based on tool type, convert to standardized format\n    switch (type) {\n      case 'image':\n        // Image content\n        if (typeof source === 'string' && source.startsWith('data:image/')) {\n          const [mimeTypePrefix, base64Data] = source.split(',');\n          const mimeType = mimeTypePrefix.split(':')[1].split(';')[0];\n\n          return [\n            {\n              type: 'image',\n              imageData: base64Data,\n              mimeType,\n              name: activePanelContent.title,\n            },\n          ];\n        }\n        return [\n          {\n            type: 'text',\n            text: 'Image could not be displayed',\n          },\n        ];\n\n      case 'search':\n        // Search results\n        if (Array.isArray(source) && source.some((item) => item.type === 'text')) {\n          // Handle new multimodal format\n          const resultsItem = source.find((item) => item.name === 'RESULTS');\n          const queryItem = source.find((item) => item.name === 'QUERY');\n\n          if (resultsItem && resultsItem.text) {\n            // Parse results text into separate result items\n            const resultBlocks = resultsItem.text.split('---').filter(Boolean);\n            const parsedResults = resultBlocks.map((block) => {\n              const lines = block.trim().split('\\n');\n              const titleLine = lines[0] || '';\n              const urlLine = lines[1] || '';\n              const snippet = lines.slice(2).join('\\n');\n\n              const title = titleLine.replace(/^\\[\\d+\\]\\s*/, '').trim();\n              const url = urlLine.replace(/^URL:\\s*/, '').trim();\n\n              return { title, url, snippet };\n            });\n\n            // Return only the search_result part, removing the redundant text query part\n            return [\n              {\n                type: 'search_result',\n                name: 'SEARCH_RESULTS',\n                results: parsedResults,\n                query: queryItem?.text,\n              },\n            ];\n          }\n        }\n\n        // Handle old format\n        if (source && typeof source === 'object' && source.results) {\n          return [\n            {\n              type: 'search_result',\n              name: 'SEARCH_RESULTS',\n              results: source.results,\n              query: source.query,\n            },\n          ];\n        }\n\n        return [\n          {\n            type: 'text',\n            text: typeof source === 'string' ? source : JSON.stringify(source, null, 2),\n          },\n        ];\n\n      case 'command':\n        // Command results\n        if (Array.isArray(source) && source.some((item) => item.type === 'text')) {\n          // New multimodal format\n          const commandItem = source.find((item) => item.name === 'COMMAND');\n          const stdoutItem = source.find((item) => item.name === 'STDOUT');\n          const stderrItem = source.find((item) => item.name === 'STDERR');\n\n          return [\n            {\n              type: 'command_result',\n              name: 'COMMAND_RESULT',\n              command: commandItem?.text || toolArguments?.command,\n              stdout: stdoutItem?.text || '',\n              stderr: stderrItem?.text || '',\n              exitCode: source.find((item) => item.name === 'EXIT_CODE')?.value,\n            },\n          ];\n        }\n\n        // Old format\n        if (source && typeof source === 'object') {\n          return [\n            {\n              type: 'command_result',\n              name: 'COMMAND_RESULT',\n              command: source.command || toolArguments?.command,\n              stdout: source.output || source.stdout || '',\n              stderr: source.stderr || '',\n              exitCode: source.exitCode,\n            },\n          ];\n        }\n\n        return [\n          {\n            type: 'text',\n            text: typeof source === 'string' ? source : JSON.stringify(source, null, 2),\n          },\n        ];\n\n      case 'browser':\n        const toolName = title?.toLowerCase() || '';\n\n        if (toolName.includes('navigate')) {\n          let textContent = '';\n          if (typeof source === 'string') {\n            textContent = source;\n          } else if (Array.isArray(source)) {\n            textContent = source\n              .filter((p) => p.type === 'text')\n              .map((p) => p.text)\n              .join('\\n');\n          } else if (typeof source === 'object' && source !== null) {\n            textContent = source.content || source.text || JSON.stringify(source, null, 2);\n          }\n\n          return [\n            {\n              type: 'text',\n              name: title,\n              text: textContent,\n              showAsRawMarkdown: true,\n            },\n          ];\n        }\n\n        // Browser results\n        if (Array.isArray(source) && source.some((item) => item.type === 'text')) {\n          // 处理数组格式的浏览器结果\n          const contentText = source\n            .filter((item) => item.type === 'text')\n            .map((item) => item.text)\n            .join('\\n');\n\n          return [\n            {\n              type: 'browser_result',\n              name: 'BROWSER_RESULT',\n              url: extractUrlFromContent(contentText),\n              content: contentText,\n              title: 'Browser Navigation',\n              contentType: 'text',\n            },\n          ];\n        }\n\n        // Old format or direct string content\n        return [\n          {\n            type: 'browser_result',\n            name: 'BROWSER_RESULT',\n            url: typeof source === 'object' && source.url ? source.url : '',\n            content:\n              typeof source === 'object'\n                ? source.content || source.text || JSON.stringify(source, null, 2)\n                : typeof source === 'string'\n                  ? source\n                  : JSON.stringify(source, null, 2),\n            contentType: 'text',\n            title: 'Browser Navigation',\n          },\n        ];\n\n      case 'file':\n        // File results\n        if (source && typeof source === 'object') {\n          return [\n            {\n              type: 'text',\n              name: 'FILE_PATH',\n              text: `File: ${source.path || 'Unknown file'}`,\n            },\n            {\n              type: 'text',\n              name: 'FILE_CONTENT',\n              text: source.content || 'No content available',\n            },\n          ];\n        }\n\n        return [\n          {\n            type: 'text',\n            text: typeof source === 'string' ? source : JSON.stringify(source, null, 2),\n          },\n        ];\n\n      default:\n        // Default handling for unknown types\n        if (typeof source === 'object') {\n          return [\n            {\n              type: 'json',\n              name: 'JSON_DATA',\n              data: source,\n            },\n          ];\n        }\n\n        return [\n          {\n            type: 'text',\n            text: typeof source === 'string' ? source : JSON.stringify(source, null, 2),\n          },\n        ];\n    }\n  };\n\n  // 辅助函数：从文本内容中提取URL\n  const extractUrlFromContent = (content: string): string => {\n    if (typeof content === 'string' && content.includes('Navigated to ')) {\n      const lines = content.split('\\n');\n      const firstLine = lines[0] || '';\n      return firstLine.replace('Navigated to ', '').trim();\n    }\n    return '';\n  };\n\n  // Handle tool result content action\n  const handleContentAction = (action: string, data: any) => {\n    if (action === 'zoom' && data.src) {\n      // Here you could open a modal with the zoomed image\n      console.log('Zoom image:', data.src);\n    }\n  };\n\n  return (\n    <motion.div\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      exit={{ opacity: 0 }}\n      className=\"h-full flex flex-col\"\n    >\n      {/* Header with tool info and actions */}\n      <div className=\"flex items-center justify-between p-4 border-b border-gray-100/40 dark:border-gray-700/20\">\n        <div className=\"flex items-center\">\n          <motion.button\n            whileHover={{ scale: 1.05, x: -2 }}\n            whileTap={{ scale: 0.95 }}\n            onClick={handleBackToList}\n            className=\"mr-3 p-2 text-gray-600 dark:text-gray-400 hover:bg-gray-100/50 dark:hover:bg-gray-700/30 rounded-lg border border-transparent hover:border-gray-100/40 dark:hover:border-gray-700/30\"\n            title=\"Back to list\"\n          >\n            <FiArrowLeft size={16} />\n          </motion.button>\n\n          <div className=\"w-10 h-10 mr-3 rounded-xl flex items-center justify-center relative overflow-hidden\">\n            {/* 使用特殊图标替代 final_answer 工具图标 */}\n            {activePanelContent.toolCallId?.startsWith('final-answer') ? (\n              <div className=\"absolute inset-0 bg-gradient-to-br from-accent-400 to-accent-500 opacity-20\"></div>\n            ) : (\n              <div\n                className={`absolute inset-0 opacity-20 ${\n                  activePanelContent?.type === 'search'\n                    ? 'bg-gradient-to-br from-blue-400 to-indigo-500'\n                    : activePanelContent?.type === 'browser'\n                      ? 'bg-gradient-to-br from-purple-400 to-pink-500'\n                      : activePanelContent?.type === 'command'\n                        ? 'bg-gradient-to-br from-green-400 to-emerald-500'\n                        : activePanelContent?.type === 'file'\n                          ? 'bg-gradient-to-br from-yellow-400 to-amber-500'\n                          : activePanelContent?.type === 'image'\n                            ? 'bg-gradient-to-br from-red-400 to-rose-500'\n                            : activePanelContent?.type === 'browser_vision_control'\n                              ? 'bg-gradient-to-br from-cyan-400 to-teal-500'\n                              : 'bg-gradient-to-br from-gray-400 to-gray-500'\n                }`}\n              ></div>\n            )}\n            <div className=\"relative z-10\">\n              {activePanelContent.toolCallId?.startsWith('final-answer') ? (\n                <FiBookOpen className=\"text-accent-600 dark:text-accent-400\" size={20} />\n              ) : (\n                getToolIcon(activePanelContent?.type || 'other')\n              )}\n            </div>\n          </div>\n\n          <div>\n            <h2 className=\"font-medium text-gray-800 dark:text-gray-200 text-lg leading-tight\">\n              {activePanelContent.title}\n            </h2>\n            <div className=\"text-xs text-gray-500 dark:text-gray-400\">\n              {formatTimestamp(activePanelContent.timestamp)}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Content area */}\n      <div className=\"flex-1 overflow-auto bg-gray-50/50 dark:bg-gray-900/30 p-6\">\n        <ToolResultRenderer content={getStandardizedContent()} onAction={handleContentAction} />\n      </div>\n    </motion.div>\n  );\n};","import React, { useState, useEffect, useRef } from 'react';\nimport { ToolResultContentPart } from '../../../types';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { FiEye, FiMousePointer, FiType, FiChevronsRight, FiImage } from 'react-icons/fi';\nimport { useSession } from '../../../hooks/useSession';\nimport { BrowserShell } from './BrowserShell';\n\ninterface BrowserControlRendererProps {\n  part: ToolResultContentPart;\n  onAction?: (action: string, data: any) => void;\n}\n\n/**\n * Specialized renderer for browser_vision_control tool results\n *\n * This renderer displays:\n * 1. The screenshot from the environment input\n * 2. A mouse cursor overlay showing the action point\n * 3. The thought process of the agent\n * 4. The step being performed\n * 5. The specific action taken\n *\n * Design improvements:\n * - Shows screenshot at the top for better visual context\n * - Displays enhanced mouse cursor with artistic animations\n * - Uses browser shell wrapper for consistent styling\n * - Applies smooth transitions for mouse movements\n * - Features visually engaging click animations\n */\nexport const BrowserControlRenderer: React.FC<BrowserControlRendererProps> = ({\n  part,\n  onAction,\n}) => {\n  const { activeSessionId, messages, toolResults, replayState } = useSession();\n  const [relatedImage, setRelatedImage] = useState<string | null>(null);\n  const [imageSize, setImageSize] = useState<{ width: number; height: number } | null>(null);\n  const [mousePosition, setMousePosition] = useState<{ x: number; y: number } | null>(null);\n  const [previousMousePosition, setPreviousMousePosition] = useState<{\n    x: number;\n    y: number;\n  } | null>(null);\n  const imageRef = useRef<HTMLImageElement>(null);\n\n  // Extract the visual operation details from the part\n  const { thought, step, action, status, toolCallId } = part;\n\n  // Get coordinates directly from tool result instead of parsing action string\n  useEffect(() => {\n    if (!activeSessionId || !toolCallId) return;\n\n    // Find the matching tool result for this tool call\n    const sessionResults = toolResults[activeSessionId] || [];\n    const matchingResult = sessionResults.find((result) => result.toolCallId === toolCallId);\n\n    if (matchingResult && matchingResult.content && matchingResult.content.result) {\n      const { startX, startY } = matchingResult.content.result;\n\n      // Save previous position before updating\n      if (mousePosition) {\n        setPreviousMousePosition(mousePosition);\n      }\n\n      // Set new position if coordinates are valid\n      if (typeof startX === 'number' && typeof startY === 'number') {\n        setMousePosition({\n          x: startX,\n          y: startY,\n        });\n      }\n    }\n  }, [activeSessionId, toolCallId, toolResults]);\n\n  // Find the most recent environment input (screenshot) before this operation\n  useEffect(() => {\n    if (!activeSessionId) return;\n\n    const sessionMessages = messages[activeSessionId] || [];\n\n    if (!toolCallId) return;\n\n    // 获取当前工具调用在消息中的索引\n    const currentToolCallIndex = sessionMessages.findIndex((msg) =>\n      msg.toolCalls?.some((tc) => tc.id === toolCallId),\n    );\n\n    if (currentToolCallIndex === -1) return;\n\n    // 查找距离当前工具调用最近的环境输入\n    let foundImage = false;\n\n    // 向前搜索环境输入，找到最近的截图\n    for (let i = currentToolCallIndex; i >= 0; i--) {\n      const msg = sessionMessages[i];\n      if (msg.role === 'environment' && Array.isArray(msg.content)) {\n        const imgContent = msg.content.find(\n          (c) => typeof c === 'object' && 'type' in c && c.type === 'image_url',\n        );\n\n        if (imgContent && 'image_url' in imgContent && imgContent.image_url.url) {\n          setRelatedImage(imgContent.image_url.url);\n          foundImage = true;\n          break;\n        }\n      }\n    }\n\n    // 如果在当前工具调用之前没有找到图片，则搜索所有环境消息作为回退\n    if (!foundImage) {\n      console.warn(\n        `[BrowserControlRenderer] Could not find preceding screenshot for toolCallId: ${toolCallId}. Falling back to search all environment messages.`,\n      );\n      const envMessages = sessionMessages.filter(\n        (msg) => msg.role === 'environment' && Array.isArray(msg.content),\n      );\n\n      // 从后往前找，找到最新的截图\n      for (let i = envMessages.length - 1; i >= 0; i--) {\n        const msg = envMessages[i];\n        const imgContent = msg.content.find(\n          (c) => typeof c === 'object' && 'type' in c && c.type === 'image_url',\n        );\n\n        if (imgContent && 'image_url' in imgContent && imgContent.image_url.url) {\n          setRelatedImage(imgContent.image_url.url);\n          break; // 找到最新的就停止\n        }\n      }\n    }\n  }, [activeSessionId, messages, toolCallId]);\n\n  // Handler to get image dimensions when loaded\n  const handleImageLoad = () => {\n    if (imageRef.current) {\n      setImageSize({\n        width: imageRef.current.naturalWidth,\n        height: imageRef.current.naturalHeight,\n      });\n    }\n  };\n\n  // If no valid data, show a placeholder\n  if (!thought && !step && !action) {\n    return <div className=\"text-gray-500 italic\">Browser control details unavailable</div>;\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Screenshot section - moved to the top */}\n      {relatedImage && (\n        <motion.div\n          initial={{ opacity: 0, y: 10 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.3 }}\n        >\n          {/* ... 保留其他代码 ... */}\n\n          <BrowserShell className=\"mb-4\">\n            <div className=\"relative\">\n              <img\n                ref={imageRef}\n                src={relatedImage}\n                alt=\"Browser Screenshot\"\n                className=\"w-full h-auto object-contain\"\n                onLoad={handleImageLoad}\n              />\n\n              {/* Enhanced mouse cursor overlay */}\n              {mousePosition && imageSize && (\n                <motion.div\n                  className=\"absolute pointer-events-none\"\n                  initial={\n                    previousMousePosition\n                      ? {\n                          left: `${(previousMousePosition.x / imageSize.width) * 100 * window.devicePixelRatio}%`,\n                          top: `${(previousMousePosition.y / imageSize.height) * 100 * window.devicePixelRatio}%`,\n                        }\n                      : {\n                          left: `${(mousePosition.x / imageSize.width) * 100 * window.devicePixelRatio}%`,\n                          top: `${(mousePosition.y / imageSize.height) * 100 * window.devicePixelRatio}%`,\n                        }\n                  }\n                  animate={{\n                    left: `${(mousePosition.x / imageSize.width) * 100 * window.devicePixelRatio}%`,\n                    top: `${(mousePosition.y / imageSize.height) * 100 * window.devicePixelRatio}%`,\n                  }}\n                  transition={{ duration: 0.5, ease: [0.16, 1, 0.3, 1] }}\n                  style={{\n                    zIndex: 10,\n                  }}\n                >\n                  <div className=\"relative\">\n                    {/* Enhanced cursor icon with shadow effect */}\n                    <svg\n                      width=\"36\"\n                      height=\"36\"\n                      viewBox=\"0 0 24 24\"\n                      fill=\"none\"\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      style={{\n                        filter: 'drop-shadow(0px 2px 4px rgba(0,0,0,0.3))',\n                        transform: 'translate(-12px, -3px)',\n                      }}\n                    >\n                      <defs>\n                        <linearGradient id=\"cursorGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n                          <stop offset=\"0%\" stopColor=\"white\" />\n                          <stop offset=\"100%\" stopColor=\"#f5f5f5\" />\n                        </linearGradient>\n                      </defs>\n                      <path\n                        d=\"M5 3L19 12L12 13L9 20L5 3Z\"\n                        fill=\"url(#cursorGradient)\"\n                        stroke=\"#000000\"\n                        strokeWidth=\"1.5\"\n                        strokeLinejoin=\"round\"\n                      />\n                    </svg>\n\n                    {/* Artistic pulse effect for click actions */}\n                    {action && action.includes('click') && (\n                      <>\n                        {/* Multiple layered ripple effects */}\n                        <motion.div\n                          className=\"absolute rounded-full\"\n                          initial={{ opacity: 0.8, scale: 0 }}\n                          animate={{ opacity: 0, scale: 2.5 }}\n                          transition={{\n                            duration: 1.5,\n                            ease: 'easeOut',\n                            repeat: Infinity,\n                          }}\n                          style={{\n                            top: '-8px',\n                            left: '-8px',\n                            width: '24px',\n                            height: '24px',\n                            background:\n                              'radial-gradient(circle, rgba(99,102,241,0.6) 0%, rgba(99,102,241,0) 70%)',\n                            border: '1px solid rgba(99,102,241,0.3)',\n                          }}\n                        />\n                        <motion.div\n                          className=\"absolute rounded-full\"\n                          initial={{ opacity: 0.9, scale: 0 }}\n                          animate={{ opacity: 0, scale: 2 }}\n                          transition={{\n                            duration: 1.2,\n                            ease: 'easeOut',\n                            delay: 0.2,\n                            repeat: Infinity,\n                          }}\n                          style={{\n                            top: '-6px',\n                            left: '-6px',\n                            width: '20px',\n                            height: '20px',\n                            background:\n                              'radial-gradient(circle, rgba(99,102,241,0.8) 0%, rgba(99,102,241,0) 70%)',\n                            border: '1px solid rgba(99,102,241,0.5)',\n                          }}\n                        />\n                        {/* Central highlight dot */}\n                        <motion.div\n                          className=\"absolute rounded-full bg-white\"\n                          initial={{ opacity: 1, scale: 0.5 }}\n                          animate={{ opacity: 0.8, scale: 1 }}\n                          transition={{\n                            duration: 0.7,\n                            repeat: Infinity,\n                            repeatType: 'reverse',\n                          }}\n                          style={{\n                            top: '2px',\n                            left: '2px',\n                            width: '4px',\n                            height: '4px',\n                            boxShadow: '0 0 10px 2px rgba(255,255,255,0.7)',\n                          }}\n                        />\n                      </>\n                    )}\n                  </div>\n                </motion.div>\n              )}\n            </div>\n          </BrowserShell>\n        </motion.div>\n      )}\n\n      {/* Visual operation details card */}\n      <div className=\"bg-white dark:bg-gray-800 rounded-xl border border-gray-200/50 dark:border-gray-700/30 shadow-sm overflow-hidden\">\n        <div className=\"px-4 py-3 bg-gray-50/80 dark:bg-gray-800/80 border-b border-gray-100/50 dark:border-gray-700/30 flex items-center\">\n          <FiMousePointer className=\"text-gray-600 dark:text-gray-400 mr-2.5\" size={18} />\n          <div className=\"font-medium text-gray-700 dark:text-gray-300\">GUI Agent Operation</div>\n          {status && (\n            <div\n              className={`ml-auto text-xs font-medium px-2 py-0.5 rounded-full ${\n                status === 'success'\n                  ? 'bg-green-100/80 dark:bg-green-900/20 text-green-700 dark:text-green-400'\n                  : 'bg-red-100/80 dark:bg-red-900/20 text-red-700 dark:text-red-400'\n              }`}\n            >\n              {status === 'success' ? 'Success' : 'Failed'}\n            </div>\n          )}\n        </div>\n\n        <div className=\"p-4 space-y-3\">\n          {/* Thought process */}\n          {thought && (\n            <div className=\"space-y-1\">\n              <div className=\"flex items-center text-sm font-medium text-gray-700 dark:text-gray-300\">\n                <FiEye className=\"mr-2 text-accent-500/70 dark:text-accent-400/70\" size={14} />\n                Thought\n              </div>\n              <div className=\"text-sm text-gray-600 dark:text-gray-400 pl-6 border-l-2 border-accent-100 dark:border-accent-900/30\">\n                {thought}\n              </div>\n            </div>\n          )}\n\n          {/* Step */}\n          {step && (\n            <div className=\"space-y-1\">\n              <div className=\"flex items-center text-sm font-medium text-gray-700 dark:text-gray-300\">\n                <FiChevronsRight\n                  className=\"mr-2 text-primary-500/70 dark:text-primary-400/70\"\n                  size={14}\n                />\n                Action\n              </div>\n              <div className=\"text-sm text-gray-600 dark:text-gray-400 pl-6 border-l-2 border-primary-100 dark:border-primary-900/30\">\n                {step}\n              </div>\n            </div>\n          )}\n\n          {/* Action command */}\n          {action && (\n            <div className=\"space-y-1\">\n              <div className=\"flex items-center text-sm font-medium text-gray-700 dark:text-gray-300\">\n                <FiType className=\"mr-2 text-gray-500/70 dark:text-gray-400/70\" size={14} />\n                Action Command\n              </div>\n              <div className=\"bg-gray-50 dark:bg-gray-800/90 font-mono text-xs p-2 rounded-md border border-gray-100/50 dark:border-gray-700/30 overflow-x-auto\">\n                {action}\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { atom } from 'jotai';\nimport { v4 as uuidv4 } from 'uuid';\nimport { apiService } from '../../services/apiService';\nimport { sessionsAtom, activeSessionIdAtom } from '../atoms/session';\nimport { messagesAtom } from '../atoms/message';\nimport { toolResultsAtom, toolCallResultMap } from '../atoms/tool';\nimport { isProcessingAtom } from '../atoms/ui';\nimport { processEventAction } from './eventProcessor';\nimport { Message } from '../../types';\nimport { connectionStatusAtom } from '../atoms/ui'; // 假设 connectionStatusAtom 已经存在\nimport { replayStateAtom } from '../atoms/replay'; // 添加引入回放状态atom\nimport { ChatCompletionContentPart, AgentEventStream } from '@multimodal/agent-interface';\n\n/**\n * Load all available sessions\n */\nexport const loadSessionsAction = atom(null, async (get, set) => {\n  try {\n    const loadedSessions = await apiService.getSessions();\n    set(sessionsAtom, loadedSessions);\n  } catch (error) {\n    console.error('Failed to load sessions:', error);\n    throw error;\n  }\n});\n\n/**\n * Create a new session\n */\nexport const createSessionAction = atom(null, async (get, set) => {\n  try {\n    const newSession = await apiService.createSession();\n\n    // Add to sessions list\n    set(sessionsAtom, (prev) => [newSession, ...prev]);\n\n    // Initialize session data\n    set(messagesAtom, (prev) => ({\n      ...prev,\n      [newSession.id]: [],\n    }));\n\n    set(toolResultsAtom, (prev) => ({\n      ...prev,\n      [newSession.id]: [],\n    }));\n\n    // Set as active session\n    set(activeSessionIdAtom, newSession.id);\n\n    return newSession.id;\n  } catch (error) {\n    console.error('Failed to create session:', error);\n    throw error;\n  }\n});\n\n/**\n * Set the active session\n * 简化加载逻辑，移除恢复会话的复杂性\n */\nexport const setActiveSessionAction = atom(null, async (get, set, sessionId: string) => {\n  try {\n    // 检查是否已经是活动会话\n    const currentActiveSessionId = get(activeSessionIdAtom);\n    if (currentActiveSessionId === sessionId) {\n      console.log(`Session ${sessionId} is already active, skipping load`);\n      return;\n    }\n\n    // 检查回放状态并退出回放模式（除非是同一会话）\n    const replayState = get(replayStateAtom);\n    if (replayState.isActive) {\n      console.log('Exiting replay mode due to session change');\n      set(replayStateAtom, {\n        isActive: false,\n        isPaused: true,\n        events: [],\n        currentEventIndex: -1,\n        startTimestamp: null,\n        endTimestamp: null,\n        playbackSpeed: 1,\n        visibleTimeWindow: null,\n        processedEvents: {},\n      });\n    }\n\n    // 直接获取会话详情，不需要检查 active 状态\n    const sessionDetails = await apiService.getSessionDetails(sessionId);\n\n    // 获取当前会话状态以更新 isProcessing 状态\n    try {\n      const status = await apiService.getSessionStatus(sessionId);\n      set(isProcessingAtom, status.isProcessing);\n    } catch (error) {\n      console.warn('Failed to get session status:', error);\n      set(isProcessingAtom, false);\n    }\n\n    // 清理工具调用映射缓存\n    toolCallResultMap.clear();\n\n    // 只有在消息不存在时才加载会话事件\n    const messages = get(messagesAtom);\n    if (!messages[sessionId] || messages[sessionId].length === 0) {\n      console.log(`Loading events for session ${sessionId}`);\n      const events = await apiService.getSessionEvents(sessionId);\n\n      // 对流式事件进行预处理，确保正确的连续性\n      const processedEvents = preprocessStreamingEvents(events);\n\n      // 处理每个事件以构建消息和工具结果\n      for (const event of processedEvents) {\n        set(processEventAction, { sessionId, event });\n      }\n    } else {\n      console.log(`Session ${sessionId} already has messages, skipping event loading`);\n    }\n\n    // 设置为活动会话\n    set(activeSessionIdAtom, sessionId);\n  } catch (error) {\n    console.error('Failed to set active session:', error);\n    set(connectionStatusAtom, (prev) => ({\n      ...prev,\n      connected: false,\n      lastError: error instanceof Error ? error.message : String(error),\n    }));\n    throw error;\n  }\n});\n\n/**\n * Update session metadata\n */\nexport const updateSessionAction = atom(\n  null,\n  async (get, set, params: { sessionId: string; updates: { name?: string; tags?: string[] } }) => {\n    const { sessionId, updates } = params;\n\n    try {\n      const updatedSession = await apiService.updateSessionMetadata(sessionId, updates);\n\n      // Update session in the list\n      set(sessionsAtom, (prev) =>\n        prev.map((session) =>\n          session.id === sessionId ? { ...session, ...updatedSession } : session,\n        ),\n      );\n\n      return updatedSession;\n    } catch (error) {\n      console.error('Failed to update session:', error);\n      throw error;\n    }\n  },\n);\n\n/**\n * 预处理事件，确保流式事件按正确顺序处理\n */\nfunction preprocessStreamingEvents(events: AgentEventStream.Event[]): AgentEventStream.Event[] {\n  // 对流式消息进行整理\n  const messageStreams: Record<string, AgentEventStream.Event[]> = {};\n\n  // 收集所有流式事件，按messageId分组\n  events.forEach((event) => {\n    if (event.type === 'final_answer_streaming' && 'messageId' in event) {\n      const messageId = event.messageId as string;\n      if (!messageStreams[messageId]) {\n        messageStreams[messageId] = [];\n      }\n      messageStreams[messageId].push(event);\n    }\n  });\n\n  // 返回预处理后的事件，确保流式事件以正确顺序处理\n  return events;\n}\n\n/**\n * Delete a session\n */\nexport const deleteSessionAction = atom(null, async (get, set, sessionId: string) => {\n  try {\n    const success = await apiService.deleteSession(sessionId);\n    const activeSessionId = get(activeSessionIdAtom);\n\n    if (success) {\n      // Remove from sessions list\n      set(sessionsAtom, (prev) => prev.filter((session) => session.id !== sessionId));\n\n      // Clear active session if it was deleted\n      if (activeSessionId === sessionId) {\n        set(activeSessionIdAtom, null);\n      }\n\n      // Clear session data\n      set(messagesAtom, (prev) => {\n        const newMessages = { ...prev };\n        delete newMessages[sessionId];\n        return newMessages;\n      });\n\n      set(toolResultsAtom, (prev) => {\n        const newResults = { ...prev };\n        delete newResults[sessionId];\n        return newResults;\n      });\n    }\n\n    return success;\n  } catch (error) {\n    console.error('Failed to delete session:', error);\n    throw error;\n  }\n});\n\n/**\n * Send a message in the current session\n */\nexport const sendMessageAction = atom(\n  null,\n  async (get, set, content: string | ChatCompletionContentPart[]) => {\n    const activeSessionId = get(activeSessionIdAtom);\n\n    if (!activeSessionId) {\n      throw new Error('No active session');\n    }\n\n    // 明确设置处理状态\n    set(isProcessingAtom, true);\n\n    // 添加用户消息到状态\n    const userMessage: Message = {\n      id: uuidv4(),\n      role: 'user',\n      content,\n      timestamp: Date.now(),\n    };\n\n    set(messagesAtom, (prev) => {\n      const sessionMessages = prev[activeSessionId] || [];\n      return {\n        ...prev,\n        [activeSessionId]: [...sessionMessages, userMessage],\n      };\n    });\n\n    // 立即更新会话名称，使用用户查询作为 Summary\n    // 这样即使后续更新失败也至少有一个基本的名称\n    try {\n      // 检查是否是第一条消息，如果是则直接用查询内容作为会话名称\n      const messages = get(messagesAtom)[activeSessionId] || [];\n      if (messages.length <= 2) {\n        // 算上刚刚添加的用户消息\n        let summary = '';\n        if (typeof content === 'string') {\n          summary = content.length > 50 ? content.substring(0, 47) + '...' : content;\n        } else {\n          // 从多模态内容中提取文本部分\n          const textPart = content.find((part) => part.type === 'text');\n          if (textPart && 'text' in textPart) {\n            summary =\n              textPart.text.length > 50 ? textPart.text.substring(0, 47) + '...' : textPart.text;\n          } else {\n            summary = 'Image message';\n          }\n        }\n\n        await apiService.updateSessionMetadata(activeSessionId, { name: summary });\n\n        // 更新 sessions atom\n        set(sessionsAtom, (prev) =>\n          prev.map((session) =>\n            session.id === activeSessionId ? { ...session, name: summary } : session,\n          ),\n        );\n      }\n    } catch (error) {\n      console.log('Failed to update initial summary, continuing anyway:', error);\n      // 错误不中断主流程\n    }\n\n    try {\n      // 使用流式查询\n      await apiService.sendStreamingQuery(activeSessionId, content, (event) => {\n        // 处理每个事件\n        set(processEventAction, { sessionId: activeSessionId, event });\n\n        // 确保状态保持为处理中，直到明确收到结束事件\n        if (event.type !== 'agent_run_end' && event.type !== 'assistant_message') {\n          set(isProcessingAtom, true);\n        }\n      });\n    } catch (error) {\n      console.error('Error sending message:', error);\n      // 错误时重置处理状态\n      set(isProcessingAtom, false);\n      throw error;\n    }\n  },\n);\n\n/**\n * Abort the current running query\n */\nexport const abortQueryAction = atom(null, async (get, set) => {\n  const activeSessionId = get(activeSessionIdAtom);\n\n  if (!activeSessionId) {\n    return false;\n  }\n\n  try {\n    const success = await apiService.abortQuery(activeSessionId);\n\n    if (success) {\n      set(isProcessingAtom, false);\n\n      // Add system message about abort\n      const abortMessage: Message = {\n        id: uuidv4(),\n        role: 'system',\n        content: 'The operation was aborted.',\n        timestamp: Date.now(),\n      };\n\n      set(messagesAtom, (prev) => {\n        const sessionMessages = prev[activeSessionId] || [];\n        return {\n          ...prev,\n          [activeSessionId]: [...sessionMessages, abortMessage],\n        };\n      });\n    }\n\n    return success;\n  } catch (error) {\n    console.error('Error aborting query:', error);\n    return false;\n  }\n});\n\n/**\n * Check the current status of a session\n */\nexport const checkSessionStatusAction = atom(null, async (get, set, sessionId: string) => {\n  if (!sessionId) return;\n\n  try {\n    console.log(`Checking status for session: ${sessionId}`);\n    const status = await apiService.getSessionStatus(sessionId);\n\n    console.log(`Status for session ${sessionId}:`, status);\n\n    // 根据服务器响应更新处理状态\n    set(isProcessingAtom, status.isProcessing);\n\n    return status;\n  } catch (error) {\n    console.error('Failed to check session status:', error);\n    // 错误时不更新处理状态，避免误报\n  }\n});\n\n/**\n * Handle the end of a conversation\n * 仍然保留此函数，但减少其重要性，避免更新失败带来的影响\n */\nasync function handleConversationEnd(get: any, set: any, sessionId: string): Promise<void> {\n  // 我们不再依赖这个函数来设置会话名称，但仍然保留它作为备份机制\n  const allMessages = get(messagesAtom)[sessionId] || [];\n\n  // 只在有足够的消息并且会话没有名称时才尝试生成摘要\n  const sessions = get(sessionsAtom);\n  const currentSession = sessions.find((s) => s.id === sessionId);\n\n  // 如果会话已经有名称，则不需要再生成\n  if (currentSession && currentSession.name) {\n    return;\n  }\n\n  // 只在有实际对话时才尝试生成摘要\n  if (allMessages.length > 1) {\n    try {\n      // 转换消息为 API 期望的格式\n      const apiMessages = allMessages.map((msg: Message) => ({\n        role: msg.role,\n        content: typeof msg.content === 'string' ? msg.content : 'multimodal content',\n      }));\n\n      // 生成摘要\n      const summary = await apiService.generateSummary(sessionId, apiMessages);\n\n      if (summary) {\n        // 更新会话名称\n        await apiService.updateSessionMetadata(sessionId, { name: summary });\n\n        // 更新 sessions atom\n        set(sessionsAtom, (prev: any[]) =>\n          prev.map((session) =>\n            session.id === sessionId ? { ...session, name: summary } : session,\n          ),\n        );\n      }\n    } catch (error) {\n      console.error('Failed to generate or update summary, continuing anyway:', error);\n      // 错误不影响主流程\n    }\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAwWA;;AAtWA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAIA;AAEA;AAKA;AACA;;;;;;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;;;;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAaA;AAZA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AAGA;AAAA;AACA;AAAA;;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAAA;;;;;;;;;;;AAGA;AAAA;;AAEA;AACA;;;;;AAEA;AACA;;;;;;AAiBA;AAAA;AACA;AACA;AAAA;;;;;AAEA;;;;;;;;;;;;AAKA;;AACA;AAAA;AACA;;;;;;AAEA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;AAOA;AAAA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;AAIA;AAtZA;;AACA;AAEA;;;AAHA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACZA;AAEA;AACA;AACA;AACA;AAOA;;;;;;;;;;;;;;;;AAgBA;AACA;;AAIA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAAA;;AAGA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAIA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;;;;;;AACA;AAEA;AACA;;AAEA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAIA;AAAA;AACA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAIA;AAEA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;;;;;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AAKA;;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAaA;AAAA;;AACA;AAAA;;AACA;AAAA;AAAA;;;;;;AACA;AAAA;AAAA;;;;;;AACA;AAEA;AAMA;;;;;;;;;;;;AAKA;AAAA;;AAEA;AACA;;AACA;AAAA;;AACA;AAAA;AAAA;;;;;;AAAA;;;;;;;AAGA;AAAA;AACA;;;;;;;;;;;;AAMA;AACA;;AACA;AAAA;;AACA;AACA;AACA;;;;;;AACA;;;;;;;AAGA;AAAA;AACA;;;;;;;;;;;;AAMA;AACA;;AACA;AAAA;;AACA;AAAA;AAAA;;;;;;AAAA;;;;;;;AAGA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA;AApUA;;AAIA;;;AAJA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAIA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AAGA;;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AAEA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA"}