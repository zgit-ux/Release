{"version":3,"file":"index.72572045976a79d6.hot-update.js","sources":["/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/entry.css","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/sidebar/ChatSession.tsx"],"sourcesContent":["// extracted by css-extract-rspack-plugin\nexport {};\n    if(module.hot) {\n      (function() {\n        var localsJsonString = undefined;\n        // 1749668611480\n        var cssReload = require(\"../../node_modules/.pnpm/@rspack+core@1.3.9_@swc+helpers@0.5.17/node_modules/@rspack/core/dist/cssExtractHmr.js\").cssReload(module.id, {});\n        // only invalidate when locals change\n        if (\n          module.hot.data &&\n          module.hot.data.value &&\n          module.hot.data.value !== localsJsonString\n        ) {\n          module.hot.invalidate();\n        } else {\n          module.hot.accept();\n        }\n        module.hot.dispose(function(data) {\n          data.value = localsJsonString;\n          cssReload();\n        });\n      })();\n    }\n  ","import React, { useState, useMemo, useCallback, useRef } from 'react';\nimport { useSession } from '@/common/hooks/useSession';\nimport { useNavigate } from 'react-router-dom';\nimport { FiRefreshCw, FiWifiOff, FiChevronUp, FiChevronDown } from 'react-icons/fi';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport SessionItem from './SessionItem';\nimport { ConfirmDialog } from '@/sdk/dialog';\n\ninterface ChatSessionProps {\n  isCollapsed: boolean;\n}\n\n/**\n * ChatSession Component - Collapsible sidebar for session management\n */\nexport const ChatSession: React.FC<ChatSessionProps> = ({ isCollapsed }) => {\n  const {\n    sessions,\n    activeSessionId,\n    setActiveSession,\n    updateSessionMetadata,\n    deleteSession,\n    loadSessions,\n    connectionStatus,\n    checkServerStatus,\n  } = useSession();\n\n  const navigate = useNavigate();\n\n  const [editingSessionId, setEditingSessionId] = useState<string | null>(null);\n  const [editedName, setEditedName] = useState('');\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [loadingSessionId, setLoadingSessionId] = useState<string | null>(null);\n  const [collapsedSections, setCollapsedSections] = useState<Record<string, boolean>>({});\n  const [deleteConfirmOpen, setDeleteConfirmOpen] = useState(false);\n  const [sessionToDelete, setSessionToDelete] = useState<string | null>(null);\n\n  // 每个组显示的会话数量\n  const [visibleSessionsCount, setVisibleSessionsCount] = useState<Record<string, number>>({\n    today: 10,\n    yesterday: 10,\n    thisWeek: 10,\n    earlier: 10,\n  });\n\n  // 使用useRef减少过多的状态更新\n  const refreshingRef = useRef(false);\n  const sessionActionInProgressRef = useRef<string | null>(null);\n\n  // 切换折叠状态\n  const toggleSectionCollapse = useCallback((sectionKey: string) => {\n    setCollapsedSections((prev) => ({\n      ...prev,\n      [sectionKey]: !prev[sectionKey],\n    }));\n  }, []);\n\n  // 加载更多会话\n  const loadMoreSessions = useCallback((groupKey: string) => {\n    setVisibleSessionsCount((prev) => ({\n      ...prev,\n      [groupKey]: prev[groupKey] + 10,\n    }));\n  }, []);\n\n  // 优化分组计算，减少不必要的重计算\n  const groupedSessions = useMemo(() => {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n\n    const yesterday = new Date(today);\n    yesterday.setDate(yesterday.getDate() - 1);\n\n    const lastWeek = new Date(today);\n    lastWeek.setDate(lastWeek.getDate() - 7);\n\n    // 初始化组\n    const groups: Array<{ label: string; sessions: Array<any>; key: string }> = [\n      { label: 'Today', sessions: [], key: 'today' },\n      { label: 'Yesterday', sessions: [], key: 'yesterday' },\n      { label: 'This Week', sessions: [], key: 'thisWeek' },\n      { label: 'Earlier', sessions: [], key: 'earlier' },\n    ];\n\n    // 使用循环一次性完成分类，避免多次迭代\n    sessions.forEach((session) => {\n      const sessionDate = new Date(session.updatedAt || session.createdAt);\n\n      if (sessionDate >= today) {\n        groups[0].sessions.push(session);\n      } else if (sessionDate >= yesterday) {\n        groups[1].sessions.push(session);\n      } else if (sessionDate >= lastWeek) {\n        groups[2].sessions.push(session);\n      } else {\n        groups[3].sessions.push(session);\n      }\n    });\n\n    // 优化：预先过滤空组，避免渲染循环中的条件检查\n    return groups.filter((group) => group.sessions.length > 0);\n  }, [sessions]);\n\n  // 优化的 session 点击处理函数\n  const handleSessionClick = useCallback(\n    (sessionId: string) => {\n      if (\n        sessionActionInProgressRef.current === sessionId ||\n        !connectionStatus.connected ||\n        loadingSessionId\n      ) {\n        return;\n      }\n\n      // 使用防抖避免快速点击\n      sessionActionInProgressRef.current = sessionId;\n      setLoadingSessionId(sessionId);\n\n      // 使用 requestAnimationFrame 推迟导航操作到下一帧，减少布局抖动\n      requestAnimationFrame(() => {\n        navigate(`/${sessionId}`);\n\n        // 给状态变更一些时间来完成\n        setTimeout(() => {\n          setLoadingSessionId(null);\n          sessionActionInProgressRef.current = null;\n        }, 100);\n      });\n    },\n    [connectionStatus.connected, loadingSessionId, navigate],\n  );\n\n  // 优化的刷新会话函数\n  const refreshSessions = useCallback(async () => {\n    if (refreshingRef.current) return;\n\n    refreshingRef.current = true;\n    setIsRefreshing(true);\n\n    try {\n      // 使用 Promise.all 优化并行请求\n      const [isConnected] = await Promise.all([checkServerStatus()]);\n\n      if (isConnected) {\n        await loadSessions();\n      }\n    } catch (error) {\n      console.error('Failed to refresh sessions:', error);\n    } finally {\n      setIsRefreshing(false);\n      refreshingRef.current = false;\n    }\n  }, [checkServerStatus, loadSessions]);\n\n  // 优化的事件处理函数\n  const handleEditSession = useCallback((sessionId: string, currentName?: string) => {\n    setEditingSessionId(sessionId);\n    setEditedName(currentName || '');\n  }, []);\n\n  const handleSaveEdit = useCallback(\n    async (sessionId: string) => {\n      try {\n        await updateSessionMetadata({ sessionId, updates: { name: editedName } });\n        setEditingSessionId(null);\n      } catch (error) {\n        console.error('Failed to update session name:', error);\n      }\n    },\n    [updateSessionMetadata, editedName],\n  );\n\n  const handleDeleteSession = useCallback(async (sessionId: string, e: React.MouseEvent) => {\n    e.stopPropagation();\n    setSessionToDelete(sessionId);\n    setDeleteConfirmOpen(true);\n  }, []);\n\n  const confirmDeleteSession = useCallback(async () => {\n    if (!sessionToDelete) return;\n\n    try {\n      // 在删除之前找到下一个可用的会话\n      if (sessionToDelete === activeSessionId && sessions.length > 1) {\n        // 找到不是要删除的会话的最近会话\n        const nextSession = sessions.find((s) => s.id !== sessionToDelete);\n        if (nextSession) {\n          // 先导航到新会话\n          navigate(`/${nextSession.id}`);\n\n          // 给导航一点时间完成\n          await new Promise((resolve) => setTimeout(resolve, 50));\n        }\n      }\n\n      // 然后删除会话\n      await deleteSession(sessionToDelete);\n    } catch (error) {\n      console.error('Failed to delete session:', error);\n    } finally {\n      setDeleteConfirmOpen(false);\n      setSessionToDelete(null);\n    }\n  }, [deleteSession, sessionToDelete, sessions, activeSessionId, navigate]);\n\n  // 如果折叠，返回最小侧边栏\n  if (isCollapsed) {\n    return (\n      <div className=\"flex flex-col h-full bg-transparent w-0 border-r border-gray-100/40 dark:border-gray-700/20\" />\n    );\n  }\n\n  return (\n    <div className=\"w-64 flex flex-col h-full duration-200 backdrop-blur-sm border-r border-gray-100/40 dark:border-gray-700/20\">\n      {/* Header */}\n      <div className=\"p-4 flex items-center justify-between border-b border-gray-100/40 dark:border-gray-700/20\">\n        <div className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Recent Tasks</div>\n        <div className=\"flex items-center gap-2\">\n          {/* 连接状态指示器 */}\n          <div\n            className={`h-2 w-2 rounded-full ${\n              connectionStatus.connected\n                ? 'bg-green-500 animate-pulse'\n                : connectionStatus.reconnecting\n                  ? 'bg-yellow-500 animate-ping'\n                  : 'bg-gray-400'\n            }`}\n            title={\n              connectionStatus.connected\n                ? 'Connected to server'\n                : connectionStatus.reconnecting\n                  ? 'Reconnecting...'\n                  : 'Disconnected from server'\n            }\n          />\n\n          <motion.button\n            whileHover={{ rotate: 180 }}\n            transition={{ duration: 0.3 }}\n            onClick={refreshSessions}\n            disabled={isRefreshing || !connectionStatus.connected}\n            className={`text-gray-500 hover:text-gray-700 dark:hover:text-gray-300 p-1 rounded-full hover:bg-gray-100/40 dark:hover:bg-gray-800/40 text-xs transition-all ${\n              !connectionStatus.connected && 'opacity-50 cursor-not-allowed'\n            }`}\n            title={connectionStatus.connected ? 'Refresh tasks' : 'Server disconnected'}\n          >\n            <FiRefreshCw className={isRefreshing ? 'animate-spin' : ''} size={12} />\n          </motion.button>\n        </div>\n      </div>\n\n      {/* 离线模式提示 */}\n      {!connectionStatus.connected && sessions.length > 0 && (\n        <div className=\"px-3 py-2\">\n          <div className=\"p-3 rounded-xl bg-red-50/30 dark:bg-red-900/15 text-gray-700 dark:text-gray-300 text-sm border border-red-200/50 dark:border-red-800/30 shadow-sm\">\n            <div className=\"flex items-center\">\n              <FiWifiOff className=\"mr-2 flex-shrink-0 text-red-500 dark:text-red-400\" />\n              <div className=\"font-medium text-red-700 dark:text-red-400\">Offline Mode</div>\n            </div>\n            <p className=\"mt-1 text-xs\">\n              You can view tasks but can't create new ones until reconnected.\n            </p>\n            <motion.button\n              whileHover={{ scale: 1.02 }}\n              whileTap={{ scale: 0.98 }}\n              onClick={() => checkServerStatus()}\n              className=\"w-full mt-2 py-1.5 px-3 bg-red-100/70 dark:bg-red-800/30 hover:bg-red-200/70 dark:hover:bg-red-700/40 rounded-xl text-xs font-medium transition-colors flex items-center justify-center border border-red-200/30 dark:border-red-700/30 text-red-700 dark:text-red-300\"\n            >\n              <FiRefreshCw\n                className={`mr-1.5 ${connectionStatus.reconnecting ? 'animate-spin' : ''}`}\n                size={12}\n              />\n              {connectionStatus.reconnecting ? 'Reconnecting...' : 'Reconnect to Server'}\n            </motion.button>\n          </div>\n        </div>\n      )}\n\n      {/* 会话列表 - 优化渲染 */}\n      <div className=\"flex-1 overflow-y-auto sidebar-scrollbar p-3\">\n        <AnimatePresence>\n          {groupedSessions.map((group) => (\n            <div key={group.key} className=\"mb-4\">\n              {/* 组标题和切换按钮 */}\n              <motion.button\n                onClick={() => toggleSectionCollapse(group.key)}\n                className=\"w-full flex items-center justify-between px-1 py-2 text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider hover:text-gray-700 dark:hover:text-gray-300\"\n                whileHover={{ x: 2 }}\n              >\n                <span>\n                  {group.label} ({group.sessions.length})\n                </span>\n                <motion.div\n                  animate={{ rotate: collapsedSections[group.key] ? 0 : 180 }}\n                  transition={{ duration: 0.2 }}\n                >\n                  <FiChevronUp size={14} />\n                </motion.div>\n              </motion.button>\n\n              {/* 该组中的会话 - 避免不必要的渲染 */}\n              <AnimatePresence>\n                {!collapsedSections[group.key] && (\n                  <motion.div\n                    initial={{ height: 0, opacity: 0 }}\n                    animate={{ height: 'auto', opacity: 1 }}\n                    exit={{ height: 0, opacity: 0 }}\n                    transition={{ duration: 0.3 }}\n                    className=\"overflow-hidden\"\n                  >\n                    <div className=\"space-y-1\">\n                      {group.sessions\n                        .slice(0, visibleSessionsCount[group.key] || 10)\n                        .map((session) => (\n                          <SessionItem\n                            key={session.id}\n                            session={session}\n                            isActive={activeSessionId === session.id}\n                            isLoading={loadingSessionId === session.id}\n                            isConnected={connectionStatus.connected}\n                            onSessionClick={handleSessionClick}\n                            onEditSession={handleEditSession}\n                            onDeleteSession={handleDeleteSession}\n                            onSaveEdit={handleSaveEdit}\n                            editingSessionId={editingSessionId}\n                            editedName={editedName}\n                            setEditedName={setEditedName}\n                          />\n                        ))}\n                    </div>\n\n                    {/* 如果有更多会话未显示，显示\"加载更多\"按钮 */}\n                    {group.sessions.length > visibleSessionsCount[group.key] && (\n                      <motion.button\n                        initial={{ opacity: 0 }}\n                        animate={{ opacity: 1 }}\n                        onClick={() => loadMoreSessions(group.key)}\n                        className=\"w-full mt-2 py-2 text-xs text-accent-600 dark:text-accent-400 hover:bg-gray-100/50 dark:hover:bg-gray-800/50 rounded-lg flex items-center justify-center\"\n                      >\n                        <FiChevronDown className=\"mr-1\" size={14} />\n                        Load More ({group.sessions.length - visibleSessionsCount[group.key]}{' '}\n                        remaining)\n                      </motion.button>\n                    )}\n                  </motion.div>\n                )}\n              </AnimatePresence>\n            </div>\n          ))}\n        </AnimatePresence>\n      </div>\n\n      {/* 确认对话框 */}\n      <ConfirmDialog\n        isOpen={deleteConfirmOpen}\n        onClose={() => setDeleteConfirmOpen(false)}\n        onConfirm={confirmDeleteSession}\n        title=\"Delete Task\"\n        message=\"Are you sure you want to delete this task? This action cannot be undone.\"\n        confirmText=\"Delete\"\n        cancelText=\"Cancel\"\n        type=\"danger\"\n      />\n    </div>\n  );\n};\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;;AAEA;AACA;;AACA;AAWA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AAKA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;;;;;;AAEA;AAEA;AACA;;AAEA;AAAA;;AACA;AAAA;AAAA;;;;;;AACA;AAAA;;AAEA;AACA;AAOA;;;;;;AASA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AAEA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;AAMA;AACA;AACA;AAAA;;AACA;AAAA;;AACA;AAAA;;;;;;AACA;AAAA;AAAA;;;;;;;;;;;;AAEA;AAAA;AAAA;;;;;;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;;AAEA;AACA;AACA;;;;;;AAEA;;;;;;;;;;;;;;;;;;AAOA;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AAAA;;AAEA;;AACA;AAAA;AAAA;AAAA;;;;;;;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;;;;;;;;;;;;;;;;;AAKA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AAEA;AAAA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;;;;;;;;;;AAiBA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;;AAEA;AAAA;AAAA;;;;;;AAAA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;AA1DA;;;;;;;;;;;;;;;AAuEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AAIA;AA9VA;;AAUA;AAEA;;;AAZA"}