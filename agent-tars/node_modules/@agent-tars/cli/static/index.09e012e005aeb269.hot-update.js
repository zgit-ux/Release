self["webpackHotUpdate_agent_tars_web_ui"]("index", {
"./src/entry.css": (function (module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by css-extract-rspack-plugin

    if(true) {
      (function() {
        var localsJsonString = undefined;
        // 1749591100380
        var cssReload = (__webpack_require__("../node_modules/.pnpm/@rspack+core@1.3.9_@swc+helpers@0.5.17/node_modules/@rspack/core/dist/cssExtractHmr.js")/* .cssReload */.cssReload)(module.id, {});
        // only invalidate when locals change
        if (
          module.hot.data &&
          module.hot.data.value &&
          module.hot.data.value !== localsJsonString
        ) {
          module.hot.invalidate();
        } else {
          module.hot.accept();
        }
        module.hot.dispose(function(data) {
          data.value = localsJsonString;
          cssReload();
        });
      })();
    }
  

}),
"./src/v2/components/Chat/ChatPanel.tsx": (function (module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  ChatPanel: () => (ChatPanel)
});
/* ESM import */var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/react@18.3.1/node_modules/react/jsx-dev-runtime.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../node_modules/.pnpm/react@18.3.1/node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* ESM import */var _hooks_useSession__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/v2/hooks/useSession.ts");
/* ESM import */var _Message_components_MessageGroup__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/v2/components/Chat/Message/components/MessageGroup.tsx");
/* ESM import */var _MessageInput__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/v2/components/Chat/MessageInput.tsx");
/* ESM import */var react_icons_fi__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__("../node_modules/.pnpm/react-icons@4.12.0_react@18.3.1/node_modules/react-icons/fi/index.esm.js");
/* ESM import */var framer_motion__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__("../node_modules/.pnpm/framer-motion@10.18.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/render/dom/motion.mjs");
/* ESM import */var framer_motion__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__("../node_modules/.pnpm/framer-motion@10.18.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/components/AnimatePresence/index.mjs");
/* ESM import */var jotai__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__("../node_modules/.pnpm/jotai@2.12.5_@types+react@18.3.23_react@18.3.1/node_modules/jotai/esm/react.mjs");
/* ESM import */var _state_atoms_ui__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./src/v2/state/atoms/ui.ts");
/* ESM import */var _state_atoms_message__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./src/v2/state/atoms/message.ts");
/* ESM import */var _state_atoms_message__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_state_atoms_message__WEBPACK_IMPORTED_MODULE_6__);
/* ESM import */var _hooks_useReplay__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("./src/v2/hooks/useReplay.ts");
/* ESM import */var _state_atoms_replay__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("./src/v2/state/atoms/replay.ts");
/* ESM import */var _hooks_usePro__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__("./src/v2/hooks/usePro.ts");
/* ESM import */var _context_ReplayModeContext__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__("./src/v2/context/ReplayModeContext.tsx");
/* ESM import */var _ChatPanel_css__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__("./src/v2/components/Chat/ChatPanel.css");
/* ESM import */var _ResearchReportEntry__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__("./src/v2/components/Chat/ResearchReportEntry.tsx");
/* ESM import */var react_router_dom__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__("../node_modules/.pnpm/react-router@7.6.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/react-router/dist/development/chunk-DQRVZFIR.mjs");
/* provided dependency */ var $ReactRefreshRuntime$ = __webpack_require__("../node_modules/.pnpm/@rspack+plugin-react-refresh@1.0.3_react-refresh@0.16.0/node_modules/@rspack/plugin-react-refresh/client/reactRefresh.js");

var _s = $RefreshSig$();
















/**
 * ChatPanel Component - Main chat interface
 *
 * Design principles:
 * - Clean, distraction-free message display area with ample whitespace
 * - Elegant loading indicators and status messages with subtle animations
 * - Visually distinct message bubbles with refined spacing
 * - Clear visual hierarchy through typography and subtle borders
 */ const ChatPanel = ()=>{
    _s();
    const { activeSessionId, isProcessing, connectionStatus, checkServerStatus } = (0,_hooks_useSession__WEBPACK_IMPORTED_MODULE_2__.useSession)();
    const groupedMessages = (0,jotai__WEBPACK_IMPORTED_MODULE_13__.useAtomValue)(_state_atoms_message__WEBPACK_IMPORTED_MODULE_6__.groupedMessagesAtom);
    const allMessages = (0,jotai__WEBPACK_IMPORTED_MODULE_13__.useAtomValue)(_state_atoms_message__WEBPACK_IMPORTED_MODULE_6__.messagesAtom);
    // 添加性能监控
    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{
        const startTime = performance.now();
        return ()=>{
            const endTime = performance.now();
            if (endTime - startTime > 100) {
                console.warn(`[ChatPanel] Render took ${endTime - startTime}ms`);
            }
        };
    }, [
        groupedMessages
    ]);
    const [offlineMode, setOfflineMode] = (0,jotai__WEBPACK_IMPORTED_MODULE_13__.useAtom)(_state_atoms_ui__WEBPACK_IMPORTED_MODULE_5__.offlineModeAtom);
    const [replayState] = (0,jotai__WEBPACK_IMPORTED_MODULE_13__.useAtom)(_state_atoms_replay__WEBPACK_IMPORTED_MODULE_8__.replayStateAtom);
    const isReplayMode = (0,_context_ReplayModeContext__WEBPACK_IMPORTED_MODULE_10__.useReplayMode)();
    const { cancelAutoPlay } = (0,_hooks_useReplay__WEBPACK_IMPORTED_MODULE_7__.useReplay)();
    const messagesEndRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);
    const messagesContainerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);
    const [showScrollButton, setShowScrollButton] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);
    const location = (0,react_router_dom__WEBPACK_IMPORTED_MODULE_14__.useLocation)();
    const isProMode = (0,_hooks_usePro__WEBPACK_IMPORTED_MODULE_9__.usePro)();
    // 使用当前会话的消息 - 这样与正常渲染保持一致
    // 回放模式下会通过 processEvent 来更新这些消息
    const activeMessages = activeSessionId ? groupedMessages[activeSessionId] || [] : [];
    // 检查滚动位置以确定是否显示滚动按钮
    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{
        const checkScroll = ()=>{
            const container = messagesContainerRef.current;
            if (!container) return;
            const { scrollTop, scrollHeight, clientHeight } = container;
            const atBottom = Math.abs(scrollHeight - scrollTop - clientHeight) < 10;
            setShowScrollButton(!atBottom);
        };
        const container = messagesContainerRef.current;
        if (container) {
            container.addEventListener('scroll', checkScroll);
            return ()=>container.removeEventListener('scroll', checkScroll);
        }
    }, []);
    // Auto-scroll when new messages arrive
    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{
        if (messagesEndRef.current && messagesContainerRef.current) {
            var _activeMessages__messages_;
            const container = messagesContainerRef.current;
            // Check if user is already at bottom
            const { scrollTop, scrollHeight, clientHeight } = container;
            const isAtBottom = Math.abs(scrollHeight - scrollTop - clientHeight) < 30;
            // Auto-scroll if at bottom or if new user message
            if (isAtBottom || activeMessages.length > 0 && ((_activeMessages__messages_ = activeMessages[activeMessages.length - 1].messages[0]) === null || _activeMessages__messages_ === void 0 ? void 0 : _activeMessages__messages_.role) === 'user') {
                setTimeout(()=>{
                    container.scrollTo({
                        top: container.scrollHeight,
                        behavior: 'smooth'
                    });
                }, 100);
            }
        }
    }, [
        activeMessages
    ]);
    const scrollToBottom = ()=>{
        if (messagesEndRef.current && messagesContainerRef.current) {
            messagesContainerRef.current.scrollTo({
                top: messagesContainerRef.current.scrollHeight,
                behavior: 'smooth'
            });
        }
    };
    // Animation variants
    const containerVariants = {
        hidden: {
            opacity: 0
        },
        visible: {
            opacity: 1,
            transition: {
                duration: 0.4,
                staggerChildren: 0.1
            }
        }
    };
    const itemVariants = {
        hidden: {
            opacity: 0,
            y: 20
        },
        visible: {
            opacity: 1,
            y: 0,
            transition: {
                duration: 0.4
            }
        }
    };
    // Add loading indicator component with improved visibility
    const renderLoadingIndicator = ()=>{
        if (!isProcessing) return null;
        // Determine if there are already messages to show a different style
        const hasMessages = activeSessionId && activeMessages.length > 0;
        if (!hasMessages) return null;
        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_15__.motion.div, {
            initial: {
                opacity: 0,
                y: 10
            },
            animate: {
                opacity: 1,
                y: 0
            },
            className: "flex items-center gap-2 p-3 bg-white dark:bg-gray-800 rounded-3xl mb-4 border border-gray-100/40 dark:border-gray-700/20",
            children: [
                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                    className: "w-6 h-6 rounded-full bg-gray-100 dark:bg-gray-800 border border-gray-200/40 dark:border-gray-700/20 flex items-center justify-center",
                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                        className: "w-3 h-3 rounded-full bg-accent-500 animate-pulse"
                    }, void 0, false, {
                        fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/ChatPanel.tsx",
                        lineNumber: 159,
                        columnNumber: 11
                    }, undefined)
                }, void 0, false, {
                    fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/ChatPanel.tsx",
                    lineNumber: 158,
                    columnNumber: 9
                }, undefined),
                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("span", {
                    className: "text-sm text-gray-600 dark:text-gray-300",
                    children: "Agent TARS is thinking..."
                }, void 0, false, {
                    fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/ChatPanel.tsx",
                    lineNumber: 161,
                    columnNumber: 9
                }, undefined)
            ]
        }, void 0, true, {
            fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/ChatPanel.tsx",
            lineNumber: 153,
            columnNumber: 7
        }, undefined);
    };
    const renderOfflineBanner = ()=>{
        if (connectionStatus.connected || !activeSessionId || isReplayMode) return null;
        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_15__.motion.div, {
            initial: {
                opacity: 0,
                y: -10
            },
            animate: {
                opacity: 1,
                y: 0
            },
            className: "mb-4 px-4 py-3 bg-red-50/30 dark:bg-red-900/15 text-red-700 dark:text-red-300 text-sm rounded-xl",
            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                className: "flex items-center justify-between",
                children: [
                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                        children: [
                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                                className: "font-medium flex items-center",
                                children: [
                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_icons_fi__WEBPACK_IMPORTED_MODULE_16__.FiWifiOff, {
                                        className: "mr-2 text-red-500 dark:text-red-400"
                                    }, void 0, false, {
                                        fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/ChatPanel.tsx",
                                        lineNumber: 178,
                                        columnNumber: 15
                                    }, undefined),
                                    "Viewing in offline mode"
                                ]
                            }, void 0, true, {
                                fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/ChatPanel.tsx",
                                lineNumber: 177,
                                columnNumber: 13
                            }, undefined),
                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                                className: "text-sm mt-1",
                                children: "You can view previous messages but cannot send new ones until reconnected."
                            }, void 0, false, {
                                fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/ChatPanel.tsx",
                                lineNumber: 181,
                                columnNumber: 13
                            }, undefined)
                        ]
                    }, void 0, true, {
                        fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/ChatPanel.tsx",
                        lineNumber: 176,
                        columnNumber: 11
                    }, undefined),
                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_15__.motion.button, {
                        whileHover: {
                            scale: 1.05
                        },
                        whileTap: {
                            scale: 0.95
                        },
                        onClick: ()=>checkServerStatus(),
                        className: "ml-3 px-3 py-1.5 bg-red-100/70 dark:bg-red-800/30 hover:bg-red-200/70 dark:hover:bg-red-700/40 rounded-2xl text-sm font-medium transition-colors flex items-center border border-red-200/30 dark:border-red-700/30",
                        children: [
                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_icons_fi__WEBPACK_IMPORTED_MODULE_16__.FiRefreshCw, {
                                className: `mr-1.5 ${connectionStatus.reconnecting ? 'animate-spin' : ''}`,
                                size: 14
                            }, void 0, false, {
                                fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/ChatPanel.tsx",
                                lineNumber: 191,
                                columnNumber: 13
                            }, undefined),
                            connectionStatus.reconnecting ? 'Reconnecting...' : 'Reconnect'
                        ]
                    }, void 0, true, {
                        fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/ChatPanel.tsx",
                        lineNumber: 185,
                        columnNumber: 11
                    }, undefined)
                ]
            }, void 0, true, {
                fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/ChatPanel.tsx",
                lineNumber: 175,
                columnNumber: 9
            }, undefined)
        }, void 0, false, {
            fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/ChatPanel.tsx",
            lineNumber: 170,
            columnNumber: 7
        }, undefined);
    };
    // 新增：查找会话中的研究报告
    const findResearchReport = ()=>{
        if (!activeSessionId || !allMessages[activeSessionId]) return null;
        const sessionMessages = allMessages[activeSessionId];
        // 查找类型为 final_answer 且 isDeepResearch 为 true 的最后一条消息
        const reportMessage = [
            ...sessionMessages
        ].reverse().find((msg)=>(msg.role === 'final_answer' || msg.role === 'assistant') && msg.isDeepResearch === true && msg.title);
        return reportMessage;
    };
    const researchReport = findResearchReport();
    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
        className: "flex flex-col h-full",
        children: !activeSessionId ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_15__.motion.div, {
            initial: "hidden",
            animate: "visible",
            variants: containerVariants,
            className: "flex items-center justify-center flex-1",
            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                className: "text-center p-6 max-w-md",
                children: [
                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_15__.motion.div, {
                        variants: itemVariants,
                        className: "w-16 h-16 bg-white dark:bg-gray-800 rounded-2xl flex items-center justify-center mx-auto mb-6 text-gray-500 dark:text-gray-400 border border-gray-100/50 dark:border-gray-700/20",
                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_icons_fi__WEBPACK_IMPORTED_MODULE_16__.FiMessageSquare, {
                            size: 24
                        }, void 0, false, {
                            fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/ChatPanel.tsx",
                            lineNumber: 236,
                            columnNumber: 15
                        }, undefined)
                    }, void 0, false, {
                        fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/ChatPanel.tsx",
                        lineNumber: 232,
                        columnNumber: 13
                    }, undefined),
                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_15__.motion.h2, {
                        variants: itemVariants,
                        className: "text-xl font-display font-bold mb-3 text-gray-800 dark:text-gray-200",
                        children: "Welcome to Agent TARS"
                    }, void 0, false, {
                        fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/ChatPanel.tsx",
                        lineNumber: 238,
                        columnNumber: 13
                    }, undefined),
                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_15__.motion.p, {
                        variants: itemVariants,
                        className: "text-gray-600 dark:text-gray-400 mb-5 text-sm leading-relaxed",
                        children: "Create a new chat session to get started with the AI assistant."
                    }, void 0, false, {
                        fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/ChatPanel.tsx",
                        lineNumber: 244,
                        columnNumber: 13
                    }, undefined),
                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_15__.motion.div, {
                        variants: itemVariants,
                        whileHover: {
                            y: -2
                        },
                        className: "flex items-center p-4 bg-white dark:bg-gray-800 rounded-2xl mb-3 text-gray-600 dark:text-gray-400 text-sm border border-gray-100/40 dark:border-gray-700/20",
                        children: [
                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_icons_fi__WEBPACK_IMPORTED_MODULE_16__.FiInfo, {
                                className: "mr-3 text-gray-400 flex-shrink-0"
                            }, void 0, false, {
                                fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/ChatPanel.tsx",
                                lineNumber: 255,
                                columnNumber: 15
                            }, undefined),
                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("span", {
                                children: "TARS can help with tasks involving web search, browsing, and file operations."
                            }, void 0, false, {
                                fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/ChatPanel.tsx",
                                lineNumber: 256,
                                columnNumber: 15
                            }, undefined)
                        ]
                    }, void 0, true, {
                        fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/ChatPanel.tsx",
                        lineNumber: 250,
                        columnNumber: 13
                    }, undefined)
                ]
            }, void 0, true, {
                fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/ChatPanel.tsx",
                lineNumber: 231,
                columnNumber: 11
            }, undefined)
        }, void 0, false, {
            fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/ChatPanel.tsx",
            lineNumber: 225,
            columnNumber: 9
        }, undefined) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {
            children: [
                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                    ref: messagesContainerRef,
                    className: "flex-1 overflow-y-auto px-5 py-5 overflow-x-hidden min-h-0 chat-scrollbar relative",
                    children: [
                        renderOfflineBanner(),
                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_17__.AnimatePresence, {
                            children: !connectionStatus.connected && !activeSessionId && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_15__.motion.div, {
                                initial: {
                                    opacity: 0,
                                    y: -10
                                },
                                animate: {
                                    opacity: 1,
                                    y: 0
                                },
                                exit: {
                                    opacity: 0,
                                    y: -10
                                },
                                className: "mb-4 px-4 py-3 bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 text-sm rounded-3xl border border-gray-100/40 dark:border-gray-700/20",
                                children: [
                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                                        className: "font-medium",
                                        children: "Server disconnected"
                                    }, void 0, false, {
                                        fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/ChatPanel.tsx",
                                        lineNumber: 278,
                                        columnNumber: 19
                                    }, undefined),
                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                                        className: "text-sm mt-1",
                                        children: connectionStatus.reconnecting ? 'Attempting to reconnect...' : 'Please check your connection and try again.'
                                    }, void 0, false, {
                                        fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/ChatPanel.tsx",
                                        lineNumber: 279,
                                        columnNumber: 19
                                    }, undefined)
                                ]
                            }, void 0, true, {
                                fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/ChatPanel.tsx",
                                lineNumber: 272,
                                columnNumber: 17
                            }, undefined)
                        }, void 0, false, {
                            fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/ChatPanel.tsx",
                            lineNumber: 270,
                            columnNumber: 13
                        }, undefined),
                        activeMessages.length === 0 ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_15__.motion.div, {
                            initial: {
                                opacity: 0
                            },
                            animate: {
                                opacity: 1
                            },
                            transition: {
                                duration: 0.3
                            },
                            className: "flex items-center justify-center h-full",
                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                                className: "text-center p-6 max-w-md",
                                children: [
                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("h3", {
                                        className: "text-lg font-display font-medium mb-2",
                                        children: replayState.isActive ? 'Replay starting...' : 'Start a conversation'
                                    }, void 0, false, {
                                        fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/ChatPanel.tsx",
                                        lineNumber: 297,
                                        columnNumber: 19
                                    }, undefined),
                                    replayState.isActive && replayState.autoPlayCountdown !== null ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                                        className: "mt-2",
                                        children: [
                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("p", {
                                                className: "text-gray-600 dark:text-gray-400 text-sm mb-2",
                                                children: [
                                                    "Auto-play in ",
                                                    replayState.autoPlayCountdown,
                                                    " seconds..."
                                                ]
                                            }, void 0, true, {
                                                fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/ChatPanel.tsx",
                                                lineNumber: 302,
                                                columnNumber: 23
                                            }, undefined),
                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_15__.motion.button, {
                                                whileHover: {
                                                    scale: 1.05
                                                },
                                                whileTap: {
                                                    scale: 0.95
                                                },
                                                onClick: cancelAutoPlay,
                                                className: "px-3 py-1.5 text-xs bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-lg border border-gray-200/50 dark:border-gray-700/30 flex items-center mx-auto",
                                                children: [
                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_icons_fi__WEBPACK_IMPORTED_MODULE_16__.FiX, {
                                                        size: 12,
                                                        className: "mr-1.5"
                                                    }, void 0, false, {
                                                        fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/ChatPanel.tsx",
                                                        lineNumber: 311,
                                                        columnNumber: 25
                                                    }, undefined),
                                                    "Cancel auto-play"
                                                ]
                                            }, void 0, true, {
                                                fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/ChatPanel.tsx",
                                                lineNumber: 305,
                                                columnNumber: 23
                                            }, undefined)
                                        ]
                                    }, void 0, true, {
                                        fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/ChatPanel.tsx",
                                        lineNumber: 301,
                                        columnNumber: 21
                                    }, undefined) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("p", {
                                        className: "text-gray-600 dark:text-gray-400 text-sm",
                                        children: replayState.isActive ? 'Please wait while the replay loads or press play to begin' : 'Ask Agent TARS a question or provide a command to begin.'
                                    }, void 0, false, {
                                        fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/ChatPanel.tsx",
                                        lineNumber: 316,
                                        columnNumber: 21
                                    }, undefined)
                                ]
                            }, void 0, true, {
                                fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/ChatPanel.tsx",
                                lineNumber: 296,
                                columnNumber: 17
                            }, undefined)
                        }, void 0, false, {
                            fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/ChatPanel.tsx",
                            lineNumber: 290,
                            columnNumber: 15
                        }, undefined) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                            className: "space-y-6 pb-2",
                            children: activeMessages.map((group, index)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_Message_components_MessageGroup__WEBPACK_IMPORTED_MODULE_3__.MessageGroup, {
                                    messages: group.messages,
                                    isThinking: isProcessing && !replayState.isActive && index === activeMessages.length - 1
                                }, `group-${index}-${group.messages[0].id}`, false, {
                                    fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/ChatPanel.tsx",
                                    lineNumber: 327,
                                    columnNumber: 19
                                }, undefined))
                        }, void 0, false, {
                            fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/ChatPanel.tsx",
                            lineNumber: 325,
                            columnNumber: 15
                        }, undefined),
                        renderLoadingIndicator(),
                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                            ref: messagesEndRef
                        }, void 0, false, {
                            fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/ChatPanel.tsx",
                            lineNumber: 341,
                            columnNumber: 13
                        }, undefined)
                    ]
                }, void 0, true, {
                    fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/ChatPanel.tsx",
                    lineNumber: 264,
                    columnNumber: 11
                }, undefined),
                !isReplayMode && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                    className: "p-4",
                    children: [
                        researchReport && !isProcessing && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                            className: "mb-4",
                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_ResearchReportEntry__WEBPACK_IMPORTED_MODULE_12__.ResearchReportEntry, {
                                title: researchReport.title || 'Research Report',
                                timestamp: researchReport.timestamp,
                                content: typeof researchReport.content === 'string' ? researchReport.content : ''
                            }, void 0, false, {
                                fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/ChatPanel.tsx",
                                lineNumber: 350,
                                columnNumber: 19
                            }, undefined)
                        }, void 0, false, {
                            fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/ChatPanel.tsx",
                            lineNumber: 349,
                            columnNumber: 17
                        }, undefined),
                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                            className: "flex justify-center gap-3 mb-3"
                        }, void 0, false, {
                            fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/ChatPanel.tsx",
                            lineNumber: 361,
                            columnNumber: 15
                        }, undefined),
                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_MessageInput__WEBPACK_IMPORTED_MODULE_4__.MessageInput, {
                            isDisabled: !activeSessionId || isProcessing || !connectionStatus.connected || isReplayMode,
                            onReconnect: checkServerStatus,
                            connectionStatus: connectionStatus
                        }, void 0, false, {
                            fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/ChatPanel.tsx",
                            lineNumber: 363,
                            columnNumber: 15
                        }, undefined)
                    ]
                }, void 0, true, {
                    fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/ChatPanel.tsx",
                    lineNumber: 346,
                    columnNumber: 13
                }, undefined)
            ]
        }, void 0, true)
    }, void 0, false, {
        fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/ChatPanel.tsx",
        lineNumber: 223,
        columnNumber: 5
    }, undefined);
};
_s(ChatPanel, "9JR99FEMVRygwjRgqfVcV/3X/Vw=", false, function() {
    return [
        _hooks_useSession__WEBPACK_IMPORTED_MODULE_2__.useSession,
        jotai__WEBPACK_IMPORTED_MODULE_13__.useAtomValue,
        jotai__WEBPACK_IMPORTED_MODULE_13__.useAtomValue,
        jotai__WEBPACK_IMPORTED_MODULE_13__.useAtom,
        jotai__WEBPACK_IMPORTED_MODULE_13__.useAtom,
        _context_ReplayModeContext__WEBPACK_IMPORTED_MODULE_10__.useReplayMode,
        _hooks_useReplay__WEBPACK_IMPORTED_MODULE_7__.useReplay,
        react_router_dom__WEBPACK_IMPORTED_MODULE_14__.useLocation,
        _hooks_usePro__WEBPACK_IMPORTED_MODULE_9__.usePro
    ];
});
_c = ChatPanel;
var _c;
$RefreshReg$(_c, "ChatPanel");

function $RefreshSig$() {
  return $ReactRefreshRuntime$.createSignatureFunctionForTransform();
}
function $RefreshReg$(type, id) {
  $ReactRefreshRuntime$.register(type, module.id + "_" + id);
}
Promise.resolve().then(function() {
  $ReactRefreshRuntime$.refresh(module.id, module.hot);
});


}),
"./src/v2/components/Chat/Message/index.tsx": (function (module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  Message: () => (Message)
});
/* ESM import */var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/react@18.3.1/node_modules/react/jsx-dev-runtime.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../node_modules/.pnpm/react@18.3.1/node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* ESM import */var framer_motion__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__("../node_modules/.pnpm/framer-motion@10.18.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/render/dom/motion.mjs");
/* ESM import */var _utils_typeGuards__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/v2/utils/typeGuards.ts");
/* ESM import */var _hooks_useSession__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/v2/hooks/useSession.ts");
/* ESM import */var _hooks_useTool__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/v2/hooks/useTool.tsx");
/* ESM import */var _Markdown__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./src/v2/components/Markdown/index.tsx");
/* ESM import */var _Message_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./src/v2/components/Chat/Message/Message.css");
/* ESM import */var _components_SystemMessage__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("./src/v2/components/Chat/Message/components/SystemMessage.tsx");
/* ESM import */var _components_EnvironmentMessage__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("./src/v2/components/Chat/Message/components/EnvironmentMessage.tsx");
/* ESM import */var _components_MultimodalContent__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__("./src/v2/components/Chat/Message/components/MultimodalContent.tsx");
/* ESM import */var _components_AssistantExpandableContent__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__("./src/v2/components/Chat/Message/components/AssistantExpandableContent.tsx");
/* ESM import */var _components_ToolCalls__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__("./src/v2/components/Chat/Message/components/ToolCalls.tsx");
/* ESM import */var _components_ThinkingToggle__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__("./src/v2/components/Chat/Message/components/ThinkingToggle.tsx");
/* ESM import */var _components_MessageTimestamp__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__("./src/v2/components/Chat/Message/components/MessageTimestamp.tsx");
/* ESM import */var jotai__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__("../node_modules/.pnpm/jotai@2.12.5_@types+react@18.3.23_react@18.3.1/node_modules/jotai/esm/react.mjs");
/* ESM import */var _state_atoms_replay__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__("./src/v2/state/atoms/replay.ts");
/* ESM import */var _components_ReportFileEntry__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__("./src/v2/components/Chat/Message/components/ReportFileEntry.tsx");
/* ESM import */var _state_atoms_message__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__("./src/v2/state/atoms/message.ts");
/* ESM import */var _state_atoms_message__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(_state_atoms_message__WEBPACK_IMPORTED_MODULE_16__);
/* provided dependency */ var $ReactRefreshRuntime$ = __webpack_require__("../node_modules/.pnpm/@rspack+plugin-react-refresh@1.0.3_react-refresh@0.16.0/node_modules/@rspack/plugin-react-refresh/client/reactRefresh.js");

var _s = $RefreshSig$();







// Import sub-components











/**
 * Message Component - Displays a single message in the chat
 *
 * Design principles:
 * - Minimalist black & white design with no avatars
 * - Clean, full-width message bubbles with subtle differentiation
 * - Focus on content with minimal visual distractions
 * - Elegant spacing and typography
 * - Progressive disclosure for detailed content
 */ const Message = (param)=>{
    let { message, isIntermediate = false, isInGroup = false, shouldDisplayTimestamp = true } = param;
    _s();
    console.log('message', message);
    const [showThinking, setShowThinking] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);
    const [showSteps, setShowSteps] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);
    const { setActivePanelContent, activeSessionId } = (0,_hooks_useSession__WEBPACK_IMPORTED_MODULE_3__.useSession)();
    const { getToolIcon } = (0,_hooks_useTool__WEBPACK_IMPORTED_MODULE_4__.useTool)();
    const replayState = (0,jotai__WEBPACK_IMPORTED_MODULE_17__.useAtomValue)(_state_atoms_replay__WEBPACK_IMPORTED_MODULE_14__.replayStateAtom);
    const allMessages = (0,jotai__WEBPACK_IMPORTED_MODULE_17__.useAtomValue)(_state_atoms_message__WEBPACK_IMPORTED_MODULE_16__.messagesAtom);
    const isMultimodal = (0,_utils_typeGuards__WEBPACK_IMPORTED_MODULE_2__.isMultimodalContent)(message.content);
    const isEnvironment = message.role === 'environment';
    const isUserMessage = message.role === 'user';
    console.log('message.role', message);
    const isFinalAnswer = message.role === 'final_answer' || message.isDeepResearch;
    // Check if this is a final assistant response
    const isFinalAssistantResponse = message.role === 'assistant' && message.finishReason === 'stop';
    // Handle tool call click - show in panel
    const handleToolCallClick = (toolCall)=>{
        if (message.toolResults && message.toolResults.length > 0) {
            const result = message.toolResults.find((r)=>r.toolCallId === toolCall.id);
            if (result) {
                setActivePanelContent({
                    type: result.type,
                    source: result.content,
                    title: result.name,
                    timestamp: result.timestamp,
                    toolCallId: result.toolCallId,
                    error: result.error,
                    arguments: result.arguments
                });
            }
        }
    };
    // Handle click on final assistant response to show latest environment state
    const handleFinalResponseClick = ()=>{
        if (!activeSessionId || !isFinalAssistantResponse) return;
        const sessionMessages = allMessages[activeSessionId] || [];
        // Find the most recent environment input
        for(let i = sessionMessages.length - 1; i >= 0; i--){
            const msg = sessionMessages[i];
            if (msg.role === 'environment' && Array.isArray(msg.content)) {
                const imageContent = msg.content.find((item)=>item.type === 'image_url' && item.image_url && item.image_url.url);
                if (imageContent) {
                    setActivePanelContent({
                        type: 'image',
                        source: msg.content,
                        title: msg.description || 'Final Environment State',
                        timestamp: msg.timestamp,
                        environmentId: msg.id
                    });
                    break;
                }
            }
        }
    };
    // Render content based on type
    const renderContent = ()=>{
        if (isMultimodal) {
            return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_MultimodalContent__WEBPACK_IMPORTED_MODULE_9__.MultimodalContent, {
                content: message.content,
                timestamp: message.timestamp,
                setActivePanelContent: setActivePanelContent
            }, void 0, false, {
                fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/Message/index.tsx",
                lineNumber: 115,
                columnNumber: 9
            }, undefined);
        }
        // For assistant messages with tool calls, first show summary
        if (message.role === 'assistant' && message.toolCalls && message.toolCalls.length > 0) {
            return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_AssistantExpandableContent__WEBPACK_IMPORTED_MODULE_10__.AssistantExpandableContent, {
                content: message.content,
                showSteps: showSteps,
                setShowSteps: setShowSteps
            }, void 0, false, {
                fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/Message/index.tsx",
                lineNumber: 126,
                columnNumber: 9
            }, undefined);
        }
        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_Markdown__WEBPACK_IMPORTED_MODULE_5__.MarkdownRenderer, {
            content: message.content,
            forceDarkTheme: isUserMessage
        }, void 0, false, {
            fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/Message/index.tsx",
            lineNumber: 134,
            columnNumber: 12
        }, undefined);
    };
    // Message animation variants
    const messageVariants = {
        initial: {
            opacity: 0,
            y: 10
        },
        animate: {
            opacity: 1,
            y: 0
        },
        transition: {
            duration: 0.3
        }
    };
    // Determine message bubble style based on role and state
    const getMessageBubbleClasses = ()=>{
        let baseClasses = '';
        if (message.role === 'user') {
            if (isImageOnlyMessage) {
                baseClasses = 'message-user message-user-image';
            } else {
                baseClasses = 'message-user';
            }
        } else if (message.role === 'system') {
            baseClasses = 'message-system';
        } else if (message.role === 'environment') {
            baseClasses = 'environment-message-minimal';
        } else {
            baseClasses = 'message-assistant';
        }
        // Add clickable style for final assistant responses
        if (isFinalAssistantResponse) {
            baseClasses += ' cursor-pointer hover:bg-[#f0f0f0] dark:hover:bg-gray-750 transition-colors duration-200';
        }
        return baseClasses;
    };
    // 检查消息是否只包含图片（用于样式优化）
    const isImageOnlyMessage = react__WEBPACK_IMPORTED_MODULE_1___default().useMemo(()=>{
        if (!(0,_utils_typeGuards__WEBPACK_IMPORTED_MODULE_2__.isMultimodalContent)(message.content)) return false;
        const imageContents = message.content.filter((part)=>part.type === 'image_url');
        const textContents = message.content.filter((part)=>part.type === 'text');
        return imageContents.length > 0 && textContents.length === 0;
    }, [
        message.content
    ]);
    // 检查消息是否只包含文本（用于样式优化）
    const isTextOnlyMessage = react__WEBPACK_IMPORTED_MODULE_1___default().useMemo(()=>{
        if (!(0,_utils_typeGuards__WEBPACK_IMPORTED_MODULE_2__.isMultimodalContent)(message.content)) return true;
        const imageContents = message.content.filter((part)=>part.type === 'image_url');
        const textContents = message.content.filter((part)=>part.type === 'text');
        return textContents.length > 0 && imageContents.length === 0;
    }, [
        message.content
    ]);
    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_18__.motion.div, {
        initial: "initial",
        animate: "animate",
        variants: messageVariants,
        className: `message-container ${message.role === 'user' ? 'message-container-user' : 'message-container-assistant'} ${isIntermediate ? 'message-container-intermediate' : ''}`,
        children: [
            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                className: `message-bubble ${getMessageBubbleClasses()} ${isIntermediate ? 'message-bubble-intermediate' : ''} ${isFinalAssistantResponse ? 'group' : ''}`,
                onClick: isFinalAssistantResponse ? handleFinalResponseClick : undefined,
                title: isFinalAssistantResponse ? 'Click to view final environment state' : undefined,
                children: message.role === 'system' ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_SystemMessage__WEBPACK_IMPORTED_MODULE_7__.SystemMessage, {
                    content: message.content
                }, void 0, false, {
                    fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/Message/index.tsx",
                    lineNumber: 204,
                    columnNumber: 11
                }, undefined) : message.role === 'environment' ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_EnvironmentMessage__WEBPACK_IMPORTED_MODULE_8__.EnvironmentMessage, {
                    content: message.content,
                    description: message.description,
                    timestamp: message.timestamp,
                    setActivePanelContent: setActivePanelContent,
                    isIntermediate: isIntermediate
                }, void 0, false, {
                    fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/Message/index.tsx",
                    lineNumber: 206,
                    columnNumber: 11
                }, undefined) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {
                    children: [
                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                            className: "prose dark:prose-invert prose-sm max-w-none text-sm",
                            children: renderContent()
                        }, void 0, false, {
                            fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/Message/index.tsx",
                            lineNumber: 215,
                            columnNumber: 13
                        }, undefined),
                        isFinalAssistantResponse && !isIntermediate && !isInGroup && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                            className: "mt-2 opacity-0 group-hover:opacity-100 transition-opacity duration-200 text-xs text-gray-500 dark:text-gray-400 flex items-center",
                            children: [
                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("svg", {
                                    width: "14",
                                    height: "14",
                                    viewBox: "0 0 24 24",
                                    fill: "none",
                                    className: "mr-1",
                                    children: [
                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("path", {
                                            d: "M15 3h6v6",
                                            stroke: "currentColor",
                                            strokeWidth: "2",
                                            strokeLinecap: "round",
                                            strokeLinejoin: "round"
                                        }, void 0, false, {
                                            fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/Message/index.tsx",
                                            lineNumber: 223,
                                            columnNumber: 19
                                        }, undefined),
                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("path", {
                                            d: "M10 14L21 3",
                                            stroke: "currentColor",
                                            strokeWidth: "2",
                                            strokeLinecap: "round",
                                            strokeLinejoin: "round"
                                        }, void 0, false, {
                                            fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/Message/index.tsx",
                                            lineNumber: 224,
                                            columnNumber: 19
                                        }, undefined),
                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("path", {
                                            d: "M18 13v6a2 2 0 01-2 2H5a2 2 0 01-2-2V8a2 2 0 012-2h6",
                                            stroke: "currentColor",
                                            strokeWidth: "2",
                                            strokeLinecap: "round",
                                            strokeLinejoin: "round"
                                        }, void 0, false, {
                                            fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/Message/index.tsx",
                                            lineNumber: 225,
                                            columnNumber: 19
                                        }, undefined)
                                    ]
                                }, void 0, true, {
                                    fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/Message/index.tsx",
                                    lineNumber: 222,
                                    columnNumber: 17
                                }, undefined),
                                "Click to view final environment state"
                            ]
                        }, void 0, true, {
                            fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/Message/index.tsx",
                            lineNumber: 221,
                            columnNumber: 15
                        }, undefined),
                        isFinalAnswer && message.title && typeof message.content === 'string' && !isIntermediate && !isInGroup && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_ReportFileEntry__WEBPACK_IMPORTED_MODULE_15__.ReportFileEntry, {
                            title: message.title || 'Research Report',
                            timestamp: message.timestamp,
                            content: message.content
                        }, void 0, false, {
                            fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/Message/index.tsx",
                            lineNumber: 237,
                            columnNumber: 17
                        }, undefined),
                        message.toolCalls && message.toolCalls.length > 0 && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_ToolCalls__WEBPACK_IMPORTED_MODULE_11__.ToolCalls, {
                            toolCalls: message.toolCalls,
                            onToolCallClick: handleToolCallClick,
                            getToolIcon: getToolIcon,
                            isIntermediate: isIntermediate,
                            toolResults: message.toolResults || []
                        }, void 0, false, {
                            fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/Message/index.tsx",
                            lineNumber: 246,
                            columnNumber: 15
                        }, undefined),
                        message.thinking && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_ThinkingToggle__WEBPACK_IMPORTED_MODULE_12__.ThinkingToggle, {
                            thinking: message.thinking,
                            showThinking: showThinking,
                            setShowThinking: setShowThinking
                        }, void 0, false, {
                            fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/Message/index.tsx",
                            lineNumber: 257,
                            columnNumber: 15
                        }, undefined)
                    ]
                }, void 0, true)
            }, void 0, false, {
                fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/Message/index.tsx",
                lineNumber: 197,
                columnNumber: 7
            }, undefined),
            message.role !== 'system' && !isIntermediate && !isInGroup && shouldDisplayTimestamp && !replayState.isActive && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_MessageTimestamp__WEBPACK_IMPORTED_MODULE_13__.MessageTimestamp, {
                timestamp: message.timestamp,
                content: message.content,
                role: message.role
            }, void 0, false, {
                fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/Message/index.tsx",
                lineNumber: 273,
                columnNumber: 11
            }, undefined)
        ]
    }, void 0, true, {
        fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/Message/index.tsx",
        lineNumber: 191,
        columnNumber: 5
    }, undefined);
};
_s(Message, "Y+uoWWKnJOzqnhedfoPTfr5eBxk=", false, function() {
    return [
        _hooks_useSession__WEBPACK_IMPORTED_MODULE_3__.useSession,
        _hooks_useTool__WEBPACK_IMPORTED_MODULE_4__.useTool,
        jotai__WEBPACK_IMPORTED_MODULE_17__.useAtomValue,
        jotai__WEBPACK_IMPORTED_MODULE_17__.useAtomValue
    ];
});
_c = Message;
var _c;
$RefreshReg$(_c, "Message");

function $RefreshSig$() {
  return $ReactRefreshRuntime$.createSignatureFunctionForTransform();
}
function $RefreshReg$(type, id) {
  $ReactRefreshRuntime$.register(type, module.id + "_" + id);
}
Promise.resolve().then(function() {
  $ReactRefreshRuntime$.refresh(module.id, module.hot);
});


}),
"./src/v2/context/ReplayModeContext.tsx": (function (module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  ReplayModeProvider: () => (ReplayModeProvider),
  useReplayMode: () => (useReplayMode),
  useReplayModelInfo: () => (useReplayModelInfo)
});
/* ESM import */var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/react@18.3.1/node_modules/react/jsx-dev-runtime.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../node_modules/.pnpm/react@18.3.1/node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* ESM import */var jotai__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("../node_modules/.pnpm/jotai@2.12.5_@types+react@18.3.23_react@18.3.1/node_modules/jotai/esm/react.mjs");
/* ESM import */var _state_atoms_replay__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/v2/state/atoms/replay.ts");
/* ESM import */var _state_atoms_session__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/v2/state/atoms/session.ts");
/* ESM import */var _state_atoms_message__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/v2/state/atoms/message.ts");
/* ESM import */var _state_atoms_message__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_state_atoms_message__WEBPACK_IMPORTED_MODULE_4__);
/* ESM import */var _state_atoms_ui__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./src/v2/state/atoms/ui.ts");
/* ESM import */var _state_actions_modelInfoAction__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./src/v2/state/actions/modelInfoAction.ts");
/* provided dependency */ var $ReactRefreshRuntime$ = __webpack_require__("../node_modules/.pnpm/@rspack+plugin-react-refresh@1.0.3_react-refresh@0.16.0/node_modules/@rspack/plugin-react-refresh/client/reactRefresh.js");

var _s = $RefreshSig$(), _s1 = $RefreshSig$(), _s2 = $RefreshSig$();







const ReplayModeContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)({
    isReplayMode: false,
    modelInfo: null
});
/**
 * ReplayModeProvider - Provides replay mode state to the application and initializes replay data
 *
 * 1. Detects replay mode from window variables
 * 2. Initializes application state with replay data when in replay mode
 * 3. Prevents server communication in replay mode
 * 4. Provides the replay mode status to all child components
 */ const ReplayModeProvider = (param)=>{
    let { children } = param;
    _s();
    // Access necessary atoms
    const [replayState, setReplayState] = (0,jotai__WEBPACK_IMPORTED_MODULE_7__.useAtom)(_state_atoms_replay__WEBPACK_IMPORTED_MODULE_2__.replayStateAtom);
    const [, setMessages] = (0,jotai__WEBPACK_IMPORTED_MODULE_7__.useAtom)(_state_atoms_message__WEBPACK_IMPORTED_MODULE_4__.messagesAtom);
    const [, setSessions] = (0,jotai__WEBPACK_IMPORTED_MODULE_7__.useAtom)(_state_atoms_session__WEBPACK_IMPORTED_MODULE_3__.sessionsAtom);
    const [, setActiveSessionId] = (0,jotai__WEBPACK_IMPORTED_MODULE_7__.useAtom)(_state_atoms_session__WEBPACK_IMPORTED_MODULE_3__.activeSessionIdAtom);
    const [, setConnectionStatus] = (0,jotai__WEBPACK_IMPORTED_MODULE_7__.useAtom)(_state_atoms_ui__WEBPACK_IMPORTED_MODULE_5__.connectionStatusAtom);
    const modelInfo = (0,jotai__WEBPACK_IMPORTED_MODULE_7__.useAtomValue)(_state_atoms_ui__WEBPACK_IMPORTED_MODULE_5__.modelInfoAtom);
    const setModelInfo = (0,jotai__WEBPACK_IMPORTED_MODULE_7__.useSetAtom)(_state_actions_modelInfoAction__WEBPACK_IMPORTED_MODULE_6__.setModelInfoAction);
    // Initialize replay mode if window variables are present
    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{
        // Check if in replay mode
        if (window.AGENT_TARS_REPLAY_MODE && window.AGENT_TARS_EVENT_STREAM) {
            // Get session data and event stream
            const sessionData = window.AGENT_TARS_SESSION_DATA;
            const events = window.AGENT_TARS_EVENT_STREAM;
            const modelData = window.AGENT_TARS_MODEL_INFO;
            console.log('[ReplayMode] Initializing replay mode with', events.length, 'events');
            if (sessionData && sessionData.id) {
                // Set connection status to "offline" to prevent health checks
                setConnectionStatus({
                    connected: false,
                    lastConnected: null,
                    lastError: null,
                    reconnecting: false
                });
                // Set model info if available using the action
                if (modelData) {
                    setModelInfo(modelData);
                    console.log('[ReplayMode] Model info loaded:', modelData);
                }
                // Set sessions data
                setSessions([
                    sessionData
                ]);
                // When in replay mode, the session ID must be set immediately
                setActiveSessionId(sessionData.id);
                // Add debug logging
                console.log('[ReplayMode] Active session set to:', sessionData.id);
                // Initialize replay state with autoPlayCountdown
                setReplayState({
                    isActive: true,
                    isPaused: true,
                    events: events,
                    currentEventIndex: -1,
                    startTimestamp: events.length > 0 ? events[0].timestamp : null,
                    endTimestamp: events.length > 0 ? events[events.length - 1].timestamp : null,
                    playbackSpeed: 1,
                    autoPlayCountdown: 2,
                    visibleTimeWindow: events.length > 0 ? {
                        start: events[0].timestamp,
                        end: events[events.length - 1].timestamp
                    } : null,
                    processedEvents: {}
                });
                // Initialize empty messages state
                setMessages({
                    [sessionData.id]: []
                });
                console.log('[ReplayMode] Replay mode initialized successfully');
                // 启动倒计时
                const countdownTimer = setInterval(()=>{
                    setReplayState((prev)=>{
                        // 如果倒计时结束或已被取消
                        if (prev.autoPlayCountdown === null || prev.autoPlayCountdown <= 0) {
                            clearInterval(countdownTimer);
                            // 只在倒计时完成时准备开始播放，但不直接改变isPaused状态
                            // 这样将由useReplay中的startReplay函数正确启动播放过程
                            if (prev.autoPlayCountdown === 0) {
                                // 设置一个延迟启动标记，在下一个useEffect中捕获并启动播放
                                setTimeout(()=>{
                                    console.log('[ReplayMode] Auto-play countdown finished, starting replay...');
                                    // 触发一个事件通知播放开始
                                    window.dispatchEvent(new CustomEvent('replay-autostart'));
                                }, 0);
                            }
                            return {
                                ...prev,
                                autoPlayCountdown: null
                            };
                        }
                        // 继续倒计时
                        return {
                            ...prev,
                            autoPlayCountdown: prev.autoPlayCountdown - 1
                        };
                    });
                }, 1000);
            } else {
                console.error('[ReplayMode] Missing session data or session ID');
            }
        }
    }, [
        setMessages,
        setSessions,
        setActiveSessionId,
        setReplayState,
        setConnectionStatus,
        setModelInfo
    ]);
    // Check both the atom and global window variable for replay mode
    const isReplayMode = replayState.isActive || !!window.AGENT_TARS_REPLAY_MODE;
    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(ReplayModeContext.Provider, {
        value: {
            isReplayMode,
            modelInfo: isReplayMode ? modelInfo : null
        },
        children: children
    }, void 0, false, {
        fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/context/ReplayModeContext.tsx",
        lineNumber: 154,
        columnNumber: 5
    }, undefined);
};
_s(ReplayModeProvider, "vDBIVwcSJPjLb1Gm5aAZeHv1ReI=", false, function() {
    return [
        jotai__WEBPACK_IMPORTED_MODULE_7__.useAtom,
        jotai__WEBPACK_IMPORTED_MODULE_7__.useAtom,
        jotai__WEBPACK_IMPORTED_MODULE_7__.useAtom,
        jotai__WEBPACK_IMPORTED_MODULE_7__.useAtom,
        jotai__WEBPACK_IMPORTED_MODULE_7__.useAtom,
        jotai__WEBPACK_IMPORTED_MODULE_7__.useAtomValue,
        jotai__WEBPACK_IMPORTED_MODULE_7__.useSetAtom
    ];
});
_c = ReplayModeProvider;
/**
 * useReplayMode - Hook to access replay mode state
 */ const useReplayMode = ()=>{
    _s1();
    const { isReplayMode } = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ReplayModeContext);
    return isReplayMode;
};
_s1(useReplayMode, "aCxgkkyzxeI/iK3PhvujhBgtmdU=");
/**
 * useReplayModelInfo - Hook to access model info in replay mode
 */ const useReplayModelInfo = ()=>{
    _s2();
    const { modelInfo } = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ReplayModeContext);
    return modelInfo;
};
_s2(useReplayModelInfo, "OEZziHsVOGEYTISw4STDONUUJAE=");
var _c;
$RefreshReg$(_c, "ReplayModeProvider");

function $RefreshSig$() {
  return $ReactRefreshRuntime$.createSignatureFunctionForTransform();
}
function $RefreshReg$(type, id) {
  $ReactRefreshRuntime$.register(type, module.id + "_" + id);
}
Promise.resolve().then(function() {
  $ReactRefreshRuntime$.refresh(module.id, module.hot);
});


}),
"./src/v2/hooks/useReplay.ts": (function (module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useReplay: () => (useReplay)
});
/* ESM import */var jotai__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("../node_modules/.pnpm/jotai@2.12.5_@types+react@18.3.23_react@18.3.1/node_modules/jotai/esm/react.mjs");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/react@18.3.1/node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* ESM import */var _state_atoms_replay__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/v2/state/atoms/replay.ts");
/* ESM import */var _useSession__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/v2/hooks/useSession.ts");
/* ESM import */var _state_atoms_message__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/v2/state/atoms/message.ts");
/* ESM import */var _state_atoms_message__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_state_atoms_message__WEBPACK_IMPORTED_MODULE_3__);
/* ESM import */var _state_atoms_tool__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/v2/state/atoms/tool.ts");
/* ESM import */var _state_actions_eventProcessor__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./src/v2/state/actions/eventProcessor.ts");
/* ESM import */var _state_atoms_plan__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./src/v2/state/atoms/plan.ts");
/* provided dependency */ var $ReactRefreshRuntime$ = __webpack_require__("../node_modules/.pnpm/@rspack+plugin-react-refresh@1.0.3_react-refresh@0.16.0/node_modules/@rspack/plugin-react-refresh/client/reactRefresh.js");
// /agent-tars-web-ui/src/v2/hooks/useReplay.ts









/**
 * Custom hook for managing replay functionality
 *
 * Provides:
 * - Control for playback (play, pause, jump, etc.)
 * - Event processing through the standard event processor
 * - Timeline calculations and positioning
 */ function useReplay() {
    const [replayState, setReplayState] = (0,jotai__WEBPACK_IMPORTED_MODULE_7__.useAtom)(_state_atoms_replay__WEBPACK_IMPORTED_MODULE_1__.replayStateAtom);
    const { activeSessionId } = (0,_useSession__WEBPACK_IMPORTED_MODULE_2__.useSession)();
    const [playbackInterval, setPlaybackInterval] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);
    const [, setMessages] = (0,jotai__WEBPACK_IMPORTED_MODULE_7__.useAtom)(_state_atoms_message__WEBPACK_IMPORTED_MODULE_3__.messagesAtom);
    const [, setToolResults] = (0,jotai__WEBPACK_IMPORTED_MODULE_7__.useAtom)(_state_atoms_tool__WEBPACK_IMPORTED_MODULE_4__.toolResultsAtom);
    const [, setPlans] = (0,jotai__WEBPACK_IMPORTED_MODULE_7__.useAtom)(_state_atoms_plan__WEBPACK_IMPORTED_MODULE_6__.plansAtom);
    const processEvent = (0,jotai__WEBPACK_IMPORTED_MODULE_7__.useSetAtom)(_state_actions_eventProcessor__WEBPACK_IMPORTED_MODULE_5__.processEventAction);
    /**
   * 重置会话状态并处理事件至指定索引
   */ const processEventsUpToIndex = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((targetIndex)=>{
        if (!activeSessionId || !replayState.events.length || targetIndex < 0) return;
        // 获取需要处理的事件
        const eventsToProcess = replayState.events.slice(0, targetIndex + 1);
        // 清空当前会话状态
        setMessages((prev)=>({
                ...prev,
                [activeSessionId]: []
            }));
        setToolResults((prev)=>({
                ...prev,
                [activeSessionId]: []
            }));
        setPlans((prev)=>({
                ...prev,
                [activeSessionId]: {
                    steps: [],
                    isComplete: false,
                    summary: null,
                    hasGeneratedPlan: false,
                    keyframes: []
                }
            }));
        // 处理环境输入事件优先，确保图片资源先加载
        const envEvents = eventsToProcess.filter((event)=>event.type === 'environment_input');
        const nonEnvEvents = eventsToProcess.filter((event)=>event.type !== 'environment_input');
        // 先处理环境输入事件
        for (const event of envEvents){
            processEvent({
                sessionId: activeSessionId,
                event
            });
        }
        // 然后处理其他事件
        for (const event of nonEnvEvents){
            processEvent({
                sessionId: activeSessionId,
                event
            });
        }
    }, [
        activeSessionId,
        replayState.events,
        setMessages,
        setToolResults,
        setPlans,
        processEvent
    ]);
    /**
   * 开始回放
   */ const startReplay = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{
        // 清除现有的定时器
        if (playbackInterval) {
            clearInterval(playbackInterval);
        }
        setReplayState((prev)=>({
                ...prev,
                isPaused: false
            }));
        // 设置定时器按间隔前进
        const interval = setInterval(()=>{
            setReplayState((prev)=>{
                // 到达末尾时停止
                if (prev.currentEventIndex >= prev.events.length - 1) {
                    clearInterval(interval);
                    return {
                        ...prev,
                        isPaused: true,
                        currentEventIndex: prev.events.length - 1
                    };
                }
                // 前进到下一个事件
                const nextIndex = prev.currentEventIndex + 1;
                // 处理到新位置
                if (activeSessionId) {
                    processEvent({
                        sessionId: activeSessionId,
                        event: prev.events[nextIndex]
                    });
                }
                return {
                    ...prev,
                    currentEventIndex: nextIndex
                };
            });
        }, 500 / replayState.playbackSpeed);
        setPlaybackInterval(interval);
    }, [
        activeSessionId,
        playbackInterval,
        processEvent,
        replayState.playbackSpeed,
        setReplayState
    ]);
    /**
   * 暂停回放
   */ const pauseReplay = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{
        if (playbackInterval) {
            clearInterval(playbackInterval);
            setPlaybackInterval(null);
        }
        setReplayState((prev)=>({
                ...prev,
                isPaused: true
            }));
    }, [
        playbackInterval,
        setReplayState
    ]);
    /**
   * 跳转到时间轴上的指定位置
   */ const jumpToPosition = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((position)=>{
        // 确保位置在有效范围内
        const normalizedPosition = Math.max(0, Math.min(1, position));
        if (replayState.events.length === 0 || !activeSessionId) return;
        // 根据位置计算目标事件索引
        const targetIndex = Math.floor(normalizedPosition * (replayState.events.length - 1));
        // 暂停任何正在进行的回放
        if (playbackInterval) {
            clearInterval(playbackInterval);
            setPlaybackInterval(null);
        }
        // 处理到新位置
        processEventsUpToIndex(targetIndex);
        setReplayState((prev)=>({
                ...prev,
                isPaused: true,
                currentEventIndex: targetIndex
            }));
    }, [
        activeSessionId,
        playbackInterval,
        processEventsUpToIndex,
        replayState.events.length,
        setReplayState
    ]);
    /**
   * 跳转到最终结果
   */ const jumpToResult = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{
        if (replayState.events.length === 0 || !activeSessionId) return;
        const finalIndex = replayState.events.length - 1;
        // 暂停任何正在进行的回放
        if (playbackInterval) {
            clearInterval(playbackInterval);
            setPlaybackInterval(null);
        }
        // 处理到最终位置
        processEventsUpToIndex(finalIndex);
        setReplayState((prev)=>({
                ...prev,
                isPaused: true,
                currentEventIndex: finalIndex
            }));
    }, [
        activeSessionId,
        playbackInterval,
        processEventsUpToIndex,
        replayState.events.length,
        setReplayState
    ]);
    /**
   * 设置播放速度
   */ const setPlaybackSpeed = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((speed)=>{
        setReplayState((prev)=>({
                ...prev,
                playbackSpeed: speed
            }));
        // 如果正在播放，以新速度重启
        if (!replayState.isPaused && playbackInterval) {
            clearInterval(playbackInterval);
            startReplay();
        }
    }, [
        playbackInterval,
        replayState.isPaused,
        setReplayState,
        startReplay
    ]);
    /**
   * 退出回放模式
   */ const exitReplay = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{
        if (playbackInterval) {
            clearInterval(playbackInterval);
        }
        setReplayState((prev)=>({
                ...prev,
                isActive: false,
                isPaused: true,
                currentEventIndex: -1,
                events: [],
                processedEvents: {}
            }));
    }, [
        playbackInterval,
        setReplayState
    ]);
    /**
   * 获取当前事件
   */ const getCurrentEvent = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{
        if (!replayState.isActive || replayState.currentEventIndex < 0 || replayState.currentEventIndex >= replayState.events.length) {
            return null;
        }
        return replayState.events[replayState.currentEventIndex];
    }, [
        replayState.currentEventIndex,
        replayState.events,
        replayState.isActive
    ]);
    /**
   * 获取当前位置百分比 (0-100)
   */ const getCurrentPosition = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{
        if (!replayState.isActive || replayState.events.length <= 1) {
            return 0;
        }
        return replayState.currentEventIndex / (replayState.events.length - 1) * 100;
    }, [
        replayState.currentEventIndex,
        replayState.events.length,
        replayState.isActive
    ]);
    /**
   * 获取当前所有事件
   */ const getCurrentEvents = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{
        if (!replayState.isActive || replayState.currentEventIndex < 0) {
            return [];
        }
        return replayState.events.slice(0, replayState.currentEventIndex + 1);
    }, [
        replayState.currentEventIndex,
        replayState.events,
        replayState.isActive
    ]);
    // 组件卸载时清理定时器
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{
        return ()=>{
            if (playbackInterval) {
                clearInterval(playbackInterval);
            }
        };
    }, [
        playbackInterval
    ]);
    // 回放模式初始化时：如果索引为-1，需要手动触发第一步，否则会显示为空白
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{
        if (replayState.isActive && replayState.currentEventIndex === -1 && replayState.events.length > 0) {
            // 如果启动回放后立即跳到第一个事件
            processEventsUpToIndex(0);
            setReplayState((prev)=>({
                    ...prev,
                    currentEventIndex: 0
                }));
        }
    }, [
        replayState.isActive,
        replayState.currentEventIndex,
        replayState.events.length,
        processEventsUpToIndex,
        setReplayState
    ]);
    /**
   * 取消自动播放倒计时
   */ const cancelAutoPlay = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{
        setReplayState((prev)=>({
                ...prev,
                autoPlayCountdown: null
            }));
    }, [
        setReplayState
    ]);
    // 添加对自动播放事件的监听
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{
        const handleAutoStart = ()=>{
            console.log('Auto-play event received, starting replay...');
            startReplay();
        };
        // 添加事件监听器
        window.addEventListener('replay-autostart', handleAutoStart);
        // 清理函数
        return ()=>{
            window.removeEventListener('replay-autostart', handleAutoStart);
        };
    }, [
        startReplay
    ]); // 依赖于startReplay函数
    return {
        // 状态
        replayState,
        // 操作方法
        startReplay,
        pauseReplay,
        jumpToPosition,
        jumpToResult,
        setPlaybackSpeed,
        exitReplay,
        cancelAutoPlay,
        // 工具方法
        getCurrentEvents,
        getCurrentPosition,
        getCurrentEvent
    };
}

function $RefreshSig$() {
  return $ReactRefreshRuntime$.createSignatureFunctionForTransform();
}
function $RefreshReg$(type, id) {
  $ReactRefreshRuntime$.register(type, module.id + "_" + id);
}
Promise.resolve().then(function() {
  $ReactRefreshRuntime$.refresh(module.id, module.hot);
});


}),
"./src/v2/hooks/useSession.ts": (function (module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useSession: () => (useSession)
});
/* ESM import */var jotai__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__("../node_modules/.pnpm/jotai@2.12.5_@types+react@18.3.23_react@18.3.1/node_modules/jotai/esm/react.mjs");
/* ESM import */var react_router_dom__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__("../node_modules/.pnpm/react-router@7.6.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/react-router/dist/development/chunk-DQRVZFIR.mjs");
/* ESM import */var _state_atoms_session__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/v2/state/atoms/session.ts");
/* ESM import */var _state_atoms_message__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/v2/state/atoms/message.ts");
/* ESM import */var _state_atoms_message__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_state_atoms_message__WEBPACK_IMPORTED_MODULE_1__);
/* ESM import */var _state_atoms_tool__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/v2/state/atoms/tool.ts");
/* ESM import */var _state_atoms_plan__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/v2/state/atoms/plan.ts");
/* ESM import */var _state_atoms_ui__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/v2/state/atoms/ui.ts");
/* ESM import */var _state_atoms_replay__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./src/v2/state/atoms/replay.ts");
/* ESM import */var _state_actions_sessionActions__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./src/v2/state/actions/sessionActions.ts");
/* ESM import */var _state_actions_connectionActions__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("./src/v2/state/actions/connectionActions.ts");
/* ESM import */var _state_actions_modelInfoAction__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("./src/v2/state/actions/modelInfoAction.ts");
/* ESM import */var _services_socketService__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__("./src/v2/services/socketService.ts");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__("../node_modules/.pnpm/react@18.3.1/node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_10__);
/* ESM import */var _context_ReplayModeContext__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__("./src/v2/context/ReplayModeContext.tsx");
/* provided dependency */ var $ReactRefreshRuntime$ = __webpack_require__("../node_modules/.pnpm/@rspack+plugin-react-refresh@1.0.3_react-refresh@0.16.0/node_modules/@rspack/plugin-react-refresh/client/reactRefresh.js");














/**
 * Hook for session management functionality
 */ function useSession() {
    // State
    const [sessions, setSessions] = (0,jotai__WEBPACK_IMPORTED_MODULE_12__.useAtom)(_state_atoms_session__WEBPACK_IMPORTED_MODULE_0__.sessionsAtom);
    const [activeSessionId, setActiveSessionId] = (0,jotai__WEBPACK_IMPORTED_MODULE_12__.useAtom)(_state_atoms_session__WEBPACK_IMPORTED_MODULE_0__.activeSessionIdAtom);
    const messages = (0,jotai__WEBPACK_IMPORTED_MODULE_12__.useAtomValue)(_state_atoms_message__WEBPACK_IMPORTED_MODULE_1__.messagesAtom);
    const groupedMessages = (0,jotai__WEBPACK_IMPORTED_MODULE_12__.useAtomValue)(_state_atoms_message__WEBPACK_IMPORTED_MODULE_1__.groupedMessagesAtom);
    const toolResults = (0,jotai__WEBPACK_IMPORTED_MODULE_12__.useAtomValue)(_state_atoms_tool__WEBPACK_IMPORTED_MODULE_2__.toolResultsAtom);
    const [isProcessing, setIsProcessing] = (0,jotai__WEBPACK_IMPORTED_MODULE_12__.useAtom)(_state_atoms_ui__WEBPACK_IMPORTED_MODULE_4__.isProcessingAtom);
    const [activePanelContent, setActivePanelContent] = (0,jotai__WEBPACK_IMPORTED_MODULE_12__.useAtom)(_state_atoms_ui__WEBPACK_IMPORTED_MODULE_4__.activePanelContentAtom);
    const [connectionStatus, setConnectionStatus] = (0,jotai__WEBPACK_IMPORTED_MODULE_12__.useAtom)(_state_atoms_ui__WEBPACK_IMPORTED_MODULE_4__.connectionStatusAtom);
    const [plans, setPlans] = (0,jotai__WEBPACK_IMPORTED_MODULE_12__.useAtom)(_state_atoms_plan__WEBPACK_IMPORTED_MODULE_3__.plansAtom);
    const setPlanUIState = (0,jotai__WEBPACK_IMPORTED_MODULE_12__.useSetAtom)(_state_atoms_plan__WEBPACK_IMPORTED_MODULE_3__.planUIStateAtom);
    const [replayState, setReplayState] = (0,jotai__WEBPACK_IMPORTED_MODULE_12__.useAtom)(_state_atoms_replay__WEBPACK_IMPORTED_MODULE_5__.replayStateAtom);
    const modelInfo = (0,jotai__WEBPACK_IMPORTED_MODULE_12__.useAtomValue)(_state_atoms_ui__WEBPACK_IMPORTED_MODULE_4__.modelInfoAtom);
    // Check if we're in replay mode using the context hook
    const isReplayMode = (0,_context_ReplayModeContext__WEBPACK_IMPORTED_MODULE_11__.useReplayMode)();
    // 获取回放模式下的模型信息
    const replayModelInfo = (0,_context_ReplayModeContext__WEBPACK_IMPORTED_MODULE_11__.useReplayModelInfo)();
    // Actions
    const loadSessions = (0,jotai__WEBPACK_IMPORTED_MODULE_12__.useSetAtom)(_state_actions_sessionActions__WEBPACK_IMPORTED_MODULE_6__.loadSessionsAction);
    const createSession = (0,jotai__WEBPACK_IMPORTED_MODULE_12__.useSetAtom)(_state_actions_sessionActions__WEBPACK_IMPORTED_MODULE_6__.createSessionAction);
    const setActiveSession = (0,jotai__WEBPACK_IMPORTED_MODULE_12__.useSetAtom)(_state_actions_sessionActions__WEBPACK_IMPORTED_MODULE_6__.setActiveSessionAction);
    const updateSessionMetadata = (0,jotai__WEBPACK_IMPORTED_MODULE_12__.useSetAtom)(_state_actions_sessionActions__WEBPACK_IMPORTED_MODULE_6__.updateSessionAction);
    const deleteSession = (0,jotai__WEBPACK_IMPORTED_MODULE_12__.useSetAtom)(_state_actions_sessionActions__WEBPACK_IMPORTED_MODULE_6__.deleteSessionAction);
    const sendMessage = (0,jotai__WEBPACK_IMPORTED_MODULE_12__.useSetAtom)(_state_actions_sessionActions__WEBPACK_IMPORTED_MODULE_6__.sendMessageAction);
    const abortQuery = (0,jotai__WEBPACK_IMPORTED_MODULE_12__.useSetAtom)(_state_actions_sessionActions__WEBPACK_IMPORTED_MODULE_6__.abortQueryAction);
    const initConnectionMonitoring = (0,jotai__WEBPACK_IMPORTED_MODULE_12__.useSetAtom)(_state_actions_connectionActions__WEBPACK_IMPORTED_MODULE_7__.initConnectionMonitoringAction);
    const checkServerStatus = (0,jotai__WEBPACK_IMPORTED_MODULE_12__.useSetAtom)(_state_actions_connectionActions__WEBPACK_IMPORTED_MODULE_7__.checkConnectionStatusAction);
    const checkSessionStatus = (0,jotai__WEBPACK_IMPORTED_MODULE_12__.useSetAtom)(_state_actions_sessionActions__WEBPACK_IMPORTED_MODULE_6__.checkSessionStatusAction);
    const fetchModelInfo = (0,jotai__WEBPACK_IMPORTED_MODULE_12__.useSetAtom)(_state_actions_modelInfoAction__WEBPACK_IMPORTED_MODULE_8__.fetchModelInfoAction);
    const setModelInfo = (0,jotai__WEBPACK_IMPORTED_MODULE_12__.useSetAtom)(_state_actions_modelInfoAction__WEBPACK_IMPORTED_MODULE_8__.setModelInfoAction);
    // Get current location
    const location = (0,react_router_dom__WEBPACK_IMPORTED_MODULE_13__.useLocation)();
    // 保留这个工具函数，但移除自动同步逻辑
    const getSessionIdFromUrl = (0,react__WEBPACK_IMPORTED_MODULE_10__.useCallback)(()=>{
        const pathParts = location.pathname.split('/').filter(Boolean);
        return pathParts.length > 0 ? pathParts[0] : null;
    }, [
        location
    ]);
    // Periodic status checking for active session - 在回放模式下不检查状态
    (0,react__WEBPACK_IMPORTED_MODULE_10__.useEffect)(()=>{
        if (!activeSessionId || !connectionStatus.connected || isReplayMode) return;
        // Initial status check when session becomes active
        checkSessionStatus(activeSessionId);
    }, [
        activeSessionId,
        connectionStatus.connected,
        checkSessionStatus,
        isReplayMode
    ]);
    // Enhanced socket handler for session status sync - 在回放模式下不更新状态
    const handleSessionStatusUpdate = (0,react__WEBPACK_IMPORTED_MODULE_10__.useCallback)((status)=>{
        if (status && typeof status.isProcessing === 'boolean' && !isReplayMode) {
            setIsProcessing(status.isProcessing);
        }
    }, [
        setIsProcessing,
        isReplayMode
    ]);
    // Set up socket event handlers when active session changes - 在回放模式下不设置socket事件处理
    (0,react__WEBPACK_IMPORTED_MODULE_10__.useEffect)(()=>{
        if (!activeSessionId || !_services_socketService__WEBPACK_IMPORTED_MODULE_9__.socketService.isConnected() || isReplayMode) return;
        // Join session and listen for status updates
        _services_socketService__WEBPACK_IMPORTED_MODULE_9__.socketService.joinSession(activeSessionId, ()=>{
        /* existing event handling */ }, handleSessionStatusUpdate);
        // Register global status handler
        _services_socketService__WEBPACK_IMPORTED_MODULE_9__.socketService.on('agent-status', handleSessionStatusUpdate);
        return ()=>{
            // Clean up handlers
            _services_socketService__WEBPACK_IMPORTED_MODULE_9__.socketService.off('agent-status', handleSessionStatusUpdate);
        };
    }, [
        activeSessionId,
        handleSessionStatusUpdate,
        isReplayMode
    ]);
    // Auto-show plan when it's first created - 在回放模式下不自动显示计划
    (0,react__WEBPACK_IMPORTED_MODULE_10__.useEffect)(()=>{
        var _plans_activeSessionId;
        if (activeSessionId && ((_plans_activeSessionId = plans[activeSessionId]) === null || _plans_activeSessionId === void 0 ? void 0 : _plans_activeSessionId.hasGeneratedPlan) && !isReplayMode) {
            const currentPlan = plans[activeSessionId];
            // If this is a newly generated plan, automatically show it
            if (currentPlan.steps.length > 0 && currentPlan.steps.every((step)=>!step.done)) {
                setPlanUIState((prev)=>({
                        ...prev,
                        isVisible: true
                    }));
            }
        }
    }, [
        activeSessionId,
        plans,
        setPlanUIState,
        isReplayMode
    ]);
    // 添加获取模型信息的效果
    (0,react__WEBPACK_IMPORTED_MODULE_10__.useEffect)(()=>{
        // 在回放模式下使用回放模式的模型信息
        if (isReplayMode && replayModelInfo) {
            setModelInfo(replayModelInfo);
            return;
        }
        // 在回放模式或未连接时不获取模型信息
        if (isReplayMode || !connectionStatus.connected) return;
        // 使用新的 action 获取模型信息
        fetchModelInfo();
    }, [
        connectionStatus.connected,
        isReplayMode,
        replayModelInfo,
        fetchModelInfo,
        setModelInfo
    ]);
    // Memoize the session state object to avoid unnecessary re-renders
    const sessionState = (0,react__WEBPACK_IMPORTED_MODULE_10__.useMemo)(()=>({
            // State
            sessions,
            activeSessionId,
            messages,
            groupedMessages,
            toolResults,
            isProcessing,
            activePanelContent,
            connectionStatus,
            plans,
            replayState,
            modelInfo,
            // Session operations
            loadSessions,
            createSession,
            setActiveSession,
            updateSessionMetadata,
            deleteSession,
            // Message operations
            sendMessage,
            abortQuery,
            // UI operations
            setActivePanelContent,
            // Connection operations
            initConnectionMonitoring,
            checkServerStatus,
            // Status operations
            checkSessionStatus,
            getSessionIdFromUrl
        }), [
        sessions,
        activeSessionId,
        messages,
        groupedMessages,
        toolResults,
        isProcessing,
        activePanelContent,
        connectionStatus,
        plans,
        replayState,
        modelInfo,
        loadSessions,
        createSession,
        setActiveSession,
        updateSessionMetadata,
        deleteSession,
        sendMessage,
        abortQuery,
        setActivePanelContent,
        initConnectionMonitoring,
        checkServerStatus,
        checkSessionStatus,
        getSessionIdFromUrl
    ]);
    return sessionState;
}

function $RefreshSig$() {
  return $ReactRefreshRuntime$.createSignatureFunctionForTransform();
}
function $RefreshReg$(type, id) {
  $ReactRefreshRuntime$.register(type, module.id + "_" + id);
}
Promise.resolve().then(function() {
  $ReactRefreshRuntime$.refresh(module.id, module.hot);
});


}),
"./src/v2/state/actions/eventProcessor.ts": (function (module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  processEventAction: () => (processEventAction),
  updateProcessingStatusAction: () => (updateProcessingStatusAction)
});
/* ESM import */var jotai__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("../node_modules/.pnpm/jotai@2.12.5_@types+react@18.3.23_react@18.3.1/node_modules/jotai/esm/vanilla.mjs");
/* ESM import */var uuid__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-browser/v4.js");
/* ESM import */var _atoms_message__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/v2/state/atoms/message.ts");
/* ESM import */var _atoms_message__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_atoms_message__WEBPACK_IMPORTED_MODULE_0__);
/* ESM import */var _atoms_tool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/v2/state/atoms/tool.ts");
/* ESM import */var _atoms_ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/v2/state/atoms/ui.ts");
/* ESM import */var _utils_formatters__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/v2/utils/formatters.ts");
/* ESM import */var _atoms_plan__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/v2/state/atoms/plan.ts");
/* ESM import */var _atoms_replay__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./src/v2/state/atoms/replay.ts");
/* provided dependency */ var $ReactRefreshRuntime$ = __webpack_require__("../node_modules/.pnpm/@rspack+plugin-react-refresh@1.0.3_react-refresh@0.16.0/node_modules/@rspack/plugin-react-refresh/client/reactRefresh.js");
/* eslint-disable @typescript-eslint/no-explicit-any */ 







// 存储工具调用参数的映射表 (不是 Atom，是内部缓存)
const toolCallArgumentsMap = new Map();
/**
 * Process a single event and update the appropriate state atoms
 */ const processEventAction = (0,jotai__WEBPACK_IMPORTED_MODULE_6__.atom)(null, (get, set, params)=>{
    const { sessionId, event } = params;
    const replayState = get(_atoms_replay__WEBPACK_IMPORTED_MODULE_5__.replayStateAtom);
    const isReplayMode = replayState.isActive;
    console.log('[GUI] event.type', event.type);
    switch(event.type){
        case 'user_message':
            handleUserMessage(set, sessionId, event);
            break;
        case 'assistant_message':
            handleAssistantMessage(get, set, sessionId, event);
            break;
        case 'assistant_streaming_message':
            if (!isReplayMode) {
                handleStreamingMessage(get, set, sessionId, event);
            }
            break;
        case 'assistant_thinking_message':
        case 'assistant_streaming_thinking_message':
            handleThinkingMessage(get, set, sessionId, event);
            break;
        case 'tool_call':
            handleToolCall(set, sessionId, event);
            break;
        case 'tool_result':
            handleToolResult(set, sessionId, event);
            break;
        case 'system':
            handleSystemMessage(set, sessionId, event);
            break;
        case 'environment_input':
            handleEnvironmentInput(set, sessionId, event);
            break;
        case 'agent_run_start':
            set(_atoms_ui__WEBPACK_IMPORTED_MODULE_2__.isProcessingAtom, true);
            break;
        case 'agent_run_end':
            set(_atoms_ui__WEBPACK_IMPORTED_MODULE_2__.isProcessingAtom, false);
            break;
        case 'plan_start':
            handlePlanStart(set, sessionId, event);
            break;
        case 'plan_update':
            handlePlanUpdate(set, sessionId, event);
            break;
        case 'plan_finish':
            handlePlanFinish(set, sessionId, event);
            break;
        case 'final_answer':
            handleFinalAnswer(get, set, sessionId, event);
            break;
        case 'final_answer_streaming':
            if (!isReplayMode) {
                handleFinalAnswerStreaming(get, set, sessionId, event);
            }
            break;
    }
});
const updateProcessingStatusAction = (0,jotai__WEBPACK_IMPORTED_MODULE_6__.atom)(null, (get, set, status)=>{
    // Update processing state
    set(_atoms_ui__WEBPACK_IMPORTED_MODULE_2__.isProcessingAtom, !!status.isProcessing);
});
/**
 * Handle user message event
 */ function handleUserMessage(set, sessionId, event) {
    const userMessage = {
        id: event.id,
        role: 'user',
        content: event.content,
        timestamp: event.timestamp
    };
    set(_atoms_message__WEBPACK_IMPORTED_MODULE_0__.messagesAtom, (prev)=>{
        const sessionMessages = prev[sessionId] || [];
        return {
            ...prev,
            [sessionId]: [
                ...sessionMessages,
                userMessage
            ]
        };
    });
    // Check for images in user message and set active panel content if found
    if (Array.isArray(event.content)) {
        const images = event.content.filter((part)=>part.type === 'image_url');
        if (images.length > 0) {
            set(_atoms_ui__WEBPACK_IMPORTED_MODULE_2__.activePanelContentAtom, {
                type: 'image',
                source: images[0].image_url.url,
                title: 'User Upload',
                timestamp: Date.now()
            });
        }
    }
}
/**
 * Handle assistant message event (complete message)
 */ function handleAssistantMessage(get, set, sessionId, event) {
    // 获取消息ID
    const messageId = event.messageId;
    set(_atoms_message__WEBPACK_IMPORTED_MODULE_0__.messagesAtom, (prev)=>{
        const sessionMessages = prev[sessionId] || [];
        // 检查是否已存在相同messageId的消息
        if (messageId) {
            const existingMessageIndex = sessionMessages.findIndex((msg)=>msg.messageId === messageId);
            // 如果找到了现有消息，更新它而不是添加新消息
            if (existingMessageIndex !== -1) {
                const updatedMessages = [
                    ...sessionMessages
                ];
                updatedMessages[existingMessageIndex] = {
                    ...updatedMessages[existingMessageIndex],
                    content: event.content,
                    timestamp: event.timestamp,
                    toolCalls: event.toolCalls,
                    finishReason: event.finishReason,
                    isStreaming: false
                };
                return {
                    ...prev,
                    [sessionId]: updatedMessages
                };
            }
        }
        // 没有找到现有消息，添加新消息
        return {
            ...prev,
            [sessionId]: [
                ...sessionMessages,
                {
                    id: event.id,
                    role: 'assistant',
                    content: event.content,
                    timestamp: event.timestamp,
                    toolCalls: event.toolCalls,
                    finishReason: event.finishReason,
                    messageId: messageId
                }
            ]
        };
    });
    // 检查是否需要关联最近的环境输入
    const currentMessages = get(_atoms_message__WEBPACK_IMPORTED_MODULE_0__.messagesAtom)[sessionId] || [];
    // 从后往前查找最近的环境输入
    for(let i = currentMessages.length - 1; i >= 0; i--){
        const msg = currentMessages[i];
        if (msg.role === 'environment' && Array.isArray(msg.content)) {
            const imageContent = msg.content.find((item)=>item.type === 'image_url' && item.image_url && item.image_url.url);
            if (imageContent) {
                set(_atoms_ui__WEBPACK_IMPORTED_MODULE_2__.activePanelContentAtom, {
                    type: 'image',
                    source: msg.content,
                    title: msg.description || 'Final Browser State',
                    timestamp: msg.timestamp,
                    environmentId: msg.id
                });
                break;
            }
        }
    }
    set(_atoms_ui__WEBPACK_IMPORTED_MODULE_2__.isProcessingAtom, false);
}
/**
 * Handle streaming message event (incremental content)
 */ function handleStreamingMessage(get, set, sessionId, event) {
    set(_atoms_message__WEBPACK_IMPORTED_MODULE_0__.messagesAtom, (prev)=>{
        const sessionMessages = prev[sessionId] || [];
        const messageIdToFind = event.messageId;
        let existingMessageIndex = -1;
        // 优先按messageId查找
        if (messageIdToFind) {
            existingMessageIndex = sessionMessages.findIndex((msg)=>msg.messageId === messageIdToFind);
        } else if (sessionMessages.length > 0) {
            const lastMessageIndex = sessionMessages.length - 1;
            const lastMessage = sessionMessages[lastMessageIndex];
            if (lastMessage && lastMessage.isStreaming) {
                existingMessageIndex = lastMessageIndex;
            }
        }
        // 更新现有消息
        if (existingMessageIndex !== -1) {
            const existingMessage = sessionMessages[existingMessageIndex];
            const updatedMessage = {
                ...existingMessage,
                content: typeof existingMessage.content === 'string' ? existingMessage.content + event.content : event.content,
                isStreaming: !event.isComplete,
                toolCalls: event.toolCalls || existingMessage.toolCalls
            };
            return {
                ...prev,
                [sessionId]: [
                    ...sessionMessages.slice(0, existingMessageIndex),
                    updatedMessage,
                    ...sessionMessages.slice(existingMessageIndex + 1)
                ]
            };
        }
        // 创建新消息
        const newMessage = {
            id: event.id || (0,uuid__WEBPACK_IMPORTED_MODULE_7__["default"])(),
            role: 'assistant',
            content: event.content,
            timestamp: event.timestamp,
            isStreaming: !event.isComplete,
            toolCalls: event.toolCalls,
            messageId: event.messageId
        };
        return {
            ...prev,
            [sessionId]: [
                ...sessionMessages,
                newMessage
            ]
        };
    });
    if (event.isComplete) {
        set(_atoms_ui__WEBPACK_IMPORTED_MODULE_2__.isProcessingAtom, false);
    }
}
/**
 * Handle thinking message event
 */ function handleThinkingMessage(get, set, sessionId, event) {
    set(_atoms_message__WEBPACK_IMPORTED_MODULE_0__.messagesAtom, (prev)=>{
        const sessionMessages = prev[sessionId] || [];
        const lastAssistantIndex = [
            ...sessionMessages
        ].reverse().findIndex((m)=>m.role === 'assistant');
        if (lastAssistantIndex !== -1) {
            const actualIndex = sessionMessages.length - 1 - lastAssistantIndex;
            const message = sessionMessages[actualIndex];
            return {
                ...prev,
                [sessionId]: [
                    ...sessionMessages.slice(0, actualIndex),
                    {
                        ...message,
                        thinking: event.content
                    },
                    ...sessionMessages.slice(actualIndex + 1)
                ]
            };
        }
        return prev;
    });
}
/**
 * Handle tool call event - store arguments for later use
 */ function handleToolCall(set, sessionId, event) {
    // 保存工具调用的参数信息以便后续使用
    if (event.toolCallId && event.arguments) {
        toolCallArgumentsMap.set(event.toolCallId, event.arguments);
    }
    console.log('Tool call stored:', event.name, event.toolCallId);
}
function handleToolResult(set, sessionId, event) {
    // 获取之前存储的参数信息
    const args = toolCallArgumentsMap.get(event.toolCallId);
    const result = {
        id: (0,uuid__WEBPACK_IMPORTED_MODULE_7__["default"])(),
        toolCallId: event.toolCallId,
        name: event.name,
        content: event.content,
        timestamp: event.timestamp,
        error: event.error,
        type: (0,_utils_formatters__WEBPACK_IMPORTED_MODULE_3__.determineToolType)(event.name, event.content),
        arguments: args
    };
    // 优化：使用 batch 更新减少重渲染
    // 1. 批量更新消息和工具结果
    set(_atoms_message__WEBPACK_IMPORTED_MODULE_0__.messagesAtom, (prev)=>{
        const sessionMessages = prev[sessionId] || [];
        // 优化：使用 Map 提升查找性能
        const messageMap = new Map(sessionMessages.map((msg, index)=>[
                msg.id,
                {
                    msg,
                    index
                }
            ]));
        // 找到对应的消息并添加toolResults
        for (const [msgId, { msg, index }] of messageMap){
            var _msg_toolCalls;
            if ((_msg_toolCalls = msg.toolCalls) === null || _msg_toolCalls === void 0 ? void 0 : _msg_toolCalls.some((tc)=>tc.id === result.toolCallId)) {
                const toolResults = msg.toolResults || [];
                const updatedMessage = {
                    ...msg,
                    toolResults: [
                        ...toolResults,
                        result
                    ]
                };
                return {
                    ...prev,
                    [sessionId]: [
                        ...sessionMessages.slice(0, index),
                        updatedMessage,
                        ...sessionMessages.slice(index + 1)
                    ]
                };
            }
        }
        return prev;
    });
    // 2. 同时更新工具结果
    set(_atoms_tool__WEBPACK_IMPORTED_MODULE_1__.toolResultsAtom, (prev)=>{
        const sessionResults = prev[sessionId] || [];
        return {
            ...prev,
            [sessionId]: [
                ...sessionResults,
                result
            ]
        };
    });
    // 3. 延迟更新 workspace 面板以确保消息先渲染
    setTimeout(()=>{
        if (result.type === 'browser_vision_control') {
            set(_atoms_ui__WEBPACK_IMPORTED_MODULE_2__.activePanelContentAtom, (prev)=>{
                if (prev && prev.type === 'image' && prev.environmentId) {
                    return {
                        ...prev,
                        type: 'browser_vision_control',
                        source: event.content,
                        title: prev.title,
                        timestamp: event.timestamp,
                        toolCallId: event.toolCallId,
                        error: event.error,
                        arguments: args,
                        originalContent: prev.source,
                        environmentId: prev.environmentId
                    };
                } else {
                    return {
                        type: result.type,
                        source: result.content,
                        title: result.name,
                        timestamp: result.timestamp,
                        toolCallId: result.toolCallId,
                        error: result.error,
                        arguments: args
                    };
                }
            });
        } else {
            set(_atoms_ui__WEBPACK_IMPORTED_MODULE_2__.activePanelContentAtom, {
                type: result.type,
                source: result.content,
                title: result.name,
                timestamp: result.timestamp,
                toolCallId: result.toolCallId,
                error: result.error,
                arguments: args
            });
        }
    }, 0);
    // Store in the map for future reference
    _atoms_tool__WEBPACK_IMPORTED_MODULE_1__.toolCallResultMap.set(result.toolCallId, result);
}
/**
 * Handle system message event
function handleSystemMessage(
  set: Setter,
  sessionId: string,
  event: AgentEventStream.Event & { message: string; level?: string },
): void {
  const systemMessage: Message = {
    id: uuidv4(),
    role: 'system',
    content: event.message,
    timestamp: event.timestamp || Date.now(),
  };

  set(messagesAtom, (prev: Record<string, Message[]>) => {
    const sessionMessages = prev[sessionId] || [];
    return {
      ...prev,
      [sessionId]: [...sessionMessages, systemMessage],
    };
  });
}

/**
 * Handle environment input event
 * Adds it to messages but doesn't set it as active panel content
 */ function handleEnvironmentInput(set, sessionId, event) {
    const environmentMessage = {
        id: event.id,
        role: 'environment',
        content: event.content,
        timestamp: event.timestamp,
        description: event.description || 'Environment Input'
    };
    console.log('[GUI] environmentMessage', environmentMessage);
    set(_atoms_message__WEBPACK_IMPORTED_MODULE_0__.messagesAtom, (prev)=>{
        const sessionMessages = prev[sessionId] || [];
        return {
            ...prev,
            [sessionId]: [
                ...sessionMessages,
                environmentMessage
            ]
        };
    });
    // 检查是否包含图片内容并直接设置为活动面板内容
    if (Array.isArray(event.content)) {
        const imageContent = event.content.find((item)=>item.type === 'image_url' && item.image_url && item.image_url.url);
        if (imageContent && imageContent.image_url) {
            set(_atoms_ui__WEBPACK_IMPORTED_MODULE_2__.activePanelContentAtom, (prev)=>{
                console.log('[GUI] prev', prev === null || prev === void 0 ? void 0 : prev.type);
                // 如果当前面板是来自 browser_vision_control，选择增强而不是替换
                if (prev && prev.type === 'browser_vision_control') {
                    console.log('[GUI] prev event.content', event.content);
                    return {
                        ...prev,
                        type: 'browser_vision_control',
                        title: `${prev.title} - New Screenshot`,
                        timestamp: event.timestamp,
                        originalContent: event.content,
                        environmentId: prev.environmentId
                    };
                } else {
                    console.log('[GUI] prev', 111);
                    // 否则使用标准处理方式
                    return prev;
                // return {
                //   type: 'image',
                //   source: event.content,
                //   title: event.description || 'Browser Screenshot',
                //   timestamp: event.timestamp,
                //   environmentId: event.id, // 添加标识，用于browser_vision_control增量更新
                // };
                }
            });
        }
    }
}
/**
 * Handle plan start event
 */ function handlePlanStart(set, sessionId, event) {
    console.log('Plan start event:', event);
    set(_atoms_plan__WEBPACK_IMPORTED_MODULE_4__.plansAtom, (prev)=>({
            ...prev,
            [sessionId]: {
                steps: [],
                isComplete: false,
                summary: null,
                hasGeneratedPlan: true,
                keyframes: []
            }
        }));
}
/**
 * Handle plan update event
 */ function handlePlanUpdate(set, sessionId, event) {
    console.log('Plan update event:', event);
    set(_atoms_plan__WEBPACK_IMPORTED_MODULE_4__.plansAtom, (prev)=>{
        const currentPlan = prev[sessionId] || {
            steps: [],
            isComplete: false,
            summary: null,
            hasGeneratedPlan: true,
            keyframes: []
        };
        // Create a new keyframe for this update
        const newKeyframe = {
            timestamp: event.timestamp || Date.now(),
            steps: event.steps,
            isComplete: false,
            summary: null
        };
        // Add the keyframe to the history
        const keyframes = [
            ...currentPlan.keyframes || [],
            newKeyframe
        ];
        return {
            ...prev,
            [sessionId]: {
                ...currentPlan,
                steps: event.steps,
                hasGeneratedPlan: true,
                keyframes
            }
        };
    });
}
/**
 * Handle plan finish event
 */ function handlePlanFinish(set, sessionId, event) {
    console.log('Plan finish event:', event);
    set(_atoms_plan__WEBPACK_IMPORTED_MODULE_4__.plansAtom, (prev)=>{
        const currentPlan = prev[sessionId] || {
            steps: [],
            isComplete: false,
            summary: null,
            hasGeneratedPlan: true,
            keyframes: []
        };
        // Create a final keyframe for the completed plan
        const finalKeyframe = {
            timestamp: event.timestamp || Date.now(),
            steps: currentPlan.steps,
            isComplete: true,
            summary: event.summary
        };
        // Add the final keyframe to the history
        const keyframes = [
            ...currentPlan.keyframes || [],
            finalKeyframe
        ];
        return {
            ...prev,
            [sessionId]: {
                ...currentPlan,
                isComplete: true,
                summary: event.summary,
                keyframes
            }
        };
    });
}
/**
 * Handle final answer event (complete answer/report)
 */ function handleFinalAnswer(get, set, sessionId, event) {
    const messageId = event.messageId || `final-answer-${(0,uuid__WEBPACK_IMPORTED_MODULE_7__["default"])()}`;
    // 始终将内容当作研究报告处理，移除JSON_DATA状态
    // 设置活动面板内容为研究报告
    set(_atoms_ui__WEBPACK_IMPORTED_MODULE_2__.activePanelContentAtom, {
        type: 'research_report',
        source: event.content,
        title: event.title || 'Research Report',
        timestamp: event.timestamp,
        isDeepResearch: true,
        messageId
    });
    // 添加消息到聊天引用报告
    const finalAnswerMessage = {
        id: event.id || (0,uuid__WEBPACK_IMPORTED_MODULE_7__["default"])(),
        role: 'final_answer',
        content: event.content,
        timestamp: event.timestamp,
        messageId,
        isDeepResearch: true,
        title: event.title || 'Research Report'
    };
    set(_atoms_message__WEBPACK_IMPORTED_MODULE_0__.messagesAtom, (prev)=>{
        const sessionMessages = prev[sessionId] || [];
        return {
            ...prev,
            [sessionId]: [
                ...sessionMessages,
                finalAnswerMessage
            ]
        };
    });
    // 标记处理完成
    set(_atoms_ui__WEBPACK_IMPORTED_MODULE_2__.isProcessingAtom, false);
}
function handleFinalAnswerStreaming(get, set, sessionId, event) {
    const messageId = event.messageId || `final-answer-${(0,uuid__WEBPACK_IMPORTED_MODULE_7__["default"])()}`;
    // 从当前消息列表中查找已有的相同 messageId 的消息
    const messages = get(_atoms_message__WEBPACK_IMPORTED_MODULE_0__.messagesAtom)[sessionId] || [];
    const existingMessageIndex = messages.findIndex((msg)=>msg.messageId === messageId);
    // 当处理一系列流式事件时，将内容追加到现有消息，或创建新消息
    set(_atoms_message__WEBPACK_IMPORTED_MODULE_0__.messagesAtom, (prev)=>{
        const sessionMessages = prev[sessionId] || [];
        // 如果找到现有消息，则更新它
        if (existingMessageIndex >= 0) {
            const existingMessage = sessionMessages[existingMessageIndex];
            const updatedMessage = {
                ...existingMessage,
                content: typeof existingMessage.content === 'string' ? existingMessage.content + event.content : event.content,
                isStreaming: !event.isComplete,
                timestamp: event.timestamp
            };
            return {
                ...prev,
                [sessionId]: [
                    ...sessionMessages.slice(0, existingMessageIndex),
                    updatedMessage,
                    ...sessionMessages.slice(existingMessageIndex + 1)
                ]
            };
        }
        // 否则创建新消息
        const newMessage = {
            id: event.id || (0,uuid__WEBPACK_IMPORTED_MODULE_7__["default"])(),
            role: 'final_answer',
            content: event.content,
            timestamp: event.timestamp,
            messageId,
            isDeepResearch: true,
            isStreaming: !event.isComplete,
            title: event.title || 'Research Report'
        };
        return {
            ...prev,
            [sessionId]: [
                ...sessionMessages,
                newMessage
            ]
        };
    });
    // 更新活动面板内容 - 同步面板与消息状态
    set(_atoms_ui__WEBPACK_IMPORTED_MODULE_2__.activePanelContentAtom, (prev)=>{
        // 如果是新流或不同的messageId，重新开始
        if (!prev || prev.type !== 'research_report' || prev.messageId !== messageId) {
            return {
                role: 'assistant',
                type: 'research_report',
                source: event.content,
                title: event.title || 'Research Report (Generating...)',
                timestamp: event.timestamp,
                isDeepResearch: true,
                messageId,
                isStreaming: !event.isComplete
            };
        }
        // 否则追加到现有内容
        return {
            ...prev,
            source: prev.source + event.content,
            isStreaming: !event.isComplete,
            timestamp: event.timestamp,
            title: event.title || prev.title
        };
    });
    // 如果这是第一个数据块，也添加一条消息到聊天
    const prevActivePanelContent = get(_atoms_ui__WEBPACK_IMPORTED_MODULE_2__.activePanelContentAtom);
    if (!prevActivePanelContent || prevActivePanelContent.messageId !== messageId) {
        const initialMessage = {
            id: event.id || (0,uuid__WEBPACK_IMPORTED_MODULE_7__["default"])(),
            role: 'final_answer',
            content: event.content,
            timestamp: event.timestamp,
            messageId,
            isDeepResearch: true,
            isStreaming: !event.isComplete,
            title: event.title || 'Research Report'
        };
        set(_atoms_message__WEBPACK_IMPORTED_MODULE_0__.messagesAtom, (prev)=>{
            const sessionMessages = prev[sessionId] || [];
            return {
                ...prev,
                [sessionId]: [
                    ...sessionMessages,
                    initialMessage
                ]
            };
        });
    } else if (event.isComplete) {
        // 当流式生成完成时，更新消息的完整内容
        const fullContent = get(_atoms_ui__WEBPACK_IMPORTED_MODULE_2__.activePanelContentAtom).source;
        set(_atoms_message__WEBPACK_IMPORTED_MODULE_0__.messagesAtom, (prev)=>{
            const sessionMessages = prev[sessionId] || [];
            const messageIndex = sessionMessages.findIndex((msg)=>msg.messageId === messageId);
            if (messageIndex >= 0) {
                const updatedMessages = [
                    ...sessionMessages
                ];
                updatedMessages[messageIndex] = {
                    ...updatedMessages[messageIndex],
                    content: fullContent,
                    isStreaming: false,
                    title: event.title || updatedMessages[messageIndex].title || 'Research Report'
                };
                return {
                    ...prev,
                    [sessionId]: updatedMessages
                };
            }
            return prev;
        });
    }
    // 如果这是最后一个数据块，标记处理完成
    if (event.isComplete) {
        set(_atoms_ui__WEBPACK_IMPORTED_MODULE_2__.isProcessingAtom, false);
    }
}

function $RefreshSig$() {
  return $ReactRefreshRuntime$.createSignatureFunctionForTransform();
}
function $RefreshReg$(type, id) {
  $ReactRefreshRuntime$.register(type, module.id + "_" + id);
}
Promise.resolve().then(function() {
  $ReactRefreshRuntime$.refresh(module.id, module.hot);
});


}),
"./src/v2/state/actions/sessionActions.ts": (function (module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  abortQueryAction: () => (abortQueryAction),
  checkSessionStatusAction: () => (checkSessionStatusAction),
  createSessionAction: () => (createSessionAction),
  deleteSessionAction: () => (deleteSessionAction),
  loadSessionsAction: () => (loadSessionsAction),
  sendMessageAction: () => (sendMessageAction),
  setActiveSessionAction: () => (setActiveSessionAction),
  updateSessionAction: () => (updateSessionAction)
});
/* ESM import */var jotai__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("../node_modules/.pnpm/jotai@2.12.5_@types+react@18.3.23_react@18.3.1/node_modules/jotai/esm/vanilla.mjs");
/* ESM import */var uuid__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-browser/v4.js");
/* ESM import */var _services_apiService__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/v2/services/apiService.ts");
/* ESM import */var _atoms_session__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/v2/state/atoms/session.ts");
/* ESM import */var _atoms_message__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/v2/state/atoms/message.ts");
/* ESM import */var _atoms_message__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_atoms_message__WEBPACK_IMPORTED_MODULE_2__);
/* ESM import */var _atoms_tool__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/v2/state/atoms/tool.ts");
/* ESM import */var _atoms_ui__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/v2/state/atoms/ui.ts");
/* ESM import */var _eventProcessor__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./src/v2/state/actions/eventProcessor.ts");
/* ESM import */var _atoms_replay__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./src/v2/state/atoms/replay.ts");
/* provided dependency */ var $ReactRefreshRuntime$ = __webpack_require__("../node_modules/.pnpm/@rspack+plugin-react-refresh@1.0.3_react-refresh@0.16.0/node_modules/@rspack/plugin-react-refresh/client/reactRefresh.js");










/**
 * Load all available sessions
 */ const loadSessionsAction = (0,jotai__WEBPACK_IMPORTED_MODULE_7__.atom)(null, async (get, set)=>{
    try {
        const loadedSessions = await _services_apiService__WEBPACK_IMPORTED_MODULE_0__.apiService.getSessions();
        set(_atoms_session__WEBPACK_IMPORTED_MODULE_1__.sessionsAtom, loadedSessions);
    } catch (error) {
        console.error('Failed to load sessions:', error);
        throw error;
    }
});
/**
 * Create a new session
 */ const createSessionAction = (0,jotai__WEBPACK_IMPORTED_MODULE_7__.atom)(null, async (get, set)=>{
    try {
        const newSession = await _services_apiService__WEBPACK_IMPORTED_MODULE_0__.apiService.createSession();
        // Add to sessions list
        set(_atoms_session__WEBPACK_IMPORTED_MODULE_1__.sessionsAtom, (prev)=>[
                newSession,
                ...prev
            ]);
        // Initialize session data
        set(_atoms_message__WEBPACK_IMPORTED_MODULE_2__.messagesAtom, (prev)=>({
                ...prev,
                [newSession.id]: []
            }));
        set(_atoms_tool__WEBPACK_IMPORTED_MODULE_3__.toolResultsAtom, (prev)=>({
                ...prev,
                [newSession.id]: []
            }));
        // Clear workspace panel content to show empty state
        set(_atoms_ui__WEBPACK_IMPORTED_MODULE_4__.activePanelContentAtom, null);
        // Set as active session
        set(_atoms_session__WEBPACK_IMPORTED_MODULE_1__.activeSessionIdAtom, newSession.id);
        return newSession.id;
    } catch (error) {
        console.error('Failed to create session:', error);
        throw error;
    }
});
/**
 * Set the active session
 * 简化加载逻辑，移除恢复会话的复杂性
 */ const setActiveSessionAction = (0,jotai__WEBPACK_IMPORTED_MODULE_7__.atom)(null, async (get, set, sessionId)=>{
    try {
        // 检查是否已经是活动会话
        const currentActiveSessionId = get(_atoms_session__WEBPACK_IMPORTED_MODULE_1__.activeSessionIdAtom);
        if (currentActiveSessionId === sessionId) {
            console.log(`Session ${sessionId} is already active, skipping load`);
            return;
        }
        // 检查回放状态并退出回放模式（除非是同一会话）
        const replayState = get(_atoms_replay__WEBPACK_IMPORTED_MODULE_6__.replayStateAtom);
        if (replayState.isActive) {
            console.log('Exiting replay mode due to session change');
            set(_atoms_replay__WEBPACK_IMPORTED_MODULE_6__.replayStateAtom, {
                isActive: false,
                isPaused: true,
                events: [],
                currentEventIndex: -1,
                startTimestamp: null,
                endTimestamp: null,
                playbackSpeed: 1,
                visibleTimeWindow: null,
                processedEvents: {}
            });
        }
        // 直接获取会话详情，不需要检查 active 状态
        const sessionDetails = await _services_apiService__WEBPACK_IMPORTED_MODULE_0__.apiService.getSessionDetails(sessionId);
        // 获取当前会话状态以更新 isProcessing 状态
        try {
            const status = await _services_apiService__WEBPACK_IMPORTED_MODULE_0__.apiService.getSessionStatus(sessionId);
            set(_atoms_ui__WEBPACK_IMPORTED_MODULE_4__.isProcessingAtom, status.isProcessing);
        } catch (error) {
            console.warn('Failed to get session status:', error);
            set(_atoms_ui__WEBPACK_IMPORTED_MODULE_4__.isProcessingAtom, false);
        }
        // 清理工具调用映射缓存
        _atoms_tool__WEBPACK_IMPORTED_MODULE_3__.toolCallResultMap.clear();
        // 只有在消息不存在时才加载会话事件
        const messages = get(_atoms_message__WEBPACK_IMPORTED_MODULE_2__.messagesAtom);
        if (!messages[sessionId] || messages[sessionId].length === 0) {
            console.log(`Loading events for session ${sessionId}`);
            const events = await _services_apiService__WEBPACK_IMPORTED_MODULE_0__.apiService.getSessionEvents(sessionId);
            // 对流式事件进行预处理，确保正确的连续性
            const processedEvents = preprocessStreamingEvents(events);
            // 处理每个事件以构建消息和工具结果
            for (const event of processedEvents){
                set(_eventProcessor__WEBPACK_IMPORTED_MODULE_5__.processEventAction, {
                    sessionId,
                    event
                });
            }
        } else {
            console.log(`Session ${sessionId} already has messages, skipping event loading`);
        }
        // 设置为活动会话
        set(_atoms_session__WEBPACK_IMPORTED_MODULE_1__.activeSessionIdAtom, sessionId);
    } catch (error) {
        console.error('Failed to set active session:', error);
        set(_atoms_ui__WEBPACK_IMPORTED_MODULE_4__.connectionStatusAtom, (prev)=>({
                ...prev,
                connected: false,
                lastError: error instanceof Error ? error.message : String(error)
            }));
        throw error;
    }
});
/**
 * Update session metadata
 */ const updateSessionAction = (0,jotai__WEBPACK_IMPORTED_MODULE_7__.atom)(null, async (get, set, params)=>{
    const { sessionId, updates } = params;
    try {
        const updatedSession = await _services_apiService__WEBPACK_IMPORTED_MODULE_0__.apiService.updateSessionMetadata(sessionId, updates);
        // Update session in the list
        set(_atoms_session__WEBPACK_IMPORTED_MODULE_1__.sessionsAtom, (prev)=>prev.map((session)=>session.id === sessionId ? {
                    ...session,
                    ...updatedSession
                } : session));
        return updatedSession;
    } catch (error) {
        console.error('Failed to update session:', error);
        throw error;
    }
});
/**
 * 预处理事件，确保流式事件按正确顺序处理
 */ function preprocessStreamingEvents(events) {
    // 对流式消息进行整理
    const messageStreams = {};
    // 收集所有流式事件，按messageId分组
    events.forEach((event)=>{
        if (event.type === 'final_answer_streaming' && 'messageId' in event) {
            const messageId = event.messageId;
            if (!messageStreams[messageId]) {
                messageStreams[messageId] = [];
            }
            messageStreams[messageId].push(event);
        }
    });
    // 返回预处理后的事件，确保流式事件以正确顺序处理
    return events;
}
/**
 * Delete a session
 */ const deleteSessionAction = (0,jotai__WEBPACK_IMPORTED_MODULE_7__.atom)(null, async (get, set, sessionId)=>{
    try {
        const success = await _services_apiService__WEBPACK_IMPORTED_MODULE_0__.apiService.deleteSession(sessionId);
        const activeSessionId = get(_atoms_session__WEBPACK_IMPORTED_MODULE_1__.activeSessionIdAtom);
        if (success) {
            // Remove from sessions list
            set(_atoms_session__WEBPACK_IMPORTED_MODULE_1__.sessionsAtom, (prev)=>prev.filter((session)=>session.id !== sessionId));
            // Clear active session if it was deleted
            if (activeSessionId === sessionId) {
                set(_atoms_session__WEBPACK_IMPORTED_MODULE_1__.activeSessionIdAtom, null);
            }
            // Clear session data
            set(_atoms_message__WEBPACK_IMPORTED_MODULE_2__.messagesAtom, (prev)=>{
                const newMessages = {
                    ...prev
                };
                delete newMessages[sessionId];
                return newMessages;
            });
            set(_atoms_tool__WEBPACK_IMPORTED_MODULE_3__.toolResultsAtom, (prev)=>{
                const newResults = {
                    ...prev
                };
                delete newResults[sessionId];
                return newResults;
            });
        }
        return success;
    } catch (error) {
        console.error('Failed to delete session:', error);
        throw error;
    }
});
/**
 * Send a message in the current session
 */ const sendMessageAction = (0,jotai__WEBPACK_IMPORTED_MODULE_7__.atom)(null, async (get, set, content)=>{
    const activeSessionId = get(_atoms_session__WEBPACK_IMPORTED_MODULE_1__.activeSessionIdAtom);
    if (!activeSessionId) {
        throw new Error('No active session');
    }
    // 明确设置处理状态
    set(_atoms_ui__WEBPACK_IMPORTED_MODULE_4__.isProcessingAtom, true);
    // 添加用户消息到状态
    const userMessage = {
        id: (0,uuid__WEBPACK_IMPORTED_MODULE_8__["default"])(),
        role: 'user',
        content,
        timestamp: Date.now()
    };
    set(_atoms_message__WEBPACK_IMPORTED_MODULE_2__.messagesAtom, (prev)=>{
        const sessionMessages = prev[activeSessionId] || [];
        return {
            ...prev,
            [activeSessionId]: [
                ...sessionMessages,
                userMessage
            ]
        };
    });
    // 立即更新会话名称，使用用户查询作为 Summary
    // 这样即使后续更新失败也至少有一个基本的名称
    try {
        // 检查是否是第一条消息，如果是则直接用查询内容作为会话名称
        const messages = get(_atoms_message__WEBPACK_IMPORTED_MODULE_2__.messagesAtom)[activeSessionId] || [];
        if (messages.length <= 2) {
            // 算上刚刚添加的用户消息
            let summary = '';
            if (typeof content === 'string') {
                summary = content.length > 50 ? content.substring(0, 47) + '...' : content;
            } else {
                // 从多模态内容中提取文本部分
                const textPart = content.find((part)=>part.type === 'text');
                if (textPart && 'text' in textPart) {
                    summary = textPart.text.length > 50 ? textPart.text.substring(0, 47) + '...' : textPart.text;
                } else {
                    summary = 'Image message';
                }
            }
            await _services_apiService__WEBPACK_IMPORTED_MODULE_0__.apiService.updateSessionMetadata(activeSessionId, {
                name: summary
            });
            // 更新 sessions atom
            set(_atoms_session__WEBPACK_IMPORTED_MODULE_1__.sessionsAtom, (prev)=>prev.map((session)=>session.id === activeSessionId ? {
                        ...session,
                        name: summary
                    } : session));
        }
    } catch (error) {
        console.log('Failed to update initial summary, continuing anyway:', error);
    // 错误不中断主流程
    }
    try {
        // 使用流式查询
        await _services_apiService__WEBPACK_IMPORTED_MODULE_0__.apiService.sendStreamingQuery(activeSessionId, content, (event)=>{
            // 处理每个事件
            set(_eventProcessor__WEBPACK_IMPORTED_MODULE_5__.processEventAction, {
                sessionId: activeSessionId,
                event
            });
            // 确保状态保持为处理中，直到明确收到结束事件
            if (event.type !== 'agent_run_end' && event.type !== 'assistant_message') {
                set(_atoms_ui__WEBPACK_IMPORTED_MODULE_4__.isProcessingAtom, true);
            }
        });
    } catch (error) {
        console.error('Error sending message:', error);
        // 错误时重置处理状态
        set(_atoms_ui__WEBPACK_IMPORTED_MODULE_4__.isProcessingAtom, false);
        throw error;
    }
});
/**
 * Abort the current running query
 */ const abortQueryAction = (0,jotai__WEBPACK_IMPORTED_MODULE_7__.atom)(null, async (get, set)=>{
    const activeSessionId = get(_atoms_session__WEBPACK_IMPORTED_MODULE_1__.activeSessionIdAtom);
    if (!activeSessionId) {
        return false;
    }
    try {
        const success = await _services_apiService__WEBPACK_IMPORTED_MODULE_0__.apiService.abortQuery(activeSessionId);
        if (success) {
            set(_atoms_ui__WEBPACK_IMPORTED_MODULE_4__.isProcessingAtom, false);
            // Add system message about abort
            const abortMessage = {
                id: (0,uuid__WEBPACK_IMPORTED_MODULE_8__["default"])(),
                role: 'system',
                content: 'The operation was aborted.',
                timestamp: Date.now()
            };
            set(_atoms_message__WEBPACK_IMPORTED_MODULE_2__.messagesAtom, (prev)=>{
                const sessionMessages = prev[activeSessionId] || [];
                return {
                    ...prev,
                    [activeSessionId]: [
                        ...sessionMessages,
                        abortMessage
                    ]
                };
            });
        }
        return success;
    } catch (error) {
        console.error('Error aborting query:', error);
        return false;
    }
});
/**
 * Check the current status of a session
 */ const checkSessionStatusAction = (0,jotai__WEBPACK_IMPORTED_MODULE_7__.atom)(null, async (get, set, sessionId)=>{
    if (!sessionId) return;
    try {
        console.log(`Checking status for session: ${sessionId}`);
        const status = await _services_apiService__WEBPACK_IMPORTED_MODULE_0__.apiService.getSessionStatus(sessionId);
        console.log(`Status for session ${sessionId}:`, status);
        // 根据服务器响应更新处理状态
        set(_atoms_ui__WEBPACK_IMPORTED_MODULE_4__.isProcessingAtom, status.isProcessing);
        return status;
    } catch (error) {
        console.error('Failed to check session status:', error);
    // 错误时不更新处理状态，避免误报
    }
});
/**
 * Handle the end of a conversation
 * 仍然保留此函数，但减少其重要性，避免更新失败带来的影响
 */ async function handleConversationEnd(get, set, sessionId) {
    // 我们不再依赖这个函数来设置会话名称，但仍然保留它作为备份机制
    const allMessages = get(_atoms_message__WEBPACK_IMPORTED_MODULE_2__.messagesAtom)[sessionId] || [];
    // 只在有足够的消息并且会话没有名称时才尝试生成摘要
    const sessions = get(_atoms_session__WEBPACK_IMPORTED_MODULE_1__.sessionsAtom);
    const currentSession = sessions.find((s)=>s.id === sessionId);
    // 如果会话已经有名称，则不需要再生成
    if (currentSession && currentSession.name) {
        return;
    }
    // 只在有实际对话时才尝试生成摘要
    if (allMessages.length > 1) {
        try {
            // 转换消息为 API 期望的格式
            const apiMessages = allMessages.map((msg)=>({
                    role: msg.role,
                    content: typeof msg.content === 'string' ? msg.content : 'multimodal content'
                }));
            // 生成摘要
            const summary = await _services_apiService__WEBPACK_IMPORTED_MODULE_0__.apiService.generateSummary(sessionId, apiMessages);
            if (summary) {
                // 更新会话名称
                await _services_apiService__WEBPACK_IMPORTED_MODULE_0__.apiService.updateSessionMetadata(sessionId, {
                    name: summary
                });
                // 更新 sessions atom
                set(_atoms_session__WEBPACK_IMPORTED_MODULE_1__.sessionsAtom, (prev)=>prev.map((session)=>session.id === sessionId ? {
                            ...session,
                            name: summary
                        } : session));
            }
        } catch (error) {
            console.error('Failed to generate or update summary, continuing anyway:', error);
        // 错误不影响主流程
        }
    }
}

function $RefreshSig$() {
  return $ReactRefreshRuntime$.createSignatureFunctionForTransform();
}
function $RefreshReg$(type, id) {
  $ReactRefreshRuntime$.register(type, module.id + "_" + id);
}
Promise.resolve().then(function() {
  $ReactRefreshRuntime$.refresh(module.id, module.hot);
});


}),
"./src/v2/state/atoms/message.ts": (function (module, __unused_webpack_exports, __webpack_require__) {
/* provided dependency */ var $ReactRefreshRuntime$ = __webpack_require__("../node_modules/.pnpm/@rspack+plugin-react-refresh@1.0.3_react-refresh@0.16.0/node_modules/@rspack/plugin-react-refresh/client/reactRefresh.js");
/**
 * 简化版消息分组 - 减少复杂度
 */ function createMessageGroups(messages) {
    if (!messages.length) return [];
    const groups = [];
    let currentGroup = [];
    // 简化分组逻辑，减少复杂判断
    for (const message of messages){
        // 用户消息或系统消息开始新组
        if (message.role === 'user' || message.role === 'system') {
            if (currentGroup.length > 0) {
                groups.push({
                    messages: [
                        ...currentGroup
                    ]
                });
            }
            currentGroup = [
                message
            ];
        } else {
            // 其他消息添加到当前组
            currentGroup.push(message);
        }
    }
    // 添加最后一组
    if (currentGroup.length > 0) {
        groups.push({
            messages: [
                ...currentGroup
            ]
        });
    }
    return groups;
}

function $RefreshSig$() {
  return $ReactRefreshRuntime$.createSignatureFunctionForTransform();
}
function $RefreshReg$(type, id) {
  $ReactRefreshRuntime$.register(type, module.id + "_" + id);
}
Promise.resolve().then(function() {
  $ReactRefreshRuntime$.refresh(module.id, module.hot);
});


}),

},function(__webpack_require__) {
// webpack/runtime/get_full_hash
(() => {
__webpack_require__.h = () => ("d7a0bb0a0a9001b7")
})();

}
);
//# sourceMappingURL=index.09e012e005aeb269.hot-update.js.map