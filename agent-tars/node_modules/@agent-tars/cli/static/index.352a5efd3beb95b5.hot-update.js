"use strict";
self["webpackHotUpdate_agent_tars_web_ui"]("index", {
"./src/entry.css": (function (module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
// extracted by css-extract-rspack-plugin

    if(true) {
      (function() {
        var localsJsonString = undefined;
        // 1748910579984
        var cssReload = (__webpack_require__("../node_modules/.pnpm/@rspack+core@1.3.9_@swc+helpers@0.5.17/node_modules/@rspack/core/dist/cssExtractHmr.js")/* .cssReload */.cssReload)(module.id, {});
        // only invalidate when locals change
        if (
          module.hot.data &&
          module.hot.data.value &&
          module.hot.data.value !== localsJsonString
        ) {
          module.hot.invalidate();
        } else {
          module.hot.accept();
        }
        module.hot.dispose(function(data) {
          data.value = localsJsonString;
          cssReload();
        });
      })();
    }
  

}),
"./src/v2/components/Chat/MessageInput.tsx": (function (module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  MessageInput: () => (MessageInput)
});
/* ESM import */var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/react@18.3.1/node_modules/react/jsx-dev-runtime.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../node_modules/.pnpm/react@18.3.1/node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* ESM import */var _hooks_useSession__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/v2/hooks/useSession.ts");
/* ESM import */var _hooks_usePlan__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/v2/hooks/usePlan.ts");
/* ESM import */var react_icons_fi__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__("../node_modules/.pnpm/react-icons@4.12.0_react@18.3.1/node_modules/react-icons/fi/index.esm.js");
/* ESM import */var framer_motion__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("../node_modules/.pnpm/framer-motion@10.18.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/render/dom/motion.mjs");
/* ESM import */var framer_motion__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__("../node_modules/.pnpm/framer-motion@10.18.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/components/AnimatePresence/index.mjs");
/* ESM import */var react_router_dom__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("../node_modules/.pnpm/react-router@7.6.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/react-router/dist/development/chunk-DQRVZFIR.mjs");
/* ESM import */var _MessageInput_css__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/v2/components/Chat/MessageInput.css");
/* ESM import */var _v2_hooks_usePro__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./src/v2/hooks/usePro.ts");
/* ESM import */var _ImagePreview__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./src/v2/components/Chat/ImagePreview.tsx");
/* provided dependency */ var $ReactRefreshRuntime$ = __webpack_require__("../node_modules/.pnpm/@rspack+plugin-react-refresh@1.0.3_react-refresh@0.16.0/node_modules/@rspack/plugin-react-refresh/client/reactRefresh.js");

var _s = $RefreshSig$();









/**
 * MessageInput Component - Input for sending messages
 */ const MessageInput = (param)=>{
    let { isDisabled = false, onReconnect, connectionStatus } = param;
    _s();
    const [input, setInput] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('');
    const [isAborting, setIsAborting] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);
    const [isFocused, setIsFocused] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);
    const [uploadedImages, setUploadedImages] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);
    const inputRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);
    const fileInputRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);
    const location = (0,react_router_dom__WEBPACK_IMPORTED_MODULE_7__.useLocation)();
    const { sendMessage, isProcessing, abortQuery, activeSessionId, checkSessionStatus, setActivePanelContent } = (0,_hooks_useSession__WEBPACK_IMPORTED_MODULE_2__.useSession)();
    const isProMode = (0,_v2_hooks_usePro__WEBPACK_IMPORTED_MODULE_5__.usePro)();
    const { currentPlan } = (0,_hooks_usePlan__WEBPACK_IMPORTED_MODULE_3__.usePlan)(activeSessionId);
    // Process query from URL parameters on component mount
    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{
        const searchParams = new URLSearchParams(location.search);
        const query = searchParams.get('q');
        if (query && !isProcessing && activeSessionId) {
            setInput(query);
            // Submit the query automatically
            const submitQuery = async ()=>{
                try {
                    await sendMessage(query);
                    // Clear input after sending
                    setInput('');
                } catch (error) {
                    console.error('Failed to send message:', error);
                }
            };
            submitQuery();
        }
    }, [
        location.search,
        activeSessionId,
        isProcessing,
        sendMessage
    ]);
    // Ensure processing state is handled correctly
    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{
        if (activeSessionId && (connectionStatus === null || connectionStatus === void 0 ? void 0 : connectionStatus.connected)) {
            // Initial check of session status
            checkSessionStatus(activeSessionId);
            // If session status changes, increase polling
            const intervalId = setInterval(()=>{
                checkSessionStatus(activeSessionId);
            }, 2000); // Check status every 2 seconds
            return ()=>clearInterval(intervalId);
        }
    }, [
        activeSessionId,
        connectionStatus === null || connectionStatus === void 0 ? void 0 : connectionStatus.connected,
        checkSessionStatus
    ]);
    const handleSubmit = async (e)=>{
        e.preventDefault();
        if (!input.trim() && uploadedImages.length === 0 || isDisabled) return;
        // Immediately clear input field, don't wait for message to be sent
        const messageToSend = input.trim();
        setInput('');
        // Build multimodal content if there are images
        const messageContent = uploadedImages.length > 0 ? [
            ...uploadedImages,
            ...messageToSend ? [
                {
                    type: 'text',
                    text: messageToSend
                }
            ] : []
        ] : messageToSend;
        // Clear uploaded images
        setUploadedImages([]);
        // Reset textarea height immediately
        if (inputRef.current) {
            inputRef.current.style.height = 'auto';
        }
        try {
            // Use previously saved message content to send
            await sendMessage(messageContent);
        } catch (error) {
            console.error('Failed to send message:', error);
        }
    };
    // Modified to not trigger send on Enter
    const handleKeyDown = (e)=>{
        // Ctrl+Enter as optional shortcut to send
        if (e.key === 'Enter' && e.ctrlKey) {
            e.preventDefault();
            handleSubmit(e);
        }
    };
    const handleAbort = async ()=>{
        if (!isProcessing) return;
        setIsAborting(true);
        try {
            await abortQuery();
        } catch (error) {
            console.error('Failed to abort:', error);
        } finally{
            setIsAborting(false);
        }
    };
    // Adjust textarea height based on content
    const handleInput = (e)=>{
        const target = e.target;
        setInput(target.value);
        // Reset height to recalculate proper scrollHeight
        target.style.height = 'auto';
        // Set to scrollHeight but max 200px
        target.style.height = `${Math.min(target.scrollHeight, 200)}px`;
    };
    // Auto-focus input when available
    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{
        if (!isDisabled && inputRef.current) {
            inputRef.current.focus();
        }
    }, [
        isDisabled
    ]);
    // Dummy handler for file upload button
    const handleFileUpload = ()=>{
        if (fileInputRef.current) {
            fileInputRef.current.click();
        }
    };
    // Handle file selection
    const handleFileChange = (e)=>{
        const files = e.target.files;
        if (!files || files.length === 0) return;
        Array.from(files).forEach((file)=>{
            if (!file.type.startsWith('image/')) return;
            const reader = new FileReader();
            reader.onload = (event)=>{
                var _event_target;
                if ((_event_target = event.target) === null || _event_target === void 0 ? void 0 : _event_target.result) {
                    const newImage = {
                        type: 'image_url',
                        image_url: {
                            url: event.target.result,
                            detail: 'auto'
                        }
                    };
                    setUploadedImages((prev)=>[
                            ...prev,
                            newImage
                        ]);
                }
            };
            reader.readAsDataURL(file);
        });
        // Reset the input so the same file can be selected again
        if (fileInputRef.current) {
            fileInputRef.current.value = '';
        }
    };
    // Remove an image from the uploaded images list
    const handleRemoveImage = (index)=>{
        setUploadedImages((prev)=>prev.filter((_, i)=>i !== index));
    };
    // 添加一个查看计划按钮
    const renderPlanButton = ()=>{
        // 只在实际有计划且计划已经生成时显示按钮
        if (!currentPlan || !currentPlan.hasGeneratedPlan || currentPlan.steps.length === 0) return null;
        const completedSteps = currentPlan.steps.filter((step)=>step.done).length;
        const totalSteps = currentPlan.steps.length;
        const isComplete = currentPlan.isComplete;
        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_8__.motion.button, {
            initial: {
                opacity: 0,
                scale: 0.8
            },
            animate: {
                opacity: 1,
                scale: 1
            },
            exit: {
                opacity: 0,
                scale: 0.8
            },
            whileTap: {
                scale: 0.9
            },
            whileHover: {
                scale: 1.05,
                y: -2
            },
            onClick: ()=>setActivePanelContent({
                    type: 'plan',
                    source: null,
                    title: 'Task Plan',
                    timestamp: Date.now()
                }),
            className: "flex items-center gap-1 px-3 py-1 text-xs font-medium rounded-full bg-white/80 dark:bg-gray-800 text-gray-600 dark:text-gray-300 border border-gray-200/50 dark:border-gray-700/30 hover:bg-white hover:border-gray-300/50 dark:hover:bg-gray-700/50 dark:hover:border-gray-600/50 transition-all duration-200 shadow-sm",
            children: [
                isComplete ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_icons_fi__WEBPACK_IMPORTED_MODULE_9__.FiCpu, {
                    size: 12,
                    className: "mr-0.5 text-green-500 dark:text-green-400"
                }, void 0, false, {
                    fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/MessageInput.tsx",
                    lineNumber: 233,
                    columnNumber: 11
                }, undefined) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_icons_fi__WEBPACK_IMPORTED_MODULE_9__.FiCpu, {
                    size: 12,
                    className: "mr-0.5 text-accent-500 dark:text-accent-400 animate-pulse"
                }, void 0, false, {
                    fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/MessageInput.tsx",
                    lineNumber: 235,
                    columnNumber: 11
                }, undefined),
                "View Plan",
                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("span", {
                    className: `ml-1 px-1.5 py-0.5 rounded-full ${isComplete ? 'bg-green-50 dark:bg-green-900/20 text-green-600 dark:text-green-400' : 'bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300'} text-[10px]`,
                    children: [
                        completedSteps,
                        "/",
                        totalSteps
                    ]
                }, void 0, true, {
                    fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/MessageInput.tsx",
                    lineNumber: 238,
                    columnNumber: 9
                }, undefined)
            ]
        }, void 0, true, {
            fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/MessageInput.tsx",
            lineNumber: 216,
            columnNumber: 7
        }, undefined);
    };
    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("form", {
        onSubmit: handleSubmit,
        className: "relative",
        children: [
            isProMode && currentPlan && currentPlan.hasGeneratedPlan && currentPlan.steps.length > 0 && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                className: "flex justify-center mb-3",
                children: renderPlanButton()
            }, void 0, false, {
                fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/MessageInput.tsx",
                lineNumber: 255,
                columnNumber: 9
            }, undefined),
            uploadedImages.length > 0 && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                className: "mb-3 flex flex-wrap gap-2",
                children: uploadedImages.map((image, index)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_ImagePreview__WEBPACK_IMPORTED_MODULE_6__.ImagePreview, {
                        image: image,
                        onRemove: ()=>handleRemoveImage(index)
                    }, index, false, {
                        fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/MessageInput.tsx",
                        lineNumber: 262,
                        columnNumber: 13
                    }, undefined))
            }, void 0, false, {
                fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/MessageInput.tsx",
                lineNumber: 260,
                columnNumber: 9
            }, undefined),
            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                className: `relative overflow-hidden rounded-3xl transition-all duration-300 ${isFocused ? 'shadow-md' : ''}`,
                children: [
                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                        className: `absolute inset-0 bg-gradient-to-r ${isFocused || input.trim() || uploadedImages.length > 0 ? 'from-indigo-500 via-purple-500 to-pink-500 dark:from-indigo-400 dark:via-purple-400 dark:to-pink-400 animate-border-flow' : 'from-gray-200 via-gray-300 to-gray-200 dark:from-gray-700 dark:via-gray-600 dark:to-gray-700'} bg-[length:200%_200%] ${isFocused ? 'opacity-100' : 'opacity-70'}`
                    }, void 0, false, {
                        fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/MessageInput.tsx",
                        lineNumber: 274,
                        columnNumber: 9
                    }, undefined),
                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                        className: `relative m-[2px] rounded-[1.4rem] bg-white dark:bg-gray-800 backdrop-blur-sm ${isDisabled ? 'opacity-90' : ''}`,
                        children: [
                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("textarea", {
                                ref: inputRef,
                                value: input,
                                onChange: handleInput,
                                onKeyDown: handleKeyDown,
                                onFocus: ()=>setIsFocused(true),
                                onBlur: ()=>setIsFocused(false),
                                placeholder: connectionStatus && !connectionStatus.connected ? 'Server disconnected...' : isProcessing ? 'Agent TARS is thinking...' : 'Ask Agent TARS something... (Ctrl+Enter to send)',
                                disabled: isDisabled,
                                className: "w-full px-5 pt-4 pb-10 focus:outline-none resize-none min-h-[90px] max-h-[200px] bg-transparent text-sm leading-relaxed rounded-[1.4rem]",
                                rows: 2
                            }, void 0, false, {
                                fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/MessageInput.tsx",
                                lineNumber: 288,
                                columnNumber: 11
                            }, undefined),
                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                                className: "absolute left-3 bottom-2 flex items-center gap-2",
                                children: [
                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_8__.motion.button, {
                                        whileHover: {
                                            scale: 1.05
                                        },
                                        whileTap: {
                                            scale: 0.95
                                        },
                                        type: "button",
                                        onClick: handleFileUpload,
                                        disabled: isDisabled || isProcessing,
                                        className: `p-2 rounded-full transition-colors ${isDisabled || isProcessing ? 'text-gray-300 dark:text-gray-600 cursor-not-allowed' : 'text-gray-400 hover:text-accent-500 hover:bg-gray-50 dark:hover:bg-gray-700/30 dark:text-gray-400'}`,
                                        title: "Attach image",
                                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_icons_fi__WEBPACK_IMPORTED_MODULE_9__.FiImage, {
                                            size: 18
                                        }, void 0, false, {
                                            fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/MessageInput.tsx",
                                            lineNumber: 322,
                                            columnNumber: 15
                                        }, undefined)
                                    }, void 0, false, {
                                        fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/MessageInput.tsx",
                                        lineNumber: 309,
                                        columnNumber: 13
                                    }, undefined),
                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("input", {
                                        type: "file",
                                        ref: fileInputRef,
                                        onChange: handleFileChange,
                                        accept: "image/*",
                                        multiple: true,
                                        className: "hidden",
                                        disabled: isDisabled || isProcessing
                                    }, void 0, false, {
                                        fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/MessageInput.tsx",
                                        lineNumber: 324,
                                        columnNumber: 13
                                    }, undefined)
                                ]
                            }, void 0, true, {
                                fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/MessageInput.tsx",
                                lineNumber: 308,
                                columnNumber: 11
                            }, undefined),
                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_10__.AnimatePresence, {
                                mode: "wait",
                                children: connectionStatus && !connectionStatus.connected ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_8__.motion.button, {
                                    initial: {
                                        opacity: 0,
                                        scale: 0.8
                                    },
                                    animate: {
                                        opacity: 1,
                                        scale: 1
                                    },
                                    exit: {
                                        opacity: 0,
                                        scale: 0.8
                                    },
                                    whileTap: {
                                        scale: 0.9
                                    },
                                    whileHover: {
                                        scale: 1.05
                                    },
                                    type: "button",
                                    onClick: onReconnect,
                                    className: "absolute right-3 bottom-2 p-2 rounded-full text-gray-500 hover:bg-gray-50 dark:hover:bg-gray-700/30 dark:text-gray-400 transition-all duration-200",
                                    title: "Try to reconnect",
                                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_icons_fi__WEBPACK_IMPORTED_MODULE_9__.FiRefreshCw, {
                                        size: 20,
                                        className: connectionStatus.reconnecting ? 'animate-spin' : ''
                                    }, void 0, false, {
                                        fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/MessageInput.tsx",
                                        lineNumber: 349,
                                        columnNumber: 17
                                    }, undefined)
                                }, "reconnect", false, {
                                    fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/MessageInput.tsx",
                                    lineNumber: 337,
                                    columnNumber: 15
                                }, undefined) : isProcessing ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_8__.motion.button, {
                                    initial: {
                                        opacity: 0,
                                        scale: 0.8
                                    },
                                    animate: {
                                        opacity: 1,
                                        scale: 1
                                    },
                                    exit: {
                                        opacity: 0,
                                        scale: 0.8
                                    },
                                    whileTap: {
                                        scale: 0.9
                                    },
                                    whileHover: {
                                        scale: 1.05
                                    },
                                    type: "button",
                                    onClick: handleAbort,
                                    disabled: isAborting,
                                    className: `absolute right-3 bottom-2 p-2 rounded-full ${isAborting ? 'text-gray-300 dark:text-gray-600 cursor-not-allowed' : 'text-gray-500 hover:bg-gray-50 dark:hover:bg-gray-700/30 dark:text-gray-400'} transition-all duration-200`,
                                    title: "Abort current operation",
                                    children: isAborting ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_icons_fi__WEBPACK_IMPORTED_MODULE_9__.FiLoader, {
                                        className: "animate-spin",
                                        size: 20
                                    }, void 0, false, {
                                        fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/MessageInput.tsx",
                                        lineNumber: 372,
                                        columnNumber: 31
                                    }, undefined) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_icons_fi__WEBPACK_IMPORTED_MODULE_9__.FiX, {
                                        size: 20
                                    }, void 0, false, {
                                        fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/MessageInput.tsx",
                                        lineNumber: 372,
                                        columnNumber: 81
                                    }, undefined)
                                }, "abort", false, {
                                    fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/MessageInput.tsx",
                                    lineNumber: 355,
                                    columnNumber: 15
                                }, undefined) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_8__.motion.button, {
                                    initial: {
                                        opacity: 0,
                                        scale: 0.8
                                    },
                                    animate: {
                                        opacity: 1,
                                        scale: 1
                                    },
                                    exit: {
                                        opacity: 0,
                                        scale: 0.8
                                    },
                                    whileTap: {
                                        scale: 0.9
                                    },
                                    whileHover: {
                                        scale: 1.05
                                    },
                                    type: "submit",
                                    disabled: !input.trim() && uploadedImages.length === 0 || isDisabled,
                                    className: `absolute right-3 bottom-2 p-3 rounded-full ${!input.trim() && uploadedImages.length === 0 || isDisabled ? 'bg-gray-100 dark:bg-gray-700 text-gray-400 cursor-not-allowed' : 'bg-gradient-to-r from-indigo-500 to-purple-500 dark:from-indigo-400 dark:via-purple-400 dark:to-pink-400 text-white shadow-sm'} transition-all duration-200`,
                                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_icons_fi__WEBPACK_IMPORTED_MODULE_9__.FiSend, {
                                        size: 18
                                    }, void 0, false, {
                                        fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/MessageInput.tsx",
                                        lineNumber: 390,
                                        columnNumber: 17
                                    }, undefined)
                                }, "send", false, {
                                    fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/MessageInput.tsx",
                                    lineNumber: 375,
                                    columnNumber: 15
                                }, undefined)
                            }, void 0, false, {
                                fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/MessageInput.tsx",
                                lineNumber: 335,
                                columnNumber: 11
                            }, undefined)
                        ]
                    }, void 0, true, {
                        fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/MessageInput.tsx",
                        lineNumber: 283,
                        columnNumber: 9
                    }, undefined)
                ]
            }, void 0, true, {
                fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/MessageInput.tsx",
                lineNumber: 268,
                columnNumber: 7
            }, undefined),
            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                className: "flex justify-center mt-2 text-xs",
                children: connectionStatus && !connectionStatus.connected ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_8__.motion.span, {
                    initial: {
                        opacity: 0.7
                    },
                    animate: {
                        opacity: 1
                    },
                    className: "text-red-500 dark:text-red-400 flex items-center font-medium",
                    children: connectionStatus.reconnecting ? 'Attempting to reconnect...' : 'Server disconnected. Click the button to reconnect.'
                }, void 0, false, {
                    fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/MessageInput.tsx",
                    lineNumber: 399,
                    columnNumber: 11
                }, undefined) : isProcessing ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_8__.motion.span, {
                    initial: {
                        opacity: 0.7
                    },
                    whileHover: {
                        opacity: 1
                    },
                    className: "text-accent-500 dark:text-accent-400 flex items-center",
                    children: [
                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("span", {
                            className: "typing-indicator mr-2",
                            children: [
                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("span", {}, void 0, false, {
                                    fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/MessageInput.tsx",
                                    lineNumber: 415,
                                    columnNumber: 15
                                }, undefined),
                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("span", {}, void 0, false, {
                                    fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/MessageInput.tsx",
                                    lineNumber: 416,
                                    columnNumber: 15
                                }, undefined),
                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("span", {}, void 0, false, {
                                    fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/MessageInput.tsx",
                                    lineNumber: 417,
                                    columnNumber: 15
                                }, undefined)
                            ]
                        }, void 0, true, {
                            fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/MessageInput.tsx",
                            lineNumber: 414,
                            columnNumber: 13
                        }, undefined),
                        "Agent is processing your request..."
                    ]
                }, void 0, true, {
                    fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/MessageInput.tsx",
                    lineNumber: 409,
                    columnNumber: 11
                }, undefined) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_8__.motion.span, {
                    initial: {
                        opacity: 0.7
                    },
                    whileHover: {
                        opacity: 1
                    },
                    className: "text-gray-500 dark:text-gray-400 transition-opacity",
                    children: "Use Ctrl+Enter to quickly send"
                }, void 0, false, {
                    fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/MessageInput.tsx",
                    lineNumber: 422,
                    columnNumber: 11
                }, undefined)
            }, void 0, false, {
                fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/MessageInput.tsx",
                lineNumber: 397,
                columnNumber: 7
            }, undefined)
        ]
    }, void 0, true, {
        fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/MessageInput.tsx",
        lineNumber: 252,
        columnNumber: 5
    }, undefined);
};
_s(MessageInput, "IRJJFPCpbtNPsa5fTP9VBthSKNs=", false, function() {
    return [
        react_router_dom__WEBPACK_IMPORTED_MODULE_7__.useLocation,
        _hooks_useSession__WEBPACK_IMPORTED_MODULE_2__.useSession,
        _v2_hooks_usePro__WEBPACK_IMPORTED_MODULE_5__.usePro,
        _hooks_usePlan__WEBPACK_IMPORTED_MODULE_3__.usePlan
    ];
});
_c = MessageInput;
var _c;
$RefreshReg$(_c, "MessageInput");

function $RefreshSig$() {
  return $ReactRefreshRuntime$.createSignatureFunctionForTransform();
}
function $RefreshReg$(type, id) {
  $ReactRefreshRuntime$.register(type, module.id + "_" + id);
}
Promise.resolve().then(function() {
  $ReactRefreshRuntime$.refresh(module.id, module.hot);
});


}),
"./src/v2/state/actions/sessionActions.ts": (function (module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  abortQueryAction: () => (abortQueryAction),
  checkSessionStatusAction: () => (checkSessionStatusAction),
  createSessionAction: () => (createSessionAction),
  deleteSessionAction: () => (deleteSessionAction),
  loadSessionsAction: () => (loadSessionsAction),
  sendMessageAction: () => (sendMessageAction),
  setActiveSessionAction: () => (setActiveSessionAction),
  updateSessionAction: () => (updateSessionAction)
});
/* ESM import */var jotai__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("../node_modules/.pnpm/jotai@2.12.5_@types+react@18.3.23_react@18.3.1/node_modules/jotai/esm/vanilla.mjs");
/* ESM import */var uuid__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__("../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-browser/v4.js");
/* ESM import */var _services_apiService__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/v2/services/apiService.ts");
/* ESM import */var _atoms_session__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/v2/state/atoms/session.ts");
/* ESM import */var _atoms_message__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/v2/state/atoms/message.ts");
/* ESM import */var _atoms_tool__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/v2/state/atoms/tool.ts");
/* ESM import */var _atoms_ui__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/v2/state/atoms/ui.ts");
/* ESM import */var _eventProcessor__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./src/v2/state/actions/eventProcessor.ts");
/* ESM import */var _types__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./src/v2/types/index.ts");
/* ESM import */var _atoms_replay__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("./src/v2/state/atoms/replay.ts");
/* provided dependency */ var $ReactRefreshRuntime$ = __webpack_require__("../node_modules/.pnpm/@rspack+plugin-react-refresh@1.0.3_react-refresh@0.16.0/node_modules/@rspack/plugin-react-refresh/client/reactRefresh.js");









 // 假设 connectionStatusAtom 已经存在
 // 添加引入回放状态atom
/**
 * Load all available sessions
 */ const loadSessionsAction = (0,jotai__WEBPACK_IMPORTED_MODULE_8__.atom)(null, async (get, set)=>{
    try {
        const loadedSessions = await _services_apiService__WEBPACK_IMPORTED_MODULE_0__.apiService.getSessions();
        set(_atoms_session__WEBPACK_IMPORTED_MODULE_1__.sessionsAtom, loadedSessions);
    } catch (error) {
        console.error('Failed to load sessions:', error);
        throw error;
    }
});
/**
 * Create a new session
 */ const createSessionAction = (0,jotai__WEBPACK_IMPORTED_MODULE_8__.atom)(null, async (get, set)=>{
    try {
        const newSession = await _services_apiService__WEBPACK_IMPORTED_MODULE_0__.apiService.createSession();
        // Add to sessions list
        set(_atoms_session__WEBPACK_IMPORTED_MODULE_1__.sessionsAtom, (prev)=>[
                newSession,
                ...prev
            ]);
        // Initialize session data
        set(_atoms_message__WEBPACK_IMPORTED_MODULE_2__.messagesAtom, (prev)=>({
                ...prev,
                [newSession.id]: []
            }));
        set(_atoms_tool__WEBPACK_IMPORTED_MODULE_3__.toolResultsAtom, (prev)=>({
                ...prev,
                [newSession.id]: []
            }));
        // Set as active session
        set(_atoms_session__WEBPACK_IMPORTED_MODULE_1__.activeSessionIdAtom, newSession.id);
        return newSession.id;
    } catch (error) {
        console.error('Failed to create session:', error);
        throw error;
    }
});
/**
 * Set the active session
 * 修改加载逻辑以避免重复处理事件
 */ const setActiveSessionAction = (0,jotai__WEBPACK_IMPORTED_MODULE_8__.atom)(null, async (get, set, sessionId)=>{
    try {
        // 检查是否已经是活动会话
        const currentActiveSessionId = get(_atoms_session__WEBPACK_IMPORTED_MODULE_1__.activeSessionIdAtom);
        if (currentActiveSessionId === sessionId) {
            console.log(`Session ${sessionId} is already active, skipping load`);
            return;
        }
        // 检查回放状态并退出回放模式（除非是同一会话）
        const replayState = get(_atoms_replay__WEBPACK_IMPORTED_MODULE_7__.replayStateAtom);
        if (replayState.isActive) {
            console.log('Exiting replay mode due to session change');
            set(_atoms_replay__WEBPACK_IMPORTED_MODULE_7__.replayStateAtom, {
                isActive: false,
                isPaused: true,
                events: [],
                currentEventIndex: -1,
                startTimestamp: null,
                endTimestamp: null,
                playbackSpeed: 1,
                visibleTimeWindow: null,
                processedEvents: {}
            });
        }
        // 检查会话是否处于活动状态，如果不是则恢复
        const sessionDetails = await _services_apiService__WEBPACK_IMPORTED_MODULE_0__.apiService.getSessionDetails(sessionId);
        if (!sessionDetails.active) {
            await _services_apiService__WEBPACK_IMPORTED_MODULE_0__.apiService.restoreSession(sessionId);
        }
        // 获取当前会话状态以更新 isProcessing 状态
        try {
            const status = await _services_apiService__WEBPACK_IMPORTED_MODULE_0__.apiService.getSessionStatus(sessionId);
            set(_atoms_ui__WEBPACK_IMPORTED_MODULE_4__.isProcessingAtom, status.isProcessing);
        } catch (error) {
            console.warn('Failed to get session status:', error);
            set(_atoms_ui__WEBPACK_IMPORTED_MODULE_4__.isProcessingAtom, false);
        }
        // 清理工具调用映射缓存
        _atoms_tool__WEBPACK_IMPORTED_MODULE_3__.toolCallResultMap.clear();
        // 只有在消息不存在时才加载会话事件
        const messages = get(_atoms_message__WEBPACK_IMPORTED_MODULE_2__.messagesAtom);
        if (!messages[sessionId] || messages[sessionId].length === 0) {
            console.log(`Loading events for session ${sessionId}`);
            const events = await _services_apiService__WEBPACK_IMPORTED_MODULE_0__.apiService.getSessionEvents(sessionId);
            // 对流式事件进行预处理，确保正确的连续性
            const processedEvents = preprocessStreamingEvents(events);
            // 处理每个事件以构建消息和工具结果
            for (const event of processedEvents){
                set(_eventProcessor__WEBPACK_IMPORTED_MODULE_5__.processEventAction, {
                    sessionId,
                    event
                });
            }
        } else {
            console.log(`Session ${sessionId} already has messages, skipping event loading`);
        }
        // 设置为活动会话
        set(_atoms_session__WEBPACK_IMPORTED_MODULE_1__.activeSessionIdAtom, sessionId);
    } catch (error) {
        console.error('Failed to set active session:', error);
        set(_atoms_ui__WEBPACK_IMPORTED_MODULE_4__.connectionStatusAtom, (prev)=>({
                ...prev,
                connected: false,
                lastError: error instanceof Error ? error.message : String(error)
            }));
        throw error;
    }
});
/**
 * Update session metadata
 */ const updateSessionAction = (0,jotai__WEBPACK_IMPORTED_MODULE_8__.atom)(null, async (get, set, params)=>{
    const { sessionId, updates } = params;
    try {
        const updatedSession = await _services_apiService__WEBPACK_IMPORTED_MODULE_0__.apiService.updateSessionMetadata(sessionId, updates);
        // Update session in the list
        set(_atoms_session__WEBPACK_IMPORTED_MODULE_1__.sessionsAtom, (prev)=>prev.map((session)=>session.id === sessionId ? {
                    ...session,
                    ...updatedSession
                } : session));
        return updatedSession;
    } catch (error) {
        console.error('Failed to update session:', error);
        throw error;
    }
});
/**
 * 预处理事件，确保流式事件按正确顺序处理
 */ function preprocessStreamingEvents(events) {
    // 对流式消息进行整理
    const messageStreams = {};
    // 收集所有流式事件，按messageId分组
    events.forEach((event)=>{
        if (event.type === _types__WEBPACK_IMPORTED_MODULE_6__.EventType.FINAL_ANSWER_STREAMING && 'messageId' in event) {
            const messageId = event.messageId;
            if (!messageStreams[messageId]) {
                messageStreams[messageId] = [];
            }
            messageStreams[messageId].push(event);
        }
    });
    // 返回预处理后的事件，确保流式事件以正确顺序处理
    return events;
}
/**
 * Delete a session
 */ const deleteSessionAction = (0,jotai__WEBPACK_IMPORTED_MODULE_8__.atom)(null, async (get, set, sessionId)=>{
    try {
        const success = await _services_apiService__WEBPACK_IMPORTED_MODULE_0__.apiService.deleteSession(sessionId);
        const activeSessionId = get(_atoms_session__WEBPACK_IMPORTED_MODULE_1__.activeSessionIdAtom);
        if (success) {
            // Remove from sessions list
            set(_atoms_session__WEBPACK_IMPORTED_MODULE_1__.sessionsAtom, (prev)=>prev.filter((session)=>session.id !== sessionId));
            // Clear active session if it was deleted
            if (activeSessionId === sessionId) {
                set(_atoms_session__WEBPACK_IMPORTED_MODULE_1__.activeSessionIdAtom, null);
            }
            // Clear session data
            set(_atoms_message__WEBPACK_IMPORTED_MODULE_2__.messagesAtom, (prev)=>{
                const newMessages = {
                    ...prev
                };
                delete newMessages[sessionId];
                return newMessages;
            });
            set(_atoms_tool__WEBPACK_IMPORTED_MODULE_3__.toolResultsAtom, (prev)=>{
                const newResults = {
                    ...prev
                };
                delete newResults[sessionId];
                return newResults;
            });
        }
        return success;
    } catch (error) {
        console.error('Failed to delete session:', error);
        throw error;
    }
});
/**
 * Send a message in the current session
 */ const sendMessageAction = (0,jotai__WEBPACK_IMPORTED_MODULE_8__.atom)(null, async (get, set, content)=>{
    const activeSessionId = get(_atoms_session__WEBPACK_IMPORTED_MODULE_1__.activeSessionIdAtom);
    if (!activeSessionId) {
        throw new Error('No active session');
    }
    // 明确设置处理状态
    set(_atoms_ui__WEBPACK_IMPORTED_MODULE_4__.isProcessingAtom, true);
    // 添加用户消息到状态
    const userMessage = {
        id: (0,uuid__WEBPACK_IMPORTED_MODULE_9__["default"])(),
        role: 'user',
        content,
        timestamp: Date.now()
    };
    set(_atoms_message__WEBPACK_IMPORTED_MODULE_2__.messagesAtom, (prev)=>{
        const sessionMessages = prev[activeSessionId] || [];
        return {
            ...prev,
            [activeSessionId]: [
                ...sessionMessages,
                userMessage
            ]
        };
    });
    // 立即更新会话名称，使用用户查询作为 Summary
    // 这样即使后续更新失败也至少有一个基本的名称
    try {
        // 检查是否是第一条消息，如果是则直接用查询内容作为会话名称
        const messages = get(_atoms_message__WEBPACK_IMPORTED_MODULE_2__.messagesAtom)[activeSessionId] || [];
        if (messages.length <= 2) {
            // 算上刚刚添加的用户消息
            let summary = '';
            if (typeof content === 'string') {
                summary = content.length > 50 ? content.substring(0, 47) + '...' : content;
            } else {
                // 从多模态内容中提取文本部分
                const textPart = content.find((part)=>part.type === 'text');
                if (textPart && 'text' in textPart) {
                    summary = textPart.text.length > 50 ? textPart.text.substring(0, 47) + '...' : textPart.text;
                } else {
                    summary = 'Image message';
                }
            }
            await _services_apiService__WEBPACK_IMPORTED_MODULE_0__.apiService.updateSessionMetadata(activeSessionId, {
                name: summary
            });
            // 更新 sessions atom
            set(_atoms_session__WEBPACK_IMPORTED_MODULE_1__.sessionsAtom, (prev)=>prev.map((session)=>session.id === activeSessionId ? {
                        ...session,
                        name: summary
                    } : session));
        }
    } catch (error) {
        console.log('Failed to update initial summary, continuing anyway:', error);
    // 错误不中断主流程
    }
    try {
        // 使用流式查询
        await _services_apiService__WEBPACK_IMPORTED_MODULE_0__.apiService.sendStreamingQuery(activeSessionId, content, (event)=>{
            // 处理每个事件
            set(_eventProcessor__WEBPACK_IMPORTED_MODULE_5__.processEventAction, {
                sessionId: activeSessionId,
                event
            });
            // 确保状态保持为处理中，直到明确收到结束事件
            if (event.type !== _types__WEBPACK_IMPORTED_MODULE_6__.EventType.AGENT_RUN_END && event.type !== _types__WEBPACK_IMPORTED_MODULE_6__.EventType.ASSISTANT_MESSAGE) {
                set(_atoms_ui__WEBPACK_IMPORTED_MODULE_4__.isProcessingAtom, true);
            }
        });
    } catch (error) {
        console.error('Error sending message:', error);
        // 错误时重置处理状态
        set(_atoms_ui__WEBPACK_IMPORTED_MODULE_4__.isProcessingAtom, false);
        throw error;
    }
});
/**
 * Abort the current running query
 */ const abortQueryAction = (0,jotai__WEBPACK_IMPORTED_MODULE_8__.atom)(null, async (get, set)=>{
    const activeSessionId = get(_atoms_session__WEBPACK_IMPORTED_MODULE_1__.activeSessionIdAtom);
    if (!activeSessionId) {
        return false;
    }
    try {
        const success = await _services_apiService__WEBPACK_IMPORTED_MODULE_0__.apiService.abortQuery(activeSessionId);
        if (success) {
            set(_atoms_ui__WEBPACK_IMPORTED_MODULE_4__.isProcessingAtom, false);
            // Add system message about abort
            const abortMessage = {
                id: (0,uuid__WEBPACK_IMPORTED_MODULE_9__["default"])(),
                role: 'system',
                content: 'The operation was aborted.',
                timestamp: Date.now()
            };
            set(_atoms_message__WEBPACK_IMPORTED_MODULE_2__.messagesAtom, (prev)=>{
                const sessionMessages = prev[activeSessionId] || [];
                return {
                    ...prev,
                    [activeSessionId]: [
                        ...sessionMessages,
                        abortMessage
                    ]
                };
            });
        }
        return success;
    } catch (error) {
        console.error('Error aborting query:', error);
        return false;
    }
});
/**
 * Check the current status of a session
 */ const checkSessionStatusAction = (0,jotai__WEBPACK_IMPORTED_MODULE_8__.atom)(null, async (get, set, sessionId)=>{
    if (!sessionId) return;
    try {
        console.log(`Checking status for session: ${sessionId}`);
        const status = await _services_apiService__WEBPACK_IMPORTED_MODULE_0__.apiService.getSessionStatus(sessionId);
        console.log(`Status for session ${sessionId}:`, status);
        // 根据服务器响应更新处理状态
        set(_atoms_ui__WEBPACK_IMPORTED_MODULE_4__.isProcessingAtom, status.isProcessing);
        return status;
    } catch (error) {
        console.error('Failed to check session status:', error);
    // 错误时不更新处理状态，避免误报
    }
});
/**
 * Handle the end of a conversation
 * 仍然保留此函数，但减少其重要性，避免更新失败带来的影响
 */ async function handleConversationEnd(get, set, sessionId) {
    // 我们不再依赖这个函数来设置会话名称，但仍然保留它作为备份机制
    const allMessages = get(_atoms_message__WEBPACK_IMPORTED_MODULE_2__.messagesAtom)[sessionId] || [];
    // 只在有足够的消息并且会话没有名称时才尝试生成摘要
    const sessions = get(_atoms_session__WEBPACK_IMPORTED_MODULE_1__.sessionsAtom);
    const currentSession = sessions.find((s)=>s.id === sessionId);
    // 如果会话已经有名称，则不需要再生成
    if (currentSession && currentSession.name) {
        return;
    }
    // 只在有实际对话时才尝试生成摘要
    if (allMessages.length > 1) {
        try {
            // 转换消息为 API 期望的格式
            const apiMessages = allMessages.map((msg)=>({
                    role: msg.role,
                    content: typeof msg.content === 'string' ? msg.content : 'multimodal content'
                }));
            // 生成摘要
            const summary = await _services_apiService__WEBPACK_IMPORTED_MODULE_0__.apiService.generateSummary(sessionId, apiMessages);
            if (summary) {
                // 更新会话名称
                await _services_apiService__WEBPACK_IMPORTED_MODULE_0__.apiService.updateSessionMetadata(sessionId, {
                    name: summary
                });
                // 更新 sessions atom
                set(_atoms_session__WEBPACK_IMPORTED_MODULE_1__.sessionsAtom, (prev)=>prev.map((session)=>session.id === sessionId ? {
                            ...session,
                            name: summary
                        } : session));
            }
        } catch (error) {
            console.error('Failed to generate or update summary, continuing anyway:', error);
        // 错误不影响主流程
        }
    }
}

function $RefreshSig$() {
  return $ReactRefreshRuntime$.createSignatureFunctionForTransform();
}
function $RefreshReg$(type, id) {
  $ReactRefreshRuntime$.register(type, module.id + "_" + id);
}
Promise.resolve().then(function() {
  $ReactRefreshRuntime$.refresh(module.id, module.hot);
});


}),
"./src/v2/state/atoms/message.ts": (function (module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  groupedMessagesAtom: () => (groupedMessagesAtom),
  messagesAtom: () => (messagesAtom)
});
/* ESM import */var jotai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/jotai@2.12.5_@types+react@18.3.23_react@18.3.1/node_modules/jotai/esm/vanilla.mjs");
/* provided dependency */ var $ReactRefreshRuntime$ = __webpack_require__("../node_modules/.pnpm/@rspack+plugin-react-refresh@1.0.3_react-refresh@0.16.0/node_modules/@rspack/plugin-react-refresh/client/reactRefresh.js");

/**
 * Atom for storing messages for each session
 * Key is the session ID, value is an array of messages for that session
 */ const messagesAtom = (0,jotai__WEBPACK_IMPORTED_MODULE_0__.atom)({});
/**
 * Atom for storing grouped messages for each session
 * Key is the session ID, value is an array of message groups for that session
 * This is derived from messagesAtom but with messages properly grouped
 */ const groupedMessagesAtom = (0,jotai__WEBPACK_IMPORTED_MODULE_0__.atom)((get)=>{
    const allMessages = get(messagesAtom);
    const result = {};
    // Process each session's messages into groups
    Object.entries(allMessages).forEach((param)=>{
        let [sessionId, messages] = param;
        result[sessionId] = createMessageGroups(messages);
    });
    return result;
});
/**
 * Group messages into logical conversation groups
 *
 * The grouping logic creates groups based on:
 * 1. User messages always start a new group
 * 2. System messages are standalone groups
 * 3. Assistant/environment messages that belong together are grouped
 * 4. Thinking/processing sequences are properly maintained
 */ function createMessageGroups(messages) {
    if (!messages.length) return [];
    const groups = [];
    let currentGroup = [];
    let currentThinkingSequence = null;
    // Process messages in order
    for(let i = 0; i < messages.length; i++){
        const message = messages[i];
        // User messages always start a new group
        if (message.role === 'user') {
            if (currentGroup.length > 0) {
                groups.push({
                    messages: [
                        ...currentGroup
                    ]
                });
            }
            currentGroup = [
                message
            ];
            currentThinkingSequence = null;
            continue;
        }
        // System messages are standalone
        if (message.role === 'system') {
            if (currentGroup.length > 0) {
                groups.push({
                    messages: [
                        ...currentGroup
                    ]
                });
            }
            groups.push({
                messages: [
                    message
                ]
            });
            currentGroup = [];
            currentThinkingSequence = null;
            continue;
        }
        // Process assistant and environment messages
        if (message.role === 'assistant' || message.role === 'environment') {
            // Check if this is the start of a thinking sequence
            if (message.role === 'assistant' && currentGroup.length > 0 && currentGroup[currentGroup.length - 1].role === 'user' && (!message.finishReason || message.finishReason !== 'stop')) {
                // Create new thinking sequence
                currentThinkingSequence = {
                    startIndex: currentGroup.length,
                    messages: [
                        message
                    ]
                };
                currentGroup.push(message);
                continue;
            }
            // Continue existing thinking sequence
            if (currentThinkingSequence && (!message.finishReason || message.finishReason !== 'stop')) {
                currentThinkingSequence.messages.push(message);
                currentGroup.push(message);
                continue;
            }
            // Handle final answer in a thinking sequence
            if (message.role === 'assistant' && message.finishReason === 'stop') {
                if (currentThinkingSequence) {
                    currentThinkingSequence.messages.push(message);
                    currentGroup.push(message);
                    currentThinkingSequence = null;
                    continue;
                } else {
                    // Standalone final answer
                    currentGroup.push(message);
                    continue;
                }
            }
            // Default: add to current group
            currentGroup.push(message);
        }
    }
    // Add the last group if not empty
    if (currentGroup.length > 0) {
        groups.push({
            messages: [
                ...currentGroup
            ]
        });
    }
    return groups;
}

function $RefreshSig$() {
  return $ReactRefreshRuntime$.createSignatureFunctionForTransform();
}
function $RefreshReg$(type, id) {
  $ReactRefreshRuntime$.register(type, module.id + "_" + id);
}
Promise.resolve().then(function() {
  $ReactRefreshRuntime$.refresh(module.id, module.hot);
});


}),
"./src/v2/types/index.ts": (function (module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  EventType: () => (/* reexport safe */ _multimodal_agent_interface__WEBPACK_IMPORTED_MODULE_0__.EventType)
});
/* ESM import */var _multimodal_agent_interface__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../agent-interface/dist/index.mjs");
/* provided dependency */ var $ReactRefreshRuntime$ = __webpack_require__("../node_modules/.pnpm/@rspack+plugin-react-refresh@1.0.3_react-refresh@0.16.0/node_modules/@rspack/plugin-react-refresh/client/reactRefresh.js");
/* eslint-disable @typescript-eslint/no-explicit-any */ 


function $RefreshSig$() {
  return $ReactRefreshRuntime$.createSignatureFunctionForTransform();
}
function $RefreshReg$(type, id) {
  $ReactRefreshRuntime$.register(type, module.id + "_" + id);
}
Promise.resolve().then(function() {
  $ReactRefreshRuntime$.refresh(module.id, module.hot);
});


}),

},function(__webpack_require__) {
// webpack/runtime/get_full_hash
(() => {
__webpack_require__.h = () => ("a41cd2e8c73ab352")
})();

}
);
//# sourceMappingURL=index.352a5efd3beb95b5.hot-update.js.map