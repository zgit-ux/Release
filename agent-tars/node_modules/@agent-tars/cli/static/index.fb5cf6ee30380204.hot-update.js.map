{"version":3,"file":"index.fb5cf6ee30380204.hot-update.js","sources":["/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/entry.css","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/Message/Message.css","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/Message/components/AssistantExpandableContent.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/Message/components/EnvironmentMessage.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/Message/components/MessageGroup.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/Message/components/MessageTimestamp.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/Message/components/MultimodalContent.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/Message/components/ReportFileEntry.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/Message/components/SystemMessage.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/Message/components/ThinkingToggle.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/Message/components/ToggleButton.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/Message/components/ToolCalls.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/Message/hooks/useCopyToClipboard.ts","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/Message/index.tsx"],"sourcesContent":["// extracted by css-extract-rspack-plugin\nexport {};\n    if(module.hot) {\n      (function() {\n        var localsJsonString = undefined;\n        // 1749656169998\n        var cssReload = require(\"../../node_modules/.pnpm/@rspack+core@1.3.9_@swc+helpers@0.5.17/node_modules/@rspack/core/dist/cssExtractHmr.js\").cssReload(module.id, {});\n        // only invalidate when locals change\n        if (\n          module.hot.data &&\n          module.hot.data.value &&\n          module.hot.data.value !== localsJsonString\n        ) {\n          module.hot.invalidate();\n        } else {\n          module.hot.accept();\n        }\n        module.hot.dispose(function(data) {\n          data.value = localsJsonString;\n          cssReload();\n        });\n      })();\n    }\n  ","// extracted by css-extract-rspack-plugin\nexport {};\n    if(module.hot) {\n      (function() {\n        var localsJsonString = undefined;\n        // 1749656169999\n        var cssReload = require(\"../../../../../../node_modules/.pnpm/@rspack+core@1.3.9_@swc+helpers@0.5.17/node_modules/@rspack/core/dist/cssExtractHmr.js\").cssReload(module.id, {});\n        // only invalidate when locals change\n        if (\n          module.hot.data &&\n          module.hot.data.value &&\n          module.hot.data.value !== localsJsonString\n        ) {\n          module.hot.invalidate();\n        } else {\n          module.hot.accept();\n        }\n        module.hot.dispose(function(data) {\n          data.value = localsJsonString;\n          cssReload();\n        });\n      })();\n    }\n  ","import React from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { MarkdownRenderer } from '../../../Markdown';\nimport { ToggleButton } from './ToggleButton';\n\ninterface AssistantExpandableContentProps {\n  content: string;\n  showSteps: boolean;\n  setShowSteps: (show: boolean) => void;\n}\n\n/**\n * Component for assistant messages with expandable content\n *\n * Design principles:\n * - Progressive disclosure of detailed information\n * - Smooth animations for content expansion\n * - Maintains readability by showing summary first\n */\nexport const AssistantExpandableContent: React.FC<AssistantExpandableContentProps> = ({\n  content,\n  showSteps,\n  setShowSteps,\n}) => {\n  // Extract just the first paragraph as summary\n  const summary = content.split('\\n')[0];\n  const hasMoreContent = content.length > summary.length;\n\n  return (\n    <>\n      <div className=\"prose dark:prose-invert prose-sm max-w-none text-xs\">\n        <MarkdownRenderer content={summary} />\n      </div>\n\n      <AnimatePresence>\n        {showSteps && (\n          <motion.div\n            initial={{ height: 0, opacity: 0 }}\n            animate={{ height: 'auto', opacity: 1 }}\n            exit={{ height: 0, opacity: 0 }}\n            transition={{ duration: 0.3 }}\n            className=\"overflow-hidden mt-1\"\n          >\n            <div className=\"prose dark:prose-invert prose-sm max-w-none text-xs border-t border-gray-100/30 dark:border-gray-700/20 pt-1 mt-1\">\n              <MarkdownRenderer content={content.substring(summary.length)} />\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      {hasMoreContent && (\n        <ToggleButton\n          isExpanded={showSteps}\n          onToggle={() => setShowSteps(!showSteps)}\n          expandedText=\"Hide detailed steps\"\n          collapsedText=\"Show detailed steps\"\n        />\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { motion } from 'framer-motion';\nimport { FiMaximize } from 'react-icons/fi';\nimport { MarkdownRenderer } from '../../../Markdown';\nimport { BrowserShell } from '../../../Workspace/renderers/BrowserShell';\nimport { useSession } from '../../../../hooks/useSession';\n\ninterface EnvironmentMessageProps {\n  content: any;\n  description?: string;\n  timestamp: number;\n  setActivePanelContent: (content: any) => void;\n  isIntermediate?: boolean;\n}\n\n/**\n * Component for displaying environment messages with optimized image rendering\n *\n * Design principles:\n * - Efficient rendering of multi-format content\n * - Interactive image thumbnails with preview capability\n * - Clear visual hierarchy with descriptive labels\n * - Compact and elegant styling for images without borders\n * - Support for intermediate display in thinking sequences\n * - Uses BrowserShell for browser screenshots for consistent UI with browser_vision_control\n */\nexport const EnvironmentMessage: React.FC<EnvironmentMessageProps> = ({\n  content,\n  description,\n  timestamp,\n  setActivePanelContent,\n  isIntermediate = false,\n}) => {\n  const { replayState } = useSession();\n\n  // 处理直接从环境输入渲染图像\n  if (Array.isArray(content)) {\n    const images = content.filter((part) => part.type === 'image_url');\n    const textParts = content.filter((part) => part.type === 'text');\n\n    // 空内容处理\n    if (images.length === 0 && textParts.length === 0) {\n      return <div className=\"text-xs text-gray-500 italic\">环境输入</div>;\n    }\n\n    // 检查是否是浏览器截图 - 通过description判断或使用启发式方法\n    const isBrowserScreenshot =\n      description?.toLowerCase().includes('browser') ||\n      description?.toLowerCase().includes('screenshot') ||\n      // 如果描述包含特定关键词但图片数量较少，可能是浏览器截图\n      (images.length === 1 && !isIntermediate);\n\n    // 确保在回放模式下图片能够正确加载\n    const handleImageError = (e: React.SyntheticEvent<HTMLImageElement, Event>) => {\n      console.warn('Image failed to load:', e.currentTarget.src);\n      // 可以在这里添加重试逻辑或替代图片\n    };\n\n    // 对于浏览器截图，使用BrowserShell进行渲染\n    if (isBrowserScreenshot && images.length > 0) {\n      return (\n        <div className=\"space-y-1\">\n          {/* 渲染文本内容 */}\n          {textParts.length > 0 && (\n            <div\n              className={`prose dark:prose-invert prose-sm max-w-none ${isIntermediate ? 'text-xs' : 'text-sm'} mb-2`}\n            >\n              {textParts.map((part, idx) => (\n                <MarkdownRenderer key={idx} content={part.text} />\n              ))}\n            </div>\n          )}\n\n          {/* 使用BrowserShell渲染浏览器截图 */}\n          <BrowserShell title={description || 'Browser Screenshot'}>\n            <div\n              className=\"relative group cursor-pointer\"\n              onClick={() =>\n                setActivePanelContent({\n                  type: 'image',\n                  source: images[0].image_url.url,\n                  title: description || '浏览器截图',\n                  timestamp,\n                })\n              }\n            >\n              <img\n                src={images[0].image_url.url}\n                alt={images[0].image_url.alt || '截图'}\n                className=\"w-full h-auto object-contain\"\n                onError={handleImageError}\n              />\n\n              {/* 悬停覆盖层 */}\n              <div className=\"absolute inset-0 bg-black/20 opacity-0 group-hover:opacity-100 transition-opacity duration-200 flex items-center justify-center\">\n                <FiMaximize className=\"text-white\" size={20} />\n              </div>\n            </div>\n          </BrowserShell>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"space-y-1\">\n        {/* 渲染文本内容 */}\n        {textParts.length > 0 && (\n          <div\n            className={`prose dark:prose-invert prose-sm max-w-none ${isIntermediate ? 'text-xs' : 'text-sm'}`}\n          >\n            {textParts.map((part, idx) => (\n              <MarkdownRenderer key={idx} content={part.text} />\n            ))}\n          </div>\n        )}\n\n        {/* 将图像渲染为无边框的缩略图 */}\n        {images.length > 0 && (\n          <div className=\"flex flex-wrap gap-1 mt-1\">\n            {images.map((image, idx) => (\n              <motion.div\n                key={idx}\n                whileHover={{ scale: 1.02 }}\n                className=\"relative group cursor-pointer\"\n                onClick={() =>\n                  setActivePanelContent({\n                    type: 'image',\n                    source: image.image_url.url,\n                    title: description || '环境输入',\n                    timestamp,\n                  })\n                }\n              >\n                {/* 缩略图 */}\n                <img\n                  src={image.image_url.url}\n                  alt={image.image_url.alt || '截图'}\n                  className={`${isIntermediate ? 'h-16' : 'h-20'} rounded-lg object-cover shadow-sm`}\n                  onError={handleImageError}\n                />\n\n                {/* 悬停覆盖层 */}\n                <div className=\"absolute inset-0 bg-black/20 opacity-0 group-hover:opacity-100 rounded-lg transition-opacity duration-200 flex items-center justify-center\">\n                  <FiMaximize className=\"text-white\" size={isIntermediate ? 14 : 16} />\n                </div>\n              </motion.div>\n            ))}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  // 非数组内容的回退\n  return (\n    <div\n      className={`prose dark:prose-invert prose-sm max-w-none ${isIntermediate ? 'text-xs' : 'text-sm'}`}\n    >\n      {description && !isIntermediate && (\n        <div className=\"text-xs font-medium text-gray-500 dark:text-gray-400 mb-1\">\n          {description}\n        </div>\n      )}\n      {typeof content === 'string' ? (\n        <MarkdownRenderer content={content} />\n      ) : (\n        <pre className=\"text-xs\">{JSON.stringify(content, null, 2)}</pre>\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport { motion } from 'framer-motion';\nimport { Message as MessageType } from '../../../../types';\nimport { Message } from '../index';\nimport { FiClock } from 'react-icons/fi';\nimport { formatTimestamp } from '../../../../utils/formatters';\nimport { isMultimodalContent } from '../../../../utils/typeGuards';\nimport { ThinkingAnimation } from './ThinkingAnimation';\n\ninterface MessageGroupProps {\n  messages: MessageType[];\n  isThinking: boolean;\n}\n\n/**\n * MessageGroup Component - Groups related messages in a thinking sequence\n *\n * Design principles:\n * - Minimalist design with no avatars or indentation\n * - Clean, full-width message layout\n * - All intermediate thinking steps are always visible\n * - Visual hierarchy emphasizing final answers\n * - Consistent monochromatic styling\n */\nexport const MessageGroup: React.FC<MessageGroupProps> = ({ messages, isThinking }) => {\n  // 过滤掉环境消息\n  const filteredMessages = messages.filter((msg) => msg.role !== 'environment');\n\n  // 如果过滤后没有消息，则不渲染任何内容\n  if (filteredMessages.length === 0) {\n    return null;\n  }\n\n  // 如果只有一条消息，检查是否需要拆分\n  if (filteredMessages.length === 1) {\n    const message = filteredMessages[0];\n\n    // 检查是否是包含图片和文本的多模态用户消息\n    if (message.role === 'user' && isMultimodalContent(message.content)) {\n      const imageContents = message.content.filter((part) => part.type === 'image_url');\n      const textContents = message.content.filter((part) => part.type === 'text');\n\n      // 只有同时包含图片和文本时才拆分显示\n      if (imageContents.length > 0 && textContents.length > 0) {\n        return (\n          <div className=\"space-y-3\">\n            {/* 先显示图片消息 */}\n            <Message\n              key={`${message.id}-images`}\n              message={{\n                ...message,\n                content: imageContents,\n                id: `${message.id}-images`,\n              }}\n            />\n\n            {/* 再显示文本消息 */}\n            <Message\n              key={`${message.id}-text`}\n              message={{\n                ...message,\n                content: textContents,\n                id: `${message.id}-text`,\n              }}\n            />\n          </div>\n        );\n      }\n    }\n\n    return <Message message={filteredMessages[0]} />;\n  }\n\n  // 获取第一条消息 - 通常是用户消息\n  const firstMessage = filteredMessages[0];\n\n  // If not a user message, use simplified rendering\n  if (firstMessage.role !== 'user') {\n    return (\n      <div className=\"space-y-3\">\n        {filteredMessages.map((message, index) => (\n          <Message\n            key={message.id}\n            message={message}\n            isInGroup={index > 0 && index < filteredMessages.length - 1}\n            isIntermediate={index > 0 && index < filteredMessages.length - 1}\n            shouldDisplayTimestamp={false}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  // For user-initiated groups, use enhanced rendering with thinking sequence\n\n  const responseMessage = filteredMessages.length > 1 ? filteredMessages[1] : null;\n  const intermediateMessages = filteredMessages.slice(2, -1);\n  const lastMessage = filteredMessages[filteredMessages.length - 1];\n\n  const hasFinalAnswer = lastMessage.role === 'assistant' && lastMessage.finishReason === 'stop';\n  const finalMessage = hasFinalAnswer ? lastMessage : null;\n\n  const hasThinkingSteps = intermediateMessages.length > 0;\n\n  // 检查用户消息是否需要拆分\n  if (isMultimodalContent(firstMessage.content)) {\n    const imageContents = firstMessage.content.filter((part) => part.type === 'image_url');\n    const textContents = firstMessage.content.filter((part) => part.type === 'text');\n\n    // 只有同时包含图片和文本时才拆分显示\n    if (imageContents.length > 0 && textContents.length > 0) {\n      return (\n        <div className=\"message-group-container space-y-3\">\n          {/* 先显示图片消息 */}\n          <Message\n            message={{\n              ...firstMessage,\n              content: imageContents,\n              id: `${firstMessage.id}-images`,\n            }}\n          />\n\n          {/* 再显示文本消息 */}\n          <Message\n            message={{\n              ...firstMessage,\n              content: textContents,\n              id: `${firstMessage.id}-text`,\n            }}\n          />\n\n          {/* Assistant response section with all assistant-related messages */}\n          {responseMessage && (\n            <div className=\"assistant-response-container\">\n              {/* Initial response message - marked as in-group */}\n              <Message message={responseMessage} isInGroup={true} />\n\n              {/* Thinking process section - always shown */}\n              {hasThinkingSteps && (\n                <div className=\"thinking-steps-container\">\n                  {intermediateMessages.map((msg) => (\n                    <Message key={msg.id} message={msg} isIntermediate={true} isInGroup={true} />\n                  ))}\n\n                  {!isThinking && (\n                    <div className=\"mt-1 mb-2\">\n                      <div className=\"flex items-center text-xs text-gray-500 dark:text-gray-400 py-1\">\n                        <FiClock size={10} className=\"mr-1\" />\n                        {responseMessage && formatTimestamp(responseMessage.timestamp)}\n                      </div>\n                    </div>\n                  )}\n                </div>\n              )}\n\n              {/* Final answer - if exists and not currently thinking */}\n              {finalMessage && finalMessage !== responseMessage && !isThinking && (\n                <Message message={finalMessage} isInGroup={false} />\n              )}\n\n              {/* Thinking indicator - 使用新的高级思考动画 */}\n              {isThinking && (\n                <div className=\"mt-2\">\n                  <ThinkingAnimation />\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      );\n    }\n  }\n\n  return (\n    <div className=\"message-group-container space-y-3\">\n      {/* User message is always displayed */}\n      <Message message={firstMessage} />\n\n      {/* Assistant response section with all assistant-related messages */}\n      {responseMessage && (\n        <div className=\"assistant-response-container\">\n          {/* Initial response message - marked as in-group */}\n          <Message message={responseMessage} isInGroup={true} />\n\n          {/* Thinking process section - always shown */}\n          {hasThinkingSteps && (\n            <div className=\"thinking-steps-container\">\n              {intermediateMessages.map((msg) => (\n                <Message key={msg.id} message={msg} isIntermediate={true} isInGroup={true} />\n              ))}\n\n              {!isThinking && (\n                <div className=\"mt-1 mb-2\">\n                  <div className=\"flex items-center text-xs text-gray-500 dark:text-gray-400 py-1\">\n                    <FiClock size={10} className=\"mr-1\" />\n                    {responseMessage && formatTimestamp(responseMessage.timestamp)}\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n\n          {/* Final answer - if exists and not currently thinking */}\n          {finalMessage && finalMessage !== responseMessage && !isThinking && (\n            <Message message={finalMessage} isInGroup={false} />\n          )}\n\n          {/* Thinking indicator - 使用新的高级思考动画 */}\n          {isThinking && (\n            <div className=\"mt-2\">\n              <ThinkingAnimation />\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport { FiCheck, FiCopy } from 'react-icons/fi';\nimport { formatTimestamp } from '../../../../utils/formatters';\nimport { useCopyToClipboard } from '../hooks/useCopyToClipboard';\n\ninterface MessageTimestampProps {\n  timestamp: number;\n  content: string | any[];\n  role: string;\n}\n\n/**\n * Component for displaying message timestamp and copy functionality\n *\n * Design principles:\n * - Unobtrusive placement to reduce visual noise\n * - Accessible on hover for contextual actions\n * - Clear visual feedback for copy operations\n */\nexport const MessageTimestamp: React.FC<MessageTimestampProps> = ({ timestamp, content, role }) => {\n  const { isCopied, copyToClipboard } = useCopyToClipboard();\n\n  const handleCopy = () => {\n    const textToCopy =\n      typeof content === 'string'\n        ? content\n        : content\n            .filter((part) => part.type === 'text')\n            .map((part) => part.text)\n            .join('\\n');\n\n    copyToClipboard(textToCopy);\n  };\n\n  return (\n    <div\n      className={`absolute bottom-0 ${role === 'user' ? 'right-0' : 'left-0'} flex items-center text-xs text-gray-400 dark:text-gray-500 opacity-0 transition-opacity duration-200 group-hover:opacity-100 -mb-6`}\n    >\n      <span className=\"mr-2\">{formatTimestamp(timestamp)}</span>\n      <button\n        onClick={handleCopy}\n        className=\"flex items-center text-gray-400 hover:text-accent-500 dark:hover:text-accent-400\"\n        title=\"Copy to clipboard\"\n      >\n        {isCopied ? <FiCheck size={12} /> : <FiCopy size={12} />}\n      </button>\n    </div>\n  );\n};\n","import React from 'react';\nimport { motion } from 'framer-motion';\nimport { MarkdownRenderer } from '../../../Markdown';\n\ninterface MultimodalContentProps {\n  content: any[];\n  timestamp: number;\n  setActivePanelContent: any;\n}\n\n/**\n * Component for rendering multimodal content (text and images)\n *\n * Design principles:\n * - Seamless integration of different content types\n * - Interactive image previews with expansion capability\n * - Consistent formatting of text and visual elements\n */\nexport const MultimodalContent: React.FC<MultimodalContentProps> = ({\n  content,\n  timestamp,\n  setActivePanelContent,\n}) => {\n  // 筛选出图片和文本内容\n  const imageContents = content.filter((part) => part.type === 'image_url');\n  const textContents = content.filter((part) => part.type === 'text');\n\n  // 仅包含图片的情况 - 优化布局\n  const isImageOnly = imageContents.length > 0 && textContents.length === 0;\n\n  return (\n    <>\n      {/* 渲染图片内容 */}\n      {imageContents.length > 0 && (\n        <div\n          className={`${isImageOnly ? '' : 'mt-2 mb-2'} ${imageContents.length > 1 ? 'flex flex-wrap gap-2' : ''}`}\n        >\n          {imageContents.map((part, index) => (\n            <motion.div\n              key={`image-${index}`}\n              whileHover={{ scale: 1.02 }}\n              onClick={() =>\n                setActivePanelContent({\n                  type: 'image',\n                  source: part.image_url.url,\n                  title: part.image_url.alt || 'Image',\n                  timestamp,\n                })\n              }\n              className=\"relative group cursor-pointer inline-block\"\n            >\n              {/* Render the actual image thumbnail */}\n              <img\n                src={part.image_url.url}\n                alt={part.image_url.alt || 'Image'}\n                className={`${isImageOnly ? 'max-h-48' : 'h-24'} rounded-3xl object-cover border`}\n              />\n\n              {/* Hover overlay */}\n              {/* <div className=\"absolute inset-0 bg-black/30 opacity-0 group-hover:opacity-100 rounded-lg transition-opacity duration-200 flex items-center justify-center\">\n                <FiMaximize className=\"text-white\" size={20} />\n              </div> */}\n            </motion.div>\n          ))}\n        </div>\n      )}\n\n      {/* 渲染文本内容 - 确保用户消息中文本可见 */}\n      {textContents.map((part, index) => (\n        <div key={`text-${index}`} className=\"text-current\">\n          <MarkdownRenderer key={`text-${index}`} content={part.text} />\n        </div>\n      ))}\n    </>\n  );\n};","import React from 'react';\nimport { motion } from 'framer-motion';\nimport { FiFileText, FiBookOpen, FiChevronRight } from 'react-icons/fi';\nimport { useSession } from '../../../../hooks/useSession';\n\ninterface ReportFileEntryProps {\n  title: string;\n  timestamp: number;\n  content: string;\n}\n\n/**\n * ReportFileEntry - Displays a file-like entry for research reports\n *\n * This component creates a clickable file entry that opens the associated\n * research report in the workspace panel when clicked.\n */\nexport const ReportFileEntry: React.FC<ReportFileEntryProps> = ({ title, timestamp, content }) => {\n  const { setActivePanelContent } = useSession();\n\n  const handleClick = () => {\n    setActivePanelContent({\n      type: 'research_report',\n      source: content,\n      title: title || 'Research Report',\n      timestamp,\n    });\n  };\n\n  return (\n    <motion.div\n      whileHover={{ y: -2, backgroundColor: 'rgba(0, 0, 0, 0.01)' }}\n      whileTap={{ scale: 0.98 }}\n      onClick={handleClick}\n      className=\"mt-3 p-3 bg-white dark:bg-gray-800 rounded-xl border border-gray-100/40 dark:border-gray-700/20 cursor-pointer flex items-center gap-3 group\"\n    >\n      <div className=\"w-10 h-10 flex-shrink-0 rounded-lg bg-accent-50 dark:bg-accent-900/20 flex items-center justify-center border border-accent-100/40 dark:border-accent-800/30\">\n        <FiBookOpen className=\"text-accent-600 dark:text-accent-400\" size={18} />\n      </div>\n\n      <div className=\"flex-1 min-w-0\">\n        <div className=\"font-medium text-gray-800 dark:text-gray-200 truncate\">\n          {title || 'Research Report'}\n        </div>\n        <div className=\"text-xs text-gray-500 dark:text-gray-400 flex items-center\">\n          Research report • Click to view\n        </div>\n      </div>\n\n      <FiChevronRight\n        className=\"text-gray-400 dark:text-gray-500 opacity-0 group-hover:opacity-100 transition-opacity\"\n        size={16}\n      />\n    </motion.div>\n  );\n};\n","import React from 'react';\nimport { FiInfo } from 'react-icons/fi';\n\ninterface SystemMessageProps {\n  content: string;\n}\n\n/**\n * Component for displaying system messages\n * \n * Design principles:\n * - Simple, informational styling\n * - Clear visual indication of system-generated content\n */\nexport const SystemMessage: React.FC<SystemMessageProps> = ({ content }) => (\n  <div className=\"flex items-center gap-2 text-sm\">\n    <FiInfo className=\"shrink-0\" />\n    <span>{content}</span>\n  </div>\n);\n","import React from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { FiCode } from 'react-icons/fi';\nimport { ToggleButton } from './ToggleButton';\n\ninterface ThinkingToggleProps {\n  thinking: string;\n  showThinking: boolean;\n  setShowThinking: (show: boolean) => void;\n}\n\n/**\n * Component for showing/hiding the agent's reasoning process\n *\n * Design principles:\n * - Collapsible content to reduce visual noise\n * - Clear visual distinction for thinking process\n * - Smooth animations for state transitions\n */\nexport const ThinkingToggle: React.FC<ThinkingToggleProps> = ({\n  thinking,\n  showThinking,\n  setShowThinking,\n}) => (\n  <div className=\"mt-3\">\n    <ToggleButton\n      isExpanded={showThinking}\n      onToggle={() => setShowThinking(!showThinking)}\n      expandedText=\"Hide reasoning\"\n      collapsedText=\"Show reasoning\"\n      icon={<FiCode className=\"mr-1.5\" />}\n    />\n\n    <AnimatePresence>\n      {showThinking && (\n        <motion.div\n          initial={{ height: 0, opacity: 0 }}\n          animate={{ height: 'auto', opacity: 1 }}\n          exit={{ height: 0, opacity: 0 }}\n          transition={{ duration: 0.3 }}\n          className=\"overflow-hidden\"\n        >\n          <div className=\"mt-2 p-3 bg-gray-50/80 dark:bg-gray-700/40 rounded-xl text-xs font-mono overflow-x-auto border border-gray-100/40 dark:border-gray-600/20\">\n            {thinking}\n          </div>\n        </motion.div>\n      )}\n    </AnimatePresence>\n  </div>\n);\n","import React from 'react';\nimport { motion } from 'framer-motion';\nimport { FiChevronDown, FiChevronUp } from 'react-icons/fi';\n\ninterface ToggleButtonProps {\n  isExpanded: boolean;\n  onToggle: () => void;\n  expandedText: string;\n  collapsedText: string;\n  icon?: React.ReactNode;\n}\n\n/**\n * Reusable toggle button component\n *\n * Design principles:\n * - Consistent interaction patterns\n * - Visual feedback for state changes\n * - Flexible styling with icon support\n */\nexport const ToggleButton: React.FC<ToggleButtonProps> = ({\n  isExpanded,\n  onToggle,\n  expandedText,\n  collapsedText,\n  icon,\n}) => (\n  <motion.button\n    whileHover={{ x: 3 }}\n    onClick={onToggle}\n    className=\"flex items-center text-xs text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300 py-1 px-2 mt-1 rounded-lg hover:bg-gray-50/70 dark:hover:bg-gray-700/20 transition-all duration-200\"\n  >\n    {isExpanded ? <FiChevronUp className=\"mr-1.5\" /> : <FiChevronDown className=\"mr-1.5\" />}\n    {icon}\n    {isExpanded ? expandedText : collapsedText}\n  </motion.button>\n);\n","import React from 'react';\nimport { FiArrowRight, FiLoader, FiCheck, FiX, FiClock } from 'react-icons/fi';\nimport { motion } from 'framer-motion';\n\ninterface ToolCallsProps {\n  toolCalls: any[];\n  onToolCallClick: (toolCall: any) => void;\n  getToolIcon: (name: string) => React.ReactNode;\n  isIntermediate?: boolean;\n  toolResults?: any[]; // Add toolResults to check completion status\n}\n\n/**\n * Component for displaying tool calls with loading states and status icons\n *\n * Design principles:\n * - Shows loading state for pending tool calls\n * - Displays success/error status with appropriate icons\n * - Maintains compact display for thinking sequences\n * - Provides clear visual feedback for tool execution status\n * - Refined colors for better visual harmony while keeping simplicity\n */\nexport const ToolCalls: React.FC<ToolCallsProps> = ({\n  toolCalls,\n  onToolCallClick,\n  getToolIcon,\n  isIntermediate = false,\n  toolResults = [],\n}) => {\n  // Helper function to get tool call status\n  const getToolCallStatus = (toolCall: any) => {\n    const result = toolResults.find((result) => result.toolCallId === toolCall.id);\n    \n    if (!result) {\n      return 'pending'; // No result yet, tool is still running\n    }\n    \n    if (result.error) {\n      return 'error'; // Tool execution failed\n    }\n    \n    return 'success'; // Tool completed successfully\n  };\n\n  // Helper function to get status icon\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return (\n          <motion.div\n            animate={{ rotate: 360 }}\n            transition={{ duration: 1, repeat: Infinity, ease: 'linear' }}\n          >\n            <FiLoader size={10} className=\"text-slate-500 dark:text-slate-400\" />\n          </motion.div>\n        );\n      case 'success':\n        return <FiCheck size={10} className=\"text-slate-600 dark:text-slate-300\" />;\n      case 'error':\n        return <FiX size={10} className=\"text-red-600 dark:text-red-400\" />;\n      default:\n        return <FiClock size={10} className=\"text-slate-500 dark:text-slate-400\" />;\n    }\n  };\n\n  // Helper function to get status color classes with refined, monochromatic palette\n  const getStatusColorClasses = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return 'border-slate-200 dark:border-slate-600 bg-slate-50 dark:bg-slate-800/40 text-slate-700 dark:text-slate-300 shadow-sm';\n      case 'success':\n        return 'border-slate-200 dark:border-slate-600 bg-white dark:bg-slate-800/60 text-slate-800 dark:text-slate-200 shadow-sm';\n      case 'error':\n        return 'border-red-200 dark:border-red-700 bg-red-50 dark:bg-red-900/20 text-red-700 dark:text-red-300 shadow-sm';\n      default:\n        return 'border-slate-200 dark:border-slate-600 bg-slate-50 dark:bg-slate-800/40 text-slate-700 dark:text-slate-300 shadow-sm';\n    }\n  };\n\n  // Helper function to get hover effect classes\n  const getHoverColorClasses = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return 'hover:bg-slate-100 dark:hover:bg-slate-700/50 hover:border-slate-300 dark:hover:border-slate-500';\n      case 'success':\n        return 'hover:bg-slate-50 dark:hover:bg-slate-700/60 hover:border-slate-300 dark:hover:border-slate-500';\n      case 'error':\n        return 'hover:bg-red-100 dark:hover:bg-red-800/30 hover:border-red-300 dark:hover:border-red-600';\n      default:\n        return 'hover:bg-slate-100 dark:hover:bg-slate-700/50 hover:border-slate-300 dark:hover:border-slate-500';\n    }\n  };\n\n  return (\n    <div className=\"mt-2 space-y-1.5\">\n      {toolCalls.map((toolCall) => {\n        const status = getToolCallStatus(toolCall);\n        const statusColorClasses = getStatusColorClasses(status);\n        const hoverColorClasses = getHoverColorClasses(status);\n\n        return (\n          <motion.button\n            key={toolCall.id}\n            onClick={() => onToolCallClick(toolCall)}\n            className={`flex items-center gap-2 px-3 py-1.5 text-xs font-medium rounded-2xl transition-all duration-200 hover:scale-[1.01] active:scale-[0.99] border text-left group w-full ${statusColorClasses} ${hoverColorClasses}`}\n            initial={{ opacity: 0, y: 5 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.2 }}\n            whileHover={{ \n              y: -1,\n              transition: { duration: 0.15 }\n            }}\n          >\n            {/* Tool icon with refined styling */}\n            <div className=\"flex-shrink-0 opacity-80\">\n              {getToolIcon(toolCall.function.name)}\n            </div>\n\n            {/* Tool name with refined typography */}\n            <div className=\"truncate flex-1 font-medium\">{toolCall.function.name}</div>\n\n            {/* Status and arrow with refined styling */}\n            <div className=\"flex items-center gap-1.5 flex-shrink-0\">\n              {/* Status icon */}\n              <div className=\"flex items-center justify-center\">\n                {getStatusIcon(status)}\n              </div>\n\n              {/* Arrow - only show if completed */}\n              {status !== 'pending' && (\n                <FiArrowRight\n                  className=\"opacity-60 group-hover:opacity-100 group-hover:translate-x-0.5 transition-all duration-200 text-slate-500 dark:text-slate-400\"\n                  size={11}\n                />\n              )}\n            </div>\n          </motion.button>\n        );\n      })}\n    </div>\n  );\n};\n","import { useState } from 'react';\n\n/**\n * Hook for copying text to clipboard with feedback state\n *\n * @returns Object containing copy state and copy function\n */\nexport const useCopyToClipboard = () => {\n  const [isCopied, setIsCopied] = useState(false);\n\n  const copyToClipboard = async (text: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      setIsCopied(true);\n      setTimeout(() => setIsCopied(false), 2000);\n    } catch (err) {\n      console.error('Failed to copy text: ', err);\n    }\n  };\n\n  return { isCopied, copyToClipboard };\n};\n","import React, { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { isMultimodalContent } from '../../../utils/typeGuards';\nimport { Message as MessageType } from '../../../types';\nimport { useSession } from '../../../hooks/useSession';\nimport { useTool } from '../../../hooks/useTool';\nimport { MarkdownRenderer } from '../../Markdown';\nimport './Message.css';\n\n// Import sub-components\nimport { SystemMessage } from './components/SystemMessage';\nimport { EnvironmentMessage } from './components/EnvironmentMessage';\nimport { MultimodalContent } from './components/MultimodalContent';\nimport { AssistantExpandableContent } from './components/AssistantExpandableContent';\nimport { ToolCalls } from './components/ToolCalls';\nimport { ThinkingToggle } from './components/ThinkingToggle';\nimport { MessageTimestamp } from './components/MessageTimestamp';\nimport { ThinkingAnimation } from './components/ThinkingAnimation';\nimport { useAtomValue } from 'jotai';\nimport { replayStateAtom } from '../../../state/atoms/replay';\nimport { ReportFileEntry } from './components/ReportFileEntry';\nimport { messagesAtom } from '../../../state/atoms/message';\nimport { FiExternalLink } from 'react-icons/fi';\n\ninterface MessageProps {\n  message: MessageType;\n  shouldDisplayTimestamp?: boolean;\n  isIntermediate?: boolean;\n  isInGroup?: boolean;\n}\n\n/**\n * Message Component - Displays a single message in the chat\n *\n * Design principles:\n * - Minimalist black & white design with no avatars\n * - Clean, full-width message bubbles with subtle differentiation\n * - Focus on content with minimal visual distractions\n * - Elegant spacing and typography\n * - Progressive disclosure for detailed content\n */\nexport const Message: React.FC<MessageProps> = ({\n  message,\n  isIntermediate = false,\n  isInGroup = false,\n  shouldDisplayTimestamp = true,\n}) => {\n  const [showThinking, setShowThinking] = useState(false);\n  const [showSteps, setShowSteps] = useState(false);\n  const { setActivePanelContent, activeSessionId } = useSession();\n  const { getToolIcon } = useTool();\n  const replayState = useAtomValue(replayStateAtom);\n  const allMessages = useAtomValue(messagesAtom);\n\n  const isMultimodal = isMultimodalContent(message.content);\n  const isEnvironment = message.role === 'environment';\n  const isUserMessage = message.role === 'user';\n\n  const isFinalAnswer = message.role === 'final_answer' || message.isDeepResearch;\n\n  // Check if this is a final assistant response\n  const isFinalAssistantResponse = message.role === 'assistant' && message.finishReason === 'stop';\n\n  // Handle tool call click - show in panel\n  const handleToolCallClick = (toolCall: any) => {\n    if (message.toolResults && message.toolResults.length > 0) {\n      const result = message.toolResults.find((r) => r.toolCallId === toolCall.id);\n      if (result) {\n        setActivePanelContent({\n          type: result.type,\n          source: result.content,\n          title: result.name,\n          timestamp: result.timestamp,\n          toolCallId: result.toolCallId,\n          error: result.error,\n          arguments: result.arguments,\n        });\n      }\n    }\n  };\n\n  // Handle click on final assistant response to show latest environment state\n  const handleFinalResponseClick = () => {\n    if (!activeSessionId || !isFinalAssistantResponse) return;\n\n    const sessionMessages = allMessages[activeSessionId] || [];\n\n    // Find the most recent environment input\n    for (let i = sessionMessages.length - 1; i >= 0; i--) {\n      const msg = sessionMessages[i];\n      if (msg.role === 'environment' && Array.isArray(msg.content)) {\n        const imageContent = msg.content.find(\n          (item) => item.type === 'image_url' && item.image_url && item.image_url.url,\n        );\n\n        if (imageContent) {\n          setActivePanelContent({\n            type: 'image',\n            source: msg.content,\n            title: msg.description || 'Final Environment State',\n            timestamp: msg.timestamp,\n            environmentId: msg.id,\n          });\n          break;\n        }\n      }\n    }\n  };\n\n  // Render content based on type\n  const renderContent = () => {\n    if (isMultimodal) {\n      return (\n        <MultimodalContent\n          content={message.content as any[]}\n          timestamp={message.timestamp}\n          setActivePanelContent={setActivePanelContent}\n        />\n      );\n    }\n\n    // For assistant messages with tool calls, first show summary\n    if (message.role === 'assistant' && message.toolCalls && message.toolCalls.length > 0) {\n      return (\n        <AssistantExpandableContent\n          content={message.content as string}\n          showSteps={showSteps}\n          setShowSteps={setShowSteps}\n        />\n      );\n    }\n\n    return <MarkdownRenderer content={message.content as string} forceDarkTheme={isUserMessage} />;\n  };\n\n  // Message animation variants\n  const messageVariants = {\n    initial: { opacity: 0, y: 10 },\n    animate: { opacity: 1, y: 0 },\n    transition: { duration: 0.3 },\n  };\n\n  // Determine message bubble style based on role and state\n  const getMessageBubbleClasses = () => {\n    let baseClasses = '';\n\n    if (message.role === 'user') {\n      if (isImageOnlyMessage) {\n        baseClasses = 'message-user message-user-image';\n      } else {\n        baseClasses = 'message-user';\n      }\n    } else if (message.role === 'system') {\n      baseClasses = 'message-system';\n    } else if (message.role === 'environment') {\n      baseClasses = 'environment-message-minimal';\n    } else {\n      baseClasses = 'message-assistant';\n    }\n\n    // 添加更平滑的点击样式\n    if (isFinalAssistantResponse) {\n      baseClasses += ' cursor-pointer transition-all duration-300';\n    }\n\n    return baseClasses;\n  };\n\n  // 检查消息是否只包含图片（用于样式优化）\n  const isImageOnlyMessage = React.useMemo(() => {\n    if (!isMultimodalContent(message.content)) return false;\n\n    const imageContents = message.content.filter((part) => part.type === 'image_url');\n    const textContents = message.content.filter((part) => part.type === 'text');\n\n    return imageContents.length > 0 && textContents.length === 0;\n  }, [message.content]);\n\n  // 检查消息是否只包含文本（用于样式优化）\n  const isTextOnlyMessage = React.useMemo(() => {\n    if (!isMultimodalContent(message.content)) return true;\n\n    const imageContents = message.content.filter((part) => part.type === 'image_url');\n    const textContents = message.content.filter((part) => part.type === 'text');\n\n    return textContents.length > 0 && imageContents.length === 0;\n  }, [message.content]);\n\n  return (\n    <motion.div\n      initial=\"initial\"\n      animate=\"animate\"\n      variants={messageVariants}\n      className={`message-container ${message.role === 'user' ? 'message-container-user' : 'message-container-assistant'} ${isIntermediate ? 'message-container-intermediate' : ''}`}\n    >\n      <div\n        className={`message-bubble ${getMessageBubbleClasses()} ${isIntermediate ? 'message-bubble-intermediate' : ''} ${isFinalAssistantResponse ? 'group' : ''}`}\n        onClick={isFinalAssistantResponse ? handleFinalResponseClick : undefined}\n        title={isFinalAssistantResponse ? 'Click to view final environment state' : undefined}\n      >\n        {/* Role-based content */}\n        {message.role === 'system' ? (\n          <SystemMessage content={message.content as string} />\n        ) : message.role === 'environment' ? (\n          <EnvironmentMessage\n            content={message.content}\n            description={message.description}\n            timestamp={message.timestamp}\n            setActivePanelContent={setActivePanelContent}\n            isIntermediate={isIntermediate}\n          />\n        ) : (\n          <>\n            <div\n              className={`prose ${message.role === 'user' ? 'prose-invert' : 'dark:prose-invert'} prose-sm max-w-none text-sm`}\n            >\n              {renderContent()}\n            </div>\n\n            {/* Show click hint for final assistant responses */}\n            {isFinalAssistantResponse && !isIntermediate && !isInGroup && (\n              <div className=\"mt-2 opacity-0 group-hover:opacity-100 transition-opacity duration-200 text-xs text-gray-500 dark:text-gray-400 flex items-center\">\n                <FiExternalLink size={14} className=\"mr-1\" />\n                Click to view final environment state\n              </div>\n            )}\n\n            {/* 总是显示最终答案/研究报告的文件入口，除非是中间消息或组内消息 */}\n            {isFinalAnswer &&\n              message.title &&\n              typeof message.content === 'string' &&\n              !isIntermediate &&\n              !isInGroup && (\n                <ReportFileEntry\n                  title={message.title || 'Research Report'}\n                  timestamp={message.timestamp}\n                  content={message.content}\n                />\n              )}\n\n            {/* Tool calls section - now with loading states and status icons */}\n            {message.toolCalls && message.toolCalls.length > 0 && (\n              <ToolCalls\n                toolCalls={message.toolCalls}\n                onToolCallClick={handleToolCallClick}\n                getToolIcon={getToolIcon}\n                isIntermediate={isIntermediate}\n                toolResults={message.toolResults || []} // Pass tool results for status checking\n              />\n            )}\n\n            {/* Thinking section */}\n            {message.thinking && (\n              <ThinkingToggle\n                thinking={message.thinking}\n                showThinking={showThinking}\n                setShowThinking={setShowThinking}\n              />\n            )}\n          </>\n        )}\n      </div>\n\n      {/* Timestamp and copy button - only for main messages */}\n      {message.role !== 'system' &&\n        !isIntermediate &&\n        !isInGroup &&\n        shouldDisplayTimestamp &&\n        !replayState.isActive && (\n          <MessageTimestamp\n            timestamp={message.timestamp}\n            content={message.content}\n            role={message.role}\n          />\n        )}\n    </motion.div>\n  );\n};"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACvBA;AACA;AACA;AACA;AAQA;;;;;;;AAOA;AACA;AAKA;AACA;AACA;AAEA;;AAEA;AAAA;AACA;AAAA;;;;;;;;;;;AAGA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;AAMA;AAEA;AACA;AACA;AACA;;;;;;;;AAKA;AAzCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AAUA;;;;;;;;;;AAUA;AACA;;AAOA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;;;;;;AACA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AAEA;AAEA;AACA;AAAA;;;;;;;;;;AAMA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;;;;;AAIA;AAAA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA;AAEA;AACA;;AAEA;AAEA;AAEA;AACA;AAAA;;;;;;;;;;AAMA;AACA;AACA;AAGA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;;;;;;AAIA;AAAA;AACA;AAAA;AAAA;;;;;;;;;;;;AAtBA;;;;;;;;;;;;;;;;AA8BA;AAEA;AACA;AAEA;;AAEA;AACA;AACA;;;;;;AAGA;AACA;;;;;AAEA;AAAA;AAAA;;;;;;;;;;;;AAIA;AAhJ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A;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;;;;;;;;;;;AAGA;AACA;AAAA;AAAA;;;;;;AACA;AACA;AAAA;AAAA;;;;;;AACA;AACA;AAAA;AAAA;;;;;;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;;AAGA;AAAA;AACA;;;;;;AAIA;AAAA;AAAA;;;;;;AAGA;AAAA;;AAEA;AAAA;AACA;;;;;;AAIA;AAEA;AACA;;;;;;;;;;;;;AA9BA;;;;;AAoCA;;;;;;AAGA;AAvHA;;;;;;;;;;;;;;;;;;;;;;;;ACtBA;AAEA;;;;AAIA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrBA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AASA;;;;;;;;;AASA;AACA;;AAMA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;;;;AAGA;AAEA;AAAA;AAAA;;;;;;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAGA;AACA;;;;;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;AAGA;;AACA;AACA;AAEA;;;;;;AAIA;AACA;;AACA;AAAA;AAAA;;;;;;AAAA;;;;;;;AAMA;AAMA;AACA;AACA;;;;;;AAKA;AAEA;AACA;AACA;AACA;AACA;;;;;;AAKA;AAEA;AACA;AACA;;;;;;;;;;;;;AAQA;AAMA;AACA;AACA;;;;;;;;;;;;AAKA;AA5OA;;AAQA;AACA;AACA;AACA;;;AAXA"}