{"version":3,"file":"index.f793f0bc36c62e86.hot-update.js","sources":["/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/entry.css","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/components/MessageTimestamp.tsx"],"sourcesContent":["// extracted by css-extract-rspack-plugin\nexport {};\n    if(module.hot) {\n      (function() {\n        var localsJsonString = undefined;\n        // 1749663794516\n        var cssReload = require(\"../../node_modules/.pnpm/@rspack+core@1.3.9_@swc+helpers@0.5.17/node_modules/@rspack/core/dist/cssExtractHmr.js\").cssReload(module.id, {});\n        // only invalidate when locals change\n        if (\n          module.hot.data &&\n          module.hot.data.value &&\n          module.hot.data.value !== localsJsonString\n        ) {\n          module.hot.invalidate();\n        } else {\n          module.hot.accept();\n        }\n        module.hot.dispose(function(data) {\n          data.value = localsJsonString;\n          cssReload();\n        });\n      })();\n    }\n  ","import { ChatCompletionContentPart } from '@multimodal/agent-interface';\nimport React from 'react';\nimport { FiCheck, FiCopy } from 'react-icons/fi';\nimport { formatTimestamp } from '@/common/utils/formatters';\nimport { useCopyToClipboard } from '../hooks/useCopyToClipboard';\n\ninterface MessageTimestampProps {\n  timestamp: number;\n  content: string | ChatCompletionContentPart[];\n  role: string;\n}\n\n/**\n * Component for displaying message timestamp and copy functionality\n *\n * Design principles:\n * - Unobtrusive placement to reduce visual noise\n * - Accessible on hover for contextual actions\n * - Clear visual feedback for copy operations\n */\nexport const MessageTimestamp: React.FC<MessageTimestampProps> = ({ timestamp, content, role }) => {\n  const { isCopied, copyToClipboard } = useCopyToClipboard();\n\n  const handleCopy = () => {\n    const textToCopy =\n      typeof content === 'string'\n        ? content\n        : content\n            .filter((part) => part.type === 'text')\n            .map((part) => part.text)\n            .join('\\n');\n\n    copyToClipboard(textToCopy);\n  };\n\n  return (\n    <div\n      className={`absolute bottom-0 ${role === 'user' ? 'right-0' : 'left-0'} flex items-center text-xs text-gray-400 dark:text-gray-500 opacity-0 transition-opacity duration-200 group-hover:opacity-100 -mb-6`}\n    >\n      <span className=\"mr-2\">{formatTimestamp(timestamp)}</span>\n      <button\n        onClick={handleCopy}\n        className=\"flex items-center text-gray-400 hover:text-accent-500 dark:hover:text-accent-400\"\n        title=\"Copy to clipboard\"\n      >\n        {isCopied ? <FiCheck size={12} /> : <FiCopy size={12} />}\n      </button>\n    </div>\n  );\n};\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACtBA;AACA;AACA;AACA;AAQA;;;;;;;AAOA;AACA;;AACA;AAEA;AACA;AAQA;AACA;AAEA;AAEA;;AAEA;AAAA;AAAA;;;;;;AACA;AACA;AACA;AACA;AAEA;AAAA;;;;;AAAA;AAAA;;;;;;;;;;;;;;;;;AAIA;AA7BA;;AACA;;;AADA"}