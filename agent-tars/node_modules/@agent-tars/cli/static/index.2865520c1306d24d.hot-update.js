"use strict";
self["webpackHotUpdate_agent_tars_web_ui"]("index", {
"./src/entry.css": (function (module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
// extracted by css-extract-rspack-plugin

    if(true) {
      (function() {
        var localsJsonString = undefined;
        // 1749662492771
        var cssReload = (__webpack_require__("../node_modules/.pnpm/@rspack+core@1.3.9_@swc+helpers@0.5.17/node_modules/@rspack/core/dist/cssExtractHmr.js")/* .cssReload */.cssReload)(module.id, {});
        // only invalidate when locals change
        if (
          module.hot.data &&
          module.hot.data.value &&
          module.hot.data.value !== localsJsonString
        ) {
          module.hot.invalidate();
        } else {
          module.hot.accept();
        }
        module.hot.dispose(function(data) {
          data.value = localsJsonString;
          cssReload();
        });
      })();
    }
  

}),
"./src/main/components/Router/SessionRouter.tsx": (function (module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  SessionRouter: () => (SessionRouter)
});
/* ESM import */var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/react@18.3.1/node_modules/react/jsx-dev-runtime.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../node_modules/.pnpm/react@18.3.1/node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* ESM import */var react_router_dom__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../node_modules/.pnpm/react-router@7.6.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/react-router/dist/development/chunk-DQRVZFIR.mjs");
/* ESM import */var _hooks_useSession__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/main/hooks/useSession.ts");
/* ESM import */var _hooks_useReplayMode__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/main/hooks/useReplayMode.tsx");
/* provided dependency */ var $ReactRefreshRuntime$ = __webpack_require__("../node_modules/.pnpm/@rspack+plugin-react-refresh@1.0.3_react-refresh@0.16.0/node_modules/@rspack/plugin-react-refresh/client/reactRefresh.js");

var _s = $RefreshSig$();




/**
 * SessionRouter Component - Handles session routing logic
 */ const SessionRouter = (param)=>{
    let { children } = param;
    _s();
    const { sessionId } = (0,react_router_dom__WEBPACK_IMPORTED_MODULE_4__.useParams)();
    const { setActiveSession, sessions, connectionStatus, activeSessionId, sendMessage } = (0,_hooks_useSession__WEBPACK_IMPORTED_MODULE_2__.useSession)();
    const isReplayMode = (0,_hooks_useReplayMode__WEBPACK_IMPORTED_MODULE_3__.useReplayMode)();
    const location = (0,react_router_dom__WEBPACK_IMPORTED_MODULE_4__.useLocation)();
    // Check if session exists in our loaded sessions
    const sessionExists = sessions.some((session)=>session.id === sessionId);
    // Handle query parameter if present
    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{
        const searchParams = new URLSearchParams(location.search);
        const query = searchParams.get('q');
        if (query && sessionId && activeSessionId === sessionId && !location.pathname.includes('/welcome')) {
            // Process the query
            sendMessage(query).catch((error)=>{
                console.error(`Failed to send query: ${error}`);
            });
        }
    }, [
        location.search,
        sessionId,
        activeSessionId,
        sendMessage,
        location.pathname
    ]);
    // Setup session - but skip in replay mode as it's handled by ReplayModeProvider
    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{
        // Skip this logic in replay mode since session is already set
        if (isReplayMode) {
            console.log('[ReplayMode] SessionRouter: Skipping session setup in replay mode');
            return;
        }
        // Only set active session if:
        // 1. We have a session ID from URL
        // 2. It exists in our sessions list
        // 3. We're connected
        if (sessionId && sessionExists && connectionStatus.connected) {
            console.log(`SessionRouter: Loading session ${sessionId} from URL`);
            setActiveSession(sessionId).catch((error)=>{
                console.error(`Failed to load session ${sessionId}:`, error);
            });
        }
    }, [
        sessionId,
        sessionExists,
        connectionStatus.connected,
        setActiveSession,
        isReplayMode
    ]);
    // In replay mode, always show content regardless of session existence
    if (isReplayMode) {
        console.log('[ReplayMode] SessionRouter: Rendering children in replay mode');
        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {
            children: children
        }, void 0, false);
    }
    // For normal mode, redirect if session doesn't exist
    if (!sessionExists && sessions.length > 0 && sessionId) {
        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_router_dom__WEBPACK_IMPORTED_MODULE_4__.Navigate, {
            to: "/",
            replace: true
        }, void 0, false, {
            fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/main/components/Router/SessionRouter.tsx",
            lineNumber: 70,
            columnNumber: 12
        }, undefined);
    }
    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {
        children: children
    }, void 0, false);
};
_s(SessionRouter, "soEBy60eaR6mPo6MOMaGy2mbpfo=", false, function() {
    return [
        react_router_dom__WEBPACK_IMPORTED_MODULE_4__.useParams,
        _hooks_useSession__WEBPACK_IMPORTED_MODULE_2__.useSession,
        _hooks_useReplayMode__WEBPACK_IMPORTED_MODULE_3__.useReplayMode,
        react_router_dom__WEBPACK_IMPORTED_MODULE_4__.useLocation
    ];
});
_c = SessionRouter;
var _c;
$RefreshReg$(_c, "SessionRouter");

function $RefreshSig$() {
  return $ReactRefreshRuntime$.createSignatureFunctionForTransform();
}
function $RefreshReg$(type, id) {
  $ReactRefreshRuntime$.register(type, module.id + "_" + id);
}
Promise.resolve().then(function() {
  $ReactRefreshRuntime$.refresh(module.id, module.hot);
});


}),

},function(__webpack_require__) {
// webpack/runtime/get_full_hash
(() => {
__webpack_require__.h = () => ("d61621cba07a4673")
})();

}
);
//# sourceMappingURL=index.2865520c1306d24d.hot-update.js.map