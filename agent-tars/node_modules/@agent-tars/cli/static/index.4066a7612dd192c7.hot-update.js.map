{"version":3,"file":"index.4066a7612dd192c7.hot-update.js","sources":["/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/workspace/renderers/FileResultRenderer.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/workspace/renderers/ToolResultRenderer.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { ToolResultContentPart } from '..//types';\nimport { motion } from 'framer-motion';\nimport { FiFileText, FiCode, FiEye, FiDownload } from 'react-icons/fi';\nimport { MarkdownRenderer } from '@/sdk/markdown-renderer';\n\ninterface FileResultRendererProps {\n  part: ToolResultContentPart;\n  onAction?: (action: string, data: any) => void;\n}\n\n/**\n * Renders file operation results with preview capabilities\n * \n * Features:\n * - Content preview with syntax highlighting\n * - Special handling for HTML files with preview mode\n * - File download functionality\n * - Clean interface with visual file type indicators\n */\nexport const FileResultRenderer: React.FC<FileResultRendererProps> = ({ part, onAction }) => {\n  const { path, content } = part;\n  const [previewMode, setPreviewMode] = useState<'code' | 'preview'>('code');\n  \n  if (!path) {\n    return <div className=\"text-gray-500 italic\">File path missing</div>;\n  }\n\n  // Determine file extension\n  const extension = path.split('.').pop()?.toLowerCase() || '';\n  const isHtml = extension === 'html' || extension === 'htm';\n  const isImage = ['jpg', 'jpeg', 'png', 'gif', 'svg', 'webp'].includes(extension);\n  const isText = ['txt', 'md', 'js', 'jsx', 'ts', 'tsx', 'css', 'json', 'yaml', 'yml', 'html', 'htm', 'xml'].includes(extension);\n  \n  // Determine icon and color based on file type\n  const getFileIcon = () => {\n    if (isHtml) return <FiCode size={18} className=\"text-orange-500 dark:text-orange-400\" />;\n    if (isImage) return <FiEye size={18} className=\"text-blue-500 dark:text-blue-400\" />;\n    return <FiFileText size={18} className=\"text-gray-600 dark:text-gray-400\" />;\n  };\n\n  // Create downloadable content\n  const handleDownload = () => {\n    const blob = new Blob([content], { type: isHtml ? 'text/html' : 'text/plain' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = path.split('/').pop() || 'file';\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  // Format file size\n  const formatBytes = (bytes: number): string => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n  \n  const approximateSize = content ? formatBytes(content.length) : 'Unknown size';\n\n  return (\n    <div className=\"space-y-4\">\n      {/* File info header */}\n      <div className=\"flex items-center justify-between bg-white dark:bg-gray-800 rounded-xl p-4 border border-gray-200/50 dark:border-gray-700/30\">\n        <div className=\"flex items-center\">\n          <div className=\"w-10 h-10 rounded-xl bg-gray-100/80 dark:bg-gray-700/80 flex items-center justify-center mr-3 border border-gray-200/50 dark:border-gray-700/30\">\n            {getFileIcon()}\n          </div>\n          <div>\n            <h3 className=\"font-medium text-gray-800 dark:text-gray-200 mb-1\">\n              {path.split('/').pop()}\n            </h3>\n            <div className=\"flex items-center text-xs text-gray-500 dark:text-gray-400\">\n              <span className=\"mr-3\">{path}</span>\n              <span className=\"px-2 py-0.5 bg-gray-100 dark:bg-gray-700 rounded-full\">\n                {approximateSize}\n              </span>\n            </div>\n          </div>\n        </div>\n        \n        <motion.button\n          whileHover={{ scale: 1.05 }}\n          whileTap={{ scale: 0.95 }}\n          onClick={handleDownload}\n          className=\"p-2 rounded-lg bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors\"\n          title=\"Download file\"\n        >\n          <FiDownload size={18} />\n        </motion.button>\n      </div>\n\n      {/* Content preview section */}\n      <div className=\"bg-white dark:bg-gray-800 rounded-xl border border-gray-200/50 dark:border-gray-700/30 overflow-hidden\">\n        {/* Toggle buttons for HTML files */}\n        {isHtml && (\n          <div className=\"flex border-b border-gray-100/60 dark:border-gray-700/30\">\n            <button\n              className={`flex-1 px-4 py-3 text-sm font-medium ${\n                previewMode === 'code'\n                  ? 'bg-gray-100/80 dark:bg-gray-700/80 text-gray-800 dark:text-gray-200'\n                  : 'text-gray-500 dark:text-gray-400 hover:bg-gray-50 dark:hover:bg-gray-700/30'\n              }`}\n              onClick={() => setPreviewMode('code')}\n            >\n              <div className=\"flex items-center justify-center\">\n                <FiCode className=\"mr-2\" size={16} />\n                Source Code\n              </div>\n            </button>\n            <button\n              className={`flex-1 px-4 py-3 text-sm font-medium ${\n                previewMode === 'preview'\n                  ? 'bg-gray-100/80 dark:bg-gray-700/80 text-gray-800 dark:text-gray-200'\n                  : 'text-gray-500 dark:text-gray-400 hover:bg-gray-50 dark:hover:bg-gray-700/30'\n              }`}\n              onClick={() => setPreviewMode('preview')}\n            >\n              <div className=\"flex items-center justify-center\">\n                <FiEye className=\"mr-2\" size={16} />\n                Preview\n              </div>\n            </button>\n          </div>\n        )}\n\n        {/* Content display */}\n        <div className=\"p-4\">\n          {isHtml && previewMode === 'preview' ? (\n            <div className=\"border border-gray-200/50 dark:border-gray-700/30 rounded-lg overflow-hidden bg-white dark:bg-gray-900/30\">\n              <div className=\"px-3 py-2 bg-gray-100/80 dark:bg-gray-700/80 border-b border-gray-200/50 dark:border-gray-700/30 text-xs font-medium text-gray-700 dark:text-gray-300\">\n                Preview\n              </div>\n              <div className=\"p-4 max-h-[70vh] overflow-auto\">\n                <iframe\n                  srcDoc={content}\n                  className=\"w-full border-0 min-h-[400px]\"\n                  title=\"HTML Preview\"\n                  sandbox=\"allow-scripts allow-same-origin\"\n                />\n              </div>\n            </div>\n          ) : isImage ? (\n            <div className=\"text-center\">\n              <img\n                src={`data:image/${extension};base64,${content}`}\n                alt={path}\n                className=\"max-h-[70vh] max-w-full mx-auto border border-gray-200/50 dark:border-gray-700/30 rounded-lg\"\n              />\n            </div>\n          ) : (\n            <div className=\"max-h-[70vh] overflow-auto\">\n              {isText ? (\n                <div className=\"prose dark:prose-invert prose-sm max-w-none\">\n                  <MarkdownRenderer\n                    content={`\\`\\`\\`${extension === 'md' ? 'markdown' : extension}\\n${content}\\n\\`\\`\\``}\n                  />\n                </div>\n              ) : (\n                <pre className=\"text-sm whitespace-pre-wrap font-mono bg-gray-50 dark:bg-gray-800/50 p-4 rounded-lg border border-gray-100/30 dark:border-gray-700/20\">\n                  {content}\n                </pre>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { TextRenderer } from './TextRenderer';\nimport { ImageRenderer } from './ImageRenderer';\nimport { LinkRenderer } from './LinkRenderer';\nimport { SearchResultRenderer } from './SearchResultRenderer';\nimport { CommandResultRenderer } from './CommandResultRenderer';\nimport { BrowserResultRenderer } from './BrowserResultRenderer';\nimport { BrowserControlRenderer } from './BrowserControlRenderer';\nimport { PlanViewerRenderer } from './PlanViewerRenderer';\nimport { ResearchReportRenderer } from './ResearchReportRenderer';\nimport { FileResultRenderer } from './FileResultRenderer';\nimport { GenericResultRenderer } from './GenericResultRenderer';\nimport { DeliverableRenderer } from './DeliverableRenderer';\nimport { ToolResultContentPart } from '../types';\n\n/**\n * Registry of content part renderers\n * Maps content types to their renderer components\n *\n * Design pattern: Component Registry pattern - allows dynamic registration of\n * renderers for different content types without modifying the core renderer\n */\nconst CONTENT_RENDERERS: Record<\n  string,\n  React.FC<{ part: ToolResultContentPart; onAction?: (action: string, data: any) => void }>\n> = {\n  text: TextRenderer,\n  image: ImageRenderer,\n  link: LinkRenderer,\n  search_result: SearchResultRenderer,\n  command_result: CommandResultRenderer,\n  browser_result: BrowserResultRenderer,\n  browser_control: BrowserControlRenderer,\n  plan: PlanViewerRenderer,\n  research_report: ResearchReportRenderer,\n  file_result: FileResultRenderer,\n  json: GenericResultRenderer,\n  deliverable: DeliverableRenderer, // Add new deliverable renderer\n};\n\ninterface ToolResultRendererProps {\n  /**\n   * Array of content parts to render\n   */\n  content: ToolResultContentPart[];\n\n  /**\n   * Optional handler for interactive actions\n   */\n  onAction?: (action: string, data: any) => void;\n\n  /**\n   * Optional className for the container\n   */\n  className?: string;\n}\n\n/**\n * Renders tool result content parts using the appropriate renderer for each part\n *\n * This component acts as a router that delegates rendering to specialized components\n * based on the content type, making it easily extensible to new content types.\n *\n * Improvements:\n * - Special handling for browser_get_markdown content\n * - Uses browser shell for browser-related tool results\n * - Consistent styling across all tool result types\n * - Intelligent generic renderer for unknown formats\n */\nexport const ToolResultRenderer: React.FC<ToolResultRendererProps> = ({\n  content,\n  onAction,\n  className = '',\n}) => {\n  if (!content || content.length === 0) {\n    return (\n      <div className=\"p-4 text-gray-500 dark:text-gray-400 text-sm italic\">\n        No content to display\n      </div>\n    );\n  }\n\n  return (\n    <div className={`space-y-4 ${className}`}>\n      {content.map((part, index) => {\n        // 特殊处理: 如果是 json 类型的部分，使用智能渲染器\n        if (part.type === 'json') {\n          return (\n            <div key={`json-${part.name || ''}-${index}`} className=\"tool-result-part\">\n              <GenericResultRenderer part={part} onAction={onAction} />\n            </div>\n          );\n        }\n\n        // 正常渲染其他类型\n        const Renderer = CONTENT_RENDERERS[part.type] || TextRenderer;\n\n        return (\n          <div key={`${part.type}-${part.name || ''}-${index}`} className=\"tool-result-part\">\n            <Renderer part={part} onAction={onAction} />\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\n/**\n * Register a custom renderer for a specific content type\n * This allows extending the system with new renderers without modifying this file\n */\nexport function registerRenderer(\n  contentType: string,\n  renderer: React.FC<{\n    part: ToolResultContentPart;\n    onAction?: (action: string, data: any) => void;\n  }>,\n): void {\n  CONTENT_RENDERERS[contentType] = renderer;\n}"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AAOA;;;;;;;;AAQA;AACA;AASA;;AARA;AACA;AAEA;AACA;AAAA;AAAA;;;;;;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;;;;;;AACA;AAAA;AAAA;;;;;;AACA;AAAA;AAAA;;;;;;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;;AAEA;AAAA;;AACA;AAAA;;AACA;AAAA;AACA;;;;;;AAEA;;AACA;AAAA;AACA;;;;;;AAEA;AAAA;;AACA;AAAA;AAAA;;;;;;AACA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AAMA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAAA;;;;;;;;;;;;;;;;;AAKA;AAAA;;AAEA;AACA;;AACA;AACA;AAKA;AAEA;AAAA;;AACA;AAAA;AAAA;;;;;;AAAA;;;;;;;;;;;;AAIA;AACA;AAKA;AAEA;AAAA;;AACA;AAAA;AAAA;;;;;;AAAA;;;;;;;;;;;;;;;;;;AAQA;AAAA;AACA;AACA;;AACA;AAAA;AAAA;;;;;;AAGA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AAIA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AAIA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;AAIA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASA;AA1JA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;;;AAMA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAmBA;;;;;;;;;;;AAWA;AACA;AAKA;AACA;AACA;AAAA;;;;;;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;AADA;;;;;AAIA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;;;;;;AADA;;;;;AAIA;;;;;;AAGA;AApCA;AAsCA;;;AAGA;AAQA;AACA"}