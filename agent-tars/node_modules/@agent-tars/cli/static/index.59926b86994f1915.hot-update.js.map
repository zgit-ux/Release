{"version":3,"file":"index.59926b86994f1915.hot-update.js","sources":["/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/entry.css","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/Message/components/MessageGroup.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/Message/components/ThinkingAnimation.tsx"],"sourcesContent":["// extracted by css-extract-rspack-plugin\nexport {};\n    if(module.hot) {\n      (function() {\n        var localsJsonString = undefined;\n        // 1749655345658\n        var cssReload = require(\"../../node_modules/.pnpm/@rspack+core@1.3.9_@swc+helpers@0.5.17/node_modules/@rspack/core/dist/cssExtractHmr.js\").cssReload(module.id, {});\n        // only invalidate when locals change\n        if (\n          module.hot.data &&\n          module.hot.data.value &&\n          module.hot.data.value !== localsJsonString\n        ) {\n          module.hot.invalidate();\n        } else {\n          module.hot.accept();\n        }\n        module.hot.dispose(function(data) {\n          data.value = localsJsonString;\n          cssReload();\n        });\n      })();\n    }\n  ","import React from 'react';\nimport { motion } from 'framer-motion';\nimport { Message as MessageType } from '../../../../types';\nimport { Message } from '../index';\nimport { FiClock } from 'react-icons/fi';\nimport { formatTimestamp } from '../../../../utils/formatters';\nimport { isMultimodalContent } from '../../../../utils/typeGuards';\nimport { ThinkingAnimation } from './ThinkingAnimation';\n\ninterface MessageGroupProps {\n  messages: MessageType[];\n  isThinking: boolean;\n}\n\n/**\n * MessageGroup Component - Groups related messages in a thinking sequence\n *\n * Design principles:\n * - Minimalist design with no avatars or indentation\n * - Clean, full-width message layout\n * - All intermediate thinking steps are always visible\n * - Visual hierarchy emphasizing final answers\n * - Consistent monochromatic styling\n */\nexport const MessageGroup: React.FC<MessageGroupProps> = ({ messages, isThinking }) => {\n  // 过滤掉环境消息\n  const filteredMessages = messages.filter((msg) => msg.role !== 'environment');\n  \n  // 如果过滤后没有消息，则不渲染任何内容\n  if (filteredMessages.length === 0) {\n    return null;\n  }\n\n  // 如果只有一条消息，检查是否需要拆分\n  if (filteredMessages.length === 1) {\n    const message = filteredMessages[0];\n\n    // 检查是否是包含图片和文本的多模态用户消息\n    if (message.role === 'user' && isMultimodalContent(message.content)) {\n      const imageContents = message.content.filter((part) => part.type === 'image_url');\n      const textContents = message.content.filter((part) => part.type === 'text');\n\n      // 只有同时包含图片和文本时才拆分显示\n      if (imageContents.length > 0 && textContents.length > 0) {\n        return (\n          <div className=\"space-y-3\">\n            {/* 先显示图片消息 */}\n            <Message\n              key={`${message.id}-images`}\n              message={{\n                ...message,\n                content: imageContents,\n                id: `${message.id}-images`,\n              }}\n            />\n\n            {/* 再显示文本消息 */}\n            <Message\n              key={`${message.id}-text`}\n              message={{\n                ...message,\n                content: textContents,\n                id: `${message.id}-text`,\n              }}\n            />\n          </div>\n        );\n      }\n    }\n\n    return <Message message={filteredMessages[0]} />;\n  }\n\n  // 获取第一条消息 - 通常是用户消息\n  const firstMessage = filteredMessages[0];\n\n  // If not a user message, use simplified rendering\n  if (firstMessage.role !== 'user') {\n    return (\n      <div className=\"space-y-3\">\n        {filteredMessages.map((message, index) => (\n          <Message\n            key={message.id}\n            message={message}\n            isInGroup={index > 0 && index < filteredMessages.length - 1}\n            isIntermediate={index > 0 && index < filteredMessages.length - 1}\n            shouldDisplayTimestamp={false}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  // For user-initiated groups, use enhanced rendering with thinking sequence\n\n  const responseMessage = filteredMessages.length > 1 ? filteredMessages[1] : null;\n  const intermediateMessages = filteredMessages.slice(2, -1);\n  const lastMessage = filteredMessages[filteredMessages.length - 1];\n\n  const hasFinalAnswer = lastMessage.role === 'assistant' && lastMessage.finishReason === 'stop';\n  const finalMessage = hasFinalAnswer ? lastMessage : null;\n\n  const hasThinkingSteps = intermediateMessages.length > 0;\n\n  // 检查用户消息是否需要拆分\n  if (isMultimodalContent(firstMessage.content)) {\n    const imageContents = firstMessage.content.filter((part) => part.type === 'image_url');\n    const textContents = firstMessage.content.filter((part) => part.type === 'text');\n\n    // 只有同时包含图片和文本时才拆分显示\n    if (imageContents.length > 0 && textContents.length > 0) {\n      return (\n        <div className=\"message-group-container space-y-3\">\n          {/* 先显示图片消息 */}\n          <Message\n            message={{\n              ...firstMessage,\n              content: imageContents,\n              id: `${firstMessage.id}-images`,\n            }}\n          />\n\n          {/* 再显示文本消息 */}\n          <Message\n            message={{\n              ...firstMessage,\n              content: textContents,\n              id: `${firstMessage.id}-text`,\n            }}\n          />\n\n          {/* Assistant response section with all assistant-related messages */}\n          {responseMessage && (\n            <div className=\"assistant-response-container\">\n              {/* Initial response message - marked as in-group */}\n              <Message message={responseMessage} isInGroup={true} />\n\n              {/* Thinking process section - always shown */}\n              {hasThinkingSteps && (\n                <div className=\"thinking-steps-container\">\n                  {intermediateMessages.map((msg) => (\n                    <Message key={msg.id} message={msg} isIntermediate={true} isInGroup={true} />\n                  ))}\n\n                  {!isThinking && (\n                    <div className=\"mt-1 mb-2\">\n                      <div className=\"flex items-center text-xs text-gray-500 dark:text-gray-400 py-1\">\n                        <FiClock size={10} className=\"mr-1\" />\n                        {responseMessage && formatTimestamp(responseMessage.timestamp)}\n                      </div>\n                    </div>\n                  )}\n                </div>\n              )}\n\n              {/* Final answer - if exists and not currently thinking */}\n              {finalMessage && finalMessage !== responseMessage && !isThinking && (\n                <Message message={finalMessage} isInGroup={false} />\n              )}\n\n              {/* Thinking indicator - 使用新的高级思考动画 */}\n              {isThinking && (\n                <div className=\"mt-2\">\n                  <ThinkingAnimation />\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      );\n    }\n  }\n\n  return (\n    <div className=\"message-group-container space-y-3\">\n      {/* User message is always displayed */}\n      <Message message={firstMessage} />\n\n      {/* Assistant response section with all assistant-related messages */}\n      {responseMessage && (\n        <div className=\"assistant-response-container\">\n          {/* Initial response message - marked as in-group */}\n          <Message message={responseMessage} isInGroup={true} />\n\n          {/* Thinking process section - always shown */}\n          {hasThinkingSteps && (\n            <div className=\"thinking-steps-container\">\n              {intermediateMessages.map((msg) => (\n                <Message key={msg.id} message={msg} isIntermediate={true} isInGroup={true} />\n              ))}\n\n              {!isThinking && (\n                <div className=\"mt-1 mb-2\">\n                  <div className=\"flex items-center text-xs text-gray-500 dark:text-gray-400 py-1\">\n                    <FiClock size={10} className=\"mr-1\" />\n                    {responseMessage && formatTimestamp(responseMessage.timestamp)}\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n\n          {/* Final answer - if exists and not currently thinking */}\n          {finalMessage && finalMessage !== responseMessage && !isThinking && (\n            <Message message={finalMessage} isInGroup={false} />\n          )}\n\n          {/* Thinking indicator - 使用新的高级思考动画 */}\n          {isThinking && (\n            <div className=\"mt-2\">\n              <ThinkingAnimation />\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};","import React, { useRef, useEffect } from 'react';\nimport { motion } from 'framer-motion';\n\ninterface ThinkingAnimationProps {\n  size?: 'small' | 'medium' | 'large';\n  text?: string;\n  className?: string;\n}\n\n/**\n * 高级思考动画组件 - 世界级交互动画设计\n * \n * 设计特点:\n * - 动态粒子系统模拟思考流程\n * - 微妙的光晕和扩散效果\n * - 精心编排的动画时序\n * - 流畅的性能和低CPU占用\n * - 响应式设计适应不同上下文\n */\nexport const ThinkingAnimation: React.FC<ThinkingAnimationProps> = ({ \n  size = 'medium', \n  text = 'Agent TARS is thinking', \n  className = '' \n}) => {\n  // 根据尺寸设置参数\n  const particleCount = size === 'small' ? 5 : size === 'medium' ? 8 : 12;\n  const baseSize = size === 'small' ? 3 : size === 'medium' ? 4 : 5;\n  const containerClass = size === 'small' ? 'h-6' : size === 'medium' ? 'h-8' : 'h-10';\n  \n  // 粒子运动动画\n  const particleVariants = {\n    animate: {\n      transition: {\n        staggerChildren: 0.12,\n        repeat: Infinity,\n        repeatType: \"loop\" as const,\n      }\n    }\n  };\n\n  // 个体粒子动画\n  const particleItem = {\n    initial: { opacity: 0, scale: 0 },\n    animate: {\n      opacity: [0, 1, 0],\n      scale: [0.5, 1, 0.5],\n      y: [0, -8, 0],\n      transition: {\n        duration: 2,\n        repeat: Infinity,\n        ease: [0.22, 1, 0.36, 1],\n      }\n    }\n  };\n\n  // 脉冲光效动画\n  const pulseVariants = {\n    animate: {\n      scale: [0.95, 1.05, 0.95],\n      opacity: [0.5, 0.8, 0.5],\n      transition: {\n        duration: 3,\n        repeat: Infinity,\n        ease: \"easeInOut\"\n      }\n    }\n  };\n\n  // 波浪文字动画\n  const textVariants = {\n    animate: {\n      transition: {\n        staggerChildren: 0.08,\n      }\n    }\n  };\n  \n  const letterVariants = {\n    initial: { y: 0 },\n    animate: { \n      y: [0, -2, 0],\n      transition: {\n        duration: 1.2,\n        repeat: Infinity,\n        ease: \"easeInOut\",\n        repeatType: \"reverse\",\n      }\n    }\n  };\n\n  // 动态创建文字动画\n  const renderTextWithAnimation = () => {\n    return (\n      <motion.div\n        variants={textVariants}\n        animate=\"animate\"\n        className=\"flex items-center\"\n      >\n        {text.split('').map((char, index) => (\n          <motion.span\n            key={`${char}-${index}`}\n            variants={letterVariants}\n            style={{\n              display: 'inline-block',\n              marginRight: char === ' ' ? '0.25em' : '0',\n              opacity: char === '.' ? 0.7 : 1\n            }}\n          >\n            {char}\n          </motion.span>\n        ))}\n      </motion.div>\n    );\n  };\n\n  return (\n    <div className={`flex items-center space-x-3 ${containerClass} ${className}`}>\n      <div className=\"relative\">\n        {/* 底部光晕 */}\n        <motion.div \n          className=\"absolute rounded-full bg-accent-400/20 dark:bg-accent-500/10 blur-md\" \n          style={{ \n            width: `${baseSize * 6}px`, \n            height: `${baseSize * 3}px`,\n            bottom: `-${baseSize}px`,\n            left: `${baseSize}px`,\n          }}\n          variants={pulseVariants}\n          animate=\"animate\"\n        />\n        \n        {/* 粒子容器 */}\n        <motion.div \n          className=\"relative flex items-center justify-center\"\n          style={{ width: `${baseSize * 8}px`, height: `${baseSize * 8}px` }}\n          variants={particleVariants}\n          animate=\"animate\"\n        >\n          {/* 动态生成粒子 */}\n          {Array.from({ length: particleCount }).map((_, i) => (\n            <motion.div\n              key={i}\n              className=\"absolute bg-accent-500 dark:bg-accent-400 rounded-full\"\n              style={{ \n                width: `${baseSize}px`, \n                height: `${baseSize}px`,\n                filter: `blur(${size === 'small' ? 0 : 0.5}px)`,\n                x: `${Math.cos(i / particleCount * Math.PI * 2) * baseSize * 2}px`,\n                y: `${Math.sin(i / particleCount * Math.PI * 2) * baseSize * 2}px`,\n              }}\n              variants={particleItem}\n              custom={i}\n            />\n          ))}\n          \n          {/* 中心光点 */}\n          <motion.div\n            className=\"absolute bg-accent-600 dark:bg-accent-300 rounded-full z-10\"\n            style={{ \n              width: `${baseSize * 1.5}px`, \n              height: `${baseSize * 1.5}px`,\n            }}\n            animate={{\n              scale: [1, 1.2, 1],\n              opacity: [0.7, 1, 0.7]\n            }}\n            transition={{\n              duration: 2,\n              repeat: Infinity,\n              ease: \"easeInOut\"\n            }}\n          />\n        </motion.div>\n      </div>\n\n      {/* 思考文字 */}\n      <div className=\"text-gray-600 dark:text-gray-300 text-sm font-medium\">\n        {renderTextWithAnimation()}\n      </div>\n    </div>\n  );\n};\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACvBA;AAGA;AACA;AACA;AACA;AACA;AAOA;;;;;;;;;AASA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AALA;;;;;AASA;AAEA;AACA;AACA;AACA;AACA;AALA;;;;;;;;;;;AASA;AACA;AAEA;AAAA;;;;;;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAJA;;;;;;;;;;AASA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;AAIA;AACA;AACA;AACA;AACA;AACA;;;;;;AAIA;AACA;;AAEA;AAAA;AAAA;;;;;;AAGA;AACA;;AACA;AACA;AAAA;AAAA;AAAA;;;;;AAGA;AACA;AACA;AAAA;;AACA;AAAA;AAAA;;;;;;AACA;;;;;;;;;;;;;;;;;;AAQA;AACA;AAAA;;;;;;AAIA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AAOA;AACA;AAEA;AACA;;AAEA;AAAA;;;;;;AAGA;AACA;;AAEA;AAAA;AAAA;;;;;;AAGA;AACA;;AACA;AACA;AAAA;AAAA;AAAA;;;;;AAGA;AACA;AACA;AAAA;;AACA;AAAA;AAAA;;;;;;AACA;;;;;;;;;;;;;;;;;;AAQA;AACA;AAAA;;;;;;AAIA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AAOA;AAjMA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxBA;AACA;AAQA;;;;;;;;;AASA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AARA;;;;;;;;;;AAaA;AAEA;AACA;;AACA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;;AAGA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;;;;;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AAMA;AAAA;AACA;;;;;;;;;;;;AAIA;AAlKA"}