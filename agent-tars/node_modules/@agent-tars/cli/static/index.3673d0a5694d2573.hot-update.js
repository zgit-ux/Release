"use strict";
self["webpackHotUpdate_agent_tars_web_ui"]("index", {
"./src/entry.css": (function (module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
// extracted by css-extract-rspack-plugin

    if(true) {
      (function() {
        var localsJsonString = undefined;
        // 1749546860145
        var cssReload = (__webpack_require__("../node_modules/.pnpm/@rspack+core@1.3.9_@swc+helpers@0.5.17/node_modules/@rspack/core/dist/cssExtractHmr.js")/* .cssReload */.cssReload)(module.id, {});
        // only invalidate when locals change
        if (
          module.hot.data &&
          module.hot.data.value &&
          module.hot.data.value !== localsJsonString
        ) {
          module.hot.invalidate();
        } else {
          module.hot.accept();
        }
        module.hot.dispose(function(data) {
          data.value = localsJsonString;
          cssReload();
        });
      })();
    }
  

}),
"./src/v2/utils/formatters.ts": (function (module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  determineToolType: () => (determineToolType),
  formatRelativeDate: () => (formatRelativeDate),
  formatTimestamp: () => (formatTimestamp)
});
/* ESM import */var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/v2/constants/index.ts");
/* provided dependency */ var $ReactRefreshRuntime$ = __webpack_require__("../node_modules/.pnpm/@rspack+plugin-react-refresh@1.0.3_react-refresh@0.16.0/node_modules/@rspack/plugin-react-refresh/client/reactRefresh.js");

/**
 * Format a timestamp to a user-friendly date string
 */ function formatTimestamp(timestamp) {
    const date = new Date(timestamp);
    return date.toLocaleTimeString([], {
        hour: '2-digit',
        minute: '2-digit'
    });
}
/**
 * Format a date relative to today (Today, Yesterday, or date)
 */ function formatRelativeDate(timestamp) {
    const date = new Date(timestamp);
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    const yesterday = new Date(today);
    yesterday.setDate(yesterday.getDate() - 1);
    if (date.toDateString() === today.toDateString()) {
        return 'Today';
    } else if (date.toDateString() === yesterday.toDateString()) {
        return 'Yesterday';
    } else {
        return date.toLocaleDateString([], {
            month: 'short',
            day: 'numeric'
        });
    }
}
/**
 * Determine the tool type from name and content
 */ function determineToolType(name, content) {
    const lowerName = name.toLowerCase();
    // Check for image content first, as names can be ambiguous (e.g., "Browser Screenshot")
    if (content && (typeof content === 'object' && content.type === 'image' || typeof content === 'string' && content.startsWith('data:image/'))) {
        return _constants__WEBPACK_IMPORTED_MODULE_0__.TOOL_TYPES.IMAGE;
    }
    if (Array.isArray(content) && content.some((item)=>item.type === 'image_url')) {
        return _constants__WEBPACK_IMPORTED_MODULE_0__.TOOL_TYPES.IMAGE;
    }
    // Add specialized browser_vision_control detection
    if (lowerName === 'browser_vision_control') {
        return 'browser_vision_control';
    }
    // Check the tool name first
    if (lowerName.includes('search') || lowerName.includes('web_search')) return _constants__WEBPACK_IMPORTED_MODULE_0__.TOOL_TYPES.SEARCH;
    if (lowerName.includes('browser')) return _constants__WEBPACK_IMPORTED_MODULE_0__.TOOL_TYPES.BROWSER;
    if (lowerName.includes('command') || lowerName.includes('terminal') || lowerName === 'run_command') return _constants__WEBPACK_IMPORTED_MODULE_0__.TOOL_TYPES.COMMAND;
    if (lowerName.includes('file') || lowerName.includes('document')) return _constants__WEBPACK_IMPORTED_MODULE_0__.TOOL_TYPES.FILE;
    // 检查内容是否是新格式的搜索结果
    if (Array.isArray(content) && content.some((item)=>item.type === 'text' && (item.name === 'RESULTS' || item.name === 'QUERY'))) {
        return _constants__WEBPACK_IMPORTED_MODULE_0__.TOOL_TYPES.SEARCH;
    }
    // 检查内容是否是新格式的浏览器导航结果
    if (Array.isArray(content) && content.some((item)=>item.type === 'text' && item.text && item.text.startsWith('Navigated to'))) {
        return _constants__WEBPACK_IMPORTED_MODULE_0__.TOOL_TYPES.BROWSER;
    }
    // 检查内容是否是新格式的命令执行结果
    if (Array.isArray(content) && content.some((item)=>item.type === 'text' && (item.name === 'STDOUT' || item.name === 'COMMAND'))) {
        return _constants__WEBPACK_IMPORTED_MODULE_0__.TOOL_TYPES.COMMAND;
    }
    return _constants__WEBPACK_IMPORTED_MODULE_0__.TOOL_TYPES.OTHER;
}

function $RefreshSig$() {
  return $ReactRefreshRuntime$.createSignatureFunctionForTransform();
}
function $RefreshReg$(type, id) {
  $ReactRefreshRuntime$.register(type, module.id + "_" + id);
}
Promise.resolve().then(function() {
  $ReactRefreshRuntime$.refresh(module.id, module.hot);
});


}),

},function(__webpack_require__) {
// webpack/runtime/get_full_hash
(() => {
__webpack_require__.h = () => ("390f3b36a69bf06e")
})();

}
);
//# sourceMappingURL=index.3673d0a5694d2573.hot-update.js.map