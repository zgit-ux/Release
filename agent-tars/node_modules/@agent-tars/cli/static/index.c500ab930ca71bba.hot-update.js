"use strict";
self["webpackHotUpdate_agent_tars_web_ui"]("index", {
"./src/common/constants/index.ts": (function (module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  API_BASE_URL: () => (API_BASE_URL),
  API_ENDPOINTS: () => (API_ENDPOINTS),
  CONNECTION_SETTINGS: () => (CONNECTION_SETTINGS),
  MESSAGE_ROLES: () => (MESSAGE_ROLES),
  SOCKET_EVENTS: () => (SOCKET_EVENTS),
  STORAGE_KEYS: () => (STORAGE_KEYS),
  TOOL_TYPES: () => (TOOL_TYPES)
});
/* provided dependency */ var $ReactRefreshRuntime$ = __webpack_require__("../node_modules/.pnpm/@rspack+plugin-react-refresh@1.0.3_react-refresh@0.16.0/node_modules/@rspack/plugin-react-refresh/client/reactRefresh.js");
/**
 * Base API URL for server communication
 */ const API_BASE_URL = window.AGENT_TARS_BASE_URL ?? 'http://localhost:3000';
/**
 * Default API endpoints
 */ const API_ENDPOINTS = {
    SESSIONS: '/api/sessions',
    CREATE_SESSION: '/api/sessions/create',
    SESSION_DETAILS: '/api/sessions/details',
    SESSION_EVENTS: '/api/sessions/events',
    SESSION_STATUS: '/api/sessions/status',
    UPDATE_SESSION: '/api/sessions/update',
    DELETE_SESSION: '/api/sessions/delete',
    QUERY: '/api/sessions/query',
    QUERY_STREAM: '/api/sessions/query/stream',
    ABORT: '/api/sessions/abort',
    GENERATE_SUMMARY: '/api/sessions/generate-summary',
    HEALTH: '/api/health',
    BROWSER_CONTROL_INFO: '/api/sessions/browser-control',
    MODEL_INFO: '/api/model-info'
};
/**
 * WebSocket events
 */ const SOCKET_EVENTS = {
    CONNECT: 'connect',
    DISCONNECT: 'disconnect',
    ERROR: 'error',
    RECONNECT_ATTEMPT: 'reconnect_attempt',
    RECONNECT_FAILED: 'reconnect_failed',
    JOIN_SESSION: 'join-session',
    AGENT_EVENT: 'agent-event',
    AGENT_STATUS: 'agent-status',
    PING: 'ping',
    SEND_QUERY: 'send-query',
    ABORT_QUERY: 'abort-query'
};
/**
 * Local storage keys
 */ const STORAGE_KEYS = {
    ACTIVE_SESSION: 'agent-tars-active-session',
    THEME: 'agent-tars-theme'
};
/**
 * Tool types
 */ const TOOL_TYPES = {
    SEARCH: 'search',
    BROWSER: 'browser',
    COMMAND: 'command',
    IMAGE: 'image',
    FILE: 'file',
    BROWSER_CONTROL: 'browser_vision_control',
    OTHER: 'other'
};
/**
 * Message roles
 */ const MESSAGE_ROLES = {
    USER: 'user',
    ASSISTANT: 'assistant',
    SYSTEM: 'system',
    TOOL: 'tool'
};
/**
 * Connection settings
 */ const CONNECTION_SETTINGS = {
    HEARTBEAT_INTERVAL: 15000,
    MAX_MISSED_HEARTBEATS: 2,
    MAX_RECONNECT_ATTEMPTS: 5,
    RECONNECTION_DELAY: 1000,
    RECONNECTION_DELAY_MAX: 5000
};

function $RefreshSig$() {
  return $ReactRefreshRuntime$.createSignatureFunctionForTransform();
}
function $RefreshReg$(type, id) {
  $ReactRefreshRuntime$.register(type, module.id + "_" + id);
}
Promise.resolve().then(function() {
  $ReactRefreshRuntime$.refresh(module.id, module.hot);
});


}),
"./src/common/utils/formatters.ts": (function (module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  determineToolType: () => (determineToolType),
  formatRelativeDate: () => (formatRelativeDate),
  formatTimestamp: () => (formatTimestamp)
});
/* ESM import */var _common_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/common/constants/index.ts");
/* provided dependency */ var $ReactRefreshRuntime$ = __webpack_require__("../node_modules/.pnpm/@rspack+plugin-react-refresh@1.0.3_react-refresh@0.16.0/node_modules/@rspack/plugin-react-refresh/client/reactRefresh.js");

/**
 * Format a timestamp to a user-friendly date string
 */ function formatTimestamp(timestamp) {
    const date = new Date(timestamp);
    return date.toLocaleTimeString([], {
        hour: '2-digit',
        minute: '2-digit'
    });
}
/**
 * Format a date relative to today (Today, Yesterday, or date)
 */ function formatRelativeDate(timestamp) {
    const date = new Date(timestamp);
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    const yesterday = new Date(today);
    yesterday.setDate(yesterday.getDate() - 1);
    if (date.toDateString() === today.toDateString()) {
        return 'Today';
    } else if (date.toDateString() === yesterday.toDateString()) {
        return 'Yesterday';
    } else {
        return date.toLocaleDateString([], {
            month: 'short',
            day: 'numeric'
        });
    }
}
/**
 * Determine the tool type from name and content
 */ function determineToolType(name, content) {
    const lowerName = name.toLowerCase();
    // Add specialized browser_vision_control detection
    if (lowerName === 'browser_vision_control') {
        return 'browser_vision_control';
    }
    // Check for write_file tool
    if (lowerName === 'write_file') {
        return _common_constants__WEBPACK_IMPORTED_MODULE_0__.TOOL_TYPES.FILE;
    }
    // Check the tool name first
    if (lowerName.includes('search') || lowerName.includes('web_search')) return _common_constants__WEBPACK_IMPORTED_MODULE_0__.TOOL_TYPES.SEARCH;
    if (lowerName.includes('browser')) return _common_constants__WEBPACK_IMPORTED_MODULE_0__.TOOL_TYPES.BROWSER;
    if (lowerName.includes('command') || lowerName.includes('terminal') || lowerName === 'run_command') return _common_constants__WEBPACK_IMPORTED_MODULE_0__.TOOL_TYPES.COMMAND;
    if (lowerName.includes('file') || lowerName.includes('document')) return _common_constants__WEBPACK_IMPORTED_MODULE_0__.TOOL_TYPES.FILE;
    // 检查内容是否是新格式的搜索结果
    if (Array.isArray(content) && content.some((item)=>item.type === 'text' && (item.name === 'RESULTS' || item.name === 'QUERY'))) {
        return _common_constants__WEBPACK_IMPORTED_MODULE_0__.TOOL_TYPES.SEARCH;
    }
    // 检查内容是否是新格式的浏览器导航结果
    if (Array.isArray(content) && content.some((item)=>item.type === 'text' && item.text && item.text.startsWith('Navigated to'))) {
        return _common_constants__WEBPACK_IMPORTED_MODULE_0__.TOOL_TYPES.BROWSER;
    }
    // Check if content contains image data
    if (content && (typeof content === 'object' && content.type === 'image' || typeof content === 'string' && content.startsWith('data:image/'))) {
        return _common_constants__WEBPACK_IMPORTED_MODULE_0__.TOOL_TYPES.IMAGE;
    }
    // 检查内容是否是包含图像 URL 的数组
    if (Array.isArray(content) && content.some((item)=>item.type === 'image_url')) {
        return _common_constants__WEBPACK_IMPORTED_MODULE_0__.TOOL_TYPES.IMAGE;
    }
    // 检查内容是否是新格式的命令执行结果
    if (Array.isArray(content) && content.some((item)=>item.type === 'text' && (item.name === 'STDOUT' || item.name === 'COMMAND'))) {
        return _common_constants__WEBPACK_IMPORTED_MODULE_0__.TOOL_TYPES.COMMAND;
    }
    return _common_constants__WEBPACK_IMPORTED_MODULE_0__.TOOL_TYPES.OTHER;
}

function $RefreshSig$() {
  return $ReactRefreshRuntime$.createSignatureFunctionForTransform();
}
function $RefreshReg$(type, id) {
  $ReactRefreshRuntime$.register(type, module.id + "_" + id);
}
Promise.resolve().then(function() {
  $ReactRefreshRuntime$.refresh(module.id, module.hot);
});


}),

},function(__webpack_require__) {
// webpack/runtime/get_full_hash
(() => {
__webpack_require__.h = () => ("44b3c0171917e10a")
})();

}
);
//# sourceMappingURL=index.c500ab930ca71bba.hot-update.js.map