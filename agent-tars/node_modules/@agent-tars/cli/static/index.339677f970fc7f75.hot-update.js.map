{"version":3,"file":"index.339677f970fc7f75.hot-update.js","sources":["/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/entry.css","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/main/services/socketService.ts"],"sourcesContent":["// extracted by css-extract-rspack-plugin\nexport {};\n    if(module.hot) {\n      (function() {\n        var localsJsonString = undefined;\n        // 1749663241895\n        var cssReload = require(\"../../node_modules/.pnpm/@rspack+core@1.3.9_@swc+helpers@0.5.17/node_modules/@rspack/core/dist/cssExtractHmr.js\").cssReload(module.id, {});\n        // only invalidate when locals change\n        if (\n          module.hot.data &&\n          module.hot.data.value &&\n          module.hot.data.value !== localsJsonString\n        ) {\n          module.hot.invalidate();\n        } else {\n          module.hot.accept();\n        }\n        module.hot.dispose(function(data) {\n          data.value = localsJsonString;\n          cssReload();\n        });\n      })();\n    }\n  ","import { io, Socket } from 'socket.io-client';\nimport { API_BASE_URL, SOCKET_EVENTS, CONNECTION_SETTINGS } from '@/common/constants';\nimport { AgentEventStream } from '../types';\n\n/**\n * Socket Service - Manages WebSocket connection with server\n */\nclass SocketService {\n  private socket: Socket | null = null;\n  private heartbeatTimer: NodeJS.Timeout | null = null;\n  private missedHeartbeats = 0;\n  private reconnectAttempts = 0;\n  private eventHandlers: Record<string, Array<(...args: any[]) => void>> = {};\n\n  /**\n   * Connect to the WebSocket server\n   */\n  connect(): Socket | null {\n    if (this.socket?.connected) {\n      return this.socket;\n    }\n\n    this.socket = io(API_BASE_URL, {\n      reconnection: true,\n      reconnectionDelay: CONNECTION_SETTINGS.RECONNECTION_DELAY,\n      reconnectionDelayMax: CONNECTION_SETTINGS.RECONNECTION_DELAY_MAX,\n      reconnectionAttempts: CONNECTION_SETTINGS.MAX_RECONNECT_ATTEMPTS,\n    });\n\n    // Set up core event handlers\n    this.setupEventHandlers();\n\n    return this.socket;\n  }\n\n  /**\n   * Disconnect from the WebSocket server\n   */\n  disconnect(): void {\n    this.stopHeartbeat();\n\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n    }\n\n    this.missedHeartbeats = 0;\n    this.reconnectAttempts = 0;\n  }\n\n  /**\n   * Check if currently connected to the server\n   */\n  isConnected(): boolean {\n    return this.socket?.connected || false;\n  }\n\n  /**\n   * Join a specific session to receive its events\n   */\n  joinSession(\n    sessionId: string,\n    onEvent: (event: AgentEventStream.Event) => void,\n    onStatusUpdate: (status: any) => void,\n  ): void {\n    if (!this.socket) {\n      this.connect();\n    }\n\n    if (!this.socket) return;\n\n    console.log(`Joining session: ${sessionId}`);\n    this.socket.emit(SOCKET_EVENTS.JOIN_SESSION, sessionId);\n\n    // 清理现有监听器\n    this.socket.off(SOCKET_EVENTS.AGENT_EVENT);\n    this.socket.off(SOCKET_EVENTS.AGENT_STATUS);\n\n    // 设置事件监听器\n    this.socket.on(SOCKET_EVENTS.AGENT_EVENT, ({ type, data }) => {\n      if (data) {\n        onEvent(data);\n      }\n    });\n\n    // 增强状态更新处理\n    this.socket.on(SOCKET_EVENTS.AGENT_STATUS, (status) => {\n      console.log('Received agent status:', status);\n      onStatusUpdate(status);\n\n      // 触发全局事件以同步应用中的所有组件\n      this.notifyEventHandlers(SOCKET_EVENTS.AGENT_STATUS, status);\n    });\n\n    // 立即请求当前状态\n    this.socket.emit('request-status', { sessionId });\n  }\n\n  /**\n   * Send a query to the server\n   */\n  sendQuery(params: { sessionId: string; query: string }): void {\n    if (!this.socket?.connected) {\n      throw new Error('Socket not connected');\n    }\n\n    this.socket.emit(SOCKET_EVENTS.SEND_QUERY, params);\n  }\n\n  /**\n   * Abort the current query\n   */\n  abortQuery(params: { sessionId: string }): void {\n    if (!this.socket?.connected) {\n      throw new Error('Socket not connected');\n    }\n\n    this.socket.emit(SOCKET_EVENTS.ABORT_QUERY, params);\n  }\n\n  /**\n   * Add an event listener\n   */\n  on(event: string, callback: (...args: any[]) => void): void {\n    if (!this.eventHandlers[event]) {\n      this.eventHandlers[event] = [];\n    }\n\n    this.eventHandlers[event].push(callback);\n\n    // If we already have a socket, add the listener directly\n    if (this.socket) {\n      this.socket.on(event, callback);\n    }\n  }\n\n  /**\n   * Remove an event listener\n   */\n  off(event: string, callback: (...args: any[]) => void): void {\n    if (this.eventHandlers[event]) {\n      this.eventHandlers[event] = this.eventHandlers[event].filter((cb) => cb !== callback);\n    }\n\n    if (this.socket) {\n      this.socket.off(event, callback);\n    }\n  }\n\n  /**\n   * Send a ping to check server connectivity\n   */\n  ping(): Promise<boolean> {\n    return new Promise((resolve) => {\n      if (!this.socket || !this.socket.connected) {\n        resolve(false);\n        return;\n      }\n\n      const timeout = setTimeout(() => {\n        resolve(false);\n      }, 5000);\n\n      this.socket.emit(SOCKET_EVENTS.PING, () => {\n        clearTimeout(timeout);\n        resolve(true);\n      });\n    });\n  }\n\n  /**\n   * Get the socket instance\n   */\n  getSocket(): Socket | null {\n    return this.socket;\n  }\n\n  /**\n   * Set up event handlers for the socket connection\n   */\n  private setupEventHandlers(): void {\n    if (!this.socket) return;\n\n    this.socket.on(SOCKET_EVENTS.CONNECT, this.handleConnect);\n    this.socket.on(SOCKET_EVENTS.DISCONNECT, this.handleDisconnect);\n    this.socket.on(SOCKET_EVENTS.ERROR, this.handleError);\n    this.socket.on(SOCKET_EVENTS.RECONNECT_ATTEMPT, this.handleReconnectAttempt);\n    this.socket.on(SOCKET_EVENTS.RECONNECT_FAILED, this.handleReconnectFailed);\n\n    // Apply any event handlers that were registered before connecting\n    Object.entries(this.eventHandlers).forEach(([event, handlers]) => {\n      handlers.forEach((handler) => {\n        this.socket?.on(event, handler);\n      });\n    });\n  }\n\n  /**\n   * Handle successful connection\n   */\n  private handleConnect = (): void => {\n    console.log('Connected to server');\n    this.missedHeartbeats = 0;\n    this.reconnectAttempts = 0;\n    this.startHeartbeat();\n\n    // Notify event handlers\n    this.notifyEventHandlers(SOCKET_EVENTS.CONNECT);\n  };\n\n  /**\n   * Handle disconnection\n   */\n  private handleDisconnect = (reason: string): void => {\n    console.log('Disconnected from server:', reason);\n    this.stopHeartbeat();\n\n    // Notify event handlers\n    this.notifyEventHandlers(SOCKET_EVENTS.DISCONNECT, reason);\n  };\n\n  /**\n   * Handle connection errors\n   */\n  private handleError = (error: any): void => {\n    console.error('Socket error:', error);\n\n    // Notify event handlers\n    this.notifyEventHandlers(SOCKET_EVENTS.ERROR, error);\n  };\n\n  /**\n   * Handle reconnection attempts\n   */\n  private handleReconnectAttempt = (): void => {\n    this.reconnectAttempts++;\n    console.log(\n      `Reconnection attempt ${this.reconnectAttempts}/${CONNECTION_SETTINGS.MAX_RECONNECT_ATTEMPTS}`,\n    );\n\n    // Notify event handlers\n    this.notifyEventHandlers(SOCKET_EVENTS.RECONNECT_ATTEMPT, this.reconnectAttempts);\n  };\n\n  /**\n   * Handle failed reconnection\n   */\n  private handleReconnectFailed = (): void => {\n    console.log('Failed to reconnect after multiple attempts');\n\n    // Notify event handlers\n    this.notifyEventHandlers(SOCKET_EVENTS.RECONNECT_FAILED);\n  };\n\n  /**\n   * Start heartbeat monitoring\n   */\n  private startHeartbeat(): void {\n    this.stopHeartbeat();\n    this.missedHeartbeats = 0;\n\n    this.heartbeatTimer = setInterval(() => {\n      this.sendHeartbeat();\n    }, CONNECTION_SETTINGS.HEARTBEAT_INTERVAL);\n  }\n\n  /**\n   * Stop heartbeat monitoring\n   */\n  private stopHeartbeat(): void {\n    if (this.heartbeatTimer) {\n      clearInterval(this.heartbeatTimer);\n      this.heartbeatTimer = null;\n    }\n  }\n\n  /**\n   * Send heartbeat to server and track response\n   */\n  private sendHeartbeat(): void {\n    if (!this.socket || !this.socket.connected) {\n      this.missedHeartbeats++;\n\n      if (this.missedHeartbeats >= CONNECTION_SETTINGS.MAX_MISSED_HEARTBEATS) {\n        console.warn(`Missed ${this.missedHeartbeats} heartbeats, connection may be down`);\n        this.socket?.disconnect();\n      }\n      return;\n    }\n\n    this.socket.emit(SOCKET_EVENTS.PING, () => {\n      this.missedHeartbeats = 0;\n    });\n\n    // Increment counter - will be reset when we get a response\n    this.missedHeartbeats++;\n\n    if (this.missedHeartbeats >= CONNECTION_SETTINGS.MAX_MISSED_HEARTBEATS) {\n      console.warn(`Missed ${this.missedHeartbeats} heartbeats, connection may be down`);\n      this.socket.disconnect();\n    }\n  }\n\n  /**\n   * Notify all registered event handlers for a specific event\n   */\n  private notifyEventHandlers(event: string, ...args: any[]): void {\n    if (this.eventHandlers[event]) {\n      this.eventHandlers[event].forEach((handler) => {\n        try {\n          handler(...args);\n        } catch (error) {\n          console.error(`Error in ${event} event handler:`, error);\n        }\n      });\n    }\n  }\n}\n\n// Export singleton instance\nexport const socketService = new SocketService();\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACvBA;AACA;AAGA;;AAEA;AAQA;;AAEA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AAEA;AAEA;AAAA;AACA;AAEA;;AAEA;AAMA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;;AAEA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AAEA;;AAEA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AAEA;;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AA2DA;;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AAEA;AAEA;AADA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AApTA;AACA;AACA;AACA;AACA;AAyLA;;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;;AAEA;AAEA;AAEA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AAIA;AACA;AACA;AAEA;;AAEA;AAEA;AAEA;AACA;AACA;;AAiEA;AAEA;AACA"}