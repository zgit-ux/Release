{"version":3,"file":"index.354cb1f928a82c55.hot-update.js","sources":["/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/entry.css","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/components/MessageGroup.tsx"],"sourcesContent":["// extracted by css-extract-rspack-plugin\nexport {};\n    if(module.hot) {\n      (function() {\n        var localsJsonString = undefined;\n        // 1751739942746\n        var cssReload = require(\"../../node_modules/.pnpm/@rspack+core@1.3.9_@swc+helpers@0.5.17/node_modules/@rspack/core/dist/cssExtractHmr.js\").cssReload(module.id, {});\n        // only invalidate when locals change\n        if (\n          module.hot.data &&\n          module.hot.data.value &&\n          module.hot.data.value !== localsJsonString\n        ) {\n          module.hot.invalidate();\n        } else {\n          module.hot.accept();\n        }\n        module.hot.dispose(function(data) {\n          data.value = localsJsonString;\n          cssReload();\n        });\n      })();\n    }\n  ","import React from 'react';\nimport { Message as MessageType } from '@/common/types';\nimport { Message } from '../index';\nimport { FiClock } from 'react-icons/fi';\nimport { formatTimestamp } from '@/common/utils/formatters';\nimport { isMultimodalContent } from '@/common/utils/typeGuards';\nimport { MessageTimestamp } from './MessageTimestamp';\n// import { ThinkingAnimation } from './ThinkingAnimation';\n\ninterface MessageGroupProps {\n  messages: MessageType[];\n  isThinking: boolean;\n}\n\n/**\n * MessageGroup Component - 重构版以支持流式渲染\n *\n * 设计原则:\n * - 每条消息独立渲染，避免阻塞\n * - 保持简洁的视觉层次结构\n * - 消息间的视觉关系通过样式而非嵌套实现\n */\nexport const MessageGroup: React.FC<MessageGroupProps> = ({ messages, isThinking }) => {\n  // 过滤掉环境消息\n  const filteredMessages = messages.filter((msg) => msg.role !== 'environment');\n\n  // 如果过滤后没有消息，则不渲染任何内容\n  if (filteredMessages.length === 0) {\n    return null;\n  }\n\n  // 获取用户消息和助手消息\n  const userMessages = filteredMessages.filter((msg) => msg.role === 'user');\n  const assistantMessages = filteredMessages.filter(\n    (msg) => msg.role === 'assistant' || msg.role === 'final_answer',\n  );\n\n  // 获取最后一条助手消息（用于时间戳和复制功能）\n  const lastResponseMessage =\n    assistantMessages.length > 0 ? assistantMessages[assistantMessages.length - 1] : null;\n\n  return (\n    <div>\n      {/* 渲染用户消息 - 处理多模态内容的拆分 */}\n      {userMessages.map((userMsg) => {\n        if (isMultimodalContent(userMsg.content)) {\n          const imageContents = userMsg.content.filter((part) => part.type === 'image_url');\n          const textContents = userMsg.content.filter((part) => part.type === 'text');\n\n          // 同时包含图片和文本时拆分显示\n          if (imageContents.length > 0 && textContents.length > 0) {\n            return (\n              <React.Fragment key={userMsg.id}>\n                <Message\n                  message={{\n                    ...userMsg,\n                    content: imageContents,\n                    id: `${userMsg.id}-images`,\n                  }}\n                />\n                <Message\n                  message={{\n                    ...userMsg,\n                    content: textContents,\n                    id: `${userMsg.id}-text`,\n                  }}\n                />\n              </React.Fragment>\n            );\n          }\n        }\n\n        // 普通用户消息\n        return <Message key={userMsg.id} message={userMsg} />;\n      })}\n\n      {/* 渲染所有助手消息 - 传递流式状态信息 */}\n      {assistantMessages.map((message, index) => (\n        <Message\n          key={message.id}\n          message={message}\n          isInGroup={true}\n          shouldDisplayTimestamp={index === assistantMessages.length - 1 && !isThinking}\n        />\n      ))}\n\n      {/* 时间戳和复制功能 */}\n      {!isThinking && lastResponseMessage && (\n        <div className=\"mt-1 mb-2\">\n          <div className=\"flex items-center justify-between text-xs text-gray-500 dark:text-gray-400 px-2\">\n            <div className=\"flex items-center\">\n              <FiClock size={10} className=\"mr-1\" />\n              {formatTimestamp(lastResponseMessage.timestamp)}\n            </div>\n\n            {/* 集成复制功能按钮 - 现在使用最后一条消息 */}\n            <MessageTimestamp\n              timestamp={lastResponseMessage.timestamp}\n              content={lastResponseMessage.content}\n              role={lastResponseMessage.role}\n              inlineStyle={true}\n            />\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\n// ... 保留其他代码 ..."],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACvBA;AAEA;AACA;AACA;AACA;AACA;AAQA;;;;;;;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AAGA;;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAbA;;;;;AAiBA;AACA;AAEA;AACA;AAAA;AAAA;;;;;AACA;AAGA;AAGA;AACA;AACA;AAHA;;;;;AAQA;AACA;AACA;AAAA;;AACA;AAAA;;AACA;AAAA;AAAA;;;;;;AACA;;;;;;;AAIA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;AAOA;AArFA"}