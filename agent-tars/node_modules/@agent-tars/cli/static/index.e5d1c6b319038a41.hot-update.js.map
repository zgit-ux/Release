{"version":3,"file":"index.e5d1c6b319038a41.hot-update.js","sources":["/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/entry.css","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Sidebar/ChatSession.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Sidebar/ToolBar.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Sidebar/index.tsx"],"sourcesContent":["// extracted by css-extract-rspack-plugin\nexport {};\n    if(module.hot) {\n      (function() {\n        var localsJsonString = undefined;\n        // 1748908940413\n        var cssReload = require(\"../../node_modules/.pnpm/@rspack+core@1.3.9_@swc+helpers@0.5.17/node_modules/@rspack/core/dist/cssExtractHmr.js\").cssReload(module.id, {});\n        // only invalidate when locals change\n        if (\n          module.hot.data &&\n          module.hot.data.value &&\n          module.hot.data.value !== localsJsonString\n        ) {\n          module.hot.invalidate();\n        } else {\n          module.hot.accept();\n        }\n        module.hot.dispose(function(data) {\n          data.value = localsJsonString;\n          cssReload();\n        });\n      })();\n    }\n  ","import React, { useState, useMemo, useCallback } from 'react';\nimport { useSession } from '../../hooks/useSession';\nimport { useNavigate } from 'react-router-dom';\nimport {\n  FiPlus,\n  FiRefreshCw,\n  FiChevronLeft,\n  FiWifiOff,\n  FiChevronDown,\n  FiChevronUp,\n} from 'react-icons/fi';\nimport classNames from 'classnames';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport SessionItem from './SessionItem';\n\ninterface ChatSessionProps {\n  isCollapsed: boolean;\n  onToggleCollapse: () => void;\n}\n\n/**\n * ChatSession Component - 侧边栏中的聊天会话列表部分\n * 包含会话列表和新建会话功能，可以被折叠\n */\nconst ChatSession: React.FC<ChatSessionProps> = ({ isCollapsed, onToggleCollapse }) => {\n  const {\n    sessions,\n    activeSessionId,\n    setActiveSession,\n    createSession,\n    updateSessionMetadata,\n    deleteSession,\n    loadSessions,\n    connectionStatus,\n    checkServerStatus,\n  } = useSession();\n\n  const navigate = useNavigate();\n\n  const [editingSessionId, setEditingSessionId] = useState<string | null>(null);\n  const [editedName, setEditedName] = useState('');\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [loadingSessionId, setLoadingSessionId] = useState<string | null>(null);\n\n  // Track collapsed state for each section\n  const [collapsedSections, setCollapsedSections] = useState<Record<string, boolean>>({});\n\n  // Toggle section collapse state - memoized\n  const toggleSectionCollapse = useCallback((sectionKey: string) => {\n    setCollapsedSections((prev) => ({\n      ...prev,\n      [sectionKey]: !prev[sectionKey],\n    }));\n  }, []);\n\n  // Group sessions by time period - memoized\n  const groupedSessions = useMemo(() => {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n\n    const yesterday = new Date(today);\n    yesterday.setDate(yesterday.getDate() - 1);\n\n    const lastWeek = new Date(today);\n    lastWeek.setDate(lastWeek.getDate() - 7);\n\n    // Initialize groups\n    const groups = [\n      { label: 'Today', sessions: [], key: 'today' },\n      { label: 'Yesterday', sessions: [], key: 'yesterday' },\n      { label: 'This Week', sessions: [], key: 'thisWeek' },\n      { label: 'Earlier', sessions: [], key: 'earlier' },\n    ];\n\n    // Categorize sessions\n    sessions.forEach((session) => {\n      const sessionDate = new Date(session.updatedAt || session.createdAt);\n\n      if (sessionDate >= today) {\n        groups[0].sessions.push(session);\n      } else if (sessionDate >= yesterday) {\n        groups[1].sessions.push(session);\n      } else if (sessionDate >= lastWeek) {\n        groups[2].sessions.push(session);\n      } else {\n        groups[3].sessions.push(session);\n      }\n    });\n\n    // Only return non-empty groups\n    return groups.filter((group) => group.sessions.length > 0);\n  }, [sessions]);\n\n  // Event handlers - all memoized with useCallback\n  const handleNewSession = useCallback(async () => {\n    try {\n      const sessionId = await createNewSession();\n      navigate(`/${sessionId}`);\n    } catch (error) {\n      console.error('Failed to create new session:', error);\n    }\n  }, [navigate]);\n\n  const createNewSession = useCallback(async () => {\n    const sessionId = await createSession();\n    await setActiveSession(sessionId);\n    return sessionId;\n  }, [createSession, setActiveSession]);\n\n  const handleEditSession = useCallback((sessionId: string, currentName?: string) => {\n    setEditingSessionId(sessionId);\n    setEditedName(currentName || '');\n  }, []);\n\n  const handleSaveEdit = useCallback(\n    async (sessionId: string) => {\n      try {\n        await updateSessionMetadata({ sessionId, updates: { name: editedName } });\n        setEditingSessionId(null);\n      } catch (error) {\n        console.error('Failed to update session name:', error);\n      }\n    },\n    [updateSessionMetadata, editedName],\n  );\n\n  const handleDeleteSession = useCallback(\n    async (sessionId: string, e: React.MouseEvent) => {\n      e.stopPropagation(); // Prevent clicking session\n\n      if (window.confirm('Are you sure you want to delete this session?')) {\n        try {\n          await deleteSession(sessionId);\n        } catch (error) {\n          console.error('Failed to delete session:', error);\n        }\n      }\n    },\n    [deleteSession],\n  );\n\n  const refreshSessions = useCallback(async () => {\n    setIsRefreshing(true);\n    try {\n      // Check server status before attempting to refresh sessions\n      const isConnected = await checkServerStatus();\n      if (isConnected) {\n        await loadSessions();\n      }\n    } catch (error) {\n      console.error('Failed to refresh sessions:', error);\n    } finally {\n      setIsRefreshing(false);\n    }\n  }, [checkServerStatus, loadSessions]);\n\n  const handleSessionClick = useCallback(\n    async (sessionId: string) => {\n      if (loadingSessionId || !connectionStatus.connected) return;\n\n      try {\n        setLoadingSessionId(sessionId);\n        // 导航到新路由，让路由组件处理会话加载\n        navigate(`/${sessionId}`);\n      } catch (error) {\n        console.error('Failed to switch session:', error);\n        checkServerStatus();\n      } finally {\n        setLoadingSessionId(null);\n      }\n    },\n    [loadingSessionId, connectionStatus.connected, navigate, checkServerStatus],\n  );\n\n  // Memoize the setter function\n  const handleSetEditedName = useCallback((name: string) => {\n    setEditedName(name);\n  }, []);\n\n  return (\n    <div className={classNames('flex flex-col h-full', {\n      'w-full': !isCollapsed,\n      'w-16': isCollapsed,\n    })}>\n      {/* Header with title and collapse button */}\n      <div className=\"p-4 flex items-center justify-between\">\n        {!isCollapsed ? (\n          <div className=\"text-lg font-display font-medium text-gray-900 dark:text-gray-100\">\n            Tasks\n          </div>\n        ) : (\n          <div className=\"w-full flex justify-center\">\n            <span className=\"text-gray-500 dark:text-gray-400\">\n              <FiPlus size={16} className=\"opacity-0\" />\n            </span>\n          </div>\n        )}\n        <motion.button\n          whileHover={{ scale: 1.1 }}\n          whileTap={{ scale: 0.95 }}\n          onClick={onToggleCollapse}\n          className=\"text-gray-500 hover:text-gray-700 dark:hover:text-gray-300 p-1.5 hover:bg-gray-100/40 dark:hover:bg-gray-800/40 rounded-full transition-colors\"\n        >\n          <FiChevronLeft size={16} />\n        </motion.button>\n      </div>\n\n      {/* New chat button */}\n      <div className=\"p-3\">\n        <motion.button\n          whileHover={{ scale: 1.02 }}\n          whileTap={{ scale: 0.98 }}\n          onClick={handleNewSession}\n          disabled={!connectionStatus.connected}\n          className={classNames(\n            'flex items-center justify-center gap-2 py-2 rounded-3xl text-white duration-200 border',\n            {\n              'w-full px-3': !isCollapsed,\n              'w-8 h-8 mx-auto': isCollapsed,\n            },\n            connectionStatus.connected\n              ? 'bg-gradient-to-r from-[#141414] to-[#1e1e1e] dark:from-gray-900 dark:to-gray-800 border-gray-200/10 dark:border-gray-700/20 hover:bg-gray-800 dark:hover:bg-gray-700'\n              : 'bg-gray-400 border-gray-300/20 dark:border-gray-700/10 cursor-not-allowed opacity-60',\n          )}\n          title={connectionStatus.connected ? 'New Task' : 'Server disconnected'}\n        >\n          <FiPlus className=\"text-white\" size={isCollapsed ? 16 : 18} />\n          {!isCollapsed && <span className=\"font-medium\">New Task</span>}\n        </motion.button>\n      </div>\n\n      {/* Chat sessions list */}\n      <div\n        className={classNames('flex-1 overflow-y-auto sidebar-scrollbar', { 'mt-2': !isCollapsed })}\n      >\n        {!isCollapsed && (\n          <div className=\"px-4 py-3 flex items-center justify-between\">\n            <div className=\"text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n              Recent Tasks\n            </div>\n            <div className=\"flex items-center gap-1\">\n              {/* Connection status indicator */}\n              <div\n                className={`h-2 w-2 rounded-full ${\n                  connectionStatus.connected\n                    ? 'bg-green-500 animate-pulse'\n                    : connectionStatus.reconnecting\n                      ? 'bg-yellow-500 animate-ping'\n                      : 'bg-gray-400'\n                }`}\n                title={\n                  connectionStatus.connected\n                    ? 'Connected to server'\n                    : connectionStatus.reconnecting\n                      ? 'Reconnecting...'\n                      : 'Disconnected from server'\n                }\n              />\n              <motion.button\n                whileHover={{ rotate: 180 }}\n                transition={{ duration: 0.3 }}\n                onClick={refreshSessions}\n                disabled={isRefreshing || !connectionStatus.connected}\n                className={`text-gray-500 hover:text-gray-700 dark:hover:text-gray-300 p-1 rounded-full hover:bg-gray-100/40 dark:hover:bg-gray-800/40 text-xs transition-all ${\n                  !connectionStatus.connected && 'opacity-50 cursor-not-allowed'\n                }`}\n                title={connectionStatus.connected ? 'Refresh tasks' : 'Server disconnected'}\n              >\n                <FiRefreshCw className={isRefreshing ? 'animate-spin' : ''} size={12} />\n              </motion.button>\n            </div>\n          </div>\n        )}\n\n        {!isCollapsed && !connectionStatus.connected && sessions.length > 0 && (\n          <div className=\"px-3 py-2 mb-1\">\n            <div className=\"p-3 rounded-3xl bg-red-50/30 dark:bg-red-900/15 text-gray-700 dark:text-gray-300 text-sm border border-red-200/50 dark:border-red-800/30 shadow-sm\">\n              <div className=\"flex items-center\">\n                <FiWifiOff className=\"mr-2 flex-shrink-0 text-red-500 dark:text-red-400\" />\n                <div className=\"font-medium text-red-700 dark:text-red-400\">Offline Mode</div>\n              </div>\n              <p className=\"mt-1 text-xs\">\n                You can view tasks but can't create new ones until reconnected.\n              </p>\n              <motion.button\n                whileHover={{ scale: 1.02 }}\n                whileTap={{ scale: 0.98 }}\n                onClick={() => checkServerStatus()}\n                className=\"w-full mt-2 py-1.5 px-3 bg-red-100/70 dark:bg-red-800/30 hover:bg-red-200/70 dark:hover:bg-red-700/40 rounded-xl text-xs font-medium transition-colors flex items-center justify-center border border-red-200/30 dark:border-red-700/30 text-red-700 dark:text-red-300\"\n              >\n                <FiRefreshCw\n                  className={`mr-1.5 ${connectionStatus.reconnecting ? 'animate-spin' : ''}`}\n                  size={12}\n                />\n                {connectionStatus.reconnecting ? 'Reconnecting...' : 'Reconnect to Server'}\n              </motion.button>\n            </div>\n          </div>\n        )}\n\n        <AnimatePresence>\n          {/* 折叠模式下仍然平铺所有会话 */}\n          {isCollapsed ? (\n            <div className=\"px-2 space-y-1\">\n              {sessions.map((session) => (\n                <motion.div\n                  key={session.id}\n                  className=\"relative group\"\n                  initial={{ opacity: 0, x: -10 }}\n                  animate={{ opacity: 1, x: 0 }}\n                  transition={{ duration: 0.2 }}\n                >\n                  <motion.button\n                    whileTap={{ scale: 0.98 }}\n                    onClick={() => handleSessionClick(session.id)}\n                    disabled={!connectionStatus.connected || loadingSessionId !== null}\n                    className={classNames(\n                      'text-left text-sm transition-all duration-200 flex items-center p-2 w-full rounded-xl border',\n                      {\n                        'bg-white/80 dark:bg-gray-800/80 border-gray-100/60 dark:border-gray-700/30 text-gray-900 dark:text-gray-100':\n                          activeSessionId === session.id,\n                        'hover:bg-white/60 dark:hover:bg-gray-800/60 border-transparent hover:border-gray-100/40 dark:hover:border-gray-700/20 backdrop-blur-sm':\n                          activeSessionId !== session.id,\n                        'opacity-60 cursor-not-allowed hover:bg-transparent dark:hover:bg-transparent hover:border-transparent dark:hover:border-transparent':\n                          !connectionStatus.connected ||\n                          (loadingSessionId !== null && loadingSessionId !== session.id),\n                      },\n                    )}\n                    title={\n                      !connectionStatus.connected\n                        ? 'Cannot access session: Server disconnected'\n                        : session.name || new Date(session.createdAt).toLocaleString()\n                    }\n                  >\n                    <div className=\"w-8 h-8 flex items-center justify-center mx-auto\">\n                      {loadingSessionId === session.id ? (\n                        <FiRefreshCw className=\"animate-spin text-gray-500\" size={16} />\n                      ) : (\n                        <FiRefreshCw\n                          className={\n                            activeSessionId === session.id ? 'text-accent-500' : 'text-gray-500'\n                          }\n                          size={16}\n                        />\n                      )}\n                    </div>\n                  </motion.button>\n                </motion.div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"px-3\">\n              {/* 基于时间分组的会话列表 */}\n              {groupedSessions.map((group) => (\n                <div key={group.key} className=\"mb-4\">\n                  {/* 分组标题和折叠按钮 */}\n                  <motion.button\n                    onClick={() => toggleSectionCollapse(group.key)}\n                    className=\"w-full flex items-center justify-between px-1 py-2 text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider hover:text-gray-700 dark:hover:text-gray-300\"\n                    whileHover={{ x: 2 }}\n                  >\n                    <span>{group.label}</span>\n                    <motion.div\n                      animate={{ rotate: collapsedSections[group.key] ? 0 : 180 }}\n                      transition={{ duration: 0.2 }}\n                    >\n                      <FiChevronUp size={14} />\n                    </motion.div>\n                  </motion.button>\n\n                  {/* 会话列表 */}\n                  <AnimatePresence>\n                    {!collapsedSections[group.key] && (\n                      <motion.div\n                        initial={{ height: 0, opacity: 0 }}\n                        animate={{ height: 'auto', opacity: 1 }}\n                        exit={{ height: 0, opacity: 0 }}\n                        transition={{ duration: 0.3 }}\n                        className=\"overflow-hidden\"\n                      >\n                        <div className=\"space-y-1\">\n                          {group.sessions.map((session) => (\n                            <SessionItem\n                              key={session.id}\n                              session={session}\n                              isActive={activeSessionId === session.id}\n                              isLoading={loadingSessionId === session.id}\n                              isConnected={connectionStatus.connected}\n                              onSessionClick={handleSessionClick}\n                              onEditSession={handleEditSession}\n                              onDeleteSession={handleDeleteSession}\n                              onSaveEdit={handleSaveEdit}\n                              editingSessionId={editingSessionId}\n                              editedName={editedName}\n                              setEditedName={handleSetEditedName}\n                            />\n                          ))}\n                        </div>\n                      </motion.div>\n                    )}\n                  </AnimatePresence>\n                </div>\n              ))}\n            </div>\n          )}\n        </AnimatePresence>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatSession;","import React, { useState } from 'react';\nimport { FiMoon, FiSun } from 'react-icons/fi';\n\n/**\n * ToolBar Component - 固定在侧边栏底部的工具栏\n * 目前仅包含暗黑模式切换功能，未来可扩展更多工具\n */\nconst ToolBar: React.FC = () => {\n  const [isDarkMode, setIsDarkMode] = useState(\n    document.documentElement.classList.contains('dark')\n  );\n\n  const toggleDarkMode = () => {\n    const newMode = !isDarkMode;\n    setIsDarkMode(newMode);\n    document.documentElement.classList.toggle('dark', newMode);\n    localStorage.setItem('agent-tars-theme', newMode ? 'dark' : 'light');\n  };\n\n  return (\n    <div className=\"p-2 border-t border-gray-100/40 dark:border-gray-700/20\">\n      <div className=\"flex justify-center\">\n        <button\n          onClick={toggleDarkMode}\n          className=\"p-2 text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-full transition-colors\"\n          title={isDarkMode ? \"切换到亮色模式\" : \"切换到暗色模式\"}\n        >\n          {isDarkMode ? <FiSun size={18} /> : <FiMoon size={18} />}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default ToolBar;\n","import React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { FiChevronRight } from 'react-icons/fi';\nimport classNames from 'classnames';\nimport ChatSession from './ChatSession';\nimport ToolBar from './ToolBar';\nimport { useReplayMode } from '../../context/ReplayModeContext';\n\ninterface SidebarProps {\n  isCollapsed: boolean;\n  onToggleCollapse: () => void;\n}\n\n/**\n * Sidebar Component - 应用侧边栏\n * 由两部分组成：ChatSession（可折叠）和 ToolBar（始终可见）\n * 在 Replay 模式下只显示 ToolBar\n */\nexport const Sidebar: React.FC<SidebarProps> = ({ isCollapsed, onToggleCollapse }) => {\n  const isReplayMode = useReplayMode();\n  const navigate = useNavigate();\n\n  return (\n    <div className=\"flex flex-col h-full bg-transparent border-r border-gray-100/40 dark:border-gray-700/20\">\n      {/* 应用标题/Logo */}\n      <div className=\"p-4 flex items-center\">\n        <div\n          className=\"text-lg font-bold text-gray-900 dark:text-gray-100 flex items-center cursor-pointer\"\n          onClick={() => navigate('/')}\n        >\n          <div className=\"w-8 h-8 rounded-2xl bg-gray-900 dark:bg-gray-100 flex items-center justify-center text-white dark:text-gray-900 font-bold mr-2 text-sm\">\n            A\n          </div>\n          <span>Agent TARS</span>\n        </div>\n      </div>\n\n      {/* 主体内容区 */}\n      <div className=\"flex-1 flex flex-col min-h-0\">\n        {/* 只在非 Replay 模式下显示 ChatSession */}\n        {!isReplayMode && (\n          <div className=\"flex-1 flex\">\n            {/* 完全折叠状态：显示展开按钮 */}\n            {isCollapsed && (\n              <div className=\"p-2\">\n                <button\n                  onClick={onToggleCollapse}\n                  className=\"p-2 text-gray-500 hover:text-gray-700 dark:hover:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800 rounded-full transition-colors\"\n                >\n                  <FiChevronRight size={16} />\n                </button>\n              </div>\n            )}\n            \n            {/* 展开状态：显示 ChatSession */}\n            {!isCollapsed && (\n              <div className=\"flex-1\">\n                <ChatSession \n                  isCollapsed={isCollapsed} \n                  onToggleCollapse={onToggleCollapse} \n                />\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n\n      {/* ToolBar 始终可见 */}\n      <ToolBar />\n    </div>\n  );\n};\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACvBA;AACA;AACA;AACA;AAQA;AACA;AACA;AAOA;;;AAGA;AACA;;AACA;AAYA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AAAA;;AACA;AACA;AAAA;;;;;AAIA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;AAIA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;;;;;;;;;;;;;;;;;AAKA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AAKA;;AAEA;AAAA;AAAA;;;;;;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;AAKA;AACA;AAAA;AAAA;;AAEA;AACA;;AACA;AAAA;AAAA;;;;;;AAGA;AAAA;;AAEA;AACA;AAOA;;;;;;AAQA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AAEA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;AAMA;AACA;AACA;AAAA;;AACA;AAAA;;AACA;AAAA;;;;;;AACA;AAAA;AAAA;;;;;;;;;;;;AAEA;AAAA;AAAA;;;;;;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;;AAEA;AACA;AACA;;;;;;AAEA;;;;;;;;;;;;;;;;;;AAMA;AAEA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AAEA;AAEA;AAGA;AAEA;AAMA;AAAA;AACA;AACA;AAAA;;;;;AAEA;AACA;AAGA;;;;;;;;;;;;;;;;AApCA;;;;;;;;;AA6CA;AAAA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AAAA;;AAEA;AAAA;;;;;;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;;;;;;;;;;;;;;;;;AAKA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;;;;;;;;;;;;;;;;;;;;;AA7BA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuDA;AAjYA;;AAWA;AAEA;;;AAbA;AAmYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3ZA;AACA;AAEA;;;AAGA;;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;;;;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;AAKA;AAzBA;AAAA;AA2BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClCA;AACA;AACA;AAEA;AACA;AACA;AAOA;;;;AAIA;AACA;;AACA;AACA;AAEA;AACA;;AAEA;AAAA;AACA;AACA;AACA;;AAEA;AAAA;AAAA;;;;;;AAGA;AAAA;;;;;;;;;;;;;;;;;AAKA;AAAA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;;;;;;;;;;;;;;;;AAMA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AASA;;;;;;;;;;;AAGA;AArDA;;AACA;AACA;;;AAFA"}