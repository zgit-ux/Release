{"version":3,"file":"index.b0d3f6ad00ddc9f7.hot-update.js","sources":["/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/ChatPanel.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/components/ReportFileEntry.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/MessageInput.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/ResearchReportEntry.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/navbar/Navbar.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/replay/ReplayControls.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/sidebar/ChatSession.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/workspace/WorkspacePanel.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/workspace/renderers/BrowserControlRenderer.tsx"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport { useSession } from '@/common/hooks/useSession';\nimport { MessageGroup } from './Message/components/MessageGroup';\nimport { MessageInput } from './MessageInput';\nimport { FiInfo, FiMessageSquare, FiRefreshCw, FiWifiOff, FiX } from 'react-icons/fi';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { useAtom, useAtomValue } from 'jotai';\nimport { groupedMessagesAtom, messagesAtom } from '@/common/state/atoms/message';\n\nimport { useReplay } from '@/common/hooks/useReplay';\nimport { replayStateAtom } from '@/common/state/atoms/replay';\nimport { useReplayMode } from '@/common/hooks/useReplayMode';\n\nimport './ChatPanel.css';\nimport { ResearchReportEntry } from './ResearchReportEntry';\n\n/**\n * ChatPanel Component - Main chat interface\n *\n * Design principles:\n * - Clean, distraction-free message display area with ample whitespace\n * - Elegant loading indicators and status messages with subtle animations\n * - Visually distinct message bubbles with refined spacing\n * - Clear visual hierarchy through typography and subtle borders\n */\nexport const ChatPanel: React.FC = () => {\n  const { activeSessionId, isProcessing, connectionStatus, checkServerStatus } = useSession();\n\n  const groupedMessages = useAtomValue(groupedMessagesAtom);\n  const allMessages = useAtomValue(messagesAtom);\n\n  const [replayState] = useAtom(replayStateAtom);\n  const isReplayMode = useReplayMode();\n  const { cancelAutoPlay } = useReplay();\n\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const messagesContainerRef = useRef<HTMLDivElement>(null);\n\n  // 使用当前会话的消息 - 这样与正常渲染保持一致\n  // 回放模式下会通过 processEvent 来更新这些消息\n  const activeMessages = activeSessionId ? groupedMessages[activeSessionId] || [] : [];\n\n  // Auto-scroll when new messages arrive\n  useEffect(() => {\n    if (messagesEndRef.current && messagesContainerRef.current) {\n      const container = messagesContainerRef.current;\n\n      // Check if user is already at bottom\n      const { scrollTop, scrollHeight, clientHeight } = container;\n      const isAtBottom = Math.abs(scrollHeight - scrollTop - clientHeight) < 30;\n\n      // Auto-scroll if at bottom or if new user message\n      if (\n        isAtBottom ||\n        (activeMessages.length > 0 &&\n          activeMessages[activeMessages.length - 1].messages[0]?.role === 'user')\n      ) {\n        setTimeout(() => {\n          container.scrollTo({\n            top: container.scrollHeight,\n            behavior: 'smooth',\n          });\n        }, 100);\n      }\n    }\n  }, [activeMessages]);\n\n  const scrollToBottom = () => {\n    if (messagesEndRef.current && messagesContainerRef.current) {\n      messagesContainerRef.current.scrollTo({\n        top: messagesContainerRef.current.scrollHeight,\n        behavior: 'smooth',\n      });\n    }\n  };\n\n  // Animation variants\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        duration: 0.4,\n        staggerChildren: 0.1,\n      },\n    },\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, y: 20 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: { duration: 0.4 },\n    },\n  };\n\n  const renderOfflineBanner = () => {\n    if (connectionStatus.connected || !activeSessionId || isReplayMode) return null;\n\n    return (\n      <motion.div\n        initial={{ opacity: 0, y: -10 }}\n        animate={{ opacity: 1, y: 0 }}\n        className=\"mb-4 px-4 py-3 bg-red-50/30 dark:bg-red-900/15 text-red-700 dark:text-red-300 text-sm rounded-xl\"\n      >\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <div className=\"font-medium flex items-center\">\n              <FiWifiOff className=\"mr-2 text-red-500 dark:text-red-400\" />\n              Viewing in offline mode\n            </div>\n            <div className=\"text-sm mt-1\">\n              You can view previous messages but cannot send new ones until reconnected.\n            </div>\n          </div>\n          <motion.button\n            whileHover={{ scale: 1.05 }}\n            whileTap={{ scale: 0.95 }}\n            onClick={() => checkServerStatus()}\n            className=\"ml-3 px-3 py-1.5 bg-red-100/70 dark:bg-red-800/30 hover:bg-red-200/70 dark:hover:bg-red-700/40 rounded-2xl text-sm font-medium transition-colors flex items-center border border-red-200/30 dark:border-red-700/30\"\n          >\n            <FiRefreshCw\n              className={`mr-1.5 ${connectionStatus.reconnecting ? 'animate-spin' : ''}`}\n              size={14}\n            />\n            {connectionStatus.reconnecting ? 'Reconnecting...' : 'Reconnect'}\n          </motion.button>\n        </div>\n      </motion.div>\n    );\n  };\n\n  // 新增：查找会话中的研究报告\n  const findResearchReport = () => {\n    if (!activeSessionId || !allMessages[activeSessionId]) return null;\n\n    const sessionMessages = allMessages[activeSessionId];\n    // 查找类型为 final_answer 且 isDeepResearch 为 true 的最后一条消息\n    const reportMessage = [...sessionMessages]\n      .reverse()\n      .find(\n        (msg) =>\n          (msg.role === 'final_answer' || msg.role === 'assistant') &&\n          msg.isDeepResearch === true &&\n          msg.title,\n      );\n\n    return reportMessage;\n  };\n\n  const researchReport = findResearchReport();\n\n  return (\n    <div className=\"flex flex-col h-full\">\n      {!activeSessionId ? (\n        <motion.div\n          initial=\"hidden\"\n          animate=\"visible\"\n          variants={containerVariants}\n          className=\"flex items-center justify-center flex-1\"\n        >\n          <div className=\"text-center p-6 max-w-md\">\n            <motion.div\n              variants={itemVariants}\n              className=\"w-16 h-16 bg-white dark:bg-gray-800 rounded-2xl flex items-center justify-center mx-auto mb-6 text-gray-500 dark:text-gray-400 border border-gray-100/50 dark:border-gray-700/20\"\n            >\n              <FiMessageSquare size={24} />\n            </motion.div>\n            <motion.h2\n              variants={itemVariants}\n              className=\"text-xl font-display font-bold mb-3 text-gray-800 dark:text-gray-200\"\n            >\n              Welcome to Agent TARS\n            </motion.h2>\n            <motion.p\n              variants={itemVariants}\n              className=\"text-gray-600 dark:text-gray-400 mb-5 text-sm leading-relaxed\"\n            >\n              Create a new chat session to get started with the AI assistant.\n            </motion.p>\n            <motion.div\n              variants={itemVariants}\n              whileHover={{ y: -2 }}\n              className=\"flex items-center p-4 bg-white dark:bg-gray-800 rounded-2xl mb-3 text-gray-600 dark:text-gray-400 text-sm border border-gray-100/40 dark:border-gray-700/20\"\n            >\n              <FiInfo className=\"mr-3 text-gray-400 flex-shrink-0\" />\n              <span>\n                TARS can help with tasks involving web search, browsing, and file operations.\n              </span>\n            </motion.div>\n          </div>\n        </motion.div>\n      ) : (\n        <>\n          <div\n            ref={messagesContainerRef}\n            className=\"flex-1 overflow-y-auto px-5 py-5 overflow-x-hidden min-h-0 chat-scrollbar relative\"\n          >\n            {renderOfflineBanner()}\n\n            <AnimatePresence>\n              {!connectionStatus.connected && !activeSessionId && (\n                <motion.div\n                  initial={{ opacity: 0, y: -10 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  exit={{ opacity: 0, y: -10 }}\n                  className=\"mb-4 px-4 py-3 bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 text-sm rounded-3xl border border-gray-100/40 dark:border-gray-700/20\"\n                >\n                  <div className=\"font-medium\">Server disconnected</div>\n                  <div className=\"text-sm mt-1\">\n                    {connectionStatus.reconnecting\n                      ? 'Attempting to reconnect...'\n                      : 'Please check your connection and try again.'}\n                  </div>\n                </motion.div>\n              )}\n            </AnimatePresence>\n\n            {/* 空状态 */}\n            {activeMessages.length === 0 ? (\n              <motion.div\n                initial={{ opacity: 0 }}\n                animate={{ opacity: 1 }}\n                transition={{ duration: 0.3 }}\n                className=\"flex items-center justify-center h-full\"\n              >\n                <div className=\"text-center p-6 max-w-md\">\n                  <h3 className=\"text-lg font-display font-medium mb-2\">\n                    {replayState.isActive ? 'Replay starting...' : 'Start a conversation'}\n                  </h3>\n                  {replayState.isActive && replayState.autoPlayCountdown !== null ? (\n                    <div className=\"mt-2\">\n                      <p className=\"text-gray-600 dark:text-gray-400 text-sm mb-2\">\n                        Auto-play in {replayState.autoPlayCountdown} seconds...\n                      </p>\n                      <motion.button\n                        whileHover={{ scale: 1.05 }}\n                        whileTap={{ scale: 0.95 }}\n                        onClick={cancelAutoPlay}\n                        className=\"px-3 py-1.5 text-xs bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-lg border border-gray-200/50 dark:border-gray-700/30 flex items-center mx-auto\"\n                      >\n                        <FiX size={12} className=\"mr-1.5\" />\n                        Cancel auto-play\n                      </motion.button>\n                    </div>\n                  ) : (\n                    <p className=\"text-gray-600 dark:text-gray-400 text-sm\">\n                      {replayState.isActive\n                        ? 'Please wait while the replay loads or press play to begin'\n                        : 'Ask Agent TARS a question or provide a command to begin.'}\n                    </p>\n                  )}\n                </div>\n              </motion.div>\n            ) : (\n              <div className=\"space-y-6 pb-2\">\n                {activeMessages.map((group, index) => (\n                  <MessageGroup\n                    key={`group-${index}-${group.messages[0].id}`}\n                    messages={group.messages}\n                    isThinking={\n                      isProcessing && !replayState.isActive && index === activeMessages.length - 1\n                    }\n                  />\n                ))}\n              </div>\n            )}\n\n            <div ref={messagesEndRef} />\n          </div>\n\n          {/* 消息输入区域 */}\n          {!isReplayMode && (\n            <div className=\"p-4\">\n              {/* 新增：研究报告入口 */}\n              {researchReport && !isProcessing && (\n                <div className=\"mb-4\">\n                  <ResearchReportEntry\n                    title={researchReport.title || 'Research Report'}\n                    timestamp={researchReport.timestamp}\n                    content={\n                      typeof researchReport.content === 'string' ? researchReport.content : ''\n                    }\n                  />\n                </div>\n              )}\n\n              {/* 按钮区域 - 移除分享按钮 */}\n              <div className=\"flex justify-center gap-3 mb-3\">{/* 分享按钮已移至Navbar */}</div>\n\n              <MessageInput\n                isDisabled={\n                  !activeSessionId || isProcessing || !connectionStatus.connected || isReplayMode\n                }\n                onReconnect={checkServerStatus}\n                connectionStatus={connectionStatus}\n              />\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport { motion } from 'framer-motion';\nimport { FiFileText, FiBookOpen, FiChevronRight } from 'react-icons/fi';\nimport { useSession } from '@/common/hooks/useSession';\n\ninterface ReportFileEntryProps {\n  title: string;\n  timestamp: number;\n  content: string;\n}\n\n/**\n * ReportFileEntry - Displays a file-like entry for research reports\n *\n * This component creates a clickable file entry that opens the associated\n * research report in the workspace panel when clicked.\n */\nexport const ReportFileEntry: React.FC<ReportFileEntryProps> = ({ title, timestamp, content }) => {\n  const { setActivePanelContent } = useSession();\n\n  const handleClick = () => {\n    setActivePanelContent({\n      type: 'research_report',\n      source: content,\n      title: title || 'Research Report',\n      timestamp,\n    });\n  };\n\n  return (\n    <motion.div\n      whileHover={{ y: -2, backgroundColor: 'rgba(0, 0, 0, 0.01)' }}\n      whileTap={{ scale: 0.98 }}\n      onClick={handleClick}\n      className=\"mt-3 p-3 bg-white dark:bg-gray-800 rounded-xl border border-gray-100/40 dark:border-gray-700/20 cursor-pointer flex items-center gap-3 group\"\n    >\n      <div className=\"w-10 h-10 flex-shrink-0 rounded-lg bg-accent-50 dark:bg-accent-900/20 flex items-center justify-center border border-accent-100/40 dark:border-accent-800/30\">\n        <FiBookOpen className=\"text-accent-600 dark:text-accent-400\" size={18} />\n      </div>\n\n      <div className=\"flex-1 min-w-0\">\n        <div className=\"font-medium text-gray-800 dark:text-gray-200 truncate\">\n          {title || 'Research Report'}\n        </div>\n        <div className=\"text-xs text-gray-500 dark:text-gray-400 flex items-center\">\n          Research report • Click to view\n        </div>\n      </div>\n\n      <FiChevronRight\n        className=\"text-gray-400 dark:text-gray-500 opacity-0 group-hover:opacity-100 transition-opacity\"\n        size={16}\n      />\n    </motion.div>\n  );\n};\n","import React, { useState, useRef, useEffect } from 'react';\nimport { useSession } from '@/common/hooks/useSession';\nimport { usePlan } from '@/common/hooks/usePlan';\nimport { FiSend, FiX, FiRefreshCw, FiPaperclip, FiImage, FiLoader, FiCpu } from 'react-icons/fi';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { ConnectionStatus } from '@/common/types';\nimport { useLocation } from 'react-router-dom';\nimport './MessageInput.css';\nimport { ChatCompletionContentPart } from '@multimodal/agent-interface';\nimport { ImagePreview } from './ImagePreview';\n\ninterface MessageInputProps {\n  isDisabled?: boolean;\n  onReconnect?: () => void;\n  connectionStatus?: ConnectionStatus;\n  initialQuery?: string;\n}\n\n/**\n * MessageInput Component - Input for sending messages\n */\nexport const MessageInput: React.FC<MessageInputProps> = ({\n  isDisabled = false,\n  onReconnect,\n  connectionStatus,\n}) => {\n  const [input, setInput] = useState('');\n  const [isAborting, setIsAborting] = useState(false);\n  const [isFocused, setIsFocused] = useState(false);\n  const [uploadedImages, setUploadedImages] = useState<ChatCompletionContentPart[]>([]);\n  const inputRef = useRef<HTMLTextAreaElement>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const location = useLocation();\n\n  const {\n    sendMessage,\n    isProcessing,\n    abortQuery,\n    activeSessionId,\n    checkSessionStatus,\n    setActivePanelContent,\n  } = useSession();\n\n  const { currentPlan } = usePlan(activeSessionId);\n\n  // Process query from URL parameters on component mount\n  useEffect(() => {\n    const searchParams = new URLSearchParams(location.search);\n    const query = searchParams.get('q');\n\n    if (query && !isProcessing && activeSessionId) {\n      setInput(query);\n\n      // Submit the query automatically\n      const submitQuery = async () => {\n        try {\n          await sendMessage(query);\n          // Clear input after sending\n          setInput('');\n        } catch (error) {\n          console.error('Failed to send message:', error);\n        }\n      };\n\n      submitQuery();\n    }\n  }, [location.search, activeSessionId, isProcessing, sendMessage]);\n\n  // Ensure processing state is handled correctly\n  useEffect(() => {\n    if (activeSessionId && connectionStatus?.connected) {\n      // Initial check of session status\n      checkSessionStatus(activeSessionId);\n\n      // If session status changes, increase polling\n      const intervalId = setInterval(() => {\n        checkSessionStatus(activeSessionId);\n      }, 2000); // Check status every 2 seconds\n\n      return () => clearInterval(intervalId);\n    }\n  }, [activeSessionId, connectionStatus?.connected, checkSessionStatus]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if ((!input.trim() && uploadedImages.length === 0) || isDisabled) return;\n\n    // Immediately clear input field, don't wait for message to be sent\n    const messageToSend = input.trim();\n    setInput('');\n\n    // Build multimodal content if there are images\n    const messageContent =\n      uploadedImages.length > 0\n        ? [\n            ...uploadedImages,\n            ...(messageToSend\n              ? [{ type: 'text', text: messageToSend } as ChatCompletionContentPart]\n              : []),\n          ]\n        : messageToSend;\n\n    // Clear uploaded images\n    setUploadedImages([]);\n\n    // Reset textarea height immediately\n    if (inputRef.current) {\n      inputRef.current.style.height = 'auto';\n    }\n\n    try {\n      // Use previously saved message content to send\n      await sendMessage(messageContent);\n    } catch (error) {\n      console.error('Failed to send message:', error);\n    }\n  };\n\n  // Modified to not trigger send on Enter\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n    // Ctrl+Enter as optional shortcut to send\n    if (e.key === 'Enter' && e.ctrlKey) {\n      e.preventDefault();\n      handleSubmit(e);\n    }\n  };\n\n  const handleAbort = async () => {\n    if (!isProcessing) return;\n\n    setIsAborting(true);\n    try {\n      await abortQuery();\n    } catch (error) {\n      console.error('Failed to abort:', error);\n    } finally {\n      setIsAborting(false);\n    }\n  };\n\n  // Adjust textarea height based on content\n  const handleInput = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const target = e.target;\n    setInput(target.value);\n\n    // Reset height to recalculate proper scrollHeight\n    target.style.height = 'auto';\n    // Set to scrollHeight but max 200px\n    target.style.height = `${Math.min(target.scrollHeight, 200)}px`;\n  };\n\n  // Auto-focus input when available\n  useEffect(() => {\n    if (!isDisabled && inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [isDisabled]);\n\n  // Dummy handler for file upload button\n  const handleFileUpload = () => {\n    if (fileInputRef.current) {\n      fileInputRef.current.click();\n    }\n  };\n\n  // Handle file selection\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = e.target.files;\n    if (!files || files.length === 0) return;\n\n    Array.from(files).forEach((file) => {\n      if (!file.type.startsWith('image/')) return;\n\n      const reader = new FileReader();\n      reader.onload = (event) => {\n        if (event.target?.result) {\n          const newImage: ChatCompletionContentPart = {\n            type: 'image_url',\n            image_url: {\n              url: event.target.result as string,\n              detail: 'auto',\n            },\n          };\n          setUploadedImages((prev) => [...prev, newImage]);\n        }\n      };\n      reader.readAsDataURL(file);\n    });\n\n    // Reset the input so the same file can be selected again\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n\n  // Handle paste event to support pasting images directly\n  const handlePaste = (e: React.ClipboardEvent) => {\n    // Skip if disabled or processing\n    if (isDisabled || isProcessing) return;\n\n    const items = e.clipboardData?.items;\n    if (!items) return;\n\n    let hasProcessedImage = false;\n\n    // Process each item in the clipboard\n    for (let i = 0; i < items.length; i++) {\n      const item = items[i];\n\n      // Check if item is an image\n      if (item.type.indexOf('image') !== -1) {\n        hasProcessedImage = true;\n\n        // Get image as blob\n        const blob = item.getAsFile();\n        if (!blob) continue;\n\n        // Read the image file\n        const reader = new FileReader();\n        reader.onload = (event) => {\n          if (event.target?.result) {\n            const newImage: ChatCompletionContentPart = {\n              type: 'image_url',\n              image_url: {\n                url: event.target.result as string,\n                detail: 'auto',\n              },\n            };\n            setUploadedImages((prev) => [...prev, newImage]);\n          }\n        };\n        reader.readAsDataURL(blob);\n      }\n    }\n\n    // If we processed at least one image, prevent the default paste behavior\n    if (hasProcessedImage) {\n      // We don't prevent default completely so text can still be pasted\n      // But we still log for debugging purposes\n      console.log('Processed pasted image(s)');\n    }\n  };\n\n  // Remove an image from the uploaded images list\n  const handleRemoveImage = (index: number) => {\n    setUploadedImages((prev) => prev.filter((_, i) => i !== index));\n  };\n\n  // 添加一个查看计划按钮\n  const renderPlanButton = () => {\n    // 只在实际有计划且计划已经生成时显示按钮\n    if (!currentPlan || !currentPlan.hasGeneratedPlan || currentPlan.steps.length === 0)\n      return null;\n\n    const completedSteps = currentPlan.steps.filter((step) => step.done).length;\n    const totalSteps = currentPlan.steps.length;\n    const isComplete = currentPlan.isComplete;\n\n    return (\n      <motion.button\n        initial={{ opacity: 0, scale: 0.8 }}\n        animate={{ opacity: 1, scale: 1 }}\n        exit={{ opacity: 0, scale: 0.8 }}\n        whileTap={{ scale: 0.9 }}\n        whileHover={{ scale: 1.05, y: -2 }}\n        onClick={() =>\n          setActivePanelContent({\n            type: 'plan',\n            source: null,\n            title: 'Task Plan',\n            timestamp: Date.now(),\n          })\n        }\n        className=\"flex items-center gap-1 px-3 py-1 text-xs font-medium rounded-full bg-white/80 dark:bg-gray-800 text-gray-600 dark:text-gray-300 border border-gray-200/50 dark:border-gray-700/30 hover:bg-white hover:border-gray-300/50 dark:hover:bg-gray-700/50 dark:hover:border-gray-600/50 transition-all duration-200 shadow-sm\"\n      >\n        {isComplete ? (\n          <FiCpu size={12} className=\"mr-0.5 text-green-500 dark:text-green-400\" />\n        ) : (\n          <FiCpu size={12} className=\"mr-0.5 text-accent-500 dark:text-accent-400 animate-pulse\" />\n        )}\n        View Plan\n        <span\n          className={`ml-1 px-1.5 py-0.5 rounded-full ${\n            isComplete\n              ? 'bg-green-50 dark:bg-green-900/20 text-green-600 dark:text-green-400'\n              : 'bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300'\n          } text-[10px]`}\n        >\n          {completedSteps}/{totalSteps}\n        </span>\n      </motion.button>\n    );\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"relative\">\n      {/* Plan button - 仅在计划实际存在且已生成时显示 */}\n      {currentPlan && currentPlan.hasGeneratedPlan && currentPlan.steps.length > 0 && (\n        <div className=\"flex justify-center mb-3\">{renderPlanButton()}</div>\n      )}\n\n      {/* Image preview area */}\n      {uploadedImages.length > 0 && (\n        <div className=\"mb-3 flex flex-wrap gap-2\">\n          {uploadedImages.map((image, index) => (\n            <ImagePreview key={index} image={image} onRemove={() => handleRemoveImage(index)} />\n          ))}\n        </div>\n      )}\n\n      {/* 修复的圆角容器结构 */}\n      <div\n        className={`relative overflow-hidden rounded-3xl transition-all duration-300 ${\n          isFocused ? 'shadow-md' : ''\n        }`}\n      >\n        {/* 渐变边框背景 - 现在填充整个容器而不是使用padding */}\n        <div\n          className={`absolute inset-0 bg-gradient-to-r ${\n            isFocused || input.trim() || uploadedImages.length > 0\n              ? 'from-indigo-500 via-purple-500 to-pink-500 dark:from-indigo-400 dark:via-purple-400 dark:to-pink-400 animate-border-flow'\n              : 'from-gray-200 via-gray-300 to-gray-200 dark:from-gray-700 dark:via-gray-600 dark:to-gray-700'\n          } bg-[length:200%_200%] ${isFocused ? 'opacity-100' : 'opacity-70'}`}\n        ></div>\n\n        {/* 内容容器 - 稍微缩小以显示边框 */}\n        <div\n          className={`relative m-[2px] rounded-[1.4rem] bg-white dark:bg-gray-800 backdrop-blur-sm ${\n            isDisabled ? 'opacity-90' : ''\n          }`}\n        >\n          <textarea\n            ref={inputRef}\n            value={input}\n            onChange={handleInput}\n            onKeyDown={handleKeyDown}\n            onFocus={() => setIsFocused(true)}\n            onBlur={() => setIsFocused(false)}\n            onPaste={handlePaste}\n            placeholder={\n              connectionStatus && !connectionStatus.connected\n                ? 'Server disconnected...'\n                : isProcessing\n                  ? 'Agent TARS is thinking...'\n                  : 'Ask Agent TARS something... (Ctrl+Enter to send)'\n            }\n            disabled={isDisabled}\n            className=\"w-full px-5 pt-4 pb-10 focus:outline-none resize-none min-h-[90px] max-h-[200px] bg-transparent text-sm leading-relaxed rounded-[1.4rem]\"\n            rows={2}\n          />\n\n          {/* File upload buttons */}\n          <div className=\"absolute left-3 bottom-2 flex items-center gap-2\">\n            <motion.button\n              whileHover={{ scale: 1.05 }}\n              whileTap={{ scale: 0.95 }}\n              type=\"button\"\n              onClick={handleFileUpload}\n              disabled={isDisabled || isProcessing}\n              className={`p-2 rounded-full transition-colors ${\n                isDisabled || isProcessing\n                  ? 'text-gray-300 dark:text-gray-600 cursor-not-allowed'\n                  : 'text-gray-400 hover:text-accent-500 hover:bg-gray-50 dark:hover:bg-gray-700/30 dark:text-gray-400'\n              }`}\n              title=\"Attach image (or paste directly)\"\n            >\n              <FiImage size={18} />\n            </motion.button>\n            <input\n              type=\"file\"\n              ref={fileInputRef}\n              onChange={handleFileChange}\n              accept=\"image/*\"\n              multiple\n              className=\"hidden\"\n              disabled={isDisabled || isProcessing}\n            />\n          </div>\n\n          <AnimatePresence mode=\"wait\">\n            {connectionStatus && !connectionStatus.connected ? (\n              <motion.button\n                key=\"reconnect\"\n                initial={{ opacity: 0, scale: 0.8 }}\n                animate={{ opacity: 1, scale: 1 }}\n                exit={{ opacity: 0, scale: 0.8 }}\n                whileTap={{ scale: 0.9 }}\n                whileHover={{ scale: 1.05 }}\n                type=\"button\"\n                onClick={onReconnect}\n                className=\"absolute right-3 bottom-2 p-2 rounded-full text-gray-500 hover:bg-gray-50 dark:hover:bg-gray-700/30 dark:text-gray-400 transition-all duration-200\"\n                title=\"Try to reconnect\"\n              >\n                <FiRefreshCw\n                  size={20}\n                  className={connectionStatus.reconnecting ? 'animate-spin' : ''}\n                />\n              </motion.button>\n            ) : isProcessing ? (\n              <motion.button\n                key=\"abort\"\n                initial={{ opacity: 0, scale: 0.8 }}\n                animate={{ opacity: 1, scale: 1 }}\n                exit={{ opacity: 0, scale: 0.8 }}\n                whileTap={{ scale: 0.9 }}\n                whileHover={{ scale: 1.05 }}\n                type=\"button\"\n                onClick={handleAbort}\n                disabled={isAborting}\n                className={`absolute right-3 bottom-2 p-2 rounded-full ${\n                  isAborting\n                    ? 'text-gray-300 dark:text-gray-600 cursor-not-allowed'\n                    : 'text-gray-500 hover:bg-gray-50 dark:hover:bg-gray-700/30 dark:text-gray-400'\n                } transition-all duration-200`}\n                title=\"Abort current operation\"\n              >\n                {isAborting ? <FiLoader className=\"animate-spin\" size={20} /> : <FiX size={20} />}\n              </motion.button>\n            ) : (\n              <motion.button\n                key=\"send\"\n                initial={{ opacity: 0, scale: 0.8 }}\n                animate={{ opacity: 1, scale: 1 }}\n                exit={{ opacity: 0, scale: 0.8 }}\n                whileTap={{ scale: 0.9 }}\n                whileHover={{ scale: 1.05 }}\n                type=\"submit\"\n                disabled={(!input.trim() && uploadedImages.length === 0) || isDisabled}\n                className={`absolute right-3 bottom-2 p-3 rounded-full ${\n                  (!input.trim() && uploadedImages.length === 0) || isDisabled\n                    ? 'bg-gray-100 dark:bg-gray-700 text-gray-400 cursor-not-allowed'\n                    : 'bg-gradient-to-r from-indigo-500 to-purple-500 dark:from-indigo-400 dark:via-purple-400 dark:to-pink-400 text-white shadow-sm'\n                } transition-all duration-200`}\n              >\n                <FiSend size={18} />\n              </motion.button>\n            )}\n          </AnimatePresence>\n        </div>\n      </div>\n\n      <div className=\"flex justify-center mt-2 text-xs\">\n        {connectionStatus && !connectionStatus.connected ? (\n          <motion.span\n            initial={{ opacity: 0.7 }}\n            animate={{ opacity: 1 }}\n            className=\"text-red-500 dark:text-red-400 flex items-center font-medium\"\n          >\n            {connectionStatus.reconnecting\n              ? 'Attempting to reconnect...'\n              : 'Server disconnected. Click the button to reconnect.'}\n          </motion.span>\n        ) : isProcessing ? (\n          <motion.span\n            initial={{ opacity: 0.7 }}\n            whileHover={{ opacity: 1 }}\n            className=\"text-accent-500 dark:text-accent-400 flex items-center\"\n          >\n            <span className=\"typing-indicator mr-2\">\n              <span></span>\n              <span></span>\n              <span></span>\n            </span>\n            Agent is processing your request...\n          </motion.span>\n        ) : (\n          <motion.span\n            initial={{ opacity: 0.7 }}\n            whileHover={{ opacity: 1 }}\n            className=\"text-gray-500 dark:text-gray-400 transition-opacity\"\n          >\n            Use Ctrl+Enter to quickly send • You can also paste images directly\n          </motion.span>\n        )}\n      </div>\n    </form>\n  );\n};\n","import React from 'react';\nimport { motion } from 'framer-motion';\nimport { FiFileText, FiBookOpen, FiClock } from 'react-icons/fi';\nimport { useSession } from '@/common/hooks/useSession';\nimport { formatTimestamp } from '@/common/utils/formatters';\n\ninterface ResearchReportEntryProps {\n  title: string;\n  timestamp: number;\n  content: string;\n}\n\n/**\n * ResearchReportEntry - Displays a prominent entry point for accessing research reports\n *\n * Design principles:\n * - Visually distinct from regular messages\n * - Clear visual hierarchy with document icon\n * - Animated feedback for interaction\n * - Consistent styling with overall UI\n */\nexport const ResearchReportEntry: React.FC<ResearchReportEntryProps> = ({\n  title,\n  timestamp,\n  content,\n}) => {\n  const { setActivePanelContent } = useSession();\n\n  const handleOpenReport = () => {\n    setActivePanelContent({\n      type: 'research_report',\n      source: content,\n      title: title || 'Research Report',\n      timestamp,\n    });\n  };\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 10 }}\n      animate={{ opacity: 1, y: 0 }}\n      whileHover={{ y: -2, boxShadow: '0 4px 12px rgba(0,0,0,0.05)' }}\n      whileTap={{ scale: 0.98 }}\n      onClick={handleOpenReport}\n      className=\"p-4 bg-white dark:bg-gray-800 rounded-xl border border-accent-100/40 dark:border-accent-700/20 cursor-pointer group\"\n    >\n      <div className=\"flex items-center\">\n        <div className=\"w-10 h-10 rounded-xl bg-accent-50 dark:bg-accent-900/20 flex items-center justify-center mr-3 border border-accent-100/40 dark:border-accent-800/30 text-accent-500 dark:text-accent-400\">\n          <FiBookOpen size={20} />\n        </div>\n\n        <div className=\"flex-1 min-w-0\">\n          <div className=\"font-medium text-gray-800 dark:text-gray-200 mb-1 flex items-center\">\n            <span className=\"truncate\">{title}</span>\n          </div>\n\n          <div className=\"flex items-center text-xs text-gray-500 dark:text-gray-400\">\n            <FiClock className=\"mr-1.5\" size={12} />\n            <span className=\"mr-2\">{formatTimestamp(timestamp)}</span>\n            <span className=\"px-1.5 py-0.5 bg-accent-50/70 dark:bg-accent-900/20 text-accent-600 dark:text-accent-400 rounded-full border border-accent-100/30 dark:border-accent-800/20\">\n              Research Report\n            </span>\n          </div>\n        </div>\n\n        <motion.div\n          className=\"ml-2 w-8 h-8 rounded-full flex items-center justify-center bg-gray-50 dark:bg-gray-700 text-gray-400 dark:text-gray-500 group-hover:bg-accent-50 dark:group-hover:bg-accent-900/20 group-hover:text-accent-500 dark:group-hover:text-accent-400 transition-all duration-200 border border-gray-100/40 dark:border-gray-700/30\"\n          animate={{ x: [0, 3, 0] }}\n          transition={{\n            duration: 1.5,\n            repeat: Infinity,\n            repeatType: 'loop',\n            ease: 'easeInOut',\n            repeatDelay: 2,\n          }}\n        >\n          <FiFileText size={16} />\n        </motion.div>\n      </div>\n    </motion.div>\n  );\n};\n","import React, { useCallback } from 'react';\nimport { ShareButton } from '@/standalone/share';\nimport { motion } from 'framer-motion';\nimport { FiMoon, FiSun } from 'react-icons/fi';\nimport { GoSidebarCollapse, GoSidebarExpand } from 'react-icons/go';\nimport { useLayout } from '@/common/hooks/useLayout';\nimport { useSession } from '@/common/hooks/useSession';\nimport { useReplayMode } from '@/common/hooks/useReplayMode';\n\nimport './Navbar.css';\n\nexport const Navbar: React.FC = () => {\n  const { isSidebarCollapsed, toggleSidebar } = useLayout();\n  const { activeSessionId, isProcessing, modelInfo } = useSession();\n  const isReplayMode = useReplayMode();\n  const [isDarkMode, setIsDarkMode] = React.useState(\n    document.documentElement.classList.contains('dark'),\n  );\n\n  // Toggle dark mode\n  const toggleDarkMode = useCallback(() => {\n    const newMode = !isDarkMode;\n    setIsDarkMode(newMode);\n    document.documentElement.classList.toggle('dark', newMode);\n\n    // Save preference to localStorage\n    localStorage.setItem('agent-tars-theme', newMode ? 'dark' : 'light');\n  }, [isDarkMode]);\n\n  return (\n    <div className=\"h-12 border-b border-gray-300/40 dark:border-gray-600/20 backdrop-blur-sm flex items-center px-3\">\n      {/* Left section with macOS-style traffic lights */}\n      <div className=\"flex items-center\">\n        {/* macOS-style traffic lights */}\n        <div className=\"flex space-x-1.5 mr-3\">\n          <div className=\"traffic-light traffic-light-red\" />\n          <div className=\"traffic-light traffic-light-yellow\" />\n          <div className=\"traffic-light traffic-light-green\" />\n        </div>\n      </div>\n\n      {/* Sidebar toggle button - positioned at the right edge aligned with Chat area */}\n      {!isReplayMode && (\n        <div className={`${isSidebarCollapsed ? 'ml-0' : 'ml-[245px]'}`}>\n          <motion.button\n            whileHover={{ scale: 1.1 }}\n            whileTap={{ scale: 0.95 }}\n            onClick={toggleSidebar}\n            className=\"text-gray-500 hover:text-gray-700 dark:hover:text-gray-300 p-1.5 hover:bg-gray-100/40 dark:hover:bg-gray-800/40 rounded-full transition-colors\"\n            title={isSidebarCollapsed ? 'Expand sidebar' : 'Collapse sidebar'}\n          >\n            {isSidebarCollapsed ? <GoSidebarCollapse size={20} /> : <GoSidebarExpand size={20} />}\n          </motion.button>\n        </div>\n      )}\n\n      {/* Center section - Model info */}\n      <div className=\"flex-1 flex items-center justify-center\">\n        {modelInfo.model && (\n          <div className=\"px-3 py-1 rounded-full bg-gray-100/80 dark:bg-gray-700/80 text-xs text-gray-700 dark:text-gray-300 border border-gray-200/40 dark:border-gray-700/30 flex items-center\">\n            <div className=\"w-4 h-4 rounded-full bg-purple-400 dark:bg-purple-500 mr-2 flex-shrink-0\"></div>\n            <span className=\"font-mono\">{modelInfo.model}</span>\n            {modelInfo.provider && (\n              <span className=\"ml-2 px-1.5 py-0.5 rounded-md bg-gray-200/80 dark:bg-gray-600/80 text-gray-600 dark:text-gray-400 text-[10px]\">\n                {modelInfo.provider}\n              </span>\n            )}\n          </div>\n        )}\n      </div>\n\n      {/* Right section - with share button and dark mode toggle */}\n      <div className=\"flex items-center space-x-2\">\n        {activeSessionId && !isProcessing && !isReplayMode && <ShareButton variant=\"navbar\" />}\n\n        {/* Dark mode toggle */}\n        <motion.button\n          whileHover={{ scale: 1.1 }}\n          whileTap={{ scale: 0.95 }}\n          onClick={toggleDarkMode}\n          className=\"w-8 h-8 rounded-full flex items-center justify-center text-gray-500 hover:text-gray-700 dark:hover:text-gray-300 hover:bg-gray-100/40 dark:hover:bg-gray-800/40 transition-colors\"\n          title={isDarkMode ? 'Light Mode' : 'Dark Mode'}\n        >\n          {isDarkMode ? <FiSun size={16} /> : <FiMoon size={16} />}\n        </motion.button>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { motion } from 'framer-motion';\nimport { FiPlay, FiPause, FiSkipForward, FiX, FiClock, FiRefreshCw } from 'react-icons/fi';\nimport { useReplay } from '@/common/hooks/useReplay';\n\n/**\n * ReplayControls - Provides playback controls for the replay functionality\n *\n * Design principles:\n * - Monochromatic black/gray design that matches the UI\n * - Minimalist controls with subtle hover states\n * - No box shadows or excessive decorations\n */\nexport const ReplayControls: React.FC = () => {\n  const {\n    replayState,\n    startReplay,\n    pauseReplay,\n    jumpToResult,\n    exitReplay,\n    setPlaybackSpeed,\n    cancelAutoPlay,\n    resetReplay,\n  } = useReplay();\n\n  const { isPaused, playbackSpeed, autoPlayCountdown, currentEventIndex, events } = replayState;\n\n  // 确定按钮状态 - 添加倒计时判断\n  const isCountingDown = autoPlayCountdown !== null;\n  const showPlayButton = isPaused || isCountingDown;\n\n  // 检查回放是否已完成（当前事件索引已到达最后）\n  const isReplayCompleted =\n    events.length > 0 && currentEventIndex === events.length - 1 && isPaused;\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 10 }}\n      animate={{ opacity: 1, y: 0 }}\n      exit={{ opacity: 0, y: 10 }}\n      transition={{ duration: 0.3 }}\n      className=\"flex items-center justify-between gap-2 px-4 py-3 rounded-xl bg-gray-100 dark:bg-gray-800 border border-gray-200/50 dark:border-gray-700/30\"\n    >\n      {/* Exit button - moved to left side */}\n      <motion.button\n        whileHover={{ scale: 1.05 }}\n        whileTap={{ scale: 0.95 }}\n        onClick={exitReplay}\n        className=\"p-1.5 rounded-full text-gray-500 dark:text-gray-400 hover:bg-gray-200/70 dark:hover:bg-gray-700/50 transition-colors\"\n        title=\"Exit replay\"\n      >\n        <FiX size={16} />\n      </motion.button>\n\n      {/* Center playback controls */}\n      <div className=\"flex items-center gap-3\">\n        {/* Play/Pause button - now larger and more prominent */}\n        {isReplayCompleted ? (\n          <motion.button\n            whileHover={{ scale: 1.05 }}\n            whileTap={{ scale: 0.95 }}\n            onClick={() => resetReplay()}\n            className=\"w-10 h-10 flex items-center justify-center rounded-full bg-gray-800 dark:bg-gray-200 text-white dark:text-gray-800\"\n            title=\"Replay from beginning\"\n          >\n            <FiRefreshCw size={18} />\n          </motion.button>\n        ) : (\n          <motion.button\n            whileHover={{ scale: 1.05 }}\n            whileTap={{ scale: 0.95 }}\n            onClick={() => {\n              if (isCountingDown) {\n                // 如果在倒计时，取消倒计时并开始播放\n                cancelAutoPlay();\n                startReplay();\n              } else if (isPaused) {\n                startReplay();\n              } else {\n                pauseReplay();\n              }\n            }}\n            className=\"w-10 h-10 flex items-center justify-center rounded-full bg-gray-800 dark:bg-gray-200 text-white dark:text-gray-800\"\n          >\n            {showPlayButton ? <FiPlay size={18} /> : <FiPause size={18} />}\n          </motion.button>\n        )}\n\n        {/* Skip to end button */}\n        <motion.button\n          whileHover={{ scale: 1.05 }}\n          whileTap={{ scale: 0.95 }}\n          onClick={() => {\n            // 如果在倒计时，先取消倒计时\n            if (isCountingDown) {\n              cancelAutoPlay();\n            }\n            jumpToResult();\n          }}\n          className=\"flex items-center justify-center w-8 h-8 rounded-full bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600\"\n          title=\"Skip to end\"\n        >\n          <FiSkipForward size={16} />\n        </motion.button>\n      </div>\n\n      {/* Playback speed controls */}\n      <div className=\"flex items-center gap-1\">\n        <span className=\"text-xs text-gray-500 dark:text-gray-400 mr-1\">\n          <FiClock size={12} className=\"inline mr-1\" />\n          Speed\n        </span>\n        {[1, 2, 3].map((speed) => (\n          <motion.button\n            key={speed}\n            whileHover={{ scale: 1.05 }}\n            whileTap={{ scale: 0.95 }}\n            onClick={() => setPlaybackSpeed(speed)}\n            className={`w-6 h-6 flex items-center justify-center rounded-full text-xs font-medium ${\n              playbackSpeed === speed\n                ? 'bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-200 border border-gray-300/50 dark:border-gray-600/30'\n                : 'text-gray-500 dark:text-gray-400 hover:bg-gray-200/70 dark:hover:bg-gray-700/50'\n            }`}\n          >\n            {speed}x\n          </motion.button>\n        ))}\n      </div>\n    </motion.div>\n  );\n};\n","import React, { useState, useMemo, useCallback } from 'react';\nimport { useSession } from '@/common/hooks/useSession';\nimport { useNavigate } from 'react-router-dom';\nimport { FiRefreshCw, FiWifiOff, FiChevronUp } from 'react-icons/fi';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport SessionItem from './SessionItem';\nimport { ConfirmDialog } from '@/sdk/dialog';\n\ninterface ChatSessionProps {\n  isCollapsed: boolean;\n}\n\n/**\n * ChatSession Component - Collapsible sidebar for session management\n *\n * Design principles:\n * - Clean, consistent visual hierarchy\n * - Collapsible interface to maximize workspace\n * - Time-based grouping for easy navigation\n * - Offline mode support with clear visual feedback\n */\nexport const ChatSession: React.FC<ChatSessionProps> = ({ isCollapsed }) => {\n  const {\n    sessions,\n    activeSessionId,\n    setActiveSession,\n    updateSessionMetadata,\n    deleteSession,\n    loadSessions,\n    connectionStatus,\n    checkServerStatus,\n  } = useSession();\n\n  const navigate = useNavigate();\n\n  const [editingSessionId, setEditingSessionId] = useState<string | null>(null);\n  const [editedName, setEditedName] = useState('');\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [loadingSessionId, setLoadingSessionId] = useState<string | null>(null);\n  const [collapsedSections, setCollapsedSections] = useState<Record<string, boolean>>({});\n  const [deleteConfirmOpen, setDeleteConfirmOpen] = useState(false);\n  const [sessionToDelete, setSessionToDelete] = useState<string | null>(null);\n\n  // Toggle section collapse state\n  const toggleSectionCollapse = useCallback((sectionKey: string) => {\n    setCollapsedSections((prev) => ({\n      ...prev,\n      [sectionKey]: !prev[sectionKey],\n    }));\n  }, []);\n\n  // Group sessions by time period\n  const groupedSessions = useMemo(() => {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n\n    const yesterday = new Date(today);\n    yesterday.setDate(yesterday.getDate() - 1);\n\n    const lastWeek = new Date(today);\n    lastWeek.setDate(lastWeek.getDate() - 7);\n\n    // Initialize groups\n    const groups: Array<{ label: string; sessions: Array<any>; key: string }> = [\n      { label: 'Today', sessions: [], key: 'today' },\n      { label: 'Yesterday', sessions: [], key: 'yesterday' },\n      { label: 'This Week', sessions: [], key: 'thisWeek' },\n      { label: 'Earlier', sessions: [], key: 'earlier' },\n    ];\n\n    // Categorize sessions\n    sessions.forEach((session) => {\n      const sessionDate = new Date(session.updatedAt || session.createdAt);\n\n      if (sessionDate >= today) {\n        groups[0].sessions.push(session);\n      } else if (sessionDate >= yesterday) {\n        groups[1].sessions.push(session);\n      } else if (sessionDate >= lastWeek) {\n        groups[2].sessions.push(session);\n      } else {\n        groups[3].sessions.push(session);\n      }\n    });\n\n    // Only return non-empty groups\n    return groups.filter((group) => group.sessions.length > 0);\n  }, [sessions]);\n\n  // Event handlers\n  const handleEditSession = useCallback((sessionId: string, currentName?: string) => {\n    setEditingSessionId(sessionId);\n    setEditedName(currentName || '');\n  }, []);\n\n  const handleSaveEdit = useCallback(\n    async (sessionId: string) => {\n      try {\n        await updateSessionMetadata({ sessionId, updates: { name: editedName } });\n        setEditingSessionId(null);\n      } catch (error) {\n        console.error('Failed to update session name:', error);\n      }\n    },\n    [updateSessionMetadata, editedName],\n  );\n\n  const handleDeleteSession = useCallback(async (sessionId: string, e: React.MouseEvent) => {\n    e.stopPropagation();\n    setSessionToDelete(sessionId);\n    setDeleteConfirmOpen(true);\n  }, []);\n\n  const confirmDeleteSession = useCallback(async () => {\n    if (!sessionToDelete) return;\n\n    try {\n      // 在删除之前找到下一个可用的会话\n      if (sessionToDelete === activeSessionId && sessions.length > 1) {\n        // 找到不是要删除的会话的最近会话\n        const nextSession = sessions.find((s) => s.id !== sessionToDelete);\n        if (nextSession) {\n          // 先导航到新会话\n          navigate(`/${nextSession.id}`);\n\n          // 给导航一点时间完成\n          await new Promise((resolve) => setTimeout(resolve, 50));\n        }\n      }\n\n      // 然后删除会话\n      await deleteSession(sessionToDelete);\n    } catch (error) {\n      console.error('Failed to delete session:', error);\n    } finally {\n      setDeleteConfirmOpen(false);\n      setSessionToDelete(null);\n    }\n  }, [deleteSession, sessionToDelete, sessions, activeSessionId, navigate]);\n\n  const refreshSessions = useCallback(async () => {\n    setIsRefreshing(true);\n    try {\n      const isConnected = await checkServerStatus();\n      if (isConnected) {\n        await loadSessions();\n      }\n    } catch (error) {\n      console.error('Failed to refresh sessions:', error);\n    } finally {\n      setIsRefreshing(false);\n    }\n  }, [checkServerStatus, loadSessions]);\n\n  const handleSessionClick = useCallback(\n    async (sessionId: string) => {\n      if (loadingSessionId || !connectionStatus.connected) return;\n\n      try {\n        setLoadingSessionId(sessionId);\n        navigate(`/${sessionId}`);\n      } catch (error) {\n        console.error('Failed to switch session:', error);\n        checkServerStatus();\n      } finally {\n        setLoadingSessionId(null);\n      }\n    },\n    [loadingSessionId, connectionStatus.connected, navigate, checkServerStatus],\n  );\n\n  // If collapsed, render minimal sidebar\n  if (isCollapsed) {\n    return (\n      <div className=\"flex flex-col h-full bg-transparent w-0 border-r border-gray-100/40 dark:border-gray-700/20\">\n        {/* No collapse button here anymore - moved to Navbar */}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"w-64 flex flex-col h-full duration-200 backdrop-blur-sm border-r border-gray-100/40 dark:border-gray-700/20\">\n      {/* Header with title - no collapse button anymore */}\n      <div className=\"p-4 flex items-center justify-between border-b border-gray-100/40 dark:border-gray-700/20\">\n        <div className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Recent Tasks</div>\n        <div className=\"flex items-center gap-2\">\n          {/* Connection status indicator */}\n          <div\n            className={`h-2 w-2 rounded-full ${\n              connectionStatus.connected\n                ? 'bg-green-500 animate-pulse'\n                : connectionStatus.reconnecting\n                  ? 'bg-yellow-500 animate-ping'\n                  : 'bg-gray-400'\n            }`}\n            title={\n              connectionStatus.connected\n                ? 'Connected to server'\n                : connectionStatus.reconnecting\n                  ? 'Reconnecting...'\n                  : 'Disconnected from server'\n            }\n          />\n\n          <motion.button\n            whileHover={{ rotate: 180 }}\n            transition={{ duration: 0.3 }}\n            onClick={refreshSessions}\n            disabled={isRefreshing || !connectionStatus.connected}\n            className={`text-gray-500 hover:text-gray-700 dark:hover:text-gray-300 p-1 rounded-full hover:bg-gray-100/40 dark:hover:bg-gray-800/40 text-xs transition-all ${\n              !connectionStatus.connected && 'opacity-50 cursor-not-allowed'\n            }`}\n            title={connectionStatus.connected ? 'Refresh tasks' : 'Server disconnected'}\n          >\n            <FiRefreshCw className={isRefreshing ? 'animate-spin' : ''} size={12} />\n          </motion.button>\n        </div>\n      </div>\n\n      {/* Offline mode banner */}\n      {!connectionStatus.connected && sessions.length > 0 && (\n        <div className=\"px-3 py-2\">\n          <div className=\"p-3 rounded-xl bg-red-50/30 dark:bg-red-900/15 text-gray-700 dark:text-gray-300 text-sm border border-red-200/50 dark:border-red-800/30 shadow-sm\">\n            <div className=\"flex items-center\">\n              <FiWifiOff className=\"mr-2 flex-shrink-0 text-red-500 dark:text-red-400\" />\n              <div className=\"font-medium text-red-700 dark:text-red-400\">Offline Mode</div>\n            </div>\n            <p className=\"mt-1 text-xs\">\n              You can view tasks but can't create new ones until reconnected.\n            </p>\n            <motion.button\n              whileHover={{ scale: 1.02 }}\n              whileTap={{ scale: 0.98 }}\n              onClick={() => checkServerStatus()}\n              className=\"w-full mt-2 py-1.5 px-3 bg-red-100/70 dark:bg-red-800/30 hover:bg-red-200/70 dark:hover:bg-red-700/40 rounded-xl text-xs font-medium transition-colors flex items-center justify-center border border-red-200/30 dark:border-red-700/30 text-red-700 dark:text-red-300\"\n            >\n              <FiRefreshCw\n                className={`mr-1.5 ${connectionStatus.reconnecting ? 'animate-spin' : ''}`}\n                size={12}\n              />\n              {connectionStatus.reconnecting ? 'Reconnecting...' : 'Reconnect to Server'}\n            </motion.button>\n          </div>\n        </div>\n      )}\n\n      {/* Sessions list */}\n      <div className=\"flex-1 overflow-y-auto sidebar-scrollbar p-3\">\n        <AnimatePresence>\n          {groupedSessions.map((group) => (\n            <div key={group.key} className=\"mb-4\">\n              {/* Group header and toggle */}\n              <motion.button\n                onClick={() => toggleSectionCollapse(group.key)}\n                className=\"w-full flex items-center justify-between px-1 py-2 text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider hover:text-gray-700 dark:hover:text-gray-300\"\n                whileHover={{ x: 2 }}\n              >\n                <span>{group.label}</span>\n                <motion.div\n                  animate={{ rotate: collapsedSections[group.key] ? 0 : 180 }}\n                  transition={{ duration: 0.2 }}\n                >\n                  <FiChevronUp size={14} />\n                </motion.div>\n              </motion.button>\n\n              {/* Sessions in this group */}\n              <AnimatePresence>\n                {!collapsedSections[group.key] && (\n                  <motion.div\n                    initial={{ height: 0, opacity: 0 }}\n                    animate={{ height: 'auto', opacity: 1 }}\n                    exit={{ height: 0, opacity: 0 }}\n                    transition={{ duration: 0.3 }}\n                    className=\"overflow-hidden\"\n                  >\n                    <div className=\"space-y-1\">\n                      {group.sessions.map((session) => (\n                        <SessionItem\n                          key={session.id}\n                          session={session}\n                          isActive={activeSessionId === session.id}\n                          isLoading={loadingSessionId === session.id}\n                          isConnected={connectionStatus.connected}\n                          onSessionClick={handleSessionClick}\n                          onEditSession={handleEditSession}\n                          onDeleteSession={handleDeleteSession}\n                          onSaveEdit={handleSaveEdit}\n                          editingSessionId={editingSessionId}\n                          editedName={editedName}\n                          setEditedName={setEditedName}\n                        />\n                      ))}\n                    </div>\n                  </motion.div>\n                )}\n              </AnimatePresence>\n            </div>\n          ))}\n        </AnimatePresence>\n      </div>\n\n      {/* Confirm Dialog */}\n      <ConfirmDialog\n        isOpen={deleteConfirmOpen}\n        onClose={() => setDeleteConfirmOpen(false)}\n        onConfirm={confirmDeleteSession}\n        title=\"Delete Task\"\n        message=\"Are you sure you want to delete this task? This action cannot be undone.\"\n        confirmText=\"Delete\"\n        cancelText=\"Cancel\"\n        type=\"danger\"\n      />\n    </div>\n  );\n};\n","import React from 'react';\nimport { useSession } from '@/common/hooks/useSession';\nimport { WorkspaceContent } from './WorkspaceContent';\nimport { WorkspaceDetail } from './WorkspaceDetail';\nimport { PlanView } from './PlanView';\nimport { useReplay } from '@/common/hooks/useReplay';\nimport { TimelineSlider } from '@/standalone/replay/TimelineSlider';\nimport { ReplayControls } from '@/standalone/replay/ReplayControls';\nimport { AnimatePresence, motion } from 'framer-motion';\nimport './Workspace.css';\n\n/**\n * WorkspacePanel Component - Container for workspace content\n */\nexport const WorkspacePanel: React.FC = () => {\n  const { activeSessionId, activePanelContent, setActivePanelContent } = useSession();\n  const { replayState } = useReplay();\n\n  // 检查是否在查看计划，同时确保只有在 Pro 模式下才允许查看计划\n  const isViewingPlan = activePanelContent?.type === 'plan';\n  const isReplayActive = replayState.isActive;\n\n  if (!activeSessionId) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <div className=\"text-center p-8 max-w-md\">\n          <motion.div\n            initial={{ opacity: 0, y: 10 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.5 }}\n            className=\"w-20 h-20 bg-gradient-to-br from-gray-100 to-gray-50 dark:from-gray-800 dark:to-gray-700 rounded-3xl flex items-center justify-center mx-auto mb-6 shadow-sm border border-gray-200/50 dark:border-gray-700/30\"\n          >\n            <svg\n              className=\"w-10 h-10 text-gray-400 dark:text-gray-500\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              stroke=\"currentColor\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={1.5}\n                d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\"\n              />\n            </svg>\n          </motion.div>\n          <motion.h3\n            initial={{ opacity: 0, y: 10 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.5, delay: 0.1 }}\n            className=\"text-xl font-medium mb-3 text-gray-800 dark:text-gray-200\"\n          >\n            No Active Session\n          </motion.h3>\n          <motion.p\n            initial={{ opacity: 0, y: 10 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.5, delay: 0.2 }}\n            className=\"text-gray-600 dark:text-gray-400\"\n          >\n            Create or select a session to view detailed information and tool results in this\n            workspace.\n          </motion.p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex flex-col h-full bg-gray-50/80 dark:bg-gray-900/30\">\n      {/* Main content area */}\n      <div className=\"flex-1 overflow-hidden\">\n        {isViewingPlan ? (\n          <PlanView onBack={() => setActivePanelContent(null)} />\n        ) : activePanelContent ? (\n          <WorkspaceDetail />\n        ) : (\n          <WorkspaceContent />\n        )}\n      </div>\n\n      {/* Refined replay controls with modern styling */}\n      <AnimatePresence>\n        {isReplayActive && (\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: 20 }}\n            transition={{ duration: 0.4, ease: [0.19, 1, 0.22, 1] }}\n            className=\"p-5 border-t border-gray-100/40 dark:border-gray-700/20 bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm\"\n          >\n            {/* Timeline slider */}\n            <TimelineSlider />\n\n            {/* Controls centered below the timeline */}\n            <div className=\"flex justify-center mt-4\">\n              <ReplayControls />\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n};\n","import React, { useState, useEffect, useRef } from 'react';\nimport { ToolResultContentPart } from '../types';\nimport { motion } from 'framer-motion';\nimport { FiEye, FiMousePointer, FiType, FiChevronsRight, FiImage } from 'react-icons/fi';\nimport { useSession } from '@/common/hooks/useSession';\nimport { BrowserShell } from './BrowserShell';\n\ninterface BrowserControlRendererProps {\n  part: ToolResultContentPart;\n  onAction?: (action: string, data: any) => void;\n}\n\n/**\n * Specialized renderer for browser_vision_control tool results\n *\n * This renderer displays:\n * 1. The screenshot from the environment input\n * 2. A mouse cursor overlay showing the action point\n * 3. The thought process of the agent\n * 4. The step being performed\n * 5. The specific action taken\n *\n * Design improvements:\n * - Shows screenshot at the top for better visual context\n * - Displays enhanced mouse cursor with artistic animations\n * - Uses browser shell wrapper for consistent styling\n * - Applies smooth transitions for mouse movements\n * - Features visually engaging click animations\n */\nexport const BrowserControlRenderer: React.FC<BrowserControlRendererProps> = ({\n  part,\n  onAction,\n}) => {\n  const { activeSessionId, messages, toolResults, replayState } = useSession();\n  const [relatedImage, setRelatedImage] = useState<string | null>(null);\n  const [imageSize, setImageSize] = useState<{ width: number; height: number } | null>(null);\n  const [mousePosition, setMousePosition] = useState<{ x: number; y: number } | null>(null);\n  const [previousMousePosition, setPreviousMousePosition] = useState<{\n    x: number;\n    y: number;\n  } | null>(null);\n  const imageRef = useRef<HTMLImageElement>(null);\n\n  // Extract the visual operation details from the part\n  const { thought, step, action, status, toolCallId, environmentImage } = part;\n\n  // Get coordinates directly from tool result instead of parsing action string\n  useEffect(() => {\n    if (!activeSessionId || !toolCallId) return;\n\n    // Find the matching tool result for this tool call\n    const sessionResults = toolResults[activeSessionId] || [];\n    const matchingResult = sessionResults.find((result) => result.toolCallId === toolCallId);\n\n    if (matchingResult && matchingResult.content && matchingResult.content.result) {\n      const { startX, startY } = matchingResult.content.result;\n\n      // Save previous position before updating\n      if (mousePosition) {\n        setPreviousMousePosition(mousePosition);\n      }\n\n      // Set new position if coordinates are valid\n      if (typeof startX === 'number' && typeof startY === 'number') {\n        setMousePosition({\n          x: startX,\n          y: startY,\n        });\n      }\n    }\n  }, [activeSessionId, toolCallId, toolResults]);\n\n  // 如果提供了环境图像，直接使用\n  useEffect(() => {\n    if (environmentImage) {\n      setRelatedImage(environmentImage);\n    }\n  }, [environmentImage]);\n\n  // Find the most recent environment input (screenshot) before this operation\n  useEffect(() => {\n    if (!activeSessionId) return;\n\n    const sessionMessages = messages[activeSessionId] || [];\n\n    if (!toolCallId) return;\n\n    // 获取当前工具调用在消息中的索引\n    const currentToolCallIndex = sessionMessages.findIndex((msg) =>\n      msg.toolCalls?.some((tc) => tc.id === toolCallId),\n    );\n\n    if (currentToolCallIndex === -1) return;\n\n    // 查找距离当前工具调用最近的环境输入\n    let foundImage = false;\n\n    // 向前搜索环境输入，找到最近的截图\n    for (let i = currentToolCallIndex; i >= 0; i--) {\n      const msg = sessionMessages[i];\n      if (msg.role === 'environment' && Array.isArray(msg.content)) {\n        const imgContent = msg.content.find(\n          (c) => typeof c === 'object' && 'type' in c && c.type === 'image_url',\n        );\n\n        if (imgContent && 'image_url' in imgContent && imgContent.image_url.url) {\n          setRelatedImage(imgContent.image_url.url);\n          foundImage = true;\n          break;\n        }\n      }\n    }\n\n    // 如果在当前工具调用之前没有找到图片，则搜索所有环境消息作为回退\n    if (!foundImage) {\n      console.warn(\n        `[BrowserControlRenderer] Could not find preceding screenshot for toolCallId: ${toolCallId}. Falling back to search all environment messages.`,\n      );\n      const envMessages = sessionMessages.filter(\n        (msg) => msg.role === 'environment' && Array.isArray(msg.content),\n      );\n\n      // 从后往前找，找到最新的截图\n      for (let i = envMessages.length - 1; i >= 0; i--) {\n        const msg = envMessages[i];\n        const imgContent = msg.content.find(\n          (c) => typeof c === 'object' && 'type' in c && c.type === 'image_url',\n        );\n\n        if (imgContent && 'image_url' in imgContent && imgContent.image_url.url) {\n          setRelatedImage(imgContent.image_url.url);\n          break; // 找到最新的就停止\n        }\n      }\n    }\n  }, [activeSessionId, messages, toolCallId]);\n\n  // Handler to get image dimensions when loaded\n  const handleImageLoad = () => {\n    if (imageRef.current) {\n      setImageSize({\n        width: imageRef.current.naturalWidth,\n        height: imageRef.current.naturalHeight,\n      });\n    }\n  };\n\n  // If no valid data, show a placeholder\n  if (!thought && !step && !action) {\n    return <div className=\"text-gray-500 italic\">Browser control details unavailable</div>;\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Screenshot section - moved to the top */}\n      {relatedImage && (\n        <motion.div\n          initial={{ opacity: 0, y: 10 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.3 }}\n        >\n          {/* ... 保留其他代码 ... */}\n\n          <BrowserShell className=\"mb-4\">\n            <div className=\"relative\">\n              <img\n                ref={imageRef}\n                src={relatedImage}\n                alt=\"Browser Screenshot\"\n                className=\"w-full h-auto object-contain\"\n                onLoad={handleImageLoad}\n              />\n\n              {/* Enhanced mouse cursor overlay */}\n              {mousePosition && imageSize && (\n                <motion.div\n                  className=\"absolute pointer-events-none\"\n                  initial={\n                    previousMousePosition\n                      ? {\n                          left: `${(previousMousePosition.x / imageSize.width) * 100 * window.devicePixelRatio}%`,\n                          top: `${(previousMousePosition.y / imageSize.height) * 100 * window.devicePixelRatio}%`,\n                        }\n                      : {\n                          left: `${(mousePosition.x / imageSize.width) * 100 * window.devicePixelRatio}%`,\n                          top: `${(mousePosition.y / imageSize.height) * 100 * window.devicePixelRatio}%`,\n                        }\n                  }\n                  animate={{\n                    left: `${(mousePosition.x / imageSize.width) * 100 * window.devicePixelRatio}%`,\n                    top: `${(mousePosition.y / imageSize.height) * 100 * window.devicePixelRatio}%`,\n                  }}\n                  transition={{ duration: 0.5, ease: [0.16, 1, 0.3, 1] }}\n                  style={{\n                    zIndex: 10,\n                  }}\n                >\n                  <div className=\"relative\">\n                    {/* Enhanced cursor icon with shadow effect */}\n                    <svg\n                      width=\"36\"\n                      height=\"36\"\n                      viewBox=\"0 0 24 24\"\n                      fill=\"none\"\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      style={{\n                        filter: 'drop-shadow(0px 2px 4px rgba(0,0,0,0.3))',\n\n                        transform: 'translate(0px, 2px)',\n                      }}\n                    >\n                      <defs>\n                        <linearGradient id=\"cursorGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n                          <stop offset=\"0%\" stopColor=\"white\" />\n                          <stop offset=\"100%\" stopColor=\"#f5f5f5\" />\n                        </linearGradient>\n                      </defs>\n                      <path\n                        d=\"M5 3L19 12L12 13L9 20L5 3Z\"\n                        fill=\"url(#cursorGradient)\"\n                        stroke=\"#000000\"\n                        strokeWidth=\"1.5\"\n                        strokeLinejoin=\"round\"\n                      />\n                    </svg>\n\n                    {/* Artistic pulse effect for click actions */}\n                    {action && action.includes('click') && (\n                      <>\n                        {/* Multiple layered ripple effects */}\n                        <motion.div\n                          className=\"absolute rounded-full\"\n                          initial={{ opacity: 0.8, scale: 0 }}\n                          animate={{ opacity: 0, scale: 2.5 }}\n                          transition={{\n                            duration: 1.5,\n                            ease: 'easeOut',\n                            repeat: Infinity,\n                          }}\n                          style={{\n                            top: '-8px',\n                            left: '-8px',\n                            width: '24px',\n                            height: '24px',\n                            background:\n                              'radial-gradient(circle, rgba(99,102,241,0.6) 0%, rgba(99,102,241,0) 70%)',\n                            border: '1px solid rgba(99,102,241,0.3)',\n                          }}\n                        />\n                        <motion.div\n                          className=\"absolute rounded-full\"\n                          initial={{ opacity: 0.9, scale: 0 }}\n                          animate={{ opacity: 0, scale: 2 }}\n                          transition={{\n                            duration: 1.2,\n                            ease: 'easeOut',\n                            delay: 0.2,\n                            repeat: Infinity,\n                          }}\n                          style={{\n                            top: '-6px',\n                            left: '-6px',\n                            width: '20px',\n                            height: '20px',\n                            background:\n                              'radial-gradient(circle, rgba(99,102,241,0.8) 0%, rgba(99,102,241,0) 70%)',\n                            border: '1px solid rgba(99,102,241,0.5)',\n                          }}\n                        />\n                        {/* Central highlight dot */}\n                        <motion.div\n                          className=\"absolute rounded-full bg-white\"\n                          initial={{ opacity: 1, scale: 0.5 }}\n                          animate={{ opacity: 0.8, scale: 1 }}\n                          transition={{\n                            duration: 0.7,\n                            repeat: Infinity,\n                            repeatType: 'reverse',\n                          }}\n                          style={{\n                            top: '2px',\n                            left: '2px',\n                            width: '4px',\n                            height: '4px',\n                            boxShadow: '0 0 10px 2px rgba(255,255,255,0.7)',\n                          }}\n                        />\n                      </>\n                    )}\n                  </div>\n                </motion.div>\n              )}\n            </div>\n          </BrowserShell>\n        </motion.div>\n      )}\n\n      {/* Visual operation details card */}\n      <div className=\"bg-white dark:bg-gray-800 rounded-xl border border-gray-200/50 dark:border-gray-700/30 shadow-sm overflow-hidden\">\n        <div className=\"px-4 py-3 bg-gray-50/80 dark:bg-gray-800/80 border-b border-gray-100/50 dark:border-gray-700/30 flex items-center\">\n          <FiMousePointer className=\"text-gray-600 dark:text-gray-400 mr-2.5\" size={18} />\n          <div className=\"font-medium text-gray-700 dark:text-gray-300\">GUI Agent Operation</div>\n          {status && (\n            <div\n              className={`ml-auto text-xs font-medium px-2 py-0.5 rounded-full ${\n                status === 'success'\n                  ? 'bg-green-100/80 dark:bg-green-900/20 text-green-700 dark:text-green-400'\n                  : 'bg-red-100/80 dark:bg-red-900/20 text-red-700 dark:text-red-400'\n              }`}\n            >\n              {status === 'success' ? 'Success' : 'Failed'}\n            </div>\n          )}\n        </div>\n\n        <div className=\"p-4 space-y-3\">\n          {/* Thought process */}\n          {thought && (\n            <div className=\"space-y-1\">\n              <div className=\"flex items-center text-sm font-medium text-gray-700 dark:text-gray-300\">\n                <FiEye className=\"mr-2 text-accent-500/70 dark:text-accent-400/70\" size={14} />\n                Thought\n              </div>\n              <div className=\"text-sm text-gray-600 dark:text-gray-400 pl-6 border-l-2 border-accent-100 dark:border-accent-900/30\">\n                {thought}\n              </div>\n            </div>\n          )}\n\n          {/* Step */}\n          {step && (\n            <div className=\"space-y-1\">\n              <div className=\"flex items-center text-sm font-medium text-gray-700 dark:text-gray-300\">\n                <FiChevronsRight\n                  className=\"mr-2 text-primary-500/70 dark:text-primary-400/70\"\n                  size={14}\n                />\n                Action\n              </div>\n              <div className=\"text-sm text-gray-600 dark:text-gray-400 pl-6 border-l-2 border-primary-100 dark:border-primary-900/30\">\n                {step}\n              </div>\n            </div>\n          )}\n\n          {/* Action command */}\n          {action && (\n            <div className=\"space-y-1\">\n              <div className=\"flex items-center text-sm font-medium text-gray-700 dark:text-gray-300\">\n                <FiType className=\"mr-2 text-gray-500/70 dark:text-gray-400/70\" size={14} />\n                Action Command\n              </div>\n              <div className=\"bg-gray-50 dark:bg-gray-800/90 font-mono text-xs p-2 rounded-md border border-gray-100/50 dark:border-gray-700/30 overflow-x-auto\">\n                {action}\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n"],"names":[],"mappings":"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CA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAHA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AAAA;;;;;AAEA;AAAA;AAAA;;;;;;AACA;AAEA;AACA;;AAMA;AAAA;AAAA;;;;;;;;;;;;;AAIA;AAEA;AACA;AAAA;;AAEA;AACA;AAAA;;;;;;AAIA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;;;AAMA;AACA;;AAKA;AACA;;;;;;AAQA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;;;;;;AAIA;AAAA;;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAKA;AAEA;AAAA;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AAIA;AAAA;AACA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;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AAAA;AACA;AAAA;AAAA;AACA;AACA;;AAMA;AAAA;;AAVA;;;;;;;;;;;;;;;;;AAgBA;AArHA;;AAUA;;;AAVA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;;;;;;;;AAQA;AACA;;AACA;AAWA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;;;;;;AAIA;AAEA;AACA;;AAEA;AAAA;;AACA;AAAA;AAAA;;;;;;AACA;AAAA;;AAEA;AACA;AAOA;;;;;;AASA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AAEA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;AAMA;AACA;AACA;AAAA;;AACA;AAAA;;AACA;AAAA;;;;;;AACA;AAAA;AAAA;;;;;;;;;;;;AAEA;AAAA;AAAA;;;;;;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;;AAEA;AACA;AACA;;;;;;AAEA;;;;;;;;;;;;;;;;;;AAOA;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AAAA;;AAEA;AAAA;;;;;;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;;;;;;;;;;;;;;;;;AAKA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;;;;;;;;;;;;;;;;;;;;;AA7BA;;;;;;;;;;;;;;;AAqDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AAIA;AAtSA;;AAUA;AAEA;;;AAZA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AAIA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;;;;;AAOA;AAEA;AACA;;AAEA;AAAA;AACA;AACA;;;;;AACA;;;;AAGA;;;;;;;;;;AAKA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAGA;;;;;AAGA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA;AAzFA;;AACA;AACA;;;AAFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACdA;AAEA;AACA;AACA;AACA;AAOA;;;;;;;;;;;;;;;;AAgBA;AACA;;AAIA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAAA;;AAGA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAIA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;;;;;;AACA;AAEA;AACA;;AAEA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAIA;AAAA;AACA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAIA;AAEA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;;;;;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AAKA;;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAaA;AAAA;;AACA;AAAA;;AACA;AAAA;AAAA;;;;;;AACA;AAAA;AAAA;;;;;;AACA;AAEA;AAMA;;;;;;;;;;;;AAKA;AAAA;;AAEA;AACA;;AACA;AAAA;;AACA;AAAA;AAAA;;;;;;AAAA;;;;;;;AAGA;AAAA;AACA;;;;;;;;;;;;AAMA;AACA;;AACA;AAAA;;AACA;AACA;AACA;;;;;;AACA;;;;;;;AAGA;AAAA;AACA;;;;;;;;;;;;AAMA;AACA;;AACA;AAAA;;AACA;AAAA;AAAA;;;;;;AAAA;;;;;;;AAGA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA;AA5UA;;AAIA;;;AAJA"}