"use strict";
self["webpackHotUpdate_agent_tars_web_ui"]("index", {
"./src/entry.css": (function (module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
// extracted by css-extract-rspack-plugin

    if(true) {
      (function() {
        var localsJsonString = undefined;
        // 1751741382904
        var cssReload = (__webpack_require__("../node_modules/.pnpm/@rspack+core@1.3.9_@swc+helpers@0.5.17/node_modules/@rspack/core/dist/cssExtractHmr.js")/* .cssReload */.cssReload)(module.id, {});
        // only invalidate when locals change
        if (
          module.hot.data &&
          module.hot.data.value &&
          module.hot.data.value !== localsJsonString
        ) {
          module.hot.invalidate();
        } else {
          module.hot.accept();
        }
        module.hot.dispose(function(data) {
          data.value = localsJsonString;
          cssReload();
        });
      })();
    }
  

}),
"./src/standalone/chat/Message/components/ToolCalls.tsx": (function (module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  ToolCalls: () => (ToolCalls)
});
/* ESM import */var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/react@18.3.1/node_modules/react/jsx-dev-runtime.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../node_modules/.pnpm/react@18.3.1/node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* ESM import */var react_icons_fi__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("../node_modules/.pnpm/react-icons@4.12.0_react@18.3.1/node_modules/react-icons/fi/index.esm.js");
/* ESM import */var framer_motion__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../node_modules/.pnpm/framer-motion@12.19.2_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/render/components/motion/proxy.mjs");
/* ESM import */var _ActionButton__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/standalone/chat/Message/components/ActionButton.tsx");
/* ESM import */var jotai__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../node_modules/.pnpm/jotai@2.12.5_@types+react@18.3.23_react@18.3.1/node_modules/jotai/esm/react.mjs");
/* ESM import */var _common_state_atoms_tool__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/common/state/atoms/tool.ts");
/* provided dependency */ var $ReactRefreshRuntime$ = __webpack_require__("../node_modules/.pnpm/@rspack+plugin-react-refresh@1.0.3_react-refresh@0.16.0/node_modules/@rspack/plugin-react-refresh/client/reactRefresh.js");

var _s = $RefreshSig$();






/**
 * Component for displaying tool calls with enhanced icons and loading states
 *
 * Design principles:
 * - Distinct visual identity for different tool types
 * - Shows loading state for pending tool calls
 * - Displays success/error status with appropriate icons
 * - Provides clear visual feedback with enhanced tool-specific colors
 * - Supports streaming tool calls for real-time feedback
 */ const ToolCalls = (param)=>{
    let { toolCalls, onToolCallClick, getToolIcon, isIntermediate = false, toolResults = [] } = param;
    _s();
    const streamingToolCalls = (0,jotai__WEBPACK_IMPORTED_MODULE_4__.useAtomValue)(_common_state_atoms_tool__WEBPACK_IMPORTED_MODULE_3__.streamingToolCallsAtom);
    // Helper function to get tool call status
    const getToolCallStatus = (toolCall)=>{
        // Check if this tool call is currently streaming
        if (streamingToolCalls[toolCall.id]) {
            return 'streaming';
        }
        const result = toolResults.find((result)=>result.toolCallId === toolCall.id);
        if (!result) {
            return 'pending'; // No result yet, tool is still running
        }
        if (result.error) {
            return 'error'; // Tool execution failed
        }
        return 'success'; // Tool completed successfully
    };
    // Helper function to get status icon with enhanced visual styling
    const getStatusIcon = (status, toolName)=>{
        switch(status){
            case 'streaming':
                return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_5__.motion.div, {
                    animate: {
                        rotate: 360
                    },
                    transition: {
                        duration: 1.5,
                        repeat: Infinity,
                        ease: 'linear'
                    },
                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_icons_fi__WEBPACK_IMPORTED_MODULE_6__.FiLoader, {
                        size: 16,
                        className: "text-blue-500 dark:text-blue-400"
                    }, void 0, false, {
                        fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/components/ToolCalls.tsx",
                        lineNumber: 64,
                        columnNumber: 13
                    }, undefined)
                }, void 0, false, {
                    fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/components/ToolCalls.tsx",
                    lineNumber: 60,
                    columnNumber: 11
                }, undefined);
            case 'pending':
                return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_5__.motion.div, {
                    animate: {
                        rotate: 360
                    },
                    transition: {
                        duration: 1,
                        repeat: Infinity,
                        ease: 'linear'
                    },
                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_icons_fi__WEBPACK_IMPORTED_MODULE_6__.FiLoader, {
                        size: 16,
                        className: "text-slate-500 dark:text-slate-400"
                    }, void 0, false, {
                        fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/components/ToolCalls.tsx",
                        lineNumber: 73,
                        columnNumber: 13
                    }, undefined)
                }, void 0, false, {
                    fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/components/ToolCalls.tsx",
                    lineNumber: 69,
                    columnNumber: 11
                }, undefined);
            case 'success':
                return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_icons_fi__WEBPACK_IMPORTED_MODULE_6__.FiCheck, {
                    size: 16,
                    className: "text-green-600 dark:text-green-400"
                }, void 0, false, {
                    fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/components/ToolCalls.tsx",
                    lineNumber: 77,
                    columnNumber: 16
                }, undefined);
            case 'error':
                return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_icons_fi__WEBPACK_IMPORTED_MODULE_6__.FiAlertCircle, {
                    size: 16,
                    className: "text-red-600 dark:text-red-400"
                }, void 0, false, {
                    fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/components/ToolCalls.tsx",
                    lineNumber: 79,
                    columnNumber: 16
                }, undefined);
            default:
                return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_icons_fi__WEBPACK_IMPORTED_MODULE_6__.FiClock, {
                    size: 16,
                    className: "text-slate-500 dark:text-slate-400"
                }, void 0, false, {
                    fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/components/ToolCalls.tsx",
                    lineNumber: 81,
                    columnNumber: 16
                }, undefined);
        }
    };
    // 生成工具描述文本 - 增强描述信息的可读性
    const getToolDescription = (toolCall)=>{
        const streamingCall = streamingToolCalls[toolCall.id];
        // If streaming and it's write_file, show streaming progress
        if (streamingCall && streamingCall.toolName === 'write_file') {
            const argsLength = streamingCall.accumulatedArguments.length;
            if (argsLength > 0) {
                return `writing... (${Math.floor(argsLength / 1024)}KB)`;
            }
            return 'preparing to write...';
        }
        try {
            const args = JSON.parse(toolCall.function.arguments || '{}');
            switch(toolCall.function.name){
                case 'web_search':
                    return args.query ? `"${args.query}"` : '';
                case 'browser_navigate':
                    // 限制 URL 长度以避免溢出
                    return args.url;
                case 'browser_vision_control':
                case 'browser_control':
                    return args.action ? `${args.action}` : '';
                case 'browser_click':
                    return args.selector || args.text ? `click: ${args.selector || args.text}` : 'click';
                case 'list_directory':
                    return args.path ? `path: ${args.path}` : '';
                case 'run_command':
                    return args.command;
                case 'read_file':
                case 'write_file':
                    return args.path ? `file: ${args.path.split('/').pop()}` : '';
                default:
                    return '';
            }
        } catch (error) {
            console.error('Failed to parse tool arguments:', error);
            return '';
        }
    };
    // 获取浏览器操作结果说明
    const getResultInfo = (toolCall, status)=>{
        const result = toolResults.find((result)=>result.toolCallId === toolCall.id);
        if (status === 'error' && (result === null || result === void 0 ? void 0 : result.error)) {
            return '"operation failed"';
        } else if (status === 'success') {
            if (toolCall.function.name === 'browser_get_markdown') {
                return '"content retrieved"';
            } else if (toolCall.function.name === 'browser_navigate') {
                return '"navigation success"';
            } else if (toolCall.function.name === 'browser_click') {
                return '"click successful"';
            } else if (toolCall.function.name.startsWith('run_')) {
                return '"command executed"';
            } else if (toolCall.function.name.startsWith('list_')) {
                return '"files listed"';
            } else if (toolCall.function.name.startsWith('read_')) {
                return '"file read"';
            } else if (toolCall.function.name.startsWith('write_')) {
                return '"file saved"';
            }
        }
        return '';
    };
    // 获取工具的格式化名称，使其更易读
    const getToolDisplayName = (toolName)=>{
        // 替换下划线为空格
        const nameWithSpaces = toolName.replace(/_/g, ' ');
        // 特殊情况处理
        switch(toolName){
            case 'browser_navigate':
                return 'Navigate';
            case 'browser_get_markdown':
                return 'Extract Content';
            case 'browser_click':
                return 'Click Element';
            case 'web_search':
                return 'Web Search';
            case 'list_directory':
                return 'List Files';
            case 'run_command':
                return 'Run Command';
            case 'read_file':
                return 'Read File';
            case 'write_file':
                return 'Write File';
            default:
                // 首字母大写
                return nameWithSpaces.split(' ').map((word)=>word.charAt(0).toUpperCase() + word.slice(1)).join(' ');
        }
    };
    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
        className: "mt-2 space-y-1.5",
        children: toolCalls.map((toolCall)=>{
            const status = getToolCallStatus(toolCall);
            const description = getToolDescription(toolCall);
            const browserInfo = getResultInfo(toolCall, status);
            const displayName = getToolDisplayName(toolCall.function.name);
            return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_ActionButton__WEBPACK_IMPORTED_MODULE_2__.ActionButton, {
                icon: getToolIcon(toolCall.function.name),
                label: displayName,
                onClick: ()=>onToolCallClick(toolCall),
                status: status === 'streaming' ? 'pending' : status,
                statusIcon: getStatusIcon(status, toolCall.function.name),
                description: description || browserInfo || undefined
            }, toolCall.id, false, {
                fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/components/ToolCalls.tsx",
                lineNumber: 196,
                columnNumber: 11
            }, undefined);
        })
    }, void 0, false, {
        fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/components/ToolCalls.tsx",
        lineNumber: 188,
        columnNumber: 5
    }, undefined);
};
_s(ToolCalls, "nsPswtpUt97gR/6/XaMSbJ0Cntc=", false, function() {
    return [
        jotai__WEBPACK_IMPORTED_MODULE_4__.useAtomValue
    ];
});
_c = ToolCalls;
var _c;
$RefreshReg$(_c, "ToolCalls");

function $RefreshSig$() {
  return $ReactRefreshRuntime$.createSignatureFunctionForTransform();
}
function $RefreshReg$(type, id) {
  $ReactRefreshRuntime$.register(type, module.id + "_" + id);
}
Promise.resolve().then(function() {
  $ReactRefreshRuntime$.refresh(module.id, module.hot);
});


}),

},function(__webpack_require__) {
// webpack/runtime/get_full_hash
(() => {
__webpack_require__.h = () => ("78a5753ad2f7ea51")
})();

}
);
//# sourceMappingURL=index.85658e044c6de445.hot-update.js.map