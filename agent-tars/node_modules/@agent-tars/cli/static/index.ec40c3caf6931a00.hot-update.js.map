{"version":3,"file":"index.ec40c3caf6931a00.hot-update.js","sources":["/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/entry.css","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/common/hooks/useLayout.ts","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/common/hooks/usePlan.ts","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/common/hooks/useReplay.ts","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/common/hooks/useReplayMode.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/common/hooks/useSession.ts","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/common/hooks/useTool.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/common/services/apiService.ts","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/common/services/socketService.ts","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/common/state/actions/connectionActions.ts","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/common/state/actions/eventProcessor.ts","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/common/state/actions/modelInfoAction.ts","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/common/state/actions/sessionActions.ts","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/common/state/atoms/message.ts","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/common/state/atoms/plan.ts","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/common/state/atoms/replay.ts","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/common/state/atoms/session.ts","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/common/state/atoms/tool.ts","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/common/state/atoms/ui.ts","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/app/App.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/app/Layout/index.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/app/Router/SessionRouter.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/app/index.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/index.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/home/HomePage.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/home/WelcomePage.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/replay/TimelineSlider.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/share/ShareButton.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/sidebar/SidebarContainer.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/sidebar/ToolBar.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/workspace/PlanView.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/workspace/WorkspaceContent.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/workspace/WorkspaceDetail.tsx"],"sourcesContent":["// extracted by css-extract-rspack-plugin\nexport {};\n    if(module.hot) {\n      (function() {\n        var localsJsonString = undefined;\n        // 1749665531098\n        var cssReload = require(\"../../node_modules/.pnpm/@rspack+core@1.3.9_@swc+helpers@0.5.17/node_modules/@rspack/core/dist/cssExtractHmr.js\").cssReload(module.id, {});\n        // only invalidate when locals change\n        if (\n          module.hot.data &&\n          module.hot.data.value &&\n          module.hot.data.value !== localsJsonString\n        ) {\n          module.hot.invalidate();\n        } else {\n          module.hot.accept();\n        }\n        module.hot.dispose(function(data) {\n          data.value = localsJsonString;\n          cssReload();\n        });\n      })();\n    }\n  ","import { useAtom } from 'jotai';\nimport { sidebarCollapsedAtom, workspacePanelCollapsedAtom } from '../state/atoms/ui';\n\n/**\n * Hook for layout management\n *\n * Provides:\n * - Sidebar state (collapsed/expanded)\n * - Workspace panel state (collapsed/expanded)\n * - Toggle functions for both\n */\nexport function useLayout() {\n  const [isSidebarCollapsed, setSidebarCollapsed] = useAtom(sidebarCollapsedAtom);\n  const [isWorkspacePanelCollapsed, setWorkspacePanelCollapsed] = useAtom(\n    workspacePanelCollapsedAtom,\n  );\n\n  const toggleSidebar = () => setSidebarCollapsed((prev) => !prev);\n  const toggleWorkspacePanel = () => setWorkspacePanelCollapsed((prev) => !prev);\n\n  return {\n    isSidebarCollapsed,\n    isWorkspacePanelCollapsed,\n    toggleSidebar,\n    toggleWorkspacePanel,\n  };\n}\n","import { useAtom } from 'jotai';\nimport { plansAtom, planUIStateAtom } from '../state/atoms/plan';\nimport { useEffect } from 'react';\n\n/**\n * Hook for plan management functionality\n *\n * Provides:\n * - Access to plan data for the active session\n * - UI state for plan display\n * - Toggle functions for plan visibility\n */\nexport function usePlan(sessionId: string | null) {\n  const [plans, setPlans] = useAtom(plansAtom);\n  const [planUIState, setPlanUIState] = useAtom(planUIStateAtom);\n\n  // Get plan for current session\n  const currentPlan = sessionId ? plans[sessionId] : undefined;\n\n  // Add debug logging to trace plan state\n  useEffect(() => {\n    if (sessionId) {\n      console.log(`[usePlan] Plan state for session ${sessionId}:`, currentPlan);\n    }\n  }, [sessionId, currentPlan]);\n\n  // Toggle plan visibility\n  const togglePlanVisibility = () => {\n    setPlanUIState((prev) => ({\n      ...prev,\n      isVisible: !prev.isVisible,\n    }));\n  };\n\n  // Show plan automatically when first created\n  const showPlanAutomatically = () => {\n    setPlanUIState((prev) => ({\n      ...prev,\n      isVisible: true,\n    }));\n  };\n\n  return {\n    currentPlan,\n    isPlanVisible: planUIState.isVisible,\n    togglePlanVisibility,\n    showPlanAutomatically,\n  };\n}\n","// /agent-tars-web-ui/src/v2/hooks/useReplay.ts\nimport { useAtom } from 'jotai';\nimport { useCallback, useEffect, useState } from 'react';\nimport { replayStateAtom } from '../state/atoms/replay';\nimport { useSession } from './useSession';\nimport { messagesAtom } from '../state/atoms/message';\nimport { toolResultsAtom } from '../state/atoms/tool';\nimport { processEventAction } from '../state/actions/eventProcessor';\nimport { useSetAtom } from 'jotai';\nimport { plansAtom } from '../state/atoms/plan';\n\n/**\n * Custom hook for managing replay functionality\n *\n * Provides:\n * - Control for playback (play, pause, jump, etc.)\n * - Event processing through the standard event processor\n * - Timeline calculations and positioning\n */\nexport function useReplay() {\n  const [replayState, setReplayState] = useAtom(replayStateAtom);\n  const { activeSessionId } = useSession();\n  const [playbackInterval, setPlaybackInterval] = useState<NodeJS.Timeout | null>(null);\n  const [, setMessages] = useAtom(messagesAtom);\n  const [, setToolResults] = useAtom(toolResultsAtom);\n  const [, setPlans] = useAtom(plansAtom);\n  const processEvent = useSetAtom(processEventAction);\n\n  /**\n   * 重置会话状态并处理事件至指定索引\n   */\n  const processEventsUpToIndex = useCallback(\n    (targetIndex: number) => {\n      if (!activeSessionId || !replayState.events.length || targetIndex < 0) return;\n\n      // 获取需要处理的事件\n      const eventsToProcess = replayState.events.slice(0, targetIndex + 1);\n\n      // 清空当前会话状态\n      setMessages((prev) => ({\n        ...prev,\n        [activeSessionId]: [],\n      }));\n\n      setToolResults((prev) => ({\n        ...prev,\n        [activeSessionId]: [],\n      }));\n\n      setPlans((prev) => ({\n        ...prev,\n        [activeSessionId]: {\n          steps: [],\n          isComplete: false,\n          summary: null,\n          hasGeneratedPlan: false,\n          keyframes: [],\n        },\n      }));\n\n      // 处理环境输入事件优先，确保图片资源先加载\n      const envEvents = eventsToProcess.filter((event) => event.type === 'environment_input');\n      const nonEnvEvents = eventsToProcess.filter((event) => event.type !== 'environment_input');\n\n      // 先处理环境输入事件\n      for (const event of envEvents) {\n        processEvent({ sessionId: activeSessionId, event });\n      }\n\n      // 然后处理其他事件\n      for (const event of nonEnvEvents) {\n        processEvent({ sessionId: activeSessionId, event });\n      }\n    },\n    [activeSessionId, replayState.events, setMessages, setToolResults, setPlans, processEvent],\n  );\n\n  /**\n   * 开始回放\n   */\n  const startReplay = useCallback(() => {\n    // 清除现有的定时器\n    if (playbackInterval) {\n      clearInterval(playbackInterval);\n    }\n\n    setReplayState((prev) => ({\n      ...prev,\n      isPaused: false,\n    }));\n\n    // 设置定时器按间隔前进\n    const interval = setInterval(() => {\n      setReplayState((prev) => {\n        // 到达末尾时停止\n        if (prev.currentEventIndex >= prev.events.length - 1) {\n          clearInterval(interval);\n          return {\n            ...prev,\n            isPaused: true,\n            currentEventIndex: prev.events.length - 1,\n          };\n        }\n\n        // 前进到下一个事件\n        const nextIndex = prev.currentEventIndex + 1;\n\n        // 处理到新位置\n        if (activeSessionId) {\n          processEvent({\n            sessionId: activeSessionId,\n            event: prev.events[nextIndex],\n          });\n        }\n\n        return {\n          ...prev,\n          currentEventIndex: nextIndex,\n        };\n      });\n    }, 500 / replayState.playbackSpeed);\n\n    setPlaybackInterval(interval);\n  }, [activeSessionId, playbackInterval, processEvent, replayState.playbackSpeed, setReplayState]);\n\n  /**\n   * 暂停回放\n   */\n  const pauseReplay = useCallback(() => {\n    if (playbackInterval) {\n      clearInterval(playbackInterval);\n      setPlaybackInterval(null);\n    }\n\n    setReplayState((prev) => ({\n      ...prev,\n      isPaused: true,\n    }));\n  }, [playbackInterval, setReplayState]);\n\n  /**\n   * 跳转到时间轴上的指定位置\n   */\n  const jumpToPosition = useCallback(\n    (position: number) => {\n      // 确保位置在有效范围内\n      const normalizedPosition = Math.max(0, Math.min(1, position));\n\n      if (replayState.events.length === 0 || !activeSessionId) return;\n\n      // 根据位置计算目标事件索引\n      const targetIndex = Math.floor(normalizedPosition * (replayState.events.length - 1));\n\n      // 暂停任何正在进行的回放\n      if (playbackInterval) {\n        clearInterval(playbackInterval);\n        setPlaybackInterval(null);\n      }\n\n      // 处理到新位置\n      processEventsUpToIndex(targetIndex);\n\n      setReplayState((prev) => ({\n        ...prev,\n        isPaused: true,\n        currentEventIndex: targetIndex,\n      }));\n    },\n    [\n      activeSessionId,\n      playbackInterval,\n      processEventsUpToIndex,\n      replayState.events.length,\n      setReplayState,\n    ],\n  );\n\n  /**\n   * 跳转到最终结果\n   */\n  const jumpToResult = useCallback(() => {\n    if (replayState.events.length === 0 || !activeSessionId) return;\n\n    const finalIndex = replayState.events.length - 1;\n\n    // 暂停任何正在进行的回放\n    if (playbackInterval) {\n      clearInterval(playbackInterval);\n      setPlaybackInterval(null);\n    }\n\n    // 处理到最终位置\n    processEventsUpToIndex(finalIndex);\n\n    setReplayState((prev) => ({\n      ...prev,\n      isPaused: true,\n      currentEventIndex: finalIndex,\n    }));\n  }, [\n    activeSessionId,\n    playbackInterval,\n    processEventsUpToIndex,\n    replayState.events.length,\n    setReplayState,\n  ]);\n\n  /**\n   * 重置回放到初始状态，允许从头开始播放\n   */\n  const resetReplay = useCallback(() => {\n    // 暂停任何正在进行的回放\n    if (playbackInterval) {\n      clearInterval(playbackInterval);\n      setPlaybackInterval(null);\n    }\n\n    // 处理到初始位置\n    processEventsUpToIndex(0);\n\n    setReplayState((prev) => ({\n      ...prev,\n      isPaused: true,\n      currentEventIndex: 0,\n    }));\n  }, [playbackInterval, processEventsUpToIndex, setReplayState]);\n\n  /**\n   * 设置播放速度\n   */\n  const setPlaybackSpeed = useCallback(\n    (speed: number) => {\n      setReplayState((prev) => ({\n        ...prev,\n        playbackSpeed: speed,\n      }));\n\n      // 如果正在播放，以新速度重启\n      if (!replayState.isPaused && playbackInterval) {\n        clearInterval(playbackInterval);\n        startReplay();\n      }\n    },\n    [playbackInterval, replayState.isPaused, setReplayState, startReplay],\n  );\n\n  /**\n   * 退出回放模式\n   */\n  const exitReplay = useCallback(() => {\n    if (playbackInterval) {\n      clearInterval(playbackInterval);\n    }\n\n    setReplayState((prev) => ({\n      ...prev,\n      isActive: false,\n      isPaused: true,\n      currentEventIndex: -1,\n      events: [],\n      processedEvents: {},\n    }));\n  }, [playbackInterval, setReplayState]);\n\n  /**\n   * 获取当前事件\n   */\n  const getCurrentEvent = useCallback(() => {\n    if (\n      !replayState.isActive ||\n      replayState.currentEventIndex < 0 ||\n      replayState.currentEventIndex >= replayState.events.length\n    ) {\n      return null;\n    }\n\n    return replayState.events[replayState.currentEventIndex];\n  }, [replayState.currentEventIndex, replayState.events, replayState.isActive]);\n\n  /**\n   * 获取当前位置百分比 (0-100)\n   */\n  const getCurrentPosition = useCallback(() => {\n    if (!replayState.isActive || replayState.events.length <= 1) {\n      return 0;\n    }\n\n    return (replayState.currentEventIndex / (replayState.events.length - 1)) * 100;\n  }, [replayState.currentEventIndex, replayState.events.length, replayState.isActive]);\n\n  /**\n   * 获取当前所有事件\n   */\n  const getCurrentEvents = useCallback(() => {\n    if (!replayState.isActive || replayState.currentEventIndex < 0) {\n      return [];\n    }\n\n    return replayState.events.slice(0, replayState.currentEventIndex + 1);\n  }, [replayState.currentEventIndex, replayState.events, replayState.isActive]);\n\n  // 组件卸载时清理定时器\n  useEffect(() => {\n    return () => {\n      if (playbackInterval) {\n        clearInterval(playbackInterval);\n      }\n    };\n  }, [playbackInterval]);\n\n  // 回放模式初始化时：如果索引为-1，需要手动触发第一步，否则会显示为空白\n  useEffect(() => {\n    if (\n      replayState.isActive &&\n      replayState.currentEventIndex === -1 &&\n      replayState.events.length > 0\n    ) {\n      // 如果启动回放后立即跳到第一个事件\n      processEventsUpToIndex(0);\n      setReplayState((prev) => ({\n        ...prev,\n        currentEventIndex: 0,\n      }));\n    }\n  }, [\n    replayState.isActive,\n    replayState.currentEventIndex,\n    replayState.events.length,\n    processEventsUpToIndex,\n    setReplayState,\n  ]);\n\n  /**\n   * 取消自动播放倒计时\n   */\n  const cancelAutoPlay = useCallback(() => {\n    setReplayState((prev) => ({\n      ...prev,\n      autoPlayCountdown: null,\n    }));\n  }, [setReplayState]);\n\n  // 添加对自动播放事件的监听\n  useEffect(() => {\n    const handleAutoStart = () => {\n      console.log('Auto-play event received, starting replay...');\n      startReplay();\n    };\n\n    // 添加事件监听器\n    window.addEventListener('replay-autostart', handleAutoStart);\n\n    // 清理函数\n    return () => {\n      window.removeEventListener('replay-autostart', handleAutoStart);\n    };\n  }, [startReplay]); // 依赖于startReplay函数\n\n  return {\n    // 状态\n    replayState,\n\n    // 操作方法\n    startReplay,\n    pauseReplay,\n    jumpToPosition,\n    jumpToResult,\n    setPlaybackSpeed,\n    exitReplay,\n    cancelAutoPlay,\n    resetReplay,\n\n    // 工具方法\n    getCurrentEvents,\n    getCurrentPosition,\n    getCurrentEvent,\n  };\n}\n","import React, { createContext, useContext, ReactNode, useEffect } from 'react';\nimport { atom, useAtom, useAtomValue, useSetAtom } from 'jotai';\nimport { replayStateAtom } from '../state/atoms/replay';\nimport { activeSessionIdAtom, sessionsAtom } from '../state/atoms/session';\nimport { messagesAtom } from '../state/atoms/message';\nimport { connectionStatusAtom, modelInfoAtom } from '../state/atoms/ui';\nimport { setModelInfoAction } from '../state/actions/modelInfoAction';\n\n/**\n * ReplayModeContext - Global context for sharing replay mode state\n *\n * This context provides a centralized way to check if the application\n * is currently in replay mode, allowing components to adapt their behavior\n * without needing to directly access the replay state atom.\n */\ninterface ReplayModeContextType {\n  isReplayMode: boolean;\n  modelInfo: { provider: string; model: string } | null;\n}\n\nconst ReplayModeContext = createContext<ReplayModeContextType>({\n  isReplayMode: false,\n  modelInfo: null,\n});\n\n/**\n * ReplayModeProvider - Provides replay mode state to the application and initializes replay data\n *\n * 1. Detects replay mode from window variables\n * 2. Initializes application state with replay data when in replay mode\n * 3. Prevents server communication in replay mode\n * 4. Provides the replay mode status to all child components\n */\nexport const ReplayModeProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  // Access necessary atoms\n  const [replayState, setReplayState] = useAtom(replayStateAtom);\n  const [, setMessages] = useAtom(messagesAtom);\n  const [, setSessions] = useAtom(sessionsAtom);\n  const [, setActiveSessionId] = useAtom(activeSessionIdAtom);\n  const [, setConnectionStatus] = useAtom(connectionStatusAtom);\n  const modelInfo = useAtomValue(modelInfoAtom);\n  const setModelInfo = useSetAtom(setModelInfoAction);\n\n  // Initialize replay mode if window variables are present\n  useEffect(() => {\n    // Check if in replay mode\n    if (window.AGENT_TARS_REPLAY_MODE && window.AGENT_TARS_EVENT_STREAM) {\n      // Get session data and event stream\n      const sessionData = window.AGENT_TARS_SESSION_DATA;\n      const events = window.AGENT_TARS_EVENT_STREAM;\n      const modelData = window.AGENT_TARS_MODEL_INFO;\n\n      console.log('[ReplayMode] Initializing replay mode with', events.length, 'events');\n\n      if (sessionData && sessionData.id) {\n        // Set connection status to \"offline\" to prevent health checks\n        setConnectionStatus({\n          connected: false, // Mark as disconnected to prevent API calls\n          lastConnected: null,\n          lastError: null,\n          reconnecting: false,\n        });\n\n        // Set model info if available using the action\n        if (modelData) {\n          setModelInfo(modelData);\n          console.log('[ReplayMode] Model info loaded:', modelData);\n        }\n\n        // Set sessions data\n        setSessions([sessionData]);\n\n        // When in replay mode, the session ID must be set immediately\n        setActiveSessionId(sessionData.id);\n\n        // Add debug logging\n        console.log('[ReplayMode] Active session set to:', sessionData.id);\n\n        // Initialize replay state with autoPlayCountdown\n        setReplayState({\n          isActive: true,\n          isPaused: true, // 始终从暂停状态开始\n          events: events,\n          currentEventIndex: -1,\n          startTimestamp: events.length > 0 ? events[0].timestamp : null,\n          endTimestamp: events.length > 0 ? events[events.length - 1].timestamp : null,\n          playbackSpeed: 1,\n          autoPlayCountdown: 2, // 设置2秒倒计时\n          visibleTimeWindow:\n            events.length > 0\n              ? {\n                  start: events[0].timestamp,\n                  end: events[events.length - 1].timestamp,\n                }\n              : null,\n          processedEvents: {},\n        });\n\n        // Initialize empty messages state\n        setMessages({\n          [sessionData.id]: [],\n        });\n\n        console.log('[ReplayMode] Replay mode initialized successfully');\n\n        // 启动倒计时\n        const countdownTimer = setInterval(() => {\n          setReplayState((prev) => {\n            // 如果倒计时结束或已被取消\n            if (prev.autoPlayCountdown === null || prev.autoPlayCountdown <= 0) {\n              clearInterval(countdownTimer);\n\n              // 只在倒计时完成时准备开始播放，但不直接改变isPaused状态\n              // 这样将由useReplay中的startReplay函数正确启动播放过程\n              if (prev.autoPlayCountdown === 0) {\n                // 设置一个延迟启动标记，在下一个useEffect中捕获并启动播放\n                setTimeout(() => {\n                  console.log('[ReplayMode] Auto-play countdown finished, starting replay...');\n                  // 触发一个事件通知播放开始\n                  window.dispatchEvent(new CustomEvent('replay-autostart'));\n                }, 0);\n              }\n\n              return {\n                ...prev,\n                autoPlayCountdown: null, // 只清除倒计时，不改变播放状态\n              };\n            }\n\n            // 继续倒计时\n            return {\n              ...prev,\n              autoPlayCountdown: prev.autoPlayCountdown - 1,\n            };\n          });\n        }, 1000);\n      } else {\n        console.error('[ReplayMode] Missing session data or session ID');\n      }\n    }\n  }, [\n    setMessages,\n    setSessions,\n    setActiveSessionId,\n    setReplayState,\n    setConnectionStatus,\n    setModelInfo,\n  ]);\n\n  // Check both the atom and global window variable for replay mode\n  const isReplayMode = replayState.isActive || !!window.AGENT_TARS_REPLAY_MODE;\n\n  return (\n    <ReplayModeContext.Provider\n      value={{\n        isReplayMode,\n        modelInfo: isReplayMode ? modelInfo : null,\n      }}\n    >\n      {children}\n    </ReplayModeContext.Provider>\n  );\n};\n\n/**\n * useReplayMode - Hook to access replay mode state\n */\nexport const useReplayMode = (): boolean => {\n  const { isReplayMode } = useContext(ReplayModeContext);\n  return isReplayMode;\n};\n\n/**\n * useReplayModelInfo - Hook to access model info in replay mode\n */\nexport const useReplayModelInfo = (): { provider: string; model: string } | null => {\n  const { modelInfo } = useContext(ReplayModeContext);\n  return modelInfo;\n};\n","import { useAtom, useAtomValue, useSetAtom } from 'jotai';\nimport { useLocation } from 'react-router-dom';\nimport { sessionsAtom, activeSessionIdAtom } from '../state/atoms/session';\nimport { messagesAtom, groupedMessagesAtom } from '../state/atoms/message';\nimport { toolResultsAtom } from '../state/atoms/tool';\nimport { plansAtom, planUIStateAtom } from '../state/atoms/plan';\nimport {\n  isProcessingAtom,\n  activePanelContentAtom,\n  connectionStatusAtom,\n  modelInfoAtom,\n} from '../state/atoms/ui';\nimport { replayStateAtom } from '../state/atoms/replay';\nimport {\n  loadSessionsAction,\n  createSessionAction,\n  setActiveSessionAction,\n  updateSessionAction,\n  deleteSessionAction,\n  sendMessageAction,\n  abortQueryAction,\n  checkSessionStatusAction,\n} from '../state/actions/sessionActions';\nimport {\n  initConnectionMonitoringAction,\n  checkConnectionStatusAction,\n} from '../state/actions/connectionActions';\nimport { fetchModelInfoAction, setModelInfoAction } from '../state/actions/modelInfoAction';\nimport { socketService } from '../services/socketService';\n\nimport { useEffect, useCallback, useMemo } from 'react';\nimport { useReplayMode, useReplayModelInfo } from '../hooks/useReplayMode';\n\n/**\n * Hook for session management functionality\n */\nexport function useSession() {\n  // State\n  const [sessions, setSessions] = useAtom(sessionsAtom);\n  const [activeSessionId, setActiveSessionId] = useAtom(activeSessionIdAtom);\n  const messages = useAtomValue(messagesAtom);\n  const groupedMessages = useAtomValue(groupedMessagesAtom);\n  const toolResults = useAtomValue(toolResultsAtom);\n  const [isProcessing, setIsProcessing] = useAtom(isProcessingAtom);\n  const [activePanelContent, setActivePanelContent] = useAtom(activePanelContentAtom);\n  const [connectionStatus, setConnectionStatus] = useAtom(connectionStatusAtom);\n  const [plans, setPlans] = useAtom(plansAtom);\n  const setPlanUIState = useSetAtom(planUIStateAtom);\n  const [replayState, setReplayState] = useAtom(replayStateAtom);\n  const modelInfo = useAtomValue(modelInfoAtom);\n\n  // Check if we're in replay mode using the context hook\n  const isReplayMode = useReplayMode();\n  // 获取回放模式下的模型信息\n  const replayModelInfo = useReplayModelInfo();\n\n  // Actions\n  const loadSessions = useSetAtom(loadSessionsAction);\n  const createSession = useSetAtom(createSessionAction);\n  const setActiveSession = useSetAtom(setActiveSessionAction);\n  const updateSessionMetadata = useSetAtom(updateSessionAction);\n  const deleteSession = useSetAtom(deleteSessionAction);\n  const sendMessage = useSetAtom(sendMessageAction);\n  const abortQuery = useSetAtom(abortQueryAction);\n  const initConnectionMonitoring = useSetAtom(initConnectionMonitoringAction);\n  const checkServerStatus = useSetAtom(checkConnectionStatusAction);\n  const checkSessionStatus = useSetAtom(checkSessionStatusAction);\n  const fetchModelInfo = useSetAtom(fetchModelInfoAction);\n  const setModelInfo = useSetAtom(setModelInfoAction);\n\n  // Get current location\n  const location = useLocation();\n\n  // 保留这个工具函数，但移除自动同步逻辑\n  const getSessionIdFromUrl = useCallback(() => {\n    const pathParts = location.pathname.split('/').filter(Boolean);\n    return pathParts.length > 0 ? pathParts[0] : null;\n  }, [location]);\n\n  // Periodic status checking for active session - 在回放模式下不检查状态\n  useEffect(() => {\n    if (!activeSessionId || !connectionStatus.connected || isReplayMode) return;\n\n    // Initial status check when session becomes active\n    checkSessionStatus(activeSessionId);\n  }, [activeSessionId, connectionStatus.connected, checkSessionStatus, isReplayMode]);\n\n  // Enhanced socket handler for session status sync - 在回放模式下不更新状态\n  const handleSessionStatusUpdate = useCallback(\n    (status: any) => {\n      if (status && typeof status.isProcessing === 'boolean' && !isReplayMode) {\n        setIsProcessing(status.isProcessing);\n      }\n    },\n    [setIsProcessing, isReplayMode],\n  );\n\n  // Set up socket event handlers when active session changes - 在回放模式下不设置socket事件处理\n  useEffect(() => {\n    if (!activeSessionId || !socketService.isConnected() || isReplayMode) return;\n\n    // Join session and listen for status updates\n    socketService.joinSession(\n      activeSessionId,\n      () => {\n        /* existing event handling */\n      },\n      handleSessionStatusUpdate,\n    );\n\n    // Register global status handler\n    socketService.on('agent-status', handleSessionStatusUpdate);\n\n    return () => {\n      // Clean up handlers\n      socketService.off('agent-status', handleSessionStatusUpdate);\n    };\n  }, [activeSessionId, handleSessionStatusUpdate, isReplayMode]);\n\n  // Auto-show plan when it's first created - 在回放模式下不自动显示计划\n  useEffect(() => {\n    if (activeSessionId && plans[activeSessionId]?.hasGeneratedPlan && !isReplayMode) {\n      const currentPlan = plans[activeSessionId];\n\n      // If this is a newly generated plan, automatically show it\n      if (currentPlan.steps.length > 0 && currentPlan.steps.every((step) => !step.done)) {\n        setPlanUIState((prev) => ({\n          ...prev,\n          isVisible: true,\n        }));\n      }\n    }\n  }, [activeSessionId, plans, setPlanUIState, isReplayMode]);\n\n  // 添加获取模型信息的效果\n  useEffect(() => {\n    // 在回放模式下使用回放模式的模型信息\n    if (isReplayMode && replayModelInfo) {\n      setModelInfo(replayModelInfo);\n      return;\n    }\n\n    // 在回放模式或未连接时不获取模型信息\n    if (isReplayMode || !connectionStatus.connected) return;\n\n    // 使用新的 action 获取模型信息\n    fetchModelInfo();\n  }, [connectionStatus.connected, isReplayMode, replayModelInfo, fetchModelInfo, setModelInfo]);\n\n  // Memoize the session state object to avoid unnecessary re-renders\n  const sessionState = useMemo(\n    () => ({\n      // State\n      sessions,\n      activeSessionId,\n      messages,\n      groupedMessages,\n      toolResults,\n      isProcessing,\n      activePanelContent,\n      connectionStatus,\n      plans,\n      replayState,\n      modelInfo, // Now from atom\n\n      // Session operations\n      loadSessions,\n      createSession,\n      setActiveSession,\n      updateSessionMetadata,\n      deleteSession,\n\n      // Message operations\n      sendMessage,\n      abortQuery,\n\n      // UI operations\n      setActivePanelContent,\n\n      // Connection operations\n      initConnectionMonitoring,\n      checkServerStatus,\n\n      // Status operations\n      checkSessionStatus,\n      getSessionIdFromUrl,\n    }),\n    [\n      sessions,\n      activeSessionId,\n      messages,\n      groupedMessages,\n      toolResults,\n      isProcessing,\n      activePanelContent,\n      connectionStatus,\n      plans,\n      replayState,\n      modelInfo,\n      loadSessions,\n      createSession,\n      setActiveSession,\n      updateSessionMetadata,\n      deleteSession,\n      sendMessage,\n      abortQuery,\n      setActivePanelContent,\n      initConnectionMonitoring,\n      checkServerStatus,\n      checkSessionStatus,\n      getSessionIdFromUrl,\n    ],\n  );\n\n  return sessionState;\n}","import { toolCallResultMap } from '../state/atoms/tool';\nimport { ToolResult } from '@/common/types';\nimport { TOOL_TYPES } from '@/common/constants';\nimport {\n  FiSearch,\n  FiMonitor,\n  FiTerminal,\n  FiFile,\n  FiImage,\n  FiCpu,\n  FiBookOpen,\n} from 'react-icons/fi';\n\n/**\n * Hook for tool-related functionality\n */\nexport function useTool() {\n  /**\n   * Get a tool result by its tool call ID\n   */\n  const getToolResultForCall = (toolCallId: string): ToolResult | undefined => {\n    return toolCallResultMap.get(toolCallId);\n  };\n\n  /**\n   * Get the appropriate icon for a tool type with enhanced styling\n   */\n  const getToolIcon = (type: string) => {\n    // 特殊处理 final_answer 工具，使用更友好的图标和名称\n    if (type === 'final_answer') {\n      return (\n        <div className=\"relative\">\n          <div className=\"absolute inset-0 bg-gradient-to-br from-accent-400 to-accent-500 rounded-full opacity-20\"></div>\n          <FiBookOpen className=\"relative z-10 text-accent-600 dark:text-accent-400\" />\n        </div>\n      );\n    }\n\n    switch (type) {\n      case TOOL_TYPES.SEARCH:\n        return (\n          <div className=\"relative\">\n            <div className=\"absolute inset-0 bg-gradient-to-br from-blue-400 to-indigo-500 rounded-full opacity-20\"></div>\n            <FiSearch className=\"relative z-10 text-blue-600 dark:text-blue-400\" />\n          </div>\n        );\n      case TOOL_TYPES.BROWSER:\n        return (\n          <div className=\"relative\">\n            <div className=\"absolute inset-0 bg-gradient-to-br from-purple-400 to-pink-500 rounded-full opacity-20\"></div>\n            <FiMonitor className=\"relative z-10 text-purple-600 dark:text-purple-400\" />\n          </div>\n        );\n      case TOOL_TYPES.COMMAND:\n        return (\n          <div className=\"relative\">\n            <div className=\"absolute inset-0 bg-gradient-to-br from-green-400 to-emerald-500 rounded-full opacity-20\"></div>\n            <FiTerminal className=\"relative z-10 text-green-600 dark:text-green-400\" />\n          </div>\n        );\n      case TOOL_TYPES.FILE:\n        return (\n          <div className=\"relative\">\n            <div className=\"absolute inset-0 bg-gradient-to-br from-yellow-400 to-amber-500 rounded-full opacity-20\"></div>\n            <FiFile className=\"relative z-10 text-yellow-600 dark:text-yellow-400\" />\n          </div>\n        );\n      case TOOL_TYPES.IMAGE:\n        return (\n          <div className=\"relative\">\n            <div className=\"absolute inset-0 bg-gradient-to-br from-red-400 to-rose-500 rounded-full opacity-20\"></div>\n            <FiImage className=\"relative z-10 text-red-600 dark:text-red-400\" />\n          </div>\n        );\n      case TOOL_TYPES.BROWSER_CONTROL:\n        return (\n          <div className=\"relative\">\n            <div className=\"absolute inset-0 bg-gradient-to-br from-cyan-400 to-teal-500 rounded-full opacity-20\"></div>\n            <FiCpu className=\"relative z-10 text-cyan-600 dark:text-cyan-400\" />\n          </div>\n        );\n      default:\n        return (\n          <div className=\"relative\">\n            <div className=\"absolute inset-0 bg-gradient-to-br from-gray-400 to-gray-500 rounded-full opacity-20\"></div>\n            <FiFile className=\"relative z-10 text-gray-600 dark:text-gray-400\" />\n          </div>\n        );\n    }\n  };\n\n  return {\n    getToolResultForCall,\n    getToolIcon,\n  };\n}\n","import { API_BASE_URL, API_ENDPOINTS } from '@/common/constants';\nimport { AgentEventStream, SessionMetadata } from '@/common/types';\nimport { socketService } from './socketService';\nimport { ChatCompletionContentPart } from '@multimodal/agent-interface';\n\n/**\n * API Service - Handles HTTP requests to the Agent TARS Server\n *\n * Provides methods for:\n * - Session management (create, get, update, delete)\n * - Query execution (streaming and non-streaming)\n * - Server health checks\n */\nclass ApiService {\n  /**\n   * Check server health status\n   */\n  async checkServerHealth(): Promise<boolean> {\n    try {\n      // Try ping through socket if connected\n      if (socketService.isConnected()) {\n        const pingSuccessful = await socketService.ping();\n        if (pingSuccessful) return true;\n      }\n\n      // Fall back to API health endpoint\n      const response = await fetch(`${API_BASE_URL}${API_ENDPOINTS.HEALTH}`, {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' },\n        signal: AbortSignal.timeout(3000),\n      });\n\n      return response.ok;\n    } catch (error) {\n      console.error('Error checking server health:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Create a new session\n   */\n  async createSession(): Promise<SessionMetadata> {\n    try {\n      const response = await fetch(`${API_BASE_URL}${API_ENDPOINTS.CREATE_SESSION}`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to create session: ${response.statusText}`);\n      }\n\n      const { sessionId } = await response.json();\n      return this.getSessionDetails(sessionId);\n    } catch (error) {\n      console.error('Error creating session:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get all sessions\n   */\n  async getSessions(): Promise<SessionMetadata[]> {\n    try {\n      const response = await fetch(`${API_BASE_URL}${API_ENDPOINTS.SESSIONS}`, {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' },\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to get sessions: ${response.statusText}`);\n      }\n\n      const { sessions } = await response.json();\n      return sessions;\n    } catch (error) {\n      console.error('Error getting sessions:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get details for a specific session\n   */\n  async getSessionDetails(sessionId: string): Promise<SessionMetadata> {\n    try {\n      const response = await fetch(\n        `${API_BASE_URL}${API_ENDPOINTS.SESSION_DETAILS}?sessionId=${sessionId}`,\n        {\n          method: 'GET',\n          headers: { 'Content-Type': 'application/json' },\n          signal: AbortSignal.timeout(5000), // 添加 5 秒超时\n        },\n      );\n\n      if (!response.ok) {\n        throw new Error(`Failed to get session details: ${response.statusText}`);\n      }\n\n      const { session } = await response.json();\n      return session;\n    } catch (error) {\n      console.error(`Error getting session details (${sessionId}):`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get events for a specific session\n   */\n  async getSessionEvents(sessionId: string): Promise<AgentEventStream.Event[]> {\n    try {\n      const response = await fetch(\n        `${API_BASE_URL}${API_ENDPOINTS.SESSION_EVENTS}?sessionId=${sessionId}`,\n        {\n          method: 'GET',\n          headers: { 'Content-Type': 'application/json' },\n          signal: AbortSignal.timeout(5000), // 添加 5 秒超时\n        },\n      );\n\n      if (!response.ok) {\n        throw new Error(`Failed to get session events: ${response.statusText}`);\n      }\n\n      const { events } = await response.json();\n      return events;\n    } catch (error) {\n      console.error(`Error getting session events (${sessionId}):`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get current status of a session\n   */\n  async getSessionStatus(sessionId: string): Promise<{ isProcessing: boolean; state: string }> {\n    try {\n      const response = await fetch(\n        `${API_BASE_URL}${API_ENDPOINTS.SESSION_STATUS}?sessionId=${sessionId}`,\n        {\n          method: 'GET',\n          headers: { 'Content-Type': 'application/json' },\n          signal: AbortSignal.timeout(3000), // 3 second timeout\n        },\n      );\n\n      if (!response.ok) {\n        throw new Error(`Failed to get session status: ${response.statusText}`);\n      }\n\n      const { status } = await response.json();\n      return status;\n    } catch (error) {\n      console.error(`Error getting session status (${sessionId}):`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Update session metadata\n   */\n  async updateSessionMetadata(\n    sessionId: string,\n    updates: { name?: string; tags?: string[] },\n  ): Promise<SessionMetadata> {\n    try {\n      const response = await fetch(`${API_BASE_URL}${API_ENDPOINTS.UPDATE_SESSION}`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ sessionId, ...updates }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to update session: ${response.statusText}`);\n      }\n\n      const { session } = await response.json();\n      return session;\n    } catch (error) {\n      console.error(`Error updating session (${sessionId}):`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Delete a session\n   */\n  async deleteSession(sessionId: string): Promise<boolean> {\n    try {\n      const response = await fetch(`${API_BASE_URL}${API_ENDPOINTS.DELETE_SESSION}`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ sessionId }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to delete session: ${response.statusText}`);\n      }\n\n      const { success } = await response.json();\n      return success;\n    } catch (error) {\n      console.error(`Error deleting session (${sessionId}):`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Send a streaming query\n   */\n  async sendStreamingQuery(\n    sessionId: string,\n    query: string | ChatCompletionContentPart[],\n    onEvent: (event: AgentEventStream.Event) => void,\n  ): Promise<void> {\n    try {\n      const response = await fetch(`${API_BASE_URL}${API_ENDPOINTS.QUERY_STREAM}`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ sessionId, query }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to send query: ${response.statusText}`);\n      }\n\n      const reader = response.body?.getReader();\n      if (!reader) {\n        throw new Error('ReadableStream not supported');\n      }\n\n      const decoder = new TextDecoder();\n      let buffer = '';\n\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) break;\n\n        // Add the new chunk to the buffer\n        buffer += decoder.decode(value, { stream: true });\n\n        // Process all complete events in the buffer\n        let eventEndIndex;\n        while ((eventEndIndex = buffer.indexOf('\\n\\n')) !== -1) {\n          const eventString = buffer.slice(0, eventEndIndex);\n          // Move buffer to the next event\n          buffer = buffer.slice(eventEndIndex + 2);\n\n          if (eventString.startsWith('data: ')) {\n            try {\n              const eventData = JSON.parse(eventString.substring(6));\n              onEvent(eventData);\n            } catch (e) {\n              console.error('Error parsing event data:', e);\n            }\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Error in streaming query:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Send a non-streaming query\n   */\n  async sendQuery(sessionId: string, query: string | ChatCompletionContentPart[]): Promise<string> {\n    try {\n      const response = await fetch(`${API_BASE_URL}${API_ENDPOINTS.QUERY}`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ sessionId, query }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to send query: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      return data.result;\n    } catch (error) {\n      console.error('Error sending query:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Abort a running query\n   */\n  async abortQuery(sessionId: string): Promise<boolean> {\n    try {\n      const response = await fetch(`${API_BASE_URL}${API_ENDPOINTS.ABORT}`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ sessionId }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to abort query: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      return data.success;\n    } catch (error) {\n      console.error('Error aborting query:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Generate a summary for a conversation\n   */\n  async generateSummary(sessionId: string, messages: any[]): Promise<string> {\n    try {\n      const response = await fetch(`${API_BASE_URL}${API_ENDPOINTS.GENERATE_SUMMARY}`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ sessionId, messages }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to generate summary: ${response.statusText}`);\n      }\n\n      const { summary } = await response.json();\n      return summary;\n    } catch (error) {\n      console.error('Error generating summary:', error);\n      return 'Untitled Conversation';\n    }\n  }\n\n  /**\n   * Get browser control information for a session\n   */\n  async getBrowserControlInfo(sessionId: string): Promise<{ mode: string; tools: string[] }> {\n    try {\n      const response = await fetch(\n        `${API_BASE_URL}/api/sessions/browser-control?sessionId=${sessionId}`,\n        {\n          method: 'GET',\n          headers: { 'Content-Type': 'application/json' },\n          signal: AbortSignal.timeout(3000),\n        },\n      );\n\n      if (!response.ok) {\n        throw new Error(`Failed to get browser control info: ${response.statusText}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error(`Error getting browser control info (${sessionId}):`, error);\n      // 返回默认值作为回退\n      return { mode: 'default', tools: [] };\n    }\n  }\n\n  /**\n   * Get model information from the server\n   * @returns Model provider and model name information\n   */\n  async getModelInfo(): Promise<{ provider: string; model: string }> {\n    try {\n      const response = await fetch(`${API_BASE_URL}${API_ENDPOINTS.MODEL_INFO}`, {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' },\n        signal: AbortSignal.timeout(3000), // 3 second timeout\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to get model info: ${response.statusText}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error getting model info:', error);\n      // Return default values in case of error\n      return { provider: 'Unknown Provider', model: 'Unknown Model' };\n    }\n  }\n}\n\n// Export singleton instance\nexport const apiService = new ApiService();\n","import { io, Socket } from 'socket.io-client';\nimport { API_BASE_URL, SOCKET_EVENTS, CONNECTION_SETTINGS } from '@/common/constants';\nimport { AgentEventStream } from '@/common/types';\n\n/**\n * Socket Service - Manages WebSocket connection with server\n */\nclass SocketService {\n  private socket: Socket | null = null;\n  private heartbeatTimer: NodeJS.Timeout | null = null;\n  private missedHeartbeats = 0;\n  private reconnectAttempts = 0;\n  private eventHandlers: Record<string, Array<(...args: any[]) => void>> = {};\n\n  /**\n   * Connect to the WebSocket server\n   */\n  connect(): Socket | null {\n    if (this.socket?.connected) {\n      return this.socket;\n    }\n\n    this.socket = io(API_BASE_URL, {\n      reconnection: true,\n      reconnectionDelay: CONNECTION_SETTINGS.RECONNECTION_DELAY,\n      reconnectionDelayMax: CONNECTION_SETTINGS.RECONNECTION_DELAY_MAX,\n      reconnectionAttempts: CONNECTION_SETTINGS.MAX_RECONNECT_ATTEMPTS,\n    });\n\n    // Set up core event handlers\n    this.setupEventHandlers();\n\n    return this.socket;\n  }\n\n  /**\n   * Disconnect from the WebSocket server\n   */\n  disconnect(): void {\n    this.stopHeartbeat();\n\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n    }\n\n    this.missedHeartbeats = 0;\n    this.reconnectAttempts = 0;\n  }\n\n  /**\n   * Check if currently connected to the server\n   */\n  isConnected(): boolean {\n    return this.socket?.connected || false;\n  }\n\n  /**\n   * Join a specific session to receive its events\n   */\n  joinSession(\n    sessionId: string,\n    onEvent: (event: AgentEventStream.Event) => void,\n    onStatusUpdate: (status: any) => void,\n  ): void {\n    if (!this.socket) {\n      this.connect();\n    }\n\n    if (!this.socket) return;\n\n    console.log(`Joining session: ${sessionId}`);\n    this.socket.emit(SOCKET_EVENTS.JOIN_SESSION, sessionId);\n\n    // 清理现有监听器\n    this.socket.off(SOCKET_EVENTS.AGENT_EVENT);\n    this.socket.off(SOCKET_EVENTS.AGENT_STATUS);\n\n    // 设置事件监听器\n    this.socket.on(SOCKET_EVENTS.AGENT_EVENT, ({ type, data }) => {\n      if (data) {\n        onEvent(data);\n      }\n    });\n\n    // 增强状态更新处理\n    this.socket.on(SOCKET_EVENTS.AGENT_STATUS, (status) => {\n      console.log('Received agent status:', status);\n      onStatusUpdate(status);\n\n      // 触发全局事件以同步应用中的所有组件\n      this.notifyEventHandlers(SOCKET_EVENTS.AGENT_STATUS, status);\n    });\n\n    // 立即请求当前状态\n    this.socket.emit('request-status', { sessionId });\n  }\n\n  /**\n   * Send a query to the server\n   */\n  sendQuery(params: { sessionId: string; query: string }): void {\n    if (!this.socket?.connected) {\n      throw new Error('Socket not connected');\n    }\n\n    this.socket.emit(SOCKET_EVENTS.SEND_QUERY, params);\n  }\n\n  /**\n   * Abort the current query\n   */\n  abortQuery(params: { sessionId: string }): void {\n    if (!this.socket?.connected) {\n      throw new Error('Socket not connected');\n    }\n\n    this.socket.emit(SOCKET_EVENTS.ABORT_QUERY, params);\n  }\n\n  /**\n   * Add an event listener\n   */\n  on(event: string, callback: (...args: any[]) => void): void {\n    if (!this.eventHandlers[event]) {\n      this.eventHandlers[event] = [];\n    }\n\n    this.eventHandlers[event].push(callback);\n\n    // If we already have a socket, add the listener directly\n    if (this.socket) {\n      this.socket.on(event, callback);\n    }\n  }\n\n  /**\n   * Remove an event listener\n   */\n  off(event: string, callback: (...args: any[]) => void): void {\n    if (this.eventHandlers[event]) {\n      this.eventHandlers[event] = this.eventHandlers[event].filter((cb) => cb !== callback);\n    }\n\n    if (this.socket) {\n      this.socket.off(event, callback);\n    }\n  }\n\n  /**\n   * Send a ping to check server connectivity\n   */\n  ping(): Promise<boolean> {\n    return new Promise((resolve) => {\n      if (!this.socket || !this.socket.connected) {\n        resolve(false);\n        return;\n      }\n\n      const timeout = setTimeout(() => {\n        resolve(false);\n      }, 5000);\n\n      this.socket.emit(SOCKET_EVENTS.PING, () => {\n        clearTimeout(timeout);\n        resolve(true);\n      });\n    });\n  }\n\n  /**\n   * Get the socket instance\n   */\n  getSocket(): Socket | null {\n    return this.socket;\n  }\n\n  /**\n   * Set up event handlers for the socket connection\n   */\n  private setupEventHandlers(): void {\n    if (!this.socket) return;\n\n    this.socket.on(SOCKET_EVENTS.CONNECT, this.handleConnect);\n    this.socket.on(SOCKET_EVENTS.DISCONNECT, this.handleDisconnect);\n    this.socket.on(SOCKET_EVENTS.ERROR, this.handleError);\n    this.socket.on(SOCKET_EVENTS.RECONNECT_ATTEMPT, this.handleReconnectAttempt);\n    this.socket.on(SOCKET_EVENTS.RECONNECT_FAILED, this.handleReconnectFailed);\n\n    // Apply any event handlers that were registered before connecting\n    Object.entries(this.eventHandlers).forEach(([event, handlers]) => {\n      handlers.forEach((handler) => {\n        this.socket?.on(event, handler);\n      });\n    });\n  }\n\n  /**\n   * Handle successful connection\n   */\n  private handleConnect = (): void => {\n    console.log('Connected to server');\n    this.missedHeartbeats = 0;\n    this.reconnectAttempts = 0;\n    this.startHeartbeat();\n\n    // Notify event handlers\n    this.notifyEventHandlers(SOCKET_EVENTS.CONNECT);\n  };\n\n  /**\n   * Handle disconnection\n   */\n  private handleDisconnect = (reason: string): void => {\n    console.log('Disconnected from server:', reason);\n    this.stopHeartbeat();\n\n    // Notify event handlers\n    this.notifyEventHandlers(SOCKET_EVENTS.DISCONNECT, reason);\n  };\n\n  /**\n   * Handle connection errors\n   */\n  private handleError = (error: any): void => {\n    console.error('Socket error:', error);\n\n    // Notify event handlers\n    this.notifyEventHandlers(SOCKET_EVENTS.ERROR, error);\n  };\n\n  /**\n   * Handle reconnection attempts\n   */\n  private handleReconnectAttempt = (): void => {\n    this.reconnectAttempts++;\n    console.log(\n      `Reconnection attempt ${this.reconnectAttempts}/${CONNECTION_SETTINGS.MAX_RECONNECT_ATTEMPTS}`,\n    );\n\n    // Notify event handlers\n    this.notifyEventHandlers(SOCKET_EVENTS.RECONNECT_ATTEMPT, this.reconnectAttempts);\n  };\n\n  /**\n   * Handle failed reconnection\n   */\n  private handleReconnectFailed = (): void => {\n    console.log('Failed to reconnect after multiple attempts');\n\n    // Notify event handlers\n    this.notifyEventHandlers(SOCKET_EVENTS.RECONNECT_FAILED);\n  };\n\n  /**\n   * Start heartbeat monitoring\n   */\n  private startHeartbeat(): void {\n    this.stopHeartbeat();\n    this.missedHeartbeats = 0;\n\n    this.heartbeatTimer = setInterval(() => {\n      this.sendHeartbeat();\n    }, CONNECTION_SETTINGS.HEARTBEAT_INTERVAL);\n  }\n\n  /**\n   * Stop heartbeat monitoring\n   */\n  private stopHeartbeat(): void {\n    if (this.heartbeatTimer) {\n      clearInterval(this.heartbeatTimer);\n      this.heartbeatTimer = null;\n    }\n  }\n\n  /**\n   * Send heartbeat to server and track response\n   */\n  private sendHeartbeat(): void {\n    if (!this.socket || !this.socket.connected) {\n      this.missedHeartbeats++;\n\n      if (this.missedHeartbeats >= CONNECTION_SETTINGS.MAX_MISSED_HEARTBEATS) {\n        console.warn(`Missed ${this.missedHeartbeats} heartbeats, connection may be down`);\n        this.socket?.disconnect();\n      }\n      return;\n    }\n\n    this.socket.emit(SOCKET_EVENTS.PING, () => {\n      this.missedHeartbeats = 0;\n    });\n\n    // Increment counter - will be reset when we get a response\n    this.missedHeartbeats++;\n\n    if (this.missedHeartbeats >= CONNECTION_SETTINGS.MAX_MISSED_HEARTBEATS) {\n      console.warn(`Missed ${this.missedHeartbeats} heartbeats, connection may be down`);\n      this.socket.disconnect();\n    }\n  }\n\n  /**\n   * Notify all registered event handlers for a specific event\n   */\n  private notifyEventHandlers(event: string, ...args: any[]): void {\n    if (this.eventHandlers[event]) {\n      this.eventHandlers[event].forEach((handler) => {\n        try {\n          handler(...args);\n        } catch (error) {\n          console.error(`Error in ${event} event handler:`, error);\n        }\n      });\n    }\n  }\n}\n\n// Export singleton instance\nexport const socketService = new SocketService();\n","import { atom } from 'jotai';\nimport { SOCKET_EVENTS } from '@/common/constants';\nimport { apiService } from '../../services/apiService';\nimport { socketService } from '../../services/socketService';\nimport { connectionStatusAtom } from '../atoms/ui';\n\n/**\n * Check server connection status\n */\nexport const checkConnectionStatusAction = atom(null, async (get, set) => {\n  const currentStatus = get(connectionStatusAtom);\n\n  try {\n    const isConnected = await apiService.checkServerHealth();\n\n    set(connectionStatusAtom, {\n      ...currentStatus,\n      connected: isConnected,\n      lastConnected: isConnected ? Date.now() : currentStatus.lastConnected,\n      lastError: isConnected ? null : currentStatus.lastError,\n    });\n\n    return isConnected;\n  } catch (error) {\n    set(connectionStatusAtom, {\n      ...currentStatus,\n      connected: false,\n      lastError: error instanceof Error ? error.message : String(error),\n    });\n\n    return false;\n  }\n});\n\n/**\n * Initialize connection monitoring\n */\nexport const initConnectionMonitoringAction = atom(null, (get, set) => {\n  // Perform initial check\n  set(checkConnectionStatusAction);\n\n  // Set up socket event listeners\n  socketService.on(SOCKET_EVENTS.CONNECT, () => {\n    set(connectionStatusAtom, (prev) => ({\n      ...prev,\n      connected: true,\n      lastConnected: Date.now(),\n      lastError: null,\n      reconnecting: false,\n    }));\n  });\n\n  socketService.on(SOCKET_EVENTS.DISCONNECT, (reason) => {\n    set(connectionStatusAtom, (prev) => ({\n      ...prev,\n      connected: false,\n      lastError: `Disconnected: ${reason}`,\n      reconnecting: true,\n    }));\n  });\n\n  socketService.on(SOCKET_EVENTS.RECONNECT_ATTEMPT, () => {\n    set(connectionStatusAtom, (prev) => ({\n      ...prev,\n      reconnecting: true,\n    }));\n  });\n\n  socketService.on(SOCKET_EVENTS.RECONNECT_FAILED, () => {\n    set(connectionStatusAtom, (prev) => ({\n      ...prev,\n      connected: false,\n      reconnecting: false,\n      lastError: 'Failed to reconnect after multiple attempts',\n    }));\n  });\n\n  // Set up periodic health checks\n  const intervalId = setInterval(() => {\n    set(checkConnectionStatusAction);\n  }, 30000); // Check every 30 seconds\n\n  // Return cleanup function\n  return () => {\n    clearInterval(intervalId);\n    socketService.off(SOCKET_EVENTS.CONNECT, () => {});\n    socketService.off(SOCKET_EVENTS.DISCONNECT, () => {});\n    socketService.off(SOCKET_EVENTS.RECONNECT_ATTEMPT, () => {});\n    socketService.off(SOCKET_EVENTS.RECONNECT_FAILED, () => {});\n  };\n});\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { atom, Setter, Getter } from 'jotai';\nimport { v4 as uuidv4 } from 'uuid';\nimport { AgentEventStream, ToolResult, Message } from '@/common/types';\nimport { determineToolType } from '@/common/utils/formatters';\nimport { messagesAtom } from '../atoms/message';\nimport { toolResultsAtom, toolCallResultMap } from '../atoms/tool';\nimport { isProcessingAtom, activePanelContentAtom } from '../atoms/ui';\nimport { plansAtom, PlanKeyframe } from '../atoms/plan';\nimport { replayStateAtom } from '../atoms/replay';\nimport { ChatCompletionContentPartImage } from '@multimodal/agent-interface';\n\n// 存储工具调用参数的映射表 (不是 Atom，是内部缓存)\nconst toolCallArgumentsMap = new Map<string, any>();\n\n/**\n * Process a single event and update the appropriate state atoms\n */\nexport const processEventAction = atom(\n  null,\n  (get, set, params: { sessionId: string; event: AgentEventStream.Event }) => {\n    const { sessionId, event } = params;\n    const replayState = get(replayStateAtom);\n    const isReplayMode = replayState.isActive;\n\n    switch (event.type) {\n      case 'user_message':\n        handleUserMessage(set, sessionId, event);\n        break;\n\n      case 'assistant_message':\n        handleAssistantMessage(get, set, sessionId, event);\n        break;\n\n      case 'assistant_streaming_message':\n        if (!isReplayMode) {\n          handleStreamingMessage(get, set, sessionId, event);\n        }\n        break;\n\n      case 'assistant_thinking_message':\n      case 'assistant_streaming_thinking_message':\n        handleThinkingMessage(get, set, sessionId, event);\n        break;\n\n      case 'tool_call':\n        handleToolCall(set, sessionId, event);\n        break;\n\n      case 'tool_result':\n        handleToolResult(set, sessionId, event);\n        break;\n\n      case 'system':\n        handleSystemMessage(set, sessionId, event);\n        break;\n\n      case 'environment_input':\n        handleEnvironmentInput(get, set, sessionId, event);\n        break;\n\n      case 'agent_run_start':\n        set(isProcessingAtom, true);\n        break;\n\n      case 'agent_run_end':\n        set(isProcessingAtom, false);\n        break;\n\n      case 'plan_start':\n        handlePlanStart(set, sessionId, event);\n        break;\n\n      case 'plan_update':\n        handlePlanUpdate(set, sessionId, event);\n        break;\n\n      case 'plan_finish':\n        handlePlanFinish(set, sessionId, event);\n        break;\n\n      case 'final_answer':\n        handleFinalAnswer(get, set, sessionId, event);\n        break;\n\n      case 'final_answer_streaming':\n        if (!isReplayMode) {\n          handleFinalAnswerStreaming(get, set, sessionId, event);\n        }\n        break;\n    }\n  },\n);\n\nexport const updateProcessingStatusAction = atom(\n  null,\n  (get, set, status: { isProcessing: boolean; state?: string }) => {\n    // Update processing state\n    set(isProcessingAtom, !!status.isProcessing);\n  },\n);\n\n/**\n * Handle user message event\n */\nfunction handleUserMessage(\n  set: Setter,\n  sessionId: string,\n  event: AgentEventStream.UserMessageEvent,\n): void {\n  const userMessage: Message = {\n    id: event.id,\n    role: 'user',\n    content: event.content,\n    timestamp: event.timestamp,\n  };\n\n  set(messagesAtom, (prev: Record<string, Message[]>) => {\n    const sessionMessages = prev[sessionId] || [];\n    return {\n      ...prev,\n      [sessionId]: [...sessionMessages, userMessage],\n    };\n  });\n\n  // Check for images in user message and set active panel content if found\n  if (Array.isArray(event.content)) {\n    const images = event.content.filter((part) => part.type === 'image_url');\n    if (images.length > 0) {\n      set(activePanelContentAtom, {\n        type: 'image',\n        source: images[0].image_url.url,\n        title: 'User Upload',\n        timestamp: Date.now(),\n      });\n    }\n  }\n}\n\n/**\n * Handle assistant message event (complete message)\n */\nfunction handleAssistantMessage(\n  get: any,\n  set: Setter,\n  sessionId: string,\n  event: AgentEventStream.AssistantMessageEvent,\n): void {\n  // 获取消息ID\n  const messageId = event.messageId;\n\n  set(messagesAtom, (prev: Record<string, Message[]>) => {\n    const sessionMessages = prev[sessionId] || [];\n\n    // 检查是否已存在相同messageId的消息\n    if (messageId) {\n      const existingMessageIndex = sessionMessages.findIndex((msg) => msg.messageId === messageId);\n\n      // 如果找到了现有消息，更新它而不是添加新消息\n      if (existingMessageIndex !== -1) {\n        const updatedMessages = [...sessionMessages];\n        updatedMessages[existingMessageIndex] = {\n          ...updatedMessages[existingMessageIndex],\n          content: event.content,\n          timestamp: event.timestamp,\n          toolCalls: event.toolCalls,\n          finishReason: event.finishReason,\n          isStreaming: false,\n        };\n\n        return {\n          ...prev,\n          [sessionId]: updatedMessages,\n        };\n      }\n    }\n\n    // 没有找到现有消息，添加新消息\n    return {\n      ...prev,\n      [sessionId]: [\n        ...sessionMessages,\n        {\n          id: event.id,\n          role: 'assistant',\n          content: event.content,\n          timestamp: event.timestamp,\n          toolCalls: event.toolCalls,\n          finishReason: event.finishReason,\n          messageId: messageId,\n        },\n      ],\n    };\n  });\n\n  if (event.finishReason !== 'tool_calls') {\n    // 检查是否需要关联最近的环境输入\n    const currentMessages = get(messagesAtom)[sessionId] || [];\n\n    // 从后往前查找最近的环境输入\n    for (let i = currentMessages.length - 1; i >= 0; i--) {\n      const msg = currentMessages[i];\n      if (msg.role === 'environment' && Array.isArray(msg.content)) {\n        const imageContent = msg.content.find(\n          (item) => item.type === 'image_url' && item.image_url && item.image_url.url,\n        );\n\n        if (imageContent) {\n          set(activePanelContentAtom, {\n            type: 'image',\n            source: msg.content,\n            title: msg.description || 'Final Browser State',\n            timestamp: msg.timestamp,\n            environmentId: msg.id,\n          });\n          break;\n        }\n      }\n    }\n  }\n\n  set(isProcessingAtom, false);\n}\n\n/**\n * Handle streaming message event (incremental content)\n */\nfunction handleStreamingMessage(\n  get: any,\n  set: Setter,\n  sessionId: string,\n  event: AgentEventStream.AssistantStreamingMessageEvent,\n): void {\n  set(messagesAtom, (prev: Record<string, Message[]>) => {\n    const sessionMessages = prev[sessionId] || [];\n    const messageIdToFind = event.messageId;\n    let existingMessageIndex = -1;\n\n    // 优先按messageId查找\n    if (messageIdToFind) {\n      existingMessageIndex = sessionMessages.findIndex((msg) => msg.messageId === messageIdToFind);\n    }\n    // 没有messageId或未找到，尝试查找标记为streaming的最后一条消息\n    else if (sessionMessages.length > 0) {\n      const lastMessageIndex = sessionMessages.length - 1;\n      const lastMessage = sessionMessages[lastMessageIndex];\n      if (lastMessage && lastMessage.isStreaming) {\n        existingMessageIndex = lastMessageIndex;\n      }\n    }\n\n    // 更新现有消息\n    if (existingMessageIndex !== -1) {\n      const existingMessage = sessionMessages[existingMessageIndex];\n      const updatedMessage = {\n        ...existingMessage,\n        content:\n          typeof existingMessage.content === 'string'\n            ? existingMessage.content + event.content\n            : event.content,\n        isStreaming: !event.isComplete,\n        toolCalls: event.toolCalls || existingMessage.toolCalls,\n      };\n\n      return {\n        ...prev,\n        [sessionId]: [\n          ...sessionMessages.slice(0, existingMessageIndex),\n          updatedMessage,\n          ...sessionMessages.slice(existingMessageIndex + 1),\n        ],\n      };\n    }\n\n    // 创建新消息\n    const newMessage: Message = {\n      id: event.id || uuidv4(),\n      role: 'assistant',\n      content: event.content,\n      timestamp: event.timestamp,\n      isStreaming: !event.isComplete,\n      toolCalls: event.toolCalls,\n      messageId: event.messageId,\n    };\n\n    return {\n      ...prev,\n      [sessionId]: [...sessionMessages, newMessage],\n    };\n  });\n\n  if (event.isComplete) {\n    set(isProcessingAtom, false);\n  }\n}\n\n/**\n * Handle thinking message event\n */\nfunction handleThinkingMessage(\n  get: any,\n  set: Setter,\n  sessionId: string,\n  event:\n    | AgentEventStream.AssistantThinkingMessageEvent\n    | AgentEventStream.AssistantStreamingThinkingMessageEvent,\n): void {\n  set(messagesAtom, (prev: Record<string, Message[]>) => {\n    const sessionMessages = prev[sessionId] || [];\n    const lastAssistantIndex = [...sessionMessages]\n      .reverse()\n      .findIndex((m) => m.role === 'assistant');\n\n    if (lastAssistantIndex !== -1) {\n      const actualIndex = sessionMessages.length - 1 - lastAssistantIndex;\n      const message = sessionMessages[actualIndex];\n\n      return {\n        ...prev,\n        [sessionId]: [\n          ...sessionMessages.slice(0, actualIndex),\n          { ...message, thinking: event.content },\n          ...sessionMessages.slice(actualIndex + 1),\n        ],\n      };\n    }\n\n    return prev;\n  });\n}\n\n/**\n * Handle tool call event - store arguments for later use\n */\nfunction handleToolCall(\n  set: Setter,\n  sessionId: string,\n  event: AgentEventStream.ToolCallEvent,\n): void {\n  // 保存工具调用的参数信息以便后续使用\n  if (event.toolCallId && event.arguments) {\n    toolCallArgumentsMap.set(event.toolCallId, event.arguments);\n  }\n}\n\nfunction handleToolResult(set: Setter, sessionId: string, event: AgentEventStream.ToolResultEvent) {\n  // 获取之前存储的参数信息\n  const args = toolCallArgumentsMap.get(event.toolCallId);\n\n  const result: ToolResult = {\n    id: uuidv4(),\n    toolCallId: event.toolCallId,\n    name: event.name,\n    content: event.content,\n    timestamp: event.timestamp,\n    error: event.error,\n    type: determineToolType(event.name, event.content),\n    arguments: args,\n  };\n\n  // 1. 先更新消息atom和工具结果 - 确保chat UI能立即响应\n  set(messagesAtom, (prev: Record<string, Message[]>) => {\n    const sessionMessages = prev[sessionId] || [];\n\n    // 找到对应的消息并添加toolResults\n    const messageIndex = [...sessionMessages]\n      .reverse()\n      .findIndex((m) => m.toolCalls?.some((tc) => tc.id === result.toolCallId));\n\n    if (messageIndex !== -1) {\n      const actualIndex = sessionMessages.length - 1 - messageIndex;\n      const message = sessionMessages[actualIndex];\n      const toolResults = message.toolResults || [];\n\n      const updatedMessage = {\n        ...message,\n        toolResults: [...toolResults, result],\n      };\n\n      return {\n        ...prev,\n        [sessionId]: [\n          ...sessionMessages.slice(0, actualIndex),\n          updatedMessage,\n          ...sessionMessages.slice(actualIndex + 1),\n        ],\n      };\n    }\n\n    return prev;\n  });\n\n  // 2. 同时更新工具结果atom\n  set(toolResultsAtom, (prev: Record<string, ToolResult[]>) => {\n    const sessionResults = prev[sessionId] || [];\n    return {\n      ...prev,\n      [sessionId]: [...sessionResults, result],\n    };\n  });\n\n  // 3. 最后更新workspace面板内容 - 保持时序一致\n  if (result.type === 'browser_vision_control') {\n    set(activePanelContentAtom, (prev) => {\n      if (prev && prev.type === 'image' && prev.environmentId) {\n        // 在这里添加环境ID到已处理列表，避免重复渲染\n        const environmentId = prev.environmentId;\n\n        return {\n          ...prev,\n          type: 'browser_vision_control',\n          source: event.content,\n          title: prev.title,\n          timestamp: event.timestamp,\n          toolCallId: event.toolCallId,\n          error: event.error,\n          arguments: args,\n          originalContent: prev.source,\n\n          environmentId: environmentId,\n          processedEnvironmentIds: [environmentId], // 新增：记录已处理的环境ID\n        };\n      } else {\n        return {\n          type: result.type,\n          source: result.content,\n          title: result.name,\n          timestamp: result.timestamp,\n          toolCallId: result.toolCallId,\n          error: result.error,\n          arguments: args,\n        };\n      }\n    });\n  } else {\n    set(activePanelContentAtom, {\n      type: result.type,\n      source: result.content,\n      title: result.name,\n      timestamp: result.timestamp,\n      toolCallId: result.toolCallId,\n      error: result.error,\n      arguments: args,\n    });\n  }\n\n  // Store in the map for future reference\n  toolCallResultMap.set(result.toolCallId, result);\n}\n\n/**\n * Handle system message event\n */\nfunction handleSystemMessage(\n  set: Setter,\n  sessionId: string,\n  event: AgentEventStream.Event & { message: string; level?: string },\n): void {\n  const systemMessage: Message = {\n    id: uuidv4(),\n    role: 'system',\n    content: event.message,\n    timestamp: event.timestamp || Date.now(),\n  };\n\n  set(messagesAtom, (prev: Record<string, Message[]>) => {\n    const sessionMessages = prev[sessionId] || [];\n    return {\n      ...prev,\n      [sessionId]: [...sessionMessages, systemMessage],\n    };\n  });\n}\n\n/**\n * Handle environment input event\n * Adds it to messages but doesn't set it as active panel content\n */\nfunction handleEnvironmentInput(\n  get: Getter,\n  set: Setter,\n  sessionId: string,\n  event: AgentEventStream.EnvironmentInputEvent,\n): void {\n  const environmentMessage: Message = {\n    id: event.id,\n    role: 'environment',\n    content: event.content,\n    timestamp: event.timestamp,\n    description: event.description || 'Environment Input',\n  };\n\n  set(messagesAtom, (prev: Record<string, Message[]>) => {\n    const sessionMessages = prev[sessionId] || [];\n    return {\n      ...prev,\n      [sessionId]: [...sessionMessages, environmentMessage],\n    };\n  });\n  // 检查是否包含图片内容并直接设置为活动面板内容\n  if (Array.isArray(event.content)) {\n    const imageContent = event.content.find(\n      (item) => item.type === 'image_url' && item.image_url && item.image_url.url,\n    ) as ChatCompletionContentPartImage;\n\n    if (imageContent && imageContent.image_url) {\n      // 获取当前面板状态\n      const currentPanel = get(activePanelContentAtom);\n\n      // 只有当前面板是 browser_vision_control 类型时才更新\n      if (currentPanel && currentPanel.type === 'browser_vision_control') {\n        set(activePanelContentAtom, {\n          ...currentPanel,\n          type: 'browser_vision_control',\n          title: `${currentPanel.title} · Screenshot Update`,\n          timestamp: event.timestamp,\n          originalContent: event.content,\n          environmentId: event.id,\n        });\n      }\n      // 不是 browser_vision_control 类型时完全跳过 set 操作\n      // 这样避免了 Browser Screenshot 被重复渲染\n    }\n  }\n}\n\n/**\n * Handle plan start event\n */\nfunction handlePlanStart(\n  set: Setter,\n  sessionId: string,\n  event: AgentEventStream.PlanStartEvent,\n): void {\n  set(plansAtom, (prev: Record<string, any>) => ({\n    ...prev,\n    [sessionId]: {\n      steps: [],\n      isComplete: false,\n      summary: null,\n      hasGeneratedPlan: true,\n      keyframes: [], // Initialize empty keyframes array\n    },\n  }));\n}\n\n/**\n * Handle plan update event\n */\nfunction handlePlanUpdate(\n  set: Setter,\n  sessionId: string,\n  event: AgentEventStream.PlanUpdateEvent,\n): void {\n  console.log('Plan update event:', event);\n  set(plansAtom, (prev: Record<string, any>) => {\n    const currentPlan = prev[sessionId] || {\n      steps: [],\n      isComplete: false,\n      summary: null,\n      hasGeneratedPlan: true,\n      keyframes: [],\n    };\n\n    // Create a new keyframe for this update\n    const newKeyframe: PlanKeyframe = {\n      timestamp: event.timestamp || Date.now(),\n      steps: event.steps,\n      isComplete: false,\n      summary: null,\n    };\n\n    // Add the keyframe to the history\n    const keyframes = [...(currentPlan.keyframes || []), newKeyframe];\n\n    return {\n      ...prev,\n      [sessionId]: {\n        ...currentPlan,\n        steps: event.steps,\n        hasGeneratedPlan: true,\n        keyframes,\n      },\n    };\n  });\n}\n\n/**\n * Handle plan finish event\n */\nfunction handlePlanFinish(\n  set: Setter,\n  sessionId: string,\n  event: AgentEventStream.Event & { sessionId: string; summary: string },\n): void {\n  console.log('Plan finish event:', event);\n  set(plansAtom, (prev: Record<string, any>) => {\n    const currentPlan = prev[sessionId] || {\n      steps: [],\n      isComplete: false,\n      summary: null,\n      hasGeneratedPlan: true,\n      keyframes: [],\n    };\n\n    // Create a final keyframe for the completed plan\n    const finalKeyframe: PlanKeyframe = {\n      timestamp: event.timestamp || Date.now(),\n      steps: currentPlan.steps,\n      isComplete: true,\n      summary: event.summary,\n    };\n\n    // Add the final keyframe to the history\n    const keyframes = [...(currentPlan.keyframes || []), finalKeyframe];\n\n    return {\n      ...prev,\n      [sessionId]: {\n        ...currentPlan,\n        isComplete: true,\n        summary: event.summary,\n        keyframes,\n      },\n    };\n  });\n}\n\n/**\n * Handle final answer event (complete answer/report)\n */\nfunction handleFinalAnswer(\n  get: any,\n  set: Setter,\n  sessionId: string,\n  event: AgentEventStream.FinalAnswerEvent,\n): void {\n  const messageId = event.messageId || `final-answer-${uuidv4()}`;\n\n  // 始终将内容当作研究报告处理，移除JSON_DATA状态\n  // 设置活动面板内容为研究报告\n  set(activePanelContentAtom, {\n    type: 'research_report',\n    source: event.content,\n    title: event.title || 'Research Report',\n    timestamp: event.timestamp,\n    isDeepResearch: true,\n    messageId,\n  });\n\n  // 添加消息到聊天引用报告\n  const finalAnswerMessage: Message = {\n    id: event.id || uuidv4(),\n    role: 'final_answer',\n    content: event.content, // 存储完整内容以便后续访问\n    timestamp: event.timestamp,\n    messageId,\n    isDeepResearch: true,\n    title: event.title || 'Research Report',\n  };\n\n  set(messagesAtom, (prev: Record<string, Message[]>) => {\n    const sessionMessages = prev[sessionId] || [];\n    return {\n      ...prev,\n      [sessionId]: [...sessionMessages, finalAnswerMessage],\n    };\n  });\n\n  // 标记处理完成\n  set(isProcessingAtom, false);\n}\n\nfunction handleFinalAnswerStreaming(\n  get: any,\n  set: Setter,\n  sessionId: string,\n  event: AgentEventStream.Event & {\n    content: string;\n    isDeepResearch: boolean;\n    isComplete?: boolean;\n    messageId?: string;\n    title?: string;\n  },\n): void {\n  const messageId = event.messageId || `final-answer-${uuidv4()}`;\n\n  // 从当前消息列表中查找已有的相同 messageId 的消息\n  const messages = get(messagesAtom)[sessionId] || [];\n  const existingMessageIndex = messages.findIndex((msg) => msg.messageId === messageId);\n\n  // 当处理一系列流式事件时，将内容追加到现有消息，或创建新消息\n  set(messagesAtom, (prev: Record<string, Message[]>) => {\n    const sessionMessages = prev[sessionId] || [];\n\n    // 如果找到现有消息，则更新它\n    if (existingMessageIndex >= 0) {\n      const existingMessage = sessionMessages[existingMessageIndex];\n      const updatedMessage = {\n        ...existingMessage,\n        content:\n          typeof existingMessage.content === 'string'\n            ? existingMessage.content + event.content\n            : event.content,\n        isStreaming: !event.isComplete,\n        timestamp: event.timestamp,\n      };\n\n      return {\n        ...prev,\n        [sessionId]: [\n          ...sessionMessages.slice(0, existingMessageIndex),\n          updatedMessage,\n          ...sessionMessages.slice(existingMessageIndex + 1),\n        ],\n      };\n    }\n\n    // 否则创建新消息\n    const newMessage: Message = {\n      id: event.id || uuidv4(),\n      role: 'final_answer',\n      content: event.content,\n      timestamp: event.timestamp,\n      messageId,\n      isDeepResearch: true,\n      isStreaming: !event.isComplete,\n      title: event.title || 'Research Report',\n    };\n\n    return {\n      ...prev,\n      [sessionId]: [...sessionMessages, newMessage],\n    };\n  });\n\n  // 更新活动面板内容 - 同步面板与消息状态\n  set(activePanelContentAtom, (prev: any) => {\n    // 如果是新流或不同的messageId，重新开始\n    if (!prev || prev.type !== 'research_report' || prev.messageId !== messageId) {\n      return {\n        role: 'assistant',\n        type: 'research_report',\n        source: event.content,\n        title: event.title || 'Research Report (Generating...)',\n        timestamp: event.timestamp,\n        isDeepResearch: true,\n        messageId,\n        isStreaming: !event.isComplete,\n      };\n    }\n\n    // 否则追加到现有内容\n    return {\n      ...prev,\n      source: prev.source + event.content,\n      isStreaming: !event.isComplete,\n      timestamp: event.timestamp,\n      title: event.title || prev.title,\n    };\n  });\n\n  // 如果这是第一个数据块，也添加一条消息到聊天\n  const prevActivePanelContent = get(activePanelContentAtom);\n  if (!prevActivePanelContent || prevActivePanelContent.messageId !== messageId) {\n    const initialMessage: Message = {\n      id: event.id || uuidv4(),\n      role: 'final_answer',\n      content: event.content, // 存储初始内容\n      timestamp: event.timestamp,\n      messageId,\n      isDeepResearch: true,\n      isStreaming: !event.isComplete,\n      title: event.title || 'Research Report',\n    };\n\n    set(messagesAtom, (prev: Record<string, Message[]>) => {\n      const sessionMessages = prev[sessionId] || [];\n      return {\n        ...prev,\n        [sessionId]: [...sessionMessages, initialMessage],\n      };\n    });\n  } else if (event.isComplete) {\n    // 当流式生成完成时，更新消息的完整内容\n    const fullContent = get(activePanelContentAtom).source;\n\n    set(messagesAtom, (prev: Record<string, Message[]>) => {\n      const sessionMessages = prev[sessionId] || [];\n      const messageIndex = sessionMessages.findIndex((msg) => msg.messageId === messageId);\n\n      if (messageIndex >= 0) {\n        const updatedMessages = [...sessionMessages];\n        updatedMessages[messageIndex] = {\n          ...updatedMessages[messageIndex],\n          content: fullContent,\n          isStreaming: false,\n          title: event.title || updatedMessages[messageIndex].title || 'Research Report',\n        };\n\n        return {\n          ...prev,\n          [sessionId]: updatedMessages,\n        };\n      }\n\n      return prev;\n    });\n  }\n\n  // 如果这是最后一个数据块，标记处理完成\n  if (event.isComplete) {\n    set(isProcessingAtom, false);\n  }\n}\n","import { atom } from 'jotai';\nimport { apiService } from '../../services/apiService';\nimport { modelInfoAtom } from '../atoms/ui';\n\n/**\n * Action to fetch and update model information\n */\nexport const fetchModelInfoAction = atom(null, async (get, set) => {\n  try {\n    const info = await apiService.getModelInfo();\n    set(modelInfoAtom, info);\n    return info;\n  } catch (error) {\n    console.error('Failed to fetch model info:', error);\n    return { provider: 'Unknown', model: 'Unknown' };\n  }\n});\n\n/**\n * Action to directly set model information (used in replay mode)\n */\nexport const setModelInfoAction = atom(\n  null,\n  (get, set, modelInfo: { provider: string; model: string }) => {\n    set(modelInfoAtom, modelInfo);\n  },\n);\n","import { atom } from 'jotai';\nimport { v4 as uuidv4 } from 'uuid';\nimport { apiService } from '../../services/apiService';\nimport { sessionsAtom, activeSessionIdAtom } from '../atoms/session';\nimport { messagesAtom } from '../atoms/message';\nimport { toolResultsAtom, toolCallResultMap } from '../atoms/tool';\nimport { isProcessingAtom, activePanelContentAtom } from '../atoms/ui';\nimport { processEventAction } from './eventProcessor';\nimport { Message } from '@/common/types';\nimport { connectionStatusAtom } from '../atoms/ui';\nimport { replayStateAtom } from '../atoms/replay';\nimport { ChatCompletionContentPart, AgentEventStream } from '@multimodal/agent-interface';\n\n/**\n * Load all available sessions\n */\nexport const loadSessionsAction = atom(null, async (get, set) => {\n  try {\n    const loadedSessions = await apiService.getSessions();\n    set(sessionsAtom, loadedSessions);\n  } catch (error) {\n    console.error('Failed to load sessions:', error);\n    throw error;\n  }\n});\n\n/**\n * Create a new session\n */\nexport const createSessionAction = atom(null, async (get, set) => {\n  try {\n    const newSession = await apiService.createSession();\n\n    // Add to sessions list\n    set(sessionsAtom, (prev) => [newSession, ...prev]);\n\n    // Initialize session data\n    set(messagesAtom, (prev) => ({\n      ...prev,\n      [newSession.id]: [],\n    }));\n\n    set(toolResultsAtom, (prev) => ({\n      ...prev,\n      [newSession.id]: [],\n    }));\n\n    // Clear workspace panel content to show empty state\n    set(activePanelContentAtom, null);\n\n    // Set as active session\n    set(activeSessionIdAtom, newSession.id);\n\n    return newSession.id;\n  } catch (error) {\n    console.error('Failed to create session:', error);\n    throw error;\n  }\n});\n\n/**\n * Set the active session\n * 简化加载逻辑，移除恢复会话的复杂性\n */\nexport const setActiveSessionAction = atom(null, async (get, set, sessionId: string) => {\n  try {\n    // 检查是否已经是活动会话\n    const currentActiveSessionId = get(activeSessionIdAtom);\n    if (currentActiveSessionId === sessionId) {\n      console.log(`Session ${sessionId} is already active, skipping load`);\n      return;\n    }\n\n    // 检查回放状态并退出回放模式（除非是同一会话）\n    const replayState = get(replayStateAtom);\n    if (replayState.isActive) {\n      console.log('Exiting replay mode due to session change');\n      set(replayStateAtom, {\n        isActive: false,\n        isPaused: true,\n        events: [],\n        currentEventIndex: -1,\n        startTimestamp: null,\n        endTimestamp: null,\n        playbackSpeed: 1,\n        visibleTimeWindow: null,\n        processedEvents: {},\n      });\n    }\n\n    // 直接获取会话详情，不需要检查 active 状态\n    const sessionDetails = await apiService.getSessionDetails(sessionId);\n\n    // 获取当前会话状态以更新 isProcessing 状态\n    try {\n      const status = await apiService.getSessionStatus(sessionId);\n      set(isProcessingAtom, status.isProcessing);\n    } catch (error) {\n      console.warn('Failed to get session status:', error);\n      set(isProcessingAtom, false);\n    }\n\n    // 清理工具调用映射缓存\n    toolCallResultMap.clear();\n\n    // 只有在消息不存在时才加载会话事件\n    const messages = get(messagesAtom);\n    if (!messages[sessionId] || messages[sessionId].length === 0) {\n      console.log(`Loading events for session ${sessionId}`);\n      const events = await apiService.getSessionEvents(sessionId);\n\n      // 对流式事件进行预处理，确保正确的连续性\n      const processedEvents = preprocessStreamingEvents(events);\n\n      // 处理每个事件以构建消息和工具结果\n      for (const event of processedEvents) {\n        set(processEventAction, { sessionId, event });\n      }\n    } else {\n      console.log(`Session ${sessionId} already has messages, skipping event loading`);\n    }\n\n    // 设置为活动会话\n    set(activeSessionIdAtom, sessionId);\n  } catch (error) {\n    console.error('Failed to set active session:', error);\n    set(connectionStatusAtom, (prev) => ({\n      ...prev,\n      connected: false,\n      lastError: error instanceof Error ? error.message : String(error),\n    }));\n    throw error;\n  }\n});\n\n/**\n * Update session metadata\n */\nexport const updateSessionAction = atom(\n  null,\n  async (get, set, params: { sessionId: string; updates: { name?: string; tags?: string[] } }) => {\n    const { sessionId, updates } = params;\n\n    try {\n      const updatedSession = await apiService.updateSessionMetadata(sessionId, updates);\n\n      // Update session in the list\n      set(sessionsAtom, (prev) =>\n        prev.map((session) =>\n          session.id === sessionId ? { ...session, ...updatedSession } : session,\n        ),\n      );\n\n      return updatedSession;\n    } catch (error) {\n      console.error('Failed to update session:', error);\n      throw error;\n    }\n  },\n);\n\n/**\n * 预处理事件，确保流式事件按正确顺序处理\n */\nfunction preprocessStreamingEvents(events: AgentEventStream.Event[]): AgentEventStream.Event[] {\n  // 对流式消息进行整理\n  const messageStreams: Record<string, AgentEventStream.Event[]> = {};\n\n  // 收集所有流式事件，按messageId分组\n  events.forEach((event) => {\n    if (event.type === 'final_answer_streaming' && 'messageId' in event) {\n      const messageId = event.messageId as string;\n      if (!messageStreams[messageId]) {\n        messageStreams[messageId] = [];\n      }\n      messageStreams[messageId].push(event);\n    }\n  });\n\n  // 返回预处理后的事件，确保流式事件以正确顺序处理\n  return events;\n}\n\n/**\n * Delete a session\n */\nexport const deleteSessionAction = atom(null, async (get, set, sessionId: string) => {\n  try {\n    const success = await apiService.deleteSession(sessionId);\n    const activeSessionId = get(activeSessionIdAtom);\n\n    if (success) {\n      // Remove from sessions list\n      set(sessionsAtom, (prev) => prev.filter((session) => session.id !== sessionId));\n\n\n      // Clear active session if it was deleted\n      if (activeSessionId === sessionId) {\n\n        set(activeSessionIdAtom, null);\n      }\n\n\n      // Clear session data\n      set(messagesAtom, (prev) => {\n        const newMessages = { ...prev };\n        delete newMessages[sessionId];\n        return newMessages;\n      });\n\n      set(toolResultsAtom, (prev) => {\n        const newResults = { ...prev };\n        delete newResults[sessionId];\n        return newResults;\n      });\n    }\n\n    return success;\n  } catch (error) {\n    console.error('Failed to delete session:', error);\n    throw error;\n  }\n});\n\n/**\n * Send a message in the current session\n */\nexport const sendMessageAction = atom(\n  null,\n  async (get, set, content: string | ChatCompletionContentPart[]) => {\n    const activeSessionId = get(activeSessionIdAtom);\n\n    if (!activeSessionId) {\n      throw new Error('No active session');\n    }\n\n    // 明确设置处理状态\n\n    set(isProcessingAtom, true);\n\n    // 添加用户消息到状态\n    const userMessage: Message = {\n      id: uuidv4(),\n      role: 'user',\n      content,\n      timestamp: Date.now(),\n    };\n\n    set(messagesAtom, (prev) => {\n      const sessionMessages = prev[activeSessionId] || [];\n      return {\n        ...prev,\n        [activeSessionId]: [...sessionMessages, userMessage],\n      };\n    });\n\n    // 立即更新会话名称，使用用户查询作为 Summary\n    // 这样即使后续更新失败也至少有一个基本的名称\n    try {\n      // 检查是否是第一条消息，如果是则直接用查询内容作为会话名称\n      const messages = get(messagesAtom)[activeSessionId] || [];\n      if (messages.length <= 2) {\n        // 算上刚刚添加的用户消息\n        let summary = '';\n        if (typeof content === 'string') {\n          summary = content.length > 50 ? content.substring(0, 47) + '...' : content;\n        } else {\n          // 从多模态内容中提取文本部分\n          const textPart = content.find((part) => part.type === 'text');\n          if (textPart && 'text' in textPart) {\n            summary =\n              textPart.text.length > 50 ? textPart.text.substring(0, 47) + '...' : textPart.text;\n          } else {\n            summary = 'Image message';\n          }\n        }\n\n        await apiService.updateSessionMetadata(activeSessionId, { name: summary });\n\n        // 更新 sessions atom\n        set(sessionsAtom, (prev) =>\n          prev.map((session) =>\n            session.id === activeSessionId ? { ...session, name: summary } : session,\n          ),\n        );\n      }\n    } catch (error) {\n      console.log('Failed to update initial summary, continuing anyway:', error);\n      // 错误不中断主流程\n    }\n\n    try {\n      // 使用流式查询\n      await apiService.sendStreamingQuery(activeSessionId, content, (event) => {\n        // 处理每个事件\n        set(processEventAction, { sessionId: activeSessionId, event });\n\n        // 确保状态保持为处理中，直到明确收到结束事件\n        if (event.type !== 'agent_run_end' && event.type !== 'assistant_message') {\n          set(isProcessingAtom, true);\n        }\n      });\n    } catch (error) {\n      console.error('Error sending message:', error);\n      // 错误时重置处理状态\n      set(isProcessingAtom, false);\n      throw error;\n    }\n  },\n);\n\n/**\n * Abort the current running query\n */\nexport const abortQueryAction = atom(null, async (get, set) => {\n  const activeSessionId = get(activeSessionIdAtom);\n\n  if (!activeSessionId) {\n    return false;\n  }\n\n  try {\n    const success = await apiService.abortQuery(activeSessionId);\n\n    if (success) {\n      set(isProcessingAtom, false);\n\n      // Add system message about abort\n      const abortMessage: Message = {\n        id: uuidv4(),\n        role: 'system',\n        content: 'The operation was aborted.',\n        timestamp: Date.now(),\n      };\n\n      set(messagesAtom, (prev) => {\n        const sessionMessages = prev[activeSessionId] || [];\n        return {\n          ...prev,\n          [activeSessionId]: [...sessionMessages, abortMessage],\n        };\n      });\n    }\n\n    return success;\n  } catch (error) {\n    console.error('Error aborting query:', error);\n    return false;\n  }\n});\n\n/**\n * Check the current status of a session\n */\nexport const checkSessionStatusAction = atom(null, async (get, set, sessionId: string) => {\n  if (!sessionId) return;\n\n  try {\n    const status = await apiService.getSessionStatus(sessionId);\n    set(isProcessingAtom, status.isProcessing);\n\n    return status;\n  } catch (error) {\n    console.error('Failed to check session status:', error);\n    // 错误时不更新处理状态，避免误报\n  }\n});\n\n/**\n * Handle the end of a conversation\n * 仍然保留此函数，但减少其重要性，避免更新失败带来的影响\n */\nasync function handleConversationEnd(get: any, set: any, sessionId: string): Promise<void> {\n  // 我们不再依赖这个函数来设置会话名称，但仍然保留它作为备份机制\n  const allMessages = get(messagesAtom)[sessionId] || [];\n\n  // 只在有足够的消息并且会话没有名称时才尝试生成摘要\n  const sessions = get(sessionsAtom);\n  const currentSession = sessions.find((s) => s.id === sessionId);\n\n  // 如果会话已经有名称，则不需要再生成\n  if (currentSession && currentSession.name) {\n    return;\n  }\n\n  // 只在有实际对话时才尝试生成摘要\n  if (allMessages.length > 1) {\n    try {\n      // 转换消息为 API 期望的格式\n      const apiMessages = allMessages.map((msg: Message) => ({\n        role: msg.role,\n        content: typeof msg.content === 'string' ? msg.content : 'multimodal content',\n      }));\n\n      // 生成摘要\n      const summary = await apiService.generateSummary(sessionId, apiMessages);\n\n      if (summary) {\n        // 更新会话名称\n        await apiService.updateSessionMetadata(sessionId, { name: summary });\n\n        // 更新 sessions atom\n        set(sessionsAtom, (prev: any[]) =>\n          prev.map((session) =>\n            session.id === sessionId ? { ...session, name: summary } : session,\n          ),\n        );\n      }\n    } catch (error) {\n      console.error('Failed to generate or update summary, continuing anyway:', error);\n      // 错误不影响主流程\n    }\n  }\n}","import { atom } from 'jotai';\nimport { Message, MessageGroup } from '@/common/types';\n\n/**\n * Atom for storing messages for each session\n * Key is the session ID, value is an array of messages for that session\n */\nexport const messagesAtom = atom<Record<string, Message[]>>({});\n\n/**\n * Atom for storing grouped messages for each session\n * Key is the session ID, value is an array of message groups for that session\n * This is derived from messagesAtom but with messages properly grouped\n */\nexport const groupedMessagesAtom = atom<Record<string, MessageGroup[]>>((get) => {\n  const allMessages = get(messagesAtom);\n  const result: Record<string, MessageGroup[]> = {};\n\n  // Process each session's messages into groups\n  Object.entries(allMessages).forEach(([sessionId, messages]) => {\n    result[sessionId] = createMessageGroups(messages);\n  });\n\n  return result;\n});\n\n/**\n * Group messages into logical conversation groups\n *\n * The grouping logic creates groups based on:\n * 1. User messages always start a new group\n * 2. System messages are standalone groups\n * 3. Assistant/environment messages that belong together are grouped\n * 4. Thinking/processing sequences are properly maintained\n */\nfunction createMessageGroups(messages: Message[]): MessageGroup[] {\n  if (!messages.length) return [];\n\n  const groups: MessageGroup[] = [];\n  let currentGroup: Message[] = [];\n  let currentThinkingSequence: {\n    startIndex: number;\n    messages: Message[];\n  } | null = null;\n\n  // Process messages in order\n  for (let i = 0; i < messages.length; i++) {\n    const message = messages[i];\n\n    // User messages always start a new group\n    if (message.role === 'user') {\n      if (currentGroup.length > 0) {\n        groups.push({ messages: [...currentGroup] });\n      }\n      currentGroup = [message];\n      currentThinkingSequence = null;\n      continue;\n    }\n\n    // System messages are standalone\n    if (message.role === 'system') {\n      if (currentGroup.length > 0) {\n        groups.push({ messages: [...currentGroup] });\n      }\n      groups.push({ messages: [message] });\n      currentGroup = [];\n      currentThinkingSequence = null;\n      continue;\n    }\n\n    // Process assistant and environment messages\n    if (message.role === 'assistant' || message.role === 'environment') {\n      // Check if this is the start of a thinking sequence\n      if (\n        message.role === 'assistant' &&\n        currentGroup.length > 0 &&\n        currentGroup[currentGroup.length - 1].role === 'user' &&\n        (!message.finishReason || message.finishReason !== 'stop')\n      ) {\n        // Create new thinking sequence\n        currentThinkingSequence = {\n          startIndex: currentGroup.length,\n          messages: [message],\n        };\n        currentGroup.push(message);\n        continue;\n      }\n\n      // Continue existing thinking sequence\n      if (currentThinkingSequence && (!message.finishReason || message.finishReason !== 'stop')) {\n        currentThinkingSequence.messages.push(message);\n        currentGroup.push(message);\n        continue;\n      }\n\n      // Handle final answer in a thinking sequence\n      if (message.role === 'assistant' && message.finishReason === 'stop') {\n        if (currentThinkingSequence) {\n          currentThinkingSequence.messages.push(message);\n          currentGroup.push(message);\n          currentThinkingSequence = null;\n          continue;\n        } else {\n          // Standalone final answer\n          currentGroup.push(message);\n          continue;\n        }\n      }\n\n      // Default: add to current group\n      currentGroup.push(message);\n    }\n  }\n\n  // Add the last group if not empty\n  if (currentGroup.length > 0) {\n    groups.push({ messages: [...currentGroup] });\n  }\n\n  return groups;\n}\n","import { atom } from 'jotai';\nimport type { AgentEventStream } from '@multimodal/agent-interface';\n\n/**\n * Plan keyframe interface for storing plan history snapshots\n */\nexport interface PlanKeyframe {\n  timestamp: number;\n  steps: AgentEventStream.PlanStep[];\n  isComplete: boolean;\n  summary: string | null;\n}\n\n/**\n * Plan state interface for storing plan data by session\n */\nexport interface PlanState {\n  steps: AgentEventStream.PlanStep[];\n  isComplete: boolean;\n  summary: string | null;\n  hasGeneratedPlan: boolean;\n  keyframes?: PlanKeyframe[]; // Added keyframes for history\n}\n\n/**\n * Default empty plan state\n */\nconst DEFAULT_PLAN_STATE: PlanState = {\n  steps: [],\n  isComplete: false,\n  summary: null,\n  hasGeneratedPlan: false,\n  keyframes: [],\n};\n\n/**\n * Atom for storing plans for each session\n */\nexport const plansAtom = atom<Record<string, PlanState>>({});\n\n/**\n * Atom for UI state related to plan display\n */\nexport const planUIStateAtom = atom<{\n  isVisible: boolean;\n}>({\n  isVisible: false,\n});\n","import { atom } from 'jotai';\nimport { AgentEventStream } from '@/common/types';\n\n/**\n * Replay state interface for storing replay data\n *\n * This represents the current state of the replay functionality,\n * including timing, event positioning, and playback control\n */\nexport interface ReplayState {\n  // Active state\n  isActive: boolean;\n  isPaused: boolean;\n\n  // Events and timing\n  events: AgentEventStream.Event[];\n  currentEventIndex: number;\n  startTimestamp: number | null;\n  endTimestamp: number | null;\n\n  // Playback control\n  playbackSpeed: number; // 1 = normal, 2 = 2x speed, etc.\n  autoPlayCountdown: number | null; // Countdown in seconds before autoplay starts\n\n  // Current visible range\n  visibleTimeWindow: {\n    start: number;\n    end: number;\n  } | null;\n\n  // Tracking processed events to avoid duplicates\n  processedEvents?: Record<string, boolean>;\n}\n\n/**\n * Default replay state\n */\nconst DEFAULT_REPLAY_STATE: ReplayState = {\n  isActive: false,\n  isPaused: true,\n  events: [],\n  currentEventIndex: -1,\n  startTimestamp: null,\n  endTimestamp: null,\n  playbackSpeed: 1,\n  autoPlayCountdown: null,\n  visibleTimeWindow: null,\n  processedEvents: {},\n};\n\n/**\n * Atom for storing replay state\n * This manages the entire replay experience including timeline position and events\n */\nexport const replayStateAtom = atom<ReplayState>(DEFAULT_REPLAY_STATE);\n","import { atom } from 'jotai';\nimport { SessionMetadata } from '@/common/types';\n\n/**\n * Atom for storing all sessions\n */\nexport const sessionsAtom = atom<SessionMetadata[]>([]);\n\n/**\n * Atom for the currently active session ID\n */\nexport const activeSessionIdAtom = atom<string | null>(null);\n","import { atom } from 'jotai';\nimport { ToolResult } from '@/common/types';\n\n\n/**\n * Atom for storing tool results for each session\n * Key is the session ID, value is an array of tool results for that session\n */\nexport const toolResultsAtom = atom<Record<string, ToolResult[]>>({});\n\n/**\n * Map to track tool calls to their results (not an atom, just a cache)\n */\nexport const toolCallResultMap = new Map<string, ToolResult>();\n","import { atom } from 'jotai';\nimport { ConnectionStatus, PanelContent } from '@/common/types';\n\n/**\n * Atom for the content currently displayed in the panel\n */\nexport const activePanelContentAtom = atom<PanelContent | null>(null);\n\n/**\n * Atom for server connection status\n */\nexport const connectionStatusAtom = atom<ConnectionStatus>({\n  connected: false,\n  lastConnected: null,\n  lastError: null,\n  reconnecting: false,\n});\n\n/**\n * Atom for model info (provider and model name)\n */\nexport const modelInfoAtom = atom<{ provider: string; model: string }>({\n  provider: '',\n  model: '',\n});\n\n/**\n * Atom for sidebar collapsed state\n */\nexport const sidebarCollapsedAtom = atom<boolean>(true);\n\n/**\n * Atom for workspace panel collapsed state\n */\nexport const workspacePanelCollapsedAtom = atom<boolean>(false);\n\n/**\n * Atom for tracking processing status (when agent is running)\n */\nexport const isProcessingAtom = atom<boolean>(false);\n\n/**\n * Atom for offline mode state (view-only when disconnected)\n */\nexport const offlineModeAtom = atom<boolean>(false);\n","import React, { useEffect } from 'react';\nimport { Routes, Route, Navigate, useParams, useNavigate, useLocation } from 'react-router-dom';\nimport { Layout } from './Layout';\nimport { useSession } from '@/common/hooks/useSession';\nimport HomePage from '@/standalone/home/HomePage';\nimport { useReplayMode } from '@/common/hooks/useReplayMode';\nimport { SessionRouter } from './Router/SessionRouter';\n\n/**\n * App Component - Main application container with routing\n */\nexport const App: React.FC = () => {\n  const { initConnectionMonitoring, loadSessions, connectionStatus, activeSessionId } =\n    useSession();\n  const isReplayMode = useReplayMode();\n\n  // Initialize connection monitoring and load sessions on mount - but not in replay mode\n  useEffect(() => {\n    // In replay mode, skip connection monitoring and session loading\n    if (isReplayMode) {\n      console.log('[ReplayMode] Skipping connection initialization in replay mode');\n      return;\n    }\n\n    const initialize = async () => {\n      // Initialize connection monitoring\n      const cleanup = initConnectionMonitoring();\n\n      // Load sessions if connected\n      if (connectionStatus.connected) {\n        await loadSessions();\n      }\n\n      return cleanup;\n    };\n\n    const cleanupPromise = initialize();\n\n    // Cleanup on unmount\n    return () => {\n      cleanupPromise.then((cleanup) => {\n        if (typeof cleanup === 'function') {\n          cleanup();\n        }\n      });\n    };\n  }, [initConnectionMonitoring, loadSessions, connectionStatus.connected, isReplayMode]);\n\n  // Special handling for replay mode - bypass normal routing\n  if (isReplayMode) {\n    console.log('[ReplayMode] Rendering replay layout directly');\n    return <Layout isReplayMode={true} />;\n  }\n\n  return (\n    <Routes>\n      <Route path=\"/\" element={<HomePage />} />\n      <Route\n        path=\"/:sessionId\"\n        element={\n          <SessionRouter>\n            <Layout />\n          </SessionRouter>\n        }\n      />\n    </Routes>\n  );\n};\n","import React from 'react';\nimport { Sidebar } from '@/standalone/sidebar';\nimport { Navbar } from '@/standalone/navbar';\nimport { ChatPanel } from '@/standalone/chat/ChatPanel';\nimport { WorkspacePanel } from '@/standalone/workspace/WorkspacePanel';\nimport { useSession } from '@/common/hooks/useSession';\nimport { useReplayMode } from '@/common/hooks/useReplayMode';\nimport { motion } from 'framer-motion';\nimport { Shell } from './Shell';\nimport './Layout.css';\n\ninterface LayoutProps {\n  isReplayMode?: boolean;\n}\n\n/**\n * Layout Component - Main application layout\n *\n * Design principles:\n * - Clean, minimalist aesthetic with refined borders and subtle shadows\n * - Neutral color palette with elegant accent colors\n * - Consistent spacing and typography for optimal readability\n * - Seamless visual flow between different interface elements\n * - Adapts layout based on replay mode status\n */\nexport const Layout: React.FC<LayoutProps> = ({ isReplayMode: propIsReplayMode }) => {\n  const { connectionStatus } = useSession();\n\n  // Use the context hook to get global replay mode status\n  const contextIsReplayMode = useReplayMode();\n\n  // Prioritize props for backward compatibility, but fall back to context\n  const isReplayMode = propIsReplayMode !== undefined ? propIsReplayMode : contextIsReplayMode;\n\n  return (\n    <div className=\"flex flex-col h-screen bg-[#F2F3F5] dark:bg-white/5 text-gray-900 dark:text-gray-100 overflow-hidden\">\n      {/* Global navbar at the top */}\n      <Navbar />\n\n      {/* Main content area */}\n      <div className=\"flex flex-1 overflow-hidden\">\n        {/* Sidebar with ToolBar and ChatSession - only show when not in replay mode */}\n        {!isReplayMode && <Sidebar />}\n\n        {/* Content area - using flex-col to properly distribute vertical space */}\n        <div className=\"flex-1 flex flex-col overflow-hidden p-2 lg:p-3\">\n          {/* Panels container - apply flex-1 to take remaining vertical space */}\n          <div className=\"flex gap-3 flex-1 min-h-0\">\n            {/* Chat panel - adjust width based on replay mode */}\n            <motion.div\n              layout\n              className={isReplayMode ? 'w-[50%] flex flex-col' : 'w-[50%] flex flex-col'}\n            >\n              <Shell className=\"h-full rounded-xl bg-white/95 dark:bg-gray-800/95 backdrop-blur-sm border border-[#E5E6EC] dark:border-none bg-[#FFFFFFE5] dark:shadow-gray-950/5\">\n                <ChatPanel />\n              </Shell>\n            </motion.div>\n\n            {/* Workspace panel */}\n            <motion.div layout className=\"w-[50%] flex flex-col\">\n              <Shell className=\"h-full rounded-xl bg-white/95 dark:bg-gray-800/95 backdrop-blur-sm border border-[#E5E6EC] dark:border-none bg-[#FFFFFFE5] dark:shadow-gray-950/5\">\n                <WorkspacePanel />\n              </Shell>\n            </motion.div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { useParams, Navigate, useLocation } from 'react-router-dom';\nimport { useSession } from '@/common/hooks/useSession';\nimport { useReplayMode } from '@/common/hooks/useReplayMode';\n\ninterface SessionRouterProps {\n  children: React.ReactNode;\n}\n\n/**\n * SessionRouter Component - Handles session routing logic\n */\nexport const SessionRouter: React.FC<SessionRouterProps> = ({ children }) => {\n  const { sessionId } = useParams<{ sessionId: string }>();\n  const { setActiveSession, sessions, connectionStatus, activeSessionId, sendMessage } =\n    useSession();\n  const isReplayMode = useReplayMode();\n  const location = useLocation();\n\n  // Check if session exists in our loaded sessions\n  const sessionExists = sessions.some((session) => session.id === sessionId);\n\n  // Handle query parameter if present\n  useEffect(() => {\n    const searchParams = new URLSearchParams(location.search);\n    const query = searchParams.get('q');\n\n    if (\n      query &&\n      sessionId &&\n      activeSessionId === sessionId &&\n      !location.pathname.includes('/welcome')\n    ) {\n      // Process the query\n      sendMessage(query).catch((error) => {\n        console.error(`Failed to send query: ${error}`);\n      });\n    }\n  }, [location.search, sessionId, activeSessionId, sendMessage, location.pathname]);\n\n  // Setup session - but skip in replay mode as it's handled by ReplayModeProvider\n  useEffect(() => {\n    // Skip this logic in replay mode since session is already set\n    if (isReplayMode) {\n      console.log('[ReplayMode] SessionRouter: Skipping session setup in replay mode');\n      return;\n    }\n\n    // Only set active session if:\n    // 1. We have a session ID from URL\n    // 2. It exists in our sessions list\n    // 3. We're connected\n    if (sessionId && sessionExists && connectionStatus.connected) {\n      console.log(`SessionRouter: Loading session ${sessionId} from URL`);\n\n      setActiveSession(sessionId).catch((error) => {\n        console.error(`Failed to load session ${sessionId}:`, error);\n      });\n    }\n  }, [sessionId, sessionExists, connectionStatus.connected, setActiveSession, isReplayMode]);\n\n  // In replay mode, always show content regardless of session existence\n  if (isReplayMode) {\n    console.log('[ReplayMode] SessionRouter: Rendering children in replay mode');\n    return <>{children}</>;\n  }\n\n  // For normal mode, redirect if session doesn't exist\n  if (!sessionExists && sessions.length > 0 && sessionId) {\n    return <Navigate to=\"/\" replace />;\n  }\n\n  return <>{children}</>;\n};\n","import React from 'react';\nimport { Provider } from 'jotai';\nimport { App } from './App';\nimport { ReplayModeProvider } from '@/common/hooks/useReplayMode';\nimport { HashRouter, BrowserRouter } from 'react-router-dom';\n\n/**\n * Agent TARS Web UI v2 - Entry Component\n *\n * Provides the Jotai atom provider and initializes theme based on user preference.\n * Uses the enhanced ReplayModeProvider that now handles both context provision and initialization.\n */\nexport const AgentTARSWebUI: React.FC = () => {\n  // Initialize theme based on user preference\n  React.useEffect(() => {\n    // Check if user prefers dark mode\n    const prefersDarkMode = window.matchMedia('(prefers-color-scheme: dark)').matches;\n\n    // Check if theme is stored in localStorage\n    const storedTheme = localStorage.getItem('agent-tars-theme');\n\n    // Apply dark mode if preferred or stored\n    if (storedTheme === 'dark' || (storedTheme === null && prefersDarkMode)) {\n      document.documentElement.classList.add('dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n    }\n\n    // Listen for theme preference changes\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleChange = (e: MediaQueryListEvent) => {\n      if (storedTheme === null) {\n        if (e.matches) {\n          document.documentElement.classList.add('dark');\n        } else {\n          document.documentElement.classList.remove('dark');\n        }\n      }\n    };\n\n    mediaQuery.addEventListener('change', handleChange);\n\n    return () => {\n      mediaQuery.removeEventListener('change', handleChange);\n    };\n  }, []);\n\n  // Use HashRouter for shared HTML files (replay mode) to prevent routing issues\n  const isReplayMode = window.AGENT_TARS_REPLAY_MODE === true;\n  console.log('isReplayMode', isReplayMode);\n  const Router = isReplayMode ? HashRouter : BrowserRouter;\n\n  return (\n    <Provider>\n      <ReplayModeProvider>\n        <Router>\n          <App />\n        </Router>\n      </ReplayModeProvider>\n    </Provider>\n  );\n};\n","import React, { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { isMultimodalContent } from '@/common/utils/typeGuards';\nimport { ChatCompletionContentPart, Message as MessageType } from '@/common/types';\nimport { useSession } from '@/common/hooks/useSession';\nimport { useTool } from '@/common/hooks/useTool';\nimport { MarkdownRenderer } from '@/sdk/markdown-renderer';\nimport './Message.css';\n\n// Import sub-components\nimport { SystemMessage } from './components/SystemMessage';\nimport { MultimodalContent } from './components/MultimodalContent';\nimport { AssistantExpandableContent } from './components/AssistantExpandableContent';\nimport { ToolCalls } from './components/ToolCalls';\nimport { ThinkingToggle } from './components/ThinkingToggle';\nimport { MessageTimestamp } from './components/MessageTimestamp';\nimport { ThinkingAnimation } from './components/ThinkingAnimation';\nimport { useAtomValue } from 'jotai';\nimport { replayStateAtom } from '@/common/state/atoms/replay';\nimport { ReportFileEntry } from './components/ReportFileEntry';\nimport { messagesAtom } from '@/common/state/atoms/message';\nimport { FiExternalLink } from 'react-icons/fi';\n\ninterface MessageProps {\n  message: MessageType;\n  shouldDisplayTimestamp?: boolean;\n  isIntermediate?: boolean;\n  isInGroup?: boolean;\n}\n\n/**\n * Message Component - Displays a single message in the chat\n *\n * Design principles:\n * - Minimalist black & white design with no avatars\n * - Clean, full-width message bubbles with subtle differentiation\n * - Focus on content with minimal visual distractions\n * - Elegant spacing and typography\n * - Progressive disclosure for detailed content\n */\nexport const Message: React.FC<MessageProps> = ({\n  message,\n  isIntermediate = false,\n  isInGroup = false,\n  shouldDisplayTimestamp = true,\n}) => {\n  const [showThinking, setShowThinking] = useState(false);\n  const [showSteps, setShowSteps] = useState(false);\n  const { setActivePanelContent, activeSessionId } = useSession();\n  const { getToolIcon } = useTool();\n  const replayState = useAtomValue(replayStateAtom);\n  const allMessages = useAtomValue(messagesAtom);\n\n  const isMultimodal = isMultimodalContent(message.content);\n  const isEnvironment = message.role === 'environment';\n  const isUserMessage = message.role === 'user';\n\n  const isFinalAnswer = message.role === 'final_answer' || message.isDeepResearch;\n\n  // Check if this is a final assistant response\n  const isFinalAssistantResponse = message.role === 'assistant' && message.finishReason === 'stop';\n\n  // Handle tool call click - show in panel\n  const handleToolCallClick = (toolCall: any) => {\n    if (message.toolResults && message.toolResults.length > 0) {\n      const result = message.toolResults.find((r) => r.toolCallId === toolCall.id);\n      if (result) {\n        setActivePanelContent({\n          type: result.type,\n          source: result.content,\n          title: result.name,\n          timestamp: result.timestamp,\n          toolCallId: result.toolCallId,\n          error: result.error,\n          arguments: result.arguments,\n        });\n      }\n    }\n  };\n\n  // Handle click on final assistant response to show latest environment state\n  const handleFinalResponseClick = () => {\n    if (!activeSessionId || !isFinalAssistantResponse) return;\n\n    const sessionMessages = allMessages[activeSessionId] || [];\n\n    // Find the most recent environment input\n    for (let i = sessionMessages.length - 1; i >= 0; i--) {\n      const msg = sessionMessages[i];\n      if (msg.role === 'environment' && Array.isArray(msg.content)) {\n        const imageContent = msg.content.find(\n          (item) => item.type === 'image_url' && item.image_url && item.image_url.url,\n        );\n\n        if (imageContent) {\n          setActivePanelContent({\n            type: 'image',\n            source: msg.content,\n            title: msg.description || 'Final Environment State',\n            timestamp: msg.timestamp,\n            environmentId: msg.id,\n          });\n          break;\n        }\n      }\n    }\n  };\n\n  // Render content based on type\n  const renderContent = () => {\n    if (isMultimodal) {\n      return (\n        <MultimodalContent\n          content={message.content as ChatCompletionContentPart[]}\n          timestamp={message.timestamp}\n          setActivePanelContent={setActivePanelContent}\n        />\n      );\n    }\n\n    // For assistant messages with tool calls, first show summary\n    if (message.role === 'assistant' && message.toolCalls && message.toolCalls.length > 0) {\n      return (\n        <AssistantExpandableContent\n          content={message.content as string}\n          showSteps={showSteps}\n          setShowSteps={setShowSteps}\n        />\n      );\n    }\n\n    return <MarkdownRenderer content={message.content as string} forceDarkTheme={isUserMessage} />;\n  };\n\n  // Message animation variants\n  const messageVariants = {\n    initial: { opacity: 0, y: 10 },\n    animate: { opacity: 1, y: 0 },\n    transition: { duration: 0.3 },\n  };\n\n  // Determine message bubble style based on role and state\n  const getMessageBubbleClasses = () => {\n    let baseClasses = '';\n\n    if (message.role === 'user') {\n      if (isImageOnlyMessage) {\n        baseClasses = 'message-user message-user-image';\n      } else {\n        baseClasses = 'message-user';\n      }\n    } else if (message.role === 'system') {\n      baseClasses = 'message-system';\n    } else if (message.role === 'environment') {\n      baseClasses = 'environment-message-minimal';\n    } else {\n      baseClasses = 'message-assistant';\n    }\n\n    // 添加更平滑的点击样式\n    if (isFinalAssistantResponse) {\n      baseClasses += ' cursor-pointer transition-all duration-300';\n    }\n\n    return baseClasses;\n  };\n\n  // 检查消息是否只包含图片（用于样式优化）\n  const isImageOnlyMessage = React.useMemo(() => {\n    if (!isMultimodalContent(message.content)) return false;\n\n    const imageContents = message.content.filter((part) => part.type === 'image_url');\n    const textContents = message.content.filter((part) => part.type === 'text');\n\n    return imageContents.length > 0 && textContents.length === 0;\n  }, [message.content]);\n\n  // 检查消息是否只包含文本（用于样式优化）\n  const isTextOnlyMessage = React.useMemo(() => {\n    if (!isMultimodalContent(message.content)) return true;\n\n    const imageContents = message.content.filter((part) => part.type === 'image_url');\n    const textContents = message.content.filter((part) => part.type === 'text');\n\n    return textContents.length > 0 && imageContents.length === 0;\n  }, [message.content]);\n\n  return (\n    <motion.div\n      initial=\"initial\"\n      animate=\"animate\"\n      variants={messageVariants}\n      className={`message-container ${message.role === 'user' ? 'message-container-user' : 'message-container-assistant'} ${isIntermediate ? 'message-container-intermediate' : ''}`}\n    >\n      <div\n        className={`message-bubble ${getMessageBubbleClasses()} ${isIntermediate ? 'message-bubble-intermediate' : ''} ${isFinalAssistantResponse ? 'group' : ''}`}\n        onClick={isFinalAssistantResponse ? handleFinalResponseClick : undefined}\n        title={isFinalAssistantResponse ? 'Click to view final environment state' : undefined}\n      >\n        {/* Role-based content */}\n        {message.role === 'system' ? (\n          <SystemMessage content={message.content as string} />\n        ) : (\n          <>\n            <div\n              className={`prose ${message.role === 'user' ? 'prose-invert' : 'dark:prose-invert'} prose-sm max-w-none text-sm`}\n            >\n              {renderContent()}\n            </div>\n\n            {/* Show click hint for final assistant responses */}\n            {isFinalAssistantResponse && !isIntermediate && !isInGroup && (\n              <div className=\"mt-2 opacity-0 group-hover:opacity-100 transition-opacity duration-200 text-xs text-gray-500 dark:text-gray-400 flex items-center\">\n                <FiExternalLink size={14} className=\"mr-1\" />\n                Click to view final environment state\n              </div>\n            )}\n\n            {/* 总是显示最终答案/研究报告的文件入口，除非是中间消息或组内消息 */}\n            {isFinalAnswer &&\n              message.title &&\n              typeof message.content === 'string' &&\n              !isIntermediate &&\n              !isInGroup && (\n                <ReportFileEntry\n                  title={message.title || 'Research Report'}\n                  timestamp={message.timestamp}\n                  content={message.content}\n                />\n              )}\n\n            {/* Tool calls section - now with loading states and status icons */}\n            {message.toolCalls && message.toolCalls.length > 0 && (\n              <ToolCalls\n                toolCalls={message.toolCalls}\n                onToolCallClick={handleToolCallClick}\n                getToolIcon={getToolIcon}\n                isIntermediate={isIntermediate}\n                toolResults={message.toolResults || []} // Pass tool results for status checking\n              />\n            )}\n\n            {/* Thinking section */}\n            {message.thinking && (\n              <ThinkingToggle\n                thinking={message.thinking}\n                showThinking={showThinking}\n                setShowThinking={setShowThinking}\n              />\n            )}\n          </>\n        )}\n      </div>\n\n      {/* Timestamp and copy button - only for main messages */}\n      {message.role !== 'system' &&\n        !isIntermediate &&\n        !isInGroup &&\n        shouldDisplayTimestamp &&\n        !replayState.isActive && (\n          <MessageTimestamp\n            timestamp={message.timestamp}\n            content={message.content}\n            role={message.role}\n          />\n        )}\n    </motion.div>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport WelcomePage from './WelcomePage';\nimport { useSession } from '@/common/hooks/useSession';\n\n/**\n * HomePage Component - Handles the welcome page and query parameter processing\n */\nconst HomePage: React.FC = () => {\n  const { activeSessionId, sendMessage, createSession } = useSession();\n  const location = useLocation();\n  const navigate = useNavigate();\n\n  // Process query parameters if any (for direct query submissions)\n  useEffect(() => {\n    const processQueryParam = async () => {\n      const searchParams = new URLSearchParams(location.search);\n      const query = searchParams.get('q');\n\n      // If there's a query parameter but no active session, create one and send the query\n      if (query && !activeSessionId) {\n        try {\n          const sessionId = await createSession();\n\n          // Navigate to the session without the query parameter\n          navigate(`/${sessionId}`);\n\n          // Send the query after a short delay to ensure session is ready\n          setTimeout(() => {\n            sendMessage(query);\n          }, 500);\n        } catch (error) {\n          console.error('Failed to process query:', error);\n        }\n      }\n    };\n\n    processQueryParam();\n  }, [location, activeSessionId, createSession, navigate, sendMessage]);\n\n  return <WelcomePage />;\n};\n\nexport default HomePage;\n","import React, { useState, useRef, useEffect } from 'react';\nimport { motion } from 'framer-motion';\nimport { useNavigate } from 'react-router-dom';\nimport { FiArrowRight, FiArrowUpRight } from 'react-icons/fi';\nimport { useSession } from '@/common/hooks/useSession';\n\nconst WelcomePage: React.FC = () => {\n  const navigate = useNavigate();\n  const { createSession, sendMessage, sessions } = useSession();\n  const [query, setQuery] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDirectChatLoading, setIsDirectChatLoading] = useState(false);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    // Focus the input field when component mounts\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, []);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!query.trim() || isLoading) return;\n\n    setIsLoading(true);\n\n    try {\n      // Create a new session\n      const sessionId = await createNewSession();\n      navigate(`/${sessionId}`);\n\n      // Store the query for later use but navigate without query parameter\n      const userQuery = query;\n\n      // Navigate to the session route without query parameters\n      navigate(`/${sessionId}`);\n\n      // After navigation, the SessionRouter component will handle setting the active session\n      // We can send the message after a short delay to ensure the session is properly initialized\n      setTimeout(() => {\n        sendMessage(userQuery).catch((error) => {\n          console.error('Failed to send initial message:', error);\n        });\n      }, 500);\n    } catch (error) {\n      console.error('Failed to create session:', error);\n      setIsLoading(false);\n    }\n  };\n\n  // Function to handle direct chat without entering a query\n  const handleDirectChat = async () => {\n    if (isDirectChatLoading) return;\n\n    setIsDirectChatLoading(true);\n\n    try {\n      // Check if there are existing sessions\n      if (sessions && sessions.length > 0) {\n        // Find the latest session and navigate\n        const latestSession = sessions[0]; // Assuming sessions are sorted by time in descending order\n        navigate(`/${latestSession.id}`);\n      } else {\n        // If no existing sessions, create a new session\n        const sessionId = await createSession();\n        navigate(`/${sessionId}`);\n      }\n    } catch (error) {\n      console.error('Failed to navigate to chat:', error);\n    } finally {\n      setIsDirectChatLoading(false);\n    }\n  };\n\n  const createNewSession = async () => {\n    const sessionId = await createSession();\n    return sessionId;\n  };\n\n  const examplePrompts = [\n    'Search for the latest GUI Agent papers',\n    'Find information about UI TARS',\n    'Tell me the top 5 most popular projects on ProductHunt today',\n    'Please book me the earliest flight from Hangzhou to Shenzhen on 10.1',\n  ];\n\n  return (\n    <div className=\"min-h-screen flex flex-col bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-900 dark:to-gray-800\">\n      {/* Subtle background gradient */}\n      <div className=\"fixed inset-0 bg-gradient-to-b from-transparent to-gray-100/50 dark:to-gray-800/50 pointer-events-none\"></div>\n\n      {/* Header with logo */}\n      <header className=\"relative z-10 pt-8 px-8\">\n        <div className=\"max-w-7xl mx-auto flex justify-between items-center\">\n          <div className=\"flex items-center\">\n            <motion.img\n              whileHover={{ scale: 1.05 }}\n              whileTap={{ scale: 0.95 }}\n              src=\"https://lf3-static.bytednsdoc.com/obj/eden-cn/psvhouloj/agent-tars/icon.png\"\n              className=\"w-12 h-12 rounded-xl flex items-center justify-center mx-auto text-white dark:text-gray-900 cursor-pointer mr-3\"\n              alt=\"Agent TARS\"\n            />\n            <span className=\"text-xl font-display font-bold text-gray-900 dark:text-gray-100\">\n              Agent TARS\n            </span>\n          </div>\n        </div>\n      </header>\n\n      {/* Main content */}\n      <main className=\"flex-1 relative z-10 flex flex-col items-center justify-center px-4 py-12\">\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.5 }}\n          className=\"text-center mb-12\"\n        >\n          <h1 className=\"text-4xl md:text-5xl lg:text-6xl font-display font-bold bg-gradient-to-r from-gray-900 via-gray-800 to-gray-700 dark:from-gray-100 dark:via-gray-200 dark:to-gray-300 text-transparent bg-clip-text mb-4\">\n            An multimodal AI agent\n          </h1>\n          <p className=\"text-lg text-gray-600 dark:text-gray-300 max-w-2xl mx-auto\">\n            An open-source multimodal AI agent Offering seamless integration with a wide range of\n            real-world tools.\n          </p>\n        </motion.div>\n\n        {/* Search form - Enlarged */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.95 }}\n          animate={{ opacity: 1, scale: 1 }}\n          transition={{ duration: 0.5, delay: 0.2 }}\n          className=\"w-full max-w-3xl mx-auto mb-8\"\n        >\n          <form onSubmit={handleSubmit} className=\"relative\">\n            <div className=\"relative overflow-hidden rounded-2xl transition-all duration-300 group\">\n              {/* Animated gradient border */}\n              <div className=\"absolute inset-0 bg-gradient-to-r from-indigo-500 via-purple-500 to-pink-500 dark:from-indigo-400 dark:via-purple-400 dark:to-pink-400 animate-border-flow opacity-70 group-hover:opacity-100 transition-opacity\"></div>\n\n              {/* Input field - Enlarged */}\n              <div className=\"relative m-[2px] rounded-[calc(1rem-2px)] bg-white dark:bg-gray-800 p-2\">\n                <input\n                  ref={inputRef}\n                  type=\"text\"\n                  value={query}\n                  onChange={(e) => setQuery(e.target.value)}\n                  placeholder=\"Ask Agent TARS anything...\"\n                  className=\"w-full px-6 py-6 text-xl bg-transparent outline-none text-gray-800 dark:text-gray-100 placeholder-gray-400 dark:placeholder-gray-500\"\n                  disabled={isLoading || isDirectChatLoading}\n                />\n\n                {/* Submit button */}\n                <div className=\"absolute right-4 inset-y-0 flex items-center\">\n                  <motion.button\n                    whileTap={{ scale: 0.95 }}\n                    type=\"submit\"\n                    disabled={!query.trim() || isLoading || isDirectChatLoading}\n                    className={`p-4 rounded-xl transition-all duration-200 ${\n                      !query.trim() || isLoading || isDirectChatLoading\n                        ? 'bg-gray-100 dark:bg-gray-700 text-gray-400 cursor-not-allowed'\n                        : 'bg-gradient-to-r from-indigo-500 to-purple-600 text-white shadow-md'\n                    }`}\n                  >\n                    {isLoading ? (\n                      <motion.div\n                        animate={{ rotate: 360 }}\n                        transition={{ duration: 1, repeat: Infinity, ease: 'linear' }}\n                      >\n                        <svg\n                          className=\"w-6 h-6\"\n                          viewBox=\"0 0 24 24\"\n                          fill=\"none\"\n                          xmlns=\"http://www.w3.org/2000/svg\"\n                        >\n                          <path\n                            d=\"M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12\"\n                            stroke=\"currentColor\"\n                            strokeWidth=\"2\"\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                          />\n                        </svg>\n                      </motion.div>\n                    ) : (\n                      <FiArrowRight size={22} />\n                    )}\n                  </motion.button>\n                </div>\n              </div>\n            </div>\n\n            {/* Direct chat button */}\n            <motion.div\n              initial={{ opacity: 0, y: 10 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.3, delay: 0.4 }}\n              className=\"flex justify-end mt-3 mr-1\"\n            >\n              <motion.button\n                whileHover={{ scale: 1.01 }}\n                whileTap={{ scale: 0.98 }}\n                onClick={handleDirectChat}\n                disabled={isLoading || isDirectChatLoading}\n                className={`flex items-center gap-1.5 py-1.5 px-2 text-sm text-gray-500 dark:text-gray-400 relative group transition-colors duration-300 ${\n                  isLoading || isDirectChatLoading\n                    ? 'opacity-60 cursor-not-allowed'\n                    : 'cursor-pointer group-hover:text-gray-900 dark:group-hover:text-gray-100'\n                }`}\n                type=\"button\"\n              >\n                <span className=\"group-hover:text-gray-900 dark:group-hover:text-gray-100 transition-colors duration-300\">\n                  Go to task history\n                </span>\n                {isDirectChatLoading ? (\n                  <motion.div\n                    animate={{ rotate: 360 }}\n                    transition={{ duration: 1, repeat: Infinity, ease: 'linear' }}\n                    className=\"w-4 h-4\"\n                  >\n                    <svg\n                      className=\"w-4 h-4 text-gray-500 dark:text-gray-400\"\n                      viewBox=\"0 0 24 24\"\n                      fill=\"none\"\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                    >\n                      <path\n                        d=\"M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12\"\n                        stroke=\"currentColor\"\n                        strokeWidth=\"2\"\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                      />\n                    </svg>\n                  </motion.div>\n                ) : (\n                  <FiArrowUpRight\n                    className=\"text-gray-500 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-gray-100 transition-colors duration-300\"\n                    size={14}\n                  />\n                )}\n                <span className=\"absolute bottom-0 left-0 w-0 h-[1px] bg-gray-500 dark:bg-gray-400 group-hover:w-full group-hover:bg-gray-900 dark:group-hover:bg-gray-100 transition-all duration-300\"></span>\n              </motion.button>\n            </motion.div>\n\n            {/* Example prompts - Simplified */}\n            <div className=\"mt-6 flex flex-wrap justify-center gap-2\">\n              {examplePrompts.map((prompt, index) => (\n                <motion.button\n                  key={index}\n                  initial={{ opacity: 0, y: 10 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ duration: 0.3, delay: 0.4 + index * 0.1 }}\n                  type=\"button\"\n                  onClick={() => setQuery(prompt)}\n                  className=\"text-sm px-4 py-2 rounded-full bg-white dark:bg-gray-800 border border-gray-200/50 dark:border-gray-700/30 hover:bg-gray-50 dark:hover:bg-gray-700/50 text-gray-600 dark:text-gray-300 transition-colors\"\n                >\n                  {prompt}\n                </motion.button>\n              ))}\n            </div>\n          </form>\n        </motion.div>\n\n        {/* Minimal footer note */}\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{ duration: 0.5, delay: 0.7 }}\n          className=\"mt-12 text-center\"\n        >\n          <div className=\"inline-flex items-center gap-2 text-sm text-gray-500 dark:text-gray-400\">\n            <span>Powered by UI-TARS Vision-Language Model</span>\n          </div>\n        </motion.div>\n      </main>\n    </div>\n  );\n};\n\nexport default WelcomePage;\n","import React, { useRef, useState, useEffect } from 'react';\nimport { motion } from 'framer-motion';\nimport { FiMessageSquare, FiTool, FiImage, FiCpu, FiBookOpen } from 'react-icons/fi';\nimport { AgentEventStream } from '@/common/types';\nimport { formatTimestamp } from '@/common/utils/formatters';\nimport { useReplay } from '@/common/hooks/useReplay';\n\n/**\n * TimelineSlider - Interactive timeline for replay navigation\n *\n * Enhanced with:\n * - Monochromatic design matching the app's black/gray aesthetic\n * - Subtle markers with minimal visual noise\n * - No box shadows or gradients\n */\nexport const TimelineSlider: React.FC = () => {\n  const { replayState, jumpToPosition, getCurrentPosition, getCurrentEvent } = useReplay();\n\n  const sliderRef = useRef<HTMLDivElement>(null);\n  const [isDragging, setIsDragging] = useState(false);\n  const [hoverPosition, setHoverPosition] = useState<number | null>(null);\n  const [hoverEvent, setHoverEvent] = useState<Event | null>(null);\n\n  const { events } = replayState;\n  const currentPosition = getCurrentPosition();\n  const currentEvent = getCurrentEvent();\n\n  // Handle mouse down on slider\n  const handleMouseDown = (e: React.MouseEvent) => {\n    if (!sliderRef.current) return;\n\n    setIsDragging(true);\n    updatePositionFromMouse(e);\n  };\n\n  // Handle mouse move for dragging and hover feedback\n  const handleMouseMove = (e: React.MouseEvent) => {\n    if (!sliderRef.current) return;\n\n    // Update hover position and event\n    const rect = sliderRef.current.getBoundingClientRect();\n    const position = (e.clientX - rect.left) / rect.width;\n    setHoverPosition(position);\n\n    // Find event closest to hover position\n    if (events.length > 0) {\n      const index = Math.floor(position * events.length);\n      const boundedIndex = Math.max(0, Math.min(index, events.length - 1));\n      setHoverEvent(events[boundedIndex]);\n    }\n\n    // Update position if dragging\n    if (isDragging) {\n      updatePositionFromMouse(e);\n    }\n  };\n\n  // Handle mouse up to end dragging\n  const handleMouseUp = () => {\n    setIsDragging(false);\n  };\n\n  // Calculate position from mouse event\n  const updatePositionFromMouse = (e: React.MouseEvent) => {\n    if (!sliderRef.current) return;\n\n    const rect = sliderRef.current.getBoundingClientRect();\n    const position = (e.clientX - rect.left) / rect.width;\n    jumpToPosition(position);\n  };\n\n  // Handle mouse leave\n  const handleMouseLeave = () => {\n    setHoverPosition(null);\n    setHoverEvent(null);\n    setIsDragging(false);\n  };\n\n  // Add global mouse up handler when dragging\n  useEffect(() => {\n    if (isDragging) {\n      const handleGlobalMouseUp = () => setIsDragging(false);\n      window.addEventListener('mouseup', handleGlobalMouseUp);\n      return () => window.removeEventListener('mouseup', handleGlobalMouseUp);\n    }\n  }, [isDragging]);\n\n  // Get color for event marker\n  const getEventColor = (event: AgentEventStream.Event) => {\n    switch (event.type) {\n      case 'user_message':\n        return 'bg-gray-400 dark:bg-gray-500';\n      case 'assistant_message':\n        return 'bg-gray-600 dark:bg-gray-400';\n      case 'tool_call':\n      case 'tool_result':\n        return 'bg-gray-500 dark:bg-gray-400';\n      case 'environment_input':\n        return 'bg-gray-500 dark:bg-gray-400';\n      case 'plan_update':\n      case 'plan_finish':\n        return 'bg-gray-500 dark:bg-gray-400';\n      case 'final_answer':\n        return 'bg-gray-700 dark:bg-gray-300';\n      default:\n        return 'bg-gray-400 dark:bg-gray-500';\n    }\n  };\n\n  // Get icon for event type (for tooltip)\n  const getEventIcon = (event: AgentEventStream.Event) => {\n    switch (event.type) {\n      case 'user_message':\n        return <FiMessageSquare size={14} className=\"text-gray-700 dark:text-gray-300\" />;\n      case 'assistant_message':\n        return <FiMessageSquare size={14} className=\"text-gray-700 dark:text-gray-300\" />;\n      case 'tool_call':\n      case 'tool_result':\n        return <FiTool size={14} className=\"text-gray-700 dark:text-gray-300\" />;\n      case 'environment_input':\n        return <FiImage size={14} className=\"text-gray-700 dark:text-gray-300\" />;\n      case 'plan_update':\n      case 'plan_finish':\n        return <FiCpu size={14} className=\"text-gray-700 dark:text-gray-300\" />;\n      case 'final_answer':\n        return <FiBookOpen size={14} className=\"text-gray-700 dark:text-gray-300\" />;\n      default:\n        return <FiMessageSquare size={14} className=\"text-gray-700 dark:text-gray-300\" />;\n    }\n  };\n\n  // Get event description for hover tooltip\n  const getEventDescription = (event: AgentEventStream.Event) => {\n    switch (event.type) {\n      case 'user_message':\n        return 'User Message';\n      case 'assistant_message':\n        return 'Assistant Response';\n      case 'tool_call':\n        return `Tool Call: ${event.name || ''}`;\n      case 'tool_result':\n        return `Tool Result: ${event.name || ''}`;\n      case 'environment_input':\n        return 'Browser Screenshot';\n      case 'plan_update':\n        return 'Plan Update';\n      case 'plan_finish':\n        return 'Plan Completed';\n      case 'final_answer':\n        return 'Research Report';\n      default:\n        return event.type;\n    }\n  };\n\n  // Get event content preview for the tooltip\n  const getEventContentPreview = (event: AgentEventStream.Event) => {\n    if (event.type === 'user_message' || event.type === 'assistant_message') {\n      const content =\n        typeof event.content === 'string'\n          ? event.content\n          : Array.isArray(event.content) &&\n              event.content.length > 0 &&\n              event.content[0].type === 'text'\n            ? event.content[0].text\n            : '';\n\n      return content.length > 50 ? content.substring(0, 47) + '...' : content;\n    }\n    return '';\n  };\n\n  return (\n    <div className=\"relative px-3 py-2 rounded-xl bg-gray-100 dark:bg-gray-800 border border-gray-200/50 dark:border-gray-700/30\">\n      {/* Current time display */}\n      {currentEvent && (\n        <div className=\"absolute left-3 top-0 text-xs text-gray-500 dark:text-gray-400 py-1\">\n          {formatTimestamp(currentEvent.timestamp)}\n        </div>\n      )}\n\n      {/* Timeline slider with modern media player styling */}\n      <div\n        ref={sliderRef}\n        className=\"relative h-6 mt-4 cursor-pointer\"\n        onMouseDown={handleMouseDown}\n        onMouseMove={handleMouseMove}\n        onMouseUp={handleMouseLeave}\n        onMouseLeave={handleMouseLeave}\n      >\n        {/* Track background - simplified and more minimal */}\n        <div className=\"absolute inset-0 top-1/2 -translate-y-1/2 h-1.5 bg-gray-200 dark:bg-gray-700 rounded-full overflow-hidden\">\n          {/* No texture dots, keeping it minimal */}\n        </div>\n\n        {/* Progress fill */}\n        <div\n          className=\"absolute top-1/2 -translate-y-1/2 left-0 h-1.5 bg-gray-800 dark:bg-gray-300 rounded-full\"\n          style={{ width: `${currentPosition}%` }}\n        />\n\n        {/* Event markers - more subtle, minimal style */}\n        {events.map((event, index) => {\n          const position = (index / (events.length - 1)) * 100;\n\n          return (\n            <motion.div\n              key={`${event.id}-${index}`}\n              className={`absolute top-1/2 -translate-y-1/2 w-1.5 h-3 ${getEventColor(event)} rounded-sm`}\n              style={{ left: `${position}%`, marginLeft: '-1px' }}\n              initial={{ opacity: 0.6, height: 3 }}\n              animate={{\n                opacity: 0.8,\n                height: currentEvent?.id === event.id ? 5 : 3,\n              }}\n              whileHover={{ opacity: 1, height: 5 }}\n              transition={{ duration: 0.2 }}\n            />\n          );\n        })}\n\n        {/* Playhead - larger and more prominent but without shadow */}\n        <motion.div\n          className=\"absolute top-[5px] -translate-y-1/2 w-4 h-4 rounded-full bg-white dark:bg-gray-200 border-2 border-gray-800 dark:border-gray-600 z-30\"\n          style={{ left: `calc(${currentPosition}% - 8px)` }}\n          animate={{\n            scale: isDragging ? 1.2 : 1,\n          }}\n          transition={{ duration: 0.2 }}\n        />\n\n        {/* Hover position indicator */}\n        {hoverPosition !== null && !isDragging && (\n          <motion.div\n            className=\"absolute top-1/2 -translate-y-1/2 w-1 h-8 bg-gray-400/40 dark:bg-gray-500/40 rounded-full z-10\"\n            style={{ left: `${hoverPosition * 100}%` }}\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ duration: 0.2 }}\n          />\n        )}\n      </div>\n\n      {/* Improved hover tooltip - monochromatic style */}\n      {hoverEvent && hoverPosition !== null && (\n        <motion.div\n          className=\"absolute bottom-full mb-2 p-2 bg-gray-100 dark:bg-gray-800 rounded-lg border border-gray-200/50 dark:border-gray-700/30 text-xs max-w-xs z-50\"\n          style={{\n            left: `${hoverPosition * 100}%`,\n            transform: 'translateX(-50%)',\n          }}\n          initial={{ opacity: 0, y: 5, scale: 0.95 }}\n          animate={{ opacity: 1, y: 0, scale: 1 }}\n          transition={{ duration: 0.2 }}\n        >\n          <div className=\"flex items-start gap-2\">\n            <div className=\"mt-0.5 flex-shrink-0\">{getEventIcon(hoverEvent)}</div>\n            <div>\n              <div className=\"font-medium text-gray-800 dark:text-gray-200\">\n                {getEventDescription(hoverEvent)}\n              </div>\n\n              {getEventContentPreview(hoverEvent) && (\n                <div className=\"mt-1 text-gray-600 dark:text-gray-400 italic line-clamp-2 text-[10px]\">\n                  \"{getEventContentPreview(hoverEvent)}\"\n                </div>\n              )}\n\n              <div className=\"mt-1 text-[10px] text-gray-500 dark:text-gray-400\">\n                {formatTimestamp(hoverEvent.timestamp)}\n              </div>\n            </div>\n          </div>\n\n          {/* Tooltip arrow */}\n          <div className=\"absolute left-1/2 bottom-0 w-2 h-2 bg-gray-100 dark:bg-gray-800 border-r border-b border-gray-200/50 dark:border-gray-700/30 transform rotate-45 translate-y-1 -translate-x-1\"></div>\n        </motion.div>\n      )}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { FiShare2 } from 'react-icons/fi';\nimport { useSession } from '@/common/hooks/useSession';\nimport { ShareModal } from './ShareModal';\n\ninterface ShareButtonProps {\n  variant?: 'default' | 'navbar';\n}\n\n/**\n * 分享按钮组件 - 显示在聊天面板底部或导航栏\n *\n * 设计原则:\n * - 简洁的单色图标，与整体黑白灰风格保持一致\n * - 圆形按钮设计，保持优雅的视觉效果\n * - 精细的悬停和点击动画，提升交互体验\n * - 支持不同的展示变体以适应不同位置\n */\nexport const ShareButton: React.FC<ShareButtonProps> = ({ variant = 'default' }) => {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const { activeSessionId } = useSession();\n\n  const handleOpenModal = () => {\n    setIsModalOpen(true);\n  };\n\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n  };\n\n  if (!activeSessionId) {\n    return null;\n  }\n\n  // Navbar variant has different styling\n  if (variant === 'navbar') {\n    return (\n      <>\n        <motion.button\n          whileHover={{ scale: 1.05 }}\n          whileTap={{ scale: 0.95 }}\n          onClick={handleOpenModal}\n          className=\"p-2 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 hover:bg-gray-100/40 dark:hover:bg-gray-700/40 rounded-full transition-all duration-200\"\n          title=\"Share this conversation\"\n        >\n          <FiShare2 size={16} />\n        </motion.button>\n\n        <ShareModal isOpen={isModalOpen} onClose={handleCloseModal} sessionId={activeSessionId} />\n      </>\n    );\n  }\n\n  // Default variant (original styling)\n  return (\n    <>\n      <motion.button\n        whileHover={{ scale: 1.05 }}\n        whileTap={{ scale: 0.95 }}\n        onClick={handleOpenModal}\n        className=\"flex items-center gap-1.5 px-3 py-1.5 rounded-3xl text-xs text-gray-700 dark:text-gray-200 bg-white dark:bg-gray-800 border border-gray-200/70 dark:border-gray-700/30 shadow-sm hover:bg-gray-50 dark:hover:bg-gray-700/70 transition-all duration-200\"\n        title=\"Share this conversation\"\n      >\n        <FiShare2 className=\"text-gray-500 dark:text-gray-400\" size={14} />\n        <span>Share</span>\n      </motion.button>\n\n      <ShareModal isOpen={isModalOpen} onClose={handleCloseModal} sessionId={activeSessionId} />\n    </>\n  );\n};\n","import React from 'react';\nimport { ToolBar } from './ToolBar';\nimport { ChatSession } from './ChatSession';\nimport { useLayout } from '@/common/hooks/useLayout';\nimport { useReplayMode } from '@/common/hooks/useReplayMode';\n\n/**\n * SidebarContainer - Container component that orchestrates the sidebar layout\n *\n * Design principles:\n * - Manages the layout of ToolBar and ChatSession components\n * - Handles conditional rendering based on replay mode\n * - Maintains proper spacing and alignment between components\n * - Provides a clean interface for the main layout\n */\nexport const SidebarContainer: React.FC = () => {\n  const { isSidebarCollapsed } = useLayout();\n  const isReplayMode = useReplayMode();\n\n  // In replay mode, only show the ToolBar\n  if (isReplayMode) {\n    return (\n      <div className=\"flex h-full\">\n        <ToolBar />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-full\">\n      <ToolBar />\n      <ChatSession isCollapsed={isSidebarCollapsed} />\n    </div>\n  );\n};\n\nexport default SidebarContainer;\n","import React, { useCallback } from 'react';\nimport { motion } from 'framer-motion';\n\nimport { FiPlus, FiHome } from 'react-icons/fi';\nimport { useNavigate } from 'react-router-dom';\nimport { useSession } from '@/common/hooks/useSession';\nimport { useReplayMode } from '@/common/hooks/useReplayMode';\n\n/**\n * ToolBar Component - Vertical toolbar inspired by modern IDE designs\n *\n * Design principles:\n * - Minimalist vertical bar with icon-only actions\n * - Consistent visual language with subtle animations\n * - Quick access to essential functionality\n * - Always visible regardless of sidebar collapse state\n */\nexport const ToolBar: React.FC = () => {\n  const navigate = useNavigate();\n  const isReplayMode = useReplayMode();\n  const { createSession, connectionStatus } = useSession();\n\n  // Create new session\n  const handleNewSession = useCallback(async () => {\n    try {\n      const sessionId = await createSession();\n      navigate(`/${sessionId}`);\n    } catch (error) {\n      console.error('Failed to create new session:', error);\n    }\n  }, [createSession, navigate]);\n\n  // Navigate to home\n  const handleNavigateHome = useCallback(() => {\n    navigate('/');\n  }, [navigate]);\n\n  return (\n    <div className=\"w-14 h-full flex flex-col backdrop-blur-sm border-r border-gray-300/40 dark:border-gray-600/20\">\n      {/* Tool buttons */}\n      <div className=\"flex-1 flex flex-col items-center gap-4 py-4\">\n        {/* New session button */}\n        {!isReplayMode && (\n          <motion.button\n            whileHover={{\n              scale: 1.08,\n              backgroundColor: connectionStatus.connected ? '#000000' : undefined,\n              boxShadow: connectionStatus.connected\n                ? '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)'\n                : undefined,\n            }}\n            whileTap={{ scale: 0.97 }}\n            transition={{ type: 'spring', stiffness: 400, damping: 17 }}\n            onClick={handleNewSession}\n            disabled={!connectionStatus.connected}\n            className={`w-8 h-8 rounded-lg flex items-center justify-center transition-all duration-200 ${\n              connectionStatus.connected\n                ? 'bg-gradient-to-r from-[#141414] to-[#1e1e1e] dark:from-gray-900 dark:to-gray-800 text-white hover:shadow-md'\n                : 'bg-gray-400 text-white cursor-not-allowed opacity-60'\n            }`}\n            title={connectionStatus.connected ? 'New Task' : 'Server disconnected'}\n          >\n            <FiPlus size={16} />\n          </motion.button>\n        )}\n\n        {/* Home button */}\n        {!isReplayMode && (\n          <motion.button\n            whileHover={{\n              scale: 1.08,\n              backgroundColor: 'rgba(0, 0, 0, 0.06)',\n              boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.05), 0 2px 4px -1px rgba(0, 0, 0, 0.03)',\n            }}\n            whileTap={{ scale: 0.97 }}\n            transition={{ type: 'spring', stiffness: 400, damping: 17 }}\n            onClick={handleNavigateHome}\n            className=\"w-8 h-8 rounded-lg flex items-center justify-center text-gray-700 dark:text-gray-300 hover:bg-gray-100/80 dark:hover:bg-gray-700/80 transition-all duration-200\"\n            title=\"Home\"\n          >\n            <FiHome size={16} />\n          </motion.button>\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { motion } from 'framer-motion';\nimport { FiArrowLeft, FiCpu, FiCheckCircle, FiClock, FiMap } from 'react-icons/fi';\nimport { useSession } from '@/common/hooks/useSession';\nimport { usePlan } from '@/common/hooks/usePlan';\nimport { PlanViewerRenderer, PlanKeyframe } from './renderers/PlanViewerRenderer';\n\ninterface PlanViewProps {\n  onBack: () => void;\n}\n\n/**\n * PlanView Component - Displays plan details in the workspace\n *\n * Features:\n * - Shows current plan status and steps\n * - Supports timeline navigation through plan keyframes\n * - Will support replay functionality in future\n */\nexport const PlanView: React.FC<PlanViewProps> = ({ onBack }) => {\n  const { activeSessionId } = useSession();\n  const { currentPlan } = usePlan(activeSessionId);\n  const [currentKeyframeIndex, setCurrentKeyframeIndex] = useState<number | undefined>(undefined);\n  const [displayedPlan, setDisplayedPlan] = useState(currentPlan);\n\n  // Set the initial keyframe to the latest when plan changes\n  useEffect(() => {\n    if (currentPlan?.keyframes?.length) {\n      setCurrentKeyframeIndex(currentPlan.keyframes.length - 1);\n    }\n    setDisplayedPlan(currentPlan);\n  }, [currentPlan]);\n\n  // Update displayed plan when keyframe changes\n  useEffect(() => {\n    if (currentPlan?.keyframes && currentKeyframeIndex !== undefined) {\n      const keyframe = currentPlan.keyframes[currentKeyframeIndex];\n      if (keyframe) {\n        setDisplayedPlan({\n          ...currentPlan,\n          steps: keyframe.steps,\n          isComplete: keyframe.isComplete,\n          summary: keyframe.summary,\n          currentKeyframeIndex,\n        });\n      }\n    }\n  }, [currentPlan, currentKeyframeIndex]);\n\n  // Handle keyframe change\n  const handleKeyframeChange = (index: number) => {\n    setCurrentKeyframeIndex(index);\n  };\n\n  if (!activeSessionId || !currentPlan || !displayedPlan) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <motion.div\n          initial={{ opacity: 0, y: 10 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.5 }}\n          className=\"text-center max-w-md p-8\"\n        >\n          <div className=\"w-20 h-20 mx-auto mb-6 rounded-3xl bg-gradient-to-br from-gray-100 to-gray-50 dark:from-gray-800 dark:to-gray-700 flex items-center justify-center border border-gray-200/50 dark:border-gray-700/30 shadow-sm\">\n            <FiMap className=\"text-gray-500 dark:text-gray-400\" size={32} />\n          </div>\n          <h3 className=\"text-xl font-medium mb-3 text-gray-800 dark:text-gray-200\">\n            No Plan Available\n          </h3>\n          <p className=\"text-gray-600 dark:text-gray-400\">\n            The agent hasn't created a plan for this task yet, or the task was simple enough to not\n            require planning.\n          </p>\n        </motion.div>\n      </div>\n    );\n  }\n\n  return (\n    <motion.div\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      exit={{ opacity: 0 }}\n      className=\"h-full flex flex-col bg-gray-50/80 dark:bg-gray-900/20\"\n    >\n      {/* Header with back button */}\n      <div className=\"flex items-center justify-between p-5 border-b border-gray-100/60 dark:border-gray-700/30 bg-white dark:bg-gray-800/90\">\n        <div className=\"flex items-center\">\n          <motion.button\n            whileHover={{ scale: 1.05, x: -2 }}\n            whileTap={{ scale: 0.95 }}\n            onClick={onBack}\n            className=\"mr-4 p-2 text-gray-600 dark:text-gray-400 hover:bg-gray-100/70 dark:hover:bg-gray-700/50 rounded-lg border border-transparent hover:border-gray-100/70 dark:hover:border-gray-700/50 bg-gray-50/80 dark:bg-gray-800/50\"\n            title=\"Back to workspace\"\n          >\n            <FiArrowLeft size={18} />\n          </motion.button>\n\n          <div className=\"w-10 h-10 mr-4 rounded-xl bg-gradient-to-br from-accent-50 to-accent-100 dark:from-accent-900/20 dark:to-accent-800/20 border border-accent-100/50 dark:border-accent-800/30 flex items-center justify-center text-accent-600 dark:text-accent-400\">\n            <FiCpu size={18} />\n          </div>\n\n          <div>\n            <h2 className=\"font-medium text-gray-800 dark:text-gray-200 text-lg leading-tight\">\n              Task Plan\n            </h2>\n            <div className=\"text-xs flex items-center text-gray-500 dark:text-gray-400\">\n              {displayedPlan.isComplete ? (\n                <span className=\"flex items-center\">\n                  <FiCheckCircle className=\"mr-1 text-green-500 dark:text-green-400\" size={12} />\n                  Completed\n                </span>\n              ) : (\n                <span className=\"flex items-center\">\n                  <FiClock className=\"mr-1 text-accent-500 dark:text-accent-400\" size={12} />\n                  In progress\n                </span>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Future replay controls */}\n        <div className=\"flex items-center space-x-2\">\n          {currentPlan.keyframes && currentPlan.keyframes.length > 1 && (\n            <div className=\"text-xs bg-gray-100/70 dark:bg-gray-800/70 px-3 py-1.5 rounded-full text-gray-600 dark:text-gray-400 border border-gray-200/50 dark:border-gray-700/30\">\n              {currentKeyframeIndex !== undefined && (\n                <span>\n                  Keyframe {currentKeyframeIndex + 1} of {currentPlan.keyframes.length}\n                </span>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Plan content */}\n      <div className=\"flex-1 overflow-auto bg-gradient-to-b from-gray-50/80 to-gray-100/50 dark:from-gray-900/20 dark:to-gray-900/30\">\n        <PlanViewerRenderer\n          plan={{\n            ...displayedPlan,\n            keyframes: currentPlan.keyframes,\n            currentKeyframeIndex,\n          }}\n          onKeyframeChange={handleKeyframeChange}\n        />\n      </div>\n    </motion.div>\n  );\n};\n","import React from 'react';\nimport { motion } from 'framer-motion';\nimport { useSession } from '@/common/hooks/useSession';\nimport { usePlan } from '@/common/hooks/usePlan';\nimport {\n  FiLayout,\n  FiCpu,\n  FiZap,\n  FiArrowRight,\n  FiLayers,\n  FiActivity,\n  FiFileText,\n} from 'react-icons/fi';\nimport './Workspace.css';\n\n/**\n * WorkspaceContent Component - Enhanced workspace with beautiful empty state\n *\n * Design principles:\n * - Focus on plan display for Pro users\n * - Beautiful empty state when no content is available\n * - Clean visual hierarchy and elegant animations\n */\nexport const WorkspaceContent: React.FC = () => {\n  const { activeSessionId, setActivePanelContent } = useSession();\n  const { currentPlan } = usePlan(activeSessionId);\n\n  // Animation variants\n  const containerVariants = {\n    initial: { opacity: 0 },\n    animate: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.1,\n        delayChildren: 0.1,\n      },\n    },\n  };\n\n  const itemVariants = {\n    initial: { opacity: 0, y: 20 },\n    animate: {\n      opacity: 1,\n      y: 0,\n      transition: { duration: 0.6, ease: [0.19, 1, 0.22, 1] },\n    },\n  };\n\n  // Plan view button for Pro users\n  const renderPlanButton = () => {\n    if (!currentPlan || !currentPlan.hasGeneratedPlan || currentPlan.steps.length === 0)\n      return null;\n\n    const completedSteps = currentPlan.steps.filter((step) => step.done).length;\n    const totalSteps = currentPlan.steps.length;\n    const isComplete = currentPlan.isComplete;\n\n    return (\n      <motion.div variants={itemVariants} className=\"mb-6\">\n        <motion.div\n          whileHover={{\n            y: -4,\n            boxShadow: '0 10px 25px -5px rgba(0, 0, 0, 0.05), 0 8px 10px -6px rgba(0, 0, 0, 0.02)',\n          }}\n          whileTap={{ scale: 0.98 }}\n          onClick={() =>\n            setActivePanelContent({\n              type: 'plan',\n              source: null,\n              title: 'Task Plan',\n              timestamp: Date.now(),\n            })\n          }\n          className=\"bg-white dark:bg-gray-800/90 rounded-2xl border border-[#E5E6EC]/70 dark:border-gray-700/40 overflow-hidden cursor-pointer transition-all duration-300 shadow-sm hover:shadow-md\"\n        >\n          <div className=\"p-5\">\n            <div className=\"flex items-start\">\n              <div\n                className={`w-14 h-14 rounded-2xl flex items-center justify-center mr-4 flex-shrink-0 ${\n                  isComplete\n                    ? 'bg-gradient-to-br from-green-50 to-green-100 dark:from-green-900/20 dark:to-green-800/20 text-green-600 dark:text-green-400 border border-green-100/80 dark:border-green-800/40'\n                    : 'bg-gradient-to-br from-accent-50 to-accent-100 dark:from-accent-900/20 dark:to-accent-800/20 text-accent-500 dark:text-accent-400 border border-accent-100/50 dark:border-accent-800/30'\n                }`}\n              >\n                {isComplete ? (\n                  <FiCpu size={24} />\n                ) : (\n                  <motion.div\n                    animate={{ scale: [1, 1.08, 1] }}\n                    transition={{ duration: 2.5, repeat: Infinity, ease: 'easeInOut' }}\n                  >\n                    <FiCpu size={24} />\n                  </motion.div>\n                )}\n              </div>\n              <div className=\"flex-1 min-w-0\">\n                <div className=\"flex items-start justify-between\">\n                  <h4 className=\"font-medium text-gray-900 dark:text-gray-100 text-lg mb-1 truncate pr-2\">\n                    Task Plan\n                  </h4>\n                  <div className=\"flex items-center text-xs\">\n                    <span\n                      className={`w-2 h-2 rounded-full mr-1.5 ${\n                        isComplete\n                          ? 'bg-green-500 dark:bg-green-400'\n                          : 'bg-accent-500 dark:bg-accent-400'\n                      }`}\n                    />\n                    <span className=\"text-gray-500 dark:text-gray-400\">\n                      {isComplete ? 'Completed' : 'In progress'}\n                    </span>\n                  </div>\n                </div>\n\n                <div className=\"text-sm text-gray-600 dark:text-gray-400 mb-4\">\n                  {isComplete\n                    ? 'All planned steps have been completed successfully.'\n                    : 'The agent is executing a plan to accomplish your task.'}\n                </div>\n\n                {/* Progress bar */}\n                <div className=\"mt-1 mb-2\">\n                  <div className=\"flex justify-between items-center mb-1.5 text-xs\">\n                    <span className=\"text-gray-600 dark:text-gray-400\">Progress</span>\n                    <span className=\"text-gray-700 dark:text-gray-300 font-medium\">\n                      {completedSteps}/{totalSteps}\n                    </span>\n                  </div>\n                  <div className=\"h-2 bg-gray-100 dark:bg-gray-700/70 rounded-full overflow-hidden\">\n                    <div\n                      className={`h-full ${\n                        isComplete\n                          ? 'bg-gradient-to-r from-green-400 to-green-500 dark:from-green-500 dark:to-green-400'\n                          : 'bg-gradient-to-r from-accent-400 to-accent-500 dark:from-accent-500 dark:to-accent-400'\n                      }`}\n                      style={{ width: `${totalSteps ? (completedSteps / totalSteps) * 100 : 0}%` }}\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"bg-gradient-to-b from-gray-50/70 to-gray-50 dark:from-gray-800/50 dark:to-gray-800/80 px-5 py-3 border-t border-[#E5E6EC]/50 dark:border-gray-700/30 flex justify-between items-center\">\n            <div className=\"flex items-center text-sm text-gray-500 dark:text-gray-400\">\n              View plan details\n            </div>\n            <div className=\"flex items-center text-sm\">\n              <FiArrowRight className=\"text-accent-500 dark:text-accent-400\" size={16} />\n            </div>\n          </div>\n        </motion.div>\n      </motion.div>\n    );\n  };\n\n  // Enhanced empty state when no session\n  if (!activeSessionId) {\n    return (\n      <motion.div\n        variants={containerVariants}\n        initial=\"initial\"\n        animate=\"animate\"\n        className=\"flex items-center justify-center h-full text-center py-12\"\n      >\n        <div className=\"max-w-md mx-auto px-6\">\n          <motion.div variants={itemVariants} className=\"relative mx-auto mb-8\">\n            {/* Gradient background glow effect */}\n            <div className=\"absolute inset-0 w-24 h-24 mx-auto rounded-full bg-gradient-to-br from-gray-200/50 to-gray-100/30 dark:from-gray-700/30 dark:to-gray-800/20 blur-xl\"></div>\n\n            {/* Main icon */}\n            <div className=\"relative w-24 h-24 mx-auto rounded-3xl bg-gradient-to-br from-white to-gray-50 dark:from-gray-800 dark:to-gray-700 flex items-center justify-center border border-gray-200/60 dark:border-gray-700/40 shadow-lg\">\n              <FiLayout size={40} className=\"text-gray-500 dark:text-gray-400\" />\n            </div>\n          </motion.div>\n\n          <motion.h3\n            variants={itemVariants}\n            className=\"text-2xl font-medium mb-3 text-gray-800 dark:text-gray-200\"\n          >\n            No Active Session\n          </motion.h3>\n\n          <motion.p\n            variants={itemVariants}\n            className=\"text-gray-600 dark:text-gray-400 leading-relaxed\"\n          >\n            Create or select a session to start working. Tool results and detailed information will\n            be displayed here automatically.\n          </motion.p>\n        </div>\n      </motion.div>\n    );\n  }\n\n  // Enhanced empty state when session exists but no content\n  const hasContent = currentPlan && currentPlan.hasGeneratedPlan && currentPlan.steps.length > 0;\n\n  return (\n    <div className=\"h-full flex flex-col\">\n      {/* Header with refined styling */}\n      <div className=\"flex items-center px-6 py-5 border-b border-gray-100/60 dark:border-gray-700/30 bg-white dark:bg-gray-800/90\">\n        <div className=\"w-10 h-10 mr-4 rounded-xl bg-gradient-to-br from-gray-100 to-gray-50 dark:from-gray-700 dark:to-gray-800 flex items-center justify-center text-gray-600 dark:text-gray-400 border border-gray-200/60 dark:border-gray-700/40 shadow-sm\">\n          <FiLayers size={18} />\n        </div>\n        <div>\n          <h2 className=\"font-medium text-gray-900 dark:text-gray-100 text-lg\">Workspace</h2>\n          <div className=\"text-xs text-gray-500 dark:text-gray-400\">\n            View tool outputs and plan details\n          </div>\n        </div>\n      </div>\n\n      {/* Content area with elegant empty state */}\n      <div className=\"flex-1 overflow-y-auto p-6\">\n        {hasContent ? (\n          <motion.div\n            variants={containerVariants}\n            initial=\"initial\"\n            animate=\"animate\"\n            className=\"space-y-8\"\n          >\n            {/* Plan view for Pro users */}\n            {renderPlanButton()}\n          </motion.div>\n        ) : (\n          /* Beautiful empty state for active session with no content */\n          <motion.div\n            variants={containerVariants}\n            initial=\"initial\"\n            animate=\"animate\"\n            className=\"flex items-center justify-center h-full text-center\"\n          >\n            <div className=\"max-w-lg mx-auto px-6\">\n              <motion.div variants={itemVariants} className=\"relative mb-10\">\n                {/* Animated background circles */}\n                <motion.div\n                  animate={{\n                    scale: [1, 1.1, 1],\n                    opacity: [0.3, 0.5, 0.3],\n                    rotate: [0, 5, 0, -5, 0],\n                  }}\n                  transition={{ duration: 6, repeat: Infinity, ease: 'easeInOut' }}\n                  className=\"absolute inset-0 w-28 h-28 rounded-full bg-gradient-to-br from-accent-200/30 to-accent-300/20 dark:from-accent-800/20 dark:to-accent-700/10 mx-auto blur-xl\"\n                />\n                <motion.div\n                  animate={{\n                    scale: [1.1, 1, 1.1],\n                    opacity: [0.2, 0.4, 0.2],\n                    rotate: [0, -5, 0, 5, 0],\n                  }}\n                  transition={{ duration: 5, repeat: Infinity, ease: 'easeInOut', delay: 1 }}\n                  className=\"absolute inset-0 w-32 h-32 rounded-full bg-gradient-to-br from-purple-200/20 to-purple-300/10 dark:from-purple-800/10 dark:to-purple-700/5 mx-auto mt-2 ml-2 blur-xl\"\n                />\n\n                {/* Main icon with glowing effect */}\n                <div className=\"relative mx-auto w-28 h-28 rounded-3xl bg-gradient-to-br from-white to-gray-50 dark:from-gray-800 dark:to-gray-700 flex items-center justify-center border border-gray-200/60 dark:border-gray-700/40 shadow-lg\">\n                  <motion.div\n                    animate={{\n                      scale: [1, 1.05, 1],\n                    }}\n                    transition={{ duration: 3, repeat: Infinity, ease: 'easeInOut' }}\n                  >\n                    <FiActivity size={44} className=\"text-accent-500 dark:text-accent-400\" />\n                  </motion.div>\n\n                  {/* Subtle pulsing ring */}\n                  <motion.div\n                    animate={{\n                      scale: [0.8, 1.2, 0.8],\n                      opacity: [0.3, 0.1, 0.3],\n                    }}\n                    transition={{ duration: 3, repeat: Infinity, ease: 'easeInOut' }}\n                    className=\"absolute inset-0 rounded-3xl border-2 border-accent-400/20 dark:border-accent-400/10\"\n                  />\n                </div>\n              </motion.div>\n\n              <motion.h3\n                variants={itemVariants}\n                className=\"text-2xl font-semibold mb-4 text-gray-800 dark:text-gray-200 bg-gradient-to-r from-gray-800 to-gray-600 dark:from-gray-200 dark:to-gray-300 bg-clip-text text-transparent\"\n              >\n                Ready for Action\n              </motion.h3>\n\n              <motion.p\n                variants={itemVariants}\n                className=\"text-gray-600 dark:text-gray-400 leading-relaxed mb-8 max-w-md mx-auto\"\n              >\n                Your workspace is active. Start a conversation with Agent TARS and watch as tool\n                results, plans, and detailed information appear here in real-time.\n              </motion.p>\n\n              <motion.div\n                variants={containerVariants}\n                className=\"grid grid-cols-1 sm:grid-cols-3 gap-4 max-w-2xl mx-auto\"\n              >\n                <motion.div\n                  variants={itemVariants}\n                  whileHover={{ y: -4, boxShadow: '0 12px 20px -8px rgba(0, 0, 0, 0.1)' }}\n                  className=\"flex flex-col items-center p-5 bg-gradient-to-b from-white to-gray-50 dark:from-gray-800 dark:to-gray-800/80 rounded-xl border border-gray-200/70 dark:border-gray-700/40 shadow-sm\"\n                >\n                  <div className=\"w-12 h-12 rounded-xl bg-blue-50 dark:bg-blue-900/20 flex items-center justify-center mb-3 text-blue-500 dark:text-blue-400 border border-blue-100/80 dark:border-blue-800/30\">\n                    <FiLayout size={22} />\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-sm font-medium text-gray-800 dark:text-gray-200 mb-1\">\n                      Tool Results\n                    </div>\n                    <div className=\"text-xs text-gray-500 dark:text-gray-400\">\n                      Comprehensive outputs\n                    </div>\n                  </div>\n                </motion.div>\n\n                <motion.div\n                  variants={itemVariants}\n                  whileHover={{ y: -4, boxShadow: '0 12px 20px -8px rgba(0, 0, 0, 0.1)' }}\n                  className=\"flex flex-col items-center p-5 bg-gradient-to-b from-white to-gray-50 dark:from-gray-800 dark:to-gray-800/80 rounded-xl border border-gray-200/70 dark:border-gray-700/40 shadow-sm\"\n                >\n                  <div className=\"w-12 h-12 rounded-xl bg-purple-50 dark:bg-purple-900/20 flex items-center justify-center mb-3 text-purple-500 dark:text-purple-400 border border-purple-100/80 dark:border-purple-800/30\">\n                    <FiCpu size={22} />\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-sm font-medium text-gray-800 dark:text-gray-200 mb-1\">\n                      Task Plans\n                    </div>\n                    <div className=\"text-xs text-gray-500 dark:text-gray-400\">\n                      Execution progress\n                    </div>\n                  </div>\n                </motion.div>\n\n                <motion.div\n                  variants={itemVariants}\n                  whileHover={{ y: -4, boxShadow: '0 12px 20px -8px rgba(0, 0, 0, 0.1)' }}\n                  className=\"flex flex-col items-center p-5 bg-gradient-to-b from-white to-gray-50 dark:from-gray-800 dark:to-gray-800/80 rounded-xl border border-gray-200/70 dark:border-gray-700/40 shadow-sm\"\n                >\n                  <div className=\"w-12 h-12 rounded-xl bg-green-50 dark:bg-green-900/20 flex items-center justify-center mb-3 text-green-500 dark:text-green-400 border border-green-100/80 dark:border-green-800/30\">\n                    <FiZap size={22} />\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-sm font-medium text-gray-800 dark:text-gray-200 mb-1\">\n                      Live Updates\n                    </div>\n                    <div className=\"text-xs text-gray-500 dark:text-gray-400\">\n                      Real-time results\n                    </div>\n                  </div>\n                </motion.div>\n\n                <motion.div\n                  variants={itemVariants}\n                  whileHover={{ y: -4, boxShadow: '0 12px 20px -8px rgba(0, 0, 0, 0.1)' }}\n                  className=\"flex flex-col items-center p-5 bg-gradient-to-b from-white to-gray-50 dark:from-gray-800 dark:to-gray-800/80 rounded-xl border border-gray-200/70 dark:border-gray-700/40 shadow-sm\"\n                >\n                  <div className=\"w-12 h-12 rounded-xl bg-amber-50 dark:bg-amber-900/20 flex items-center justify-center mb-3 text-amber-500 dark:text-amber-400 border border-amber-100/80 dark:border-amber-800/30\">\n                    <FiFileText size={22} />\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-sm font-medium text-gray-800 dark:text-gray-200 mb-1\">\n                      Deliverables\n                    </div>\n                    <div className=\"text-xs text-gray-500 dark:text-gray-400\">Reports & Code</div>\n                  </div>\n                </motion.div>\n              </motion.div>\n            </div>\n          </motion.div>\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { FiBookOpen, FiX, FiArrowLeft } from 'react-icons/fi';\nimport { useSession } from '@/common/hooks/useSession';\nimport { useTool } from '@/common/hooks/useTool';\nimport { formatTimestamp } from '@/common/utils/formatters';\nimport { ToolResultRenderer } from './renderers/ToolResultRenderer';\nimport { ResearchReportRenderer } from './renderers/ResearchReportRenderer';\n\n/**\n * WorkspaceDetail Component - Displays details of a single tool result or report\n */\nexport const WorkspaceDetail: React.FC = () => {\n  const { activePanelContent, setActivePanelContent } = useSession();\n  const { getToolIcon } = useTool();\n  const [zoomedImage, setZoomedImage] = useState<{ src: string; alt?: string } | null>(null);\n\n  if (!activePanelContent) {\n    return null;\n  }\n\n  // 特殊处理 final_answer 类型、研究报告内容或可交付产物\n  if (\n    activePanelContent?.type === 'research_report' ||\n    activePanelContent?.type === 'deliverable' ||\n    (activePanelContent.toolCallId && activePanelContent.toolCallId.startsWith('final-answer'))\n  ) {\n    return (\n      <ResearchReportRenderer\n        content={\n          typeof activePanelContent.source === 'string'\n            ? activePanelContent.source\n            : JSON.stringify(activePanelContent.source, null, 2)\n        }\n        title={activePanelContent.title || 'Research Report'}\n        isStreaming={activePanelContent.isStreaming}\n      />\n    );\n  }\n\n  // 特殊处理研究报告内容\n  if (activePanelContent?.type === 'research_report') {\n    return (\n      <ResearchReportRenderer\n        content={activePanelContent.source}\n        title={activePanelContent.title}\n        isStreaming={activePanelContent.isStreaming}\n      />\n    );\n  }\n\n  // Convert legacy format content to standardized tool result parts\n  const getStandardizedContent = (): ToolResultContentPart[] => {\n    const { type, source, title, error, arguments: toolArguments } = activePanelContent;\n\n    // Show error if present\n    if (error) {\n      return [\n        {\n          type: 'text',\n          name: 'ERROR',\n          text: error,\n        },\n      ];\n    }\n\n    // Handle write_file tool specifically\n    if (type === 'file' && toolArguments && typeof toolArguments === 'object') {\n      if (toolArguments.path && (toolArguments.content || typeof source === 'string')) {\n        return [\n          {\n            type: 'file_result',\n            name: 'FILE_RESULT',\n            path: toolArguments.path,\n            content: toolArguments.content || source,\n          },\n        ];\n      }\n    }\n\n    // Handle browser_vision_control type specifically\n    if (type === 'browser_vision_control') {\n      // 如果这是环境增强，包含原始截图数据\n      const environmentImage = Array.isArray(activePanelContent.originalContent)\n        ? extractImageUrl(activePanelContent.originalContent)\n        : null;\n\n      // Create browser_control part for the specialized renderer\n      return [\n        {\n          type: 'browser_control',\n          name: 'BROWSER_CONTROL',\n          toolCallId: activePanelContent.toolCallId,\n          thought: toolArguments?.thought || '',\n          step: toolArguments?.step || '',\n          action: toolArguments?.action || '',\n          status: source?.status || 'unknown',\n          environmentImage: environmentImage, // 传递环境图像\n        },\n      ];\n    }\n\n    // Handle array of content parts from environment_input\n    if (Array.isArray(source) && source.some((part) => part.type === 'image_url')) {\n      const imagePart = source.find((part) => part.type === 'image_url');\n      if (imagePart && imagePart.image_url && imagePart.image_url.url) {\n        const imgSrc = imagePart.image_url.url;\n        if (imgSrc.startsWith('data:image/')) {\n          const [mimeTypePrefix, base64Data] = imgSrc.split(',');\n          const mimeType = mimeTypePrefix.split(':')[1].split(';')[0];\n          return [\n            {\n              type: 'image',\n              imageData: base64Data,\n              mimeType,\n              name: activePanelContent.title,\n            },\n          ];\n        }\n      }\n    }\n\n    // Based on tool type, convert to standardized format\n    switch (type) {\n      case 'image':\n        // Image content\n        if (typeof source === 'string' && source.startsWith('data:image/')) {\n          const [mimeTypePrefix, base64Data] = source.split(',');\n          const mimeType = mimeTypePrefix.split(':')[1].split(';')[0];\n\n          return [\n            {\n              type: 'image',\n              imageData: base64Data,\n              mimeType,\n              name: activePanelContent.title,\n            },\n          ];\n        }\n        return [\n          {\n            type: 'text',\n            text: 'Image could not be displayed',\n          },\n        ];\n\n      case 'search':\n        // Search results\n        if (Array.isArray(source) && source.some((item) => item.type === 'text')) {\n          // Handle new multimodal format\n          const resultsItem = source.find((item) => item.name === 'RESULTS');\n          const queryItem = source.find((item) => item.name === 'QUERY');\n\n          if (resultsItem && resultsItem.text) {\n            // Parse results text into separate result items\n            const resultBlocks = resultsItem.text.split('---').filter(Boolean);\n            const parsedResults = resultBlocks.map((block) => {\n              const lines = block.trim().split('\\n');\n              const titleLine = lines[0] || '';\n              const urlLine = lines[1] || '';\n              const snippet = lines.slice(2).join('\\n');\n\n              const title = titleLine.replace(/^\\[\\d+\\]\\s*/, '').trim();\n              const url = urlLine.replace(/^URL:\\s*/, '').trim();\n\n              return { title, url, snippet };\n            });\n\n            // Return only the search_result part, removing the redundant text query part\n            return [\n              {\n                type: 'search_result',\n                name: 'SEARCH_RESULTS',\n                results: parsedResults,\n                query: queryItem?.text,\n              },\n            ];\n          }\n        }\n\n        // Handle old format\n        if (source && typeof source === 'object' && source.results) {\n          return [\n            {\n              type: 'search_result',\n              name: 'SEARCH_RESULTS',\n              results: source.results,\n              query: source.query,\n            },\n          ];\n        }\n\n        return [\n          {\n            type: 'text',\n            text: typeof source === 'string' ? source : JSON.stringify(source, null, 2),\n          },\n        ];\n\n      case 'command':\n        // Command results\n        if (Array.isArray(source) && source.some((item) => item.type === 'text')) {\n          // New multimodal format\n          const commandItem = source.find((item) => item.name === 'COMMAND');\n          const stdoutItem = source.find((item) => item.name === 'STDOUT');\n          const stderrItem = source.find((item) => item.name === 'STDERR');\n\n          return [\n            {\n              type: 'command_result',\n              name: 'COMMAND_RESULT',\n              command: commandItem?.text || toolArguments?.command,\n              stdout: stdoutItem?.text || '',\n              stderr: stderrItem?.text || '',\n              exitCode: source.find((item) => item.name === 'EXIT_CODE')?.value,\n            },\n          ];\n        }\n\n        // Old format\n        if (source && typeof source === 'object') {\n          return [\n            {\n              type: 'command_result',\n              name: 'COMMAND_RESULT',\n              command: source.command || toolArguments?.command,\n              stdout: source.output || source.stdout || '',\n              stderr: source.stderr || '',\n              exitCode: source.exitCode,\n            },\n          ];\n        }\n\n        return [\n          {\n            type: 'text',\n            text: typeof source === 'string' ? source : JSON.stringify(source, null, 2),\n          },\n        ];\n\n      case 'browser':\n        return [\n          {\n            type: 'json',\n            name: title || 'BROWSER_DATA',\n            data: source,\n          },\n        ];\n\n      case 'file':\n        // File results\n        if (source && typeof source === 'object') {\n          return [\n            {\n              type: 'text',\n              name: 'FILE_PATH',\n              text: `File: ${source.path || 'Unknown file'}`,\n            },\n            {\n              type: 'text',\n              name: 'FILE_CONTENT',\n              text: source.content || 'No content available',\n            },\n          ];\n        }\n\n        return [\n          {\n            type: 'text',\n            text: typeof source === 'string' ? source : JSON.stringify(source, null, 2),\n          },\n        ];\n\n      default:\n        // Default handling for unknown types\n        if (typeof source === 'object') {\n          return [\n            {\n              type: 'json',\n              name: 'JSON_DATA',\n              data: source,\n            },\n          ];\n        }\n\n        return [\n          {\n            type: 'text',\n            text: typeof source === 'string' ? source : JSON.stringify(source, null, 2),\n          },\n        ];\n    }\n  };\n\n  // 辅助函数：从文本内容中提取URL\n  const extractUrlFromContent = (content: string): string => {\n    if (typeof content === 'string' && content.includes('Navigated to ')) {\n      const lines = content.split('\\n');\n      const firstLine = lines[0] || '';\n      return firstLine.replace('Navigated to ', '').trim();\n    }\n    return '';\n  };\n\n  // 辅助函数：从环境内容中提取图片URL\n  const extractImageUrl = (content: any[]): string | null => {\n    const imgPart = content.find(\n      (part) => part && part.type === 'image_url' && part.image_url && part.image_url.url,\n    );\n    return imgPart ? imgPart.image_url.url : null;\n  };\n\n  // Handle tool result content action\n  const handleContentAction = (action: string, data: any) => {\n    if (action === 'zoom' && data.src) {\n      // Show zoomed image in modal\n      setZoomedImage({ src: data.src, alt: data.alt });\n    }\n  };\n\n  // Handle back navigation\n  const handleBack = () => {\n    setActivePanelContent(null);\n  };\n\n  return (\n    <motion.div\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      exit={{ opacity: 0 }}\n      className=\"h-full flex flex-col bg-gray-50/80 dark:bg-gray-900/20\"\n    >\n      {/* Header with tool info */}\n      <div className=\"flex items-center justify-between p-5 border-b border-gray-100/60 dark:border-gray-700/30 bg-white dark:bg-gray-800/90\">\n        <div className=\"flex items-center\">\n          <motion.button\n            whileHover={{ scale: 1.05, x: -2 }}\n            whileTap={{ scale: 0.95 }}\n            onClick={handleBack}\n            className=\"mr-4 p-2 text-gray-600 dark:text-gray-400 hover:bg-gray-100/70 dark:hover:bg-gray-700/50 rounded-lg border border-transparent hover:border-gray-100/70 dark:hover:border-gray-700/50 bg-gray-50/80 dark:bg-gray-800/50\"\n            title=\"Back to workspace\"\n          >\n            <FiArrowLeft size={18} />\n          </motion.button>\n\n          <div className=\"w-10 h-10 mr-4 rounded-xl flex items-center justify-center overflow-hidden relative\">\n            {/* 使用特殊图标替代 final_answer 工具图标 */}\n            {activePanelContent.toolCallId?.startsWith('final-answer') ? (\n              <>\n                <div className=\"absolute inset-0 bg-gradient-to-br from-accent-400/20 to-accent-500/10 dark:from-accent-600/30 dark:to-accent-500/20\"></div>\n                <div className=\"relative z-10\">\n                  <FiBookOpen className=\"text-accent-600 dark:text-accent-400\" size={20} />\n                </div>\n              </>\n            ) : (\n              <>\n                <div\n                  className={`absolute inset-0 ${\n                    activePanelContent?.type === 'search'\n                      ? 'bg-gradient-to-br from-blue-400/20 to-indigo-500/10 dark:from-blue-600/30 dark:to-indigo-500/20'\n                      : activePanelContent?.type === 'browser'\n                        ? 'bg-gradient-to-br from-purple-400/20 to-pink-500/10 dark:from-purple-600/30 dark:to-pink-500/20'\n                        : activePanelContent?.type === 'command'\n                          ? 'bg-gradient-to-br from-green-400/20 to-emerald-500/10 dark:from-green-600/30 dark:to-emerald-500/20'\n                          : activePanelContent?.type === 'file'\n                            ? 'bg-gradient-to-br from-yellow-400/20 to-amber-500/10 dark:from-yellow-600/30 dark:to-amber-500/20'\n                            : activePanelContent?.type === 'image'\n                              ? 'bg-gradient-to-br from-red-400/20 to-rose-500/10 dark:from-red-600/30 dark:to-rose-500/20'\n                              : activePanelContent?.type === 'browser_vision_control'\n                                ? 'bg-gradient-to-br from-cyan-400/20 to-teal-500/10 dark:from-cyan-600/30 dark:to-teal-500/20'\n                                : 'bg-gradient-to-br from-gray-400/20 to-gray-500/10 dark:from-gray-500/30 dark:to-gray-600/20'\n                  }`}\n                ></div>\n                <div className=\"relative z-10\">\n                  {getToolIcon(activePanelContent?.type || 'other')}\n                </div>\n              </>\n            )}\n          </div>\n\n          <div>\n            <h2 className=\"font-medium text-gray-800 dark:text-gray-200 text-lg leading-tight\">\n              {activePanelContent.title}\n            </h2>\n            <div className=\"text-xs text-gray-500 dark:text-gray-400\">\n              {formatTimestamp(activePanelContent.timestamp)}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Content area */}\n      <div className=\"flex-1 overflow-auto p-6\">\n        <ToolResultRenderer content={getStandardizedContent()} onAction={handleContentAction} />\n      </div>\n\n      {/* Image Zoom Modal */}\n      <AnimatePresence>\n        {zoomedImage && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"fixed inset-0 z-50 flex items-center justify-center bg-black/80 p-4 backdrop-blur-sm\"\n            onClick={() => setZoomedImage(null)}\n          >\n            <motion.div\n              initial={{ scale: 0.9, opacity: 0 }}\n              animate={{ scale: 1, opacity: 1 }}\n              exit={{ scale: 0.9, opacity: 0 }}\n              transition={{ duration: 0.3, ease: [0.19, 1, 0.22, 1] }}\n              className=\"relative max-w-[95vw] max-h-[95vh]\"\n            >\n              <button\n                onClick={(e) => {\n                  e.stopPropagation();\n                  setZoomedImage(null);\n                }}\n                className=\"absolute -top-2 -right-2 p-2 rounded-full bg-gray-900/90 text-white hover:bg-gray-800 shadow-lg\"\n                aria-label=\"Close\"\n              >\n                <FiX size={24} />\n              </button>\n              <img\n                src={zoomedImage.src}\n                alt={zoomedImage.alt || 'Zoomed image'}\n                className=\"max-w-full max-h-[90vh] object-contain rounded-lg shadow-2xl\"\n              />\n            </motion.div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </motion.div>\n  );\n};\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACvBA;AACA;AAEA;;;;;;;AAOA;AAEA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AC1BA;AACA;AACA;AAEA;;;;;;;AAOA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;;AAEA;AAGA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;;AAEA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;;AAEA;AAEA;AAKA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzXA;AACA;AACA;AACA;AACA;AACA;AACA;AAcA;AACA;AACA;AACA;AAEA;;;;;;;AAOA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;;;;;;AAGA;AAjIA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AARA;AAmIA;;AAEA;;AAEA;AACA;AACA;AAHA;AAKA;;AAEA;;AAEA;AACA;AACA;AAHA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/KA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAUA;AAIA;AACA;AAEA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AAEA;AACA;AAGA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACvNA;AAEA;AACA;AAUA;;AAEA;AAEA;;AAEA;AAEA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AACA;;AACA;AAAA;;;;;;AACA;AAAA;;;;;;;;;;;;AAGA;AAEA;AACA;AACA;AACA;;AACA;AAAA;;;;;;AACA;AAAA;;;;;;;;;;;;AAGA;AACA;AACA;;AACA;AAAA;;;;;;AACA;AAAA;;;;;;;;;;;;AAGA;AACA;AACA;;AACA;AAAA;;;;;;AACA;AAAA;;;;;;;;;;;;AAGA;AACA;AACA;;AACA;AAAA;;;;;;AACA;AAAA;;;;;;;;;;;;AAGA;AACA;AACA;;AACA;AAAA;;;;;;AACA;AAAA;;;;;;;;;;;;AAGA;AACA;AACA;;AACA;AAAA;;;;;;AACA;AAAA;;;;;;;;;;;;AAGA;AACA;AACA;;AACA;AAAA;;;;;;AACA;AAAA;;;;;;;;;;;;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AC/FA;AAEA;AAGA;;;;;;;AAOA;AAEA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAMA;AAWA;AAVA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;;;AAGA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;ACpYA;AACA;AAGA;;AAEA;AAQA;;AAEA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AAEA;AAEA;AAAA;AACA;AAEA;;AAEA;AAMA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;;AAEA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AAEA;;AAEA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AAEA;;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AA2DA;;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AAEA;AAEA;AADA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AApTA;AACA;AACA;AACA;AACA;AAyLA;;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;;AAEA;AAEA;AAEA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AAIA;AACA;AACA;AAEA;;AAEA;AAEA;AAEA;AACA;AACA;;AAiEA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AChUA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1FA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;;AAEA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AAGA;;AAEA;AAMA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAOA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;AAEA;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;AAEA;AASA;AACA;AACA;AAAA;AAAA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AAEA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AAAA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AAEA;AAMA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;;;AAGA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAYA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AC9yBA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;;AAEA;AAIA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAIA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AAGA;;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAIA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AAEA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AC7ZA;AAGA;;;AAGA;AAGA;;;;AAIA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;;;;;;;;AAQA;AAEA;AAEA;AACA;AACA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;ACxHA;AAwBA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAGA;;AAEA;AAIA;AACA;;;;;;;;;;;;;;;;;;;;;AC/CA;AAkCA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;ACrDA;AAGA;;AAEA;AAGA;;AAEA;;;;;;;;;;;;;;;;;;;;;;ACVA;AAIA;;;AAGA;AAGA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACZA;AAGA;;AAEA;AAGA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AAEA;;AAEA;AAGA;;AAEA;AAGA;;AAEA;AAGA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;;;;;;AACA;AAEA;;AAEA;AAAA;AAAA;;;;;;;;;;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;AAMA;AAxDA;;AAEA;AACA;;;AAHA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;;;;;;;;;AASA;AACA;;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;;AAEA;;;;;AAGA;AAAA;;AAEA;;;;;AAGA;AAAA;AAEA;AAAA;;AAEA;AACA;AACA;AAEA;AAAA;AACA;;;;;;;;;;;;;;;AAKA;AAAA;AAAA;AACA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA;AA5CA;;AACA;AAGA;;;AAJA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzBA;AACA;AACA;AACA;AAMA;;AAEA;AACA;;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAMA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;;AACA;AAEA;AACA;AACA;AAAA;AAAA;;;;;;AACA;AAEA;AAAA;;AACA;AA7DA;;AACA;AAEA;AACA;AACA;;;AALA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AAKA;AAjDA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACZA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AASA;;;;;;;;;AASA;AACA;;AAMA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;;;;AAGA;AAEA;AAAA;AAAA;;;;;;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAGA;AACA;;;;;AAEA;;AACA;AACA;AAEA;;;;;;AAIA;AACA;;AACA;AAAA;AAAA;;;;;;AAAA;;;;;;;AAMA;AAMA;AACA;AACA;;;;;;AAKA;AAEA;AACA;AACA;AACA;AACA;;;;;;AAKA;AAEA;AACA;AACA;;;;;;;;;;;;;AAQA;AAMA;AACA;AACA;;;;;;;;;;;;AAKA;AApOA;;AAQA;AACA;AACA;AACA;;;AAXA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxCA;AACA;AACA;AACA;AAEA;;AAEA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;;AACA;AAjCA;;AACA;AACA;AACA;;;AAHA;AAmCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3CA;AACA;AACA;AACA;AACA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AAAA;;;;;;AAGA;AAAA;AACA;AAAA;AACA;AAAA;;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;;;;;;AAEA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;AAQA;AAAA;;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AAEA;AAAA;AAAA;;;;;;AAGA;AAAA;AAAA;;;;;;;;;;;;AAOA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;;AACA;AAAA;;AAEA;AAAA;;;;;;AAGA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAIA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAMA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AAKA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAKA;;AAEA;AAAA;AAAA;;;;;;AAGA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AAKA;AACA;AACA;;;;;;AAGA;AAAA;;;;;;;;;;;;;;;;;AAKA;AAAA;AACA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AARA;;;;;;;;;;;;;;;;;;;;;AAgBA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA;AA/QA;;AACA;AACA;;;AAFA;AAiRA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvRA;AACA;AACA;AAEA;AACA;AAEA;;;;;;;AAOA;;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;AACA;AACA;AAAA;AAAA;;;;;;AACA;AACA;AACA;AAAA;AAAA;;;;;;AACA;AACA;AAAA;AAAA;;;;;;AACA;AACA;AACA;AAAA;AAAA;;;;;;AACA;AACA;AAAA;AAAA;;;;;;AACA;AACA;AAAA;AAAA;;;;;;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AAAA;;;;;;AAKA;AACA;AACA;AAAA;AAAA;;;;;;AAIA;AACA;AAEA;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AATA;;;;;AAYA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;AAIA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;;;;;;;;;;;;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AAEA;AAAA;;AACA;AAAA;AAAA;;;;;;AACA;;AACA;AAAA;AACA;;;;;;AAGA;AACA;;AAAA;AACA;AAAA;;;;;;;AAIA;AAAA;AACA;;;;;;;;;;;;;;;;;;AAMA;AAAA;;;;;;;;;;;;;;;;;;AAKA;AAzQA;;AACA;;;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AAMA;;;;;;;;AAQA;AACA;;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAAA;;;;;;;;;;;AAGA;AAAA;AAAA;AAAA;;;;;;;;AAGA;AAEA;AACA;;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;;AAEA;AAAA;AAAA;;;;;;AACA;AAAA;;;;;;;;;;;;AAGA;AAAA;AAAA;AAAA;;;;;;;;AAGA;AApDA;;AAEA;;;AAFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;AAQA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;AAGA;AAEA;AACA;;AACA;;;;;AACA;AAAA;;;;;;;;;;;;AAGA;AAnBA;;AACA;AACA;;;AAFA;AAqBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpCA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;;;;;;AAQA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AAAA;;AAEA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAKA;AAEA;AAAA;;;;;;;;;;;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAAA;;;;;;;;;;;;;;;;;;;;;;AAMA;AArEA;;AACA;AACA;AACA;;;AAHA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AAMA;;;;;;;AAOA;AACA;;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AAEA;AAAA;AACA;AAAA;AAAA;;;;;;;;;;;AAEA;AAAA;AAAA;;;;;;AAGA;AAAA;AAAA;;;;;;;;;;;;;;;;;AAOA;AAEA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AAGA;AAAA;;AACA;AAAA;;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAAA;;;;;;;;;;;AAGA;AAAA;AACA;AAAA;;;;;;;;;;;AAGA;;AACA;AAAA;AAAA;;;;;;AAGA;AAAA;AACA;AACA;;AACA;AAAA;AAAA;;;;;;AAAA;;;;;;AAIA;AAAA;;AACA;AAAA;AAAA;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;AASA;AAAA;AACA;AACA;AACA;;AACA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;AASA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AAKA;AAlIA;;AACA;AACA;;;AAFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AASA;AAEA;;;;;;;AAOA;;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAAA;AACA;AAAA;;AACA;AACA;AAMA;AACA;;;;;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;;;;;;;;;;;;;;;;AAIA;AAAA;;AACA;AAAA;;AACA;AAAA;AAAA;;;;;;AAGA;AAAA;;AACA;AACA;;;;;;AAMA;AAAA;AACA;;;;;;;;;;;;;;;;;;AAKA;AAAA;AACA;;;;;;AAMA;AAAA;;AACA;AAAA;;AACA;AAAA;AAAA;;;;;;AACA;AAAA;;AACA;AAAA;AAAA;;;;;;;;;;;;;AAGA;AAAA;AACA;AACA;AAKA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA;AAAA;;AACA;AAAA;AAAA;;;;;;AAGA;AAAA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;;AACA;AAAA;AAAA;;AAEA;AAAA;;;;;;AAGA;AAAA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;AAIA;AACA;AACA;AACA;;;;;;AAIA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AAOA;AAEA;AACA;AAEA;AACA;;AAEA;AAAA;;AACA;AAAA;AACA;AAAA;;;;;;;;;;;AAEA;;AACA;AAAA;AAAA;;;;;;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;AAOA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAGA;;;;;AAGA;AAEA;AACA;AACA;AACA;AAEA;AAAA;;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AAIA;AAAA;;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;;;;;;;;;;;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;AAKA;AACA;AACA;AACA;;;;;;AAIA;AACA;AACA;AACA;;;;;;AAKA;AACA;AACA;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;;AAEA;AAAA;AACA;AAAA;;;;;;;;;;;AAEA;AAAA;;AACA;AAAA;AAAA;;;;;;AAGA;AAAA;AAAA;;;;;;;;;;;;;;;;;;AAMA;AACA;AACA;AAAA;AAAA;AAAA;AACA;;AAEA;AAAA;AACA;AAAA;;;;;;;;;;;AAEA;AAAA;;AACA;AAAA;AAAA;;;;;;AAGA;AAAA;AAAA;;;;;;;;;;;;;;;;;;AAMA;AACA;AACA;AAAA;AAAA;AAAA;AACA;;AAEA;AAAA;AACA;AAAA;;;;;;;;;;;AAEA;AAAA;;AACA;AAAA;AAAA;;;;;;AAGA;AAAA;AAAA;;;;;;;;;;;;;;;;;;AAMA;AACA;AACA;AAAA;AAAA;AAAA;AACA;;AAEA;AAAA;AACA;AAAA;;;;;;;;;;;AAEA;AAAA;;AACA;AAAA;AAAA;;;;;;AAGA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUA;AA9VA;;AACA;AACA;;;AAFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAgVA;;AA9UA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAKA;AAEA;AAKA;AACA;;;;;;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;;;;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAaA;AAZA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AAGA;AAAA;AACA;AAAA;;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAAA;;;;;;;;;;;AAGA;AAAA;AAEA;;AAEA;AAAA;;;;;;AACA;AAAA;AACA;AAAA;AAAA;;;;;;;;;;;;AAIA;;AACA;AACA;;;;;;AAgBA;AAAA;AACA;;;;;;;;;;;;;AAMA;;AACA;AAAA;AACA;;;;;;AAEA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;AAOA;AAAA;AACA;AAAA;AAAA;;;;;;;;;;;AAIA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;;;;;;;;;;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA;AAtaA;;AACA;AACA;;;AAFA"}