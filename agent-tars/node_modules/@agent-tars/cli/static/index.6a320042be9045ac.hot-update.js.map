{"version":3,"file":"index.6a320042be9045ac.hot-update.js","sources":["/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/entry.css","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/Message/components/MessageGroup.tsx"],"sourcesContent":["// extracted by css-extract-rspack-plugin\nexport {};\n    if(module.hot) {\n      (function() {\n        var localsJsonString = undefined;\n        // 1749583706699\n        var cssReload = require(\"../../node_modules/.pnpm/@rspack+core@1.3.9_@swc+helpers@0.5.17/node_modules/@rspack/core/dist/cssExtractHmr.js\").cssReload(module.id, {});\n        // only invalidate when locals change\n        if (\n          module.hot.data &&\n          module.hot.data.value &&\n          module.hot.data.value !== localsJsonString\n        ) {\n          module.hot.invalidate();\n        } else {\n          module.hot.accept();\n        }\n        module.hot.dispose(function(data) {\n          data.value = localsJsonString;\n          cssReload();\n        });\n      })();\n    }\n  ","import React from 'react';\nimport { motion } from 'framer-motion';\nimport { Message as MessageType } from '../../../../types';\nimport { Message } from '../index';\nimport { FiClock } from 'react-icons/fi';\nimport { formatTimestamp } from '../../../../utils/formatters';\nimport { isMultimodalContent } from '../../../../utils/typeGuards';\n\ninterface MessageGroupProps {\n  messages: MessageType[];\n  isThinking: boolean;\n}\n\n/**\n * MessageGroup Component - Groups related messages in a thinking sequence\n *\n * Design principles:\n * - Minimalist design with no avatars or indentation\n * - Clean, full-width message layout\n * - All intermediate thinking steps are always visible\n * - Visual hierarchy emphasizing final answers\n * - Consistent monochromatic styling\n */\nexport const MessageGroup: React.FC<MessageGroupProps> = ({ messages, isThinking }) => {\n  // 分离环境消息和其他消息\n  const environmentMessages = messages.filter((msg) => msg.role === 'environment');\n  const lastEnvironmentMessage = environmentMessages.length > 0 ? environmentMessages[environmentMessages.length - 1] : null;\n  const otherMessages = messages.filter((msg) => msg.role !== 'environment');\n\n  // 检查是否最后一个环境消息后面没有其他消息(表示任务可能已结束)\n  const isLastMessageEnvironment = messages.length > 0 && \n                                   messages[messages.length - 1].role === 'environment';\n\n  // 如果过滤后没有非环境消息，检查是否有环境消息可显示\n  if (otherMessages.length === 0) {\n    if (lastEnvironmentMessage && isLastMessageEnvironment) {\n      return <Message message={lastEnvironmentMessage} />;\n    }\n    return null;\n  }\n\n  // 如果只有一条非环境消息，检查是否需要拆分\n  if (otherMessages.length === 1) {\n    const message = otherMessages[0];\n\n    // 检查是否是包含图片和文本的多模态用户消息\n    if (message.role === 'user' && isMultimodalContent(message.content)) {\n      const imageContents = message.content.filter((part) => part.type === 'image_url');\n      const textContents = message.content.filter((part) => part.type === 'text');\n\n      // 只有同时包含图片和文本时才拆分显示\n      if (imageContents.length > 0 && textContents.length > 0) {\n        return (\n          <div className=\"space-y-3\">\n            {/* 先显示图片消息 */}\n            <Message\n              key={`${message.id}-images`}\n              message={{\n                ...message,\n                content: imageContents,\n                id: `${message.id}-images`,\n              }}\n            />\n\n            {/* 再显示文本消息 */}\n            <Message\n              key={`${message.id}-text`}\n              message={{\n                ...message,\n                content: textContents,\n                id: `${message.id}-text`,\n              }}\n            />\n            \n            {/* 如果最后一条是环境消息，显示它 */}\n            {lastEnvironmentMessage && isLastMessageEnvironment && (\n              <Message \n                key={lastEnvironmentMessage.id} \n                message={lastEnvironmentMessage} \n              />\n            )}\n          </div>\n        );\n      }\n    }\n\n    return (\n      <div className=\"space-y-3\">\n        <Message message={otherMessages[0]} />\n        \n        {/* 如果最后一条是环境消息，显示它 */}\n        {lastEnvironmentMessage && isLastMessageEnvironment && (\n          <Message \n            key={lastEnvironmentMessage.id} \n            message={lastEnvironmentMessage} \n          />\n        )}\n      </div>\n    );\n  }\n\n  // 获取第一条消息 - 通常是用户消息\n  const firstMessage = otherMessages[0];\n\n  // If not a user message, use simplified rendering\n  if (firstMessage.role !== 'user') {\n    return (\n      <div className=\"space-y-3\">\n        {otherMessages.map((message, index) => (\n          <Message\n            key={message.id}\n            message={message}\n            isInGroup={index > 0 && index < otherMessages.length - 1}\n            isIntermediate={index > 0 && index < otherMessages.length - 1}\n            shouldDisplayTimestamp={false}\n          />\n        ))}\n        \n        {/* 如果最后一条是环境消息，显示它 */}\n        {lastEnvironmentMessage && isLastMessageEnvironment && (\n          <Message \n            key={lastEnvironmentMessage.id} \n            message={lastEnvironmentMessage} \n          />\n        )}\n      </div>\n    );\n  }\n\n  // For user-initiated groups, use enhanced rendering with thinking sequence\n\n  const responseMessage = otherMessages.length > 1 ? otherMessages[1] : null;\n  const intermediateMessages = otherMessages.slice(2, -1);\n  const lastMessage = otherMessages[otherMessages.length - 1];\n\n  const hasFinalAnswer = lastMessage.role === 'assistant' && lastMessage.finishReason === 'stop';\n  const finalMessage = hasFinalAnswer ? lastMessage : null;\n\n  const hasThinkingSteps = intermediateMessages.length > 0;\n\n  // 检查用户消息是否需要拆分\n  if (isMultimodalContent(firstMessage.content)) {\n    const imageContents = firstMessage.content.filter((part) => part.type === 'image_url');\n    const textContents = firstMessage.content.filter((part) => part.type === 'text');\n\n    // 只有同时包含图片和文本时才拆分显示\n    if (imageContents.length > 0 && textContents.length > 0) {\n      return (\n        <div className=\"message-group-container space-y-3\">\n          {/* 先显示图片消息 */}\n          <Message\n            message={{\n              ...firstMessage,\n              content: imageContents,\n              id: `${firstMessage.id}-images`,\n            }}\n          />\n\n          {/* 再显示文本消息 */}\n          <Message\n            message={{\n              ...firstMessage,\n              content: textContents,\n              id: `${firstMessage.id}-text`,\n            }}\n          />\n\n          {/* Assistant response section with all assistant-related messages */}\n          {responseMessage && (\n            <div className=\"assistant-response-container\">\n              {/* Initial response message - marked as in-group */}\n              <Message message={responseMessage} isInGroup={true} />\n\n              {/* Thinking process section - always shown */}\n              {hasThinkingSteps && (\n                <div className=\"thinking-steps-container\">\n                  {intermediateMessages.map((msg) => (\n                    <Message key={msg.id} message={msg} isIntermediate={true} isInGroup={true} />\n                  ))}\n\n                  {!isThinking && (\n                    <div className=\"mt-1 mb-2\">\n                      <div className=\"flex items-center text-xs text-gray-500 dark:text-gray-400 py-1\">\n                        <FiClock size={10} className=\"mr-1\" />\n                        {responseMessage && formatTimestamp(responseMessage.timestamp)}\n                      </div>\n                    </div>\n                  )}\n                </div>\n              )}\n\n              {/* Final answer - if exists and not currently thinking */}\n              {finalMessage && finalMessage !== responseMessage && !isThinking && (\n                <Message message={finalMessage} isInGroup={false} />\n              )}\n\n              {/* Thinking indicator */}\n              {isThinking && (\n                <div className=\"mt-2 flex items-center text-xs text-gray-500 dark:text-gray-400\">\n                  <div className=\"flex items-center justify-center bg-gray-50/70 dark:bg-gray-700/40 rounded-full w-5 h-5 mr-2 text-gray-500 dark:text-gray-400\">\n                    <div className=\"w-1.5 h-1.5 bg-gray-500 dark:bg-gray-400 rounded-full animate-pulse\"></div>\n                  </div>\n                  Agent TARS is thinking...\n                </div>\n              )}\n            </div>\n          )}\n          \n          {/* 如果最后一条是环境消息，显示它 */}\n          {lastEnvironmentMessage && isLastMessageEnvironment && (\n            <Message \n              key={lastEnvironmentMessage.id} \n              message={lastEnvironmentMessage} \n            />\n          )}\n        </div>\n      );\n    }\n  }\n\n  return (\n    <div className=\"message-group-container space-y-3\">\n      {/* User message is always displayed */}\n      <Message message={firstMessage} />\n\n      {/* Assistant response section with all assistant-related messages */}\n      {responseMessage && (\n        <div className=\"assistant-response-container\">\n          {/* Initial response message - marked as in-group */}\n          <Message message={responseMessage} isInGroup={true} />\n\n          {/* Thinking process section - always shown */}\n          {hasThinkingSteps && (\n            <div className=\"thinking-steps-container\">\n              {intermediateMessages.map((msg) => (\n                <Message key={msg.id} message={msg} isIntermediate={true} isInGroup={true} />\n              ))}\n\n              {!isThinking && (\n                <div className=\"mt-1 mb-2\">\n                  <div className=\"flex items-center text-xs text-gray-500 dark:text-gray-400 py-1\">\n                    <FiClock size={10} className=\"mr-1\" />\n                    {responseMessage && formatTimestamp(responseMessage.timestamp)}\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n\n          {/* Final answer - if exists and not currently thinking */}\n          {finalMessage && finalMessage !== responseMessage && !isThinking && (\n            <Message message={finalMessage} isInGroup={false} />\n          )}\n\n          {/* Thinking indicator */}\n          {isThinking && (\n            <div className=\"mt-2 flex items-center text-xs text-gray-500 dark:text-gray-400\">\n              <div className=\"flex items-center justify-center bg-gray-50/70 dark:bg-gray-700/40 rounded-full w-5 h-5 mr-2 text-gray-500 dark:text-gray-400\">\n                <div className=\"w-1.5 h-1.5 bg-gray-500 dark:bg-gray-400 rounded-full animate-pulse\"></div>\n              </div>\n              Agent TARS is thinking...\n            </div>\n          )}\n        </div>\n      )}\n      \n      {/* 如果最后一条是环境消息，显示它 */}\n      {lastEnvironmentMessage && isLastMessageEnvironment && (\n        <Message \n          key={lastEnvironmentMessage.id} \n          message={lastEnvironmentMessage} \n        />\n      )}\n    </div>\n  );\n};\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACvBA;AAGA;AACA;AACA;AACA;AAOA;;;;;;;;;AASA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAAA;;;;;;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AALA;;;;;AASA;AAEA;AACA;AACA;AACA;AACA;AALA;;;;;AASA;AAGA;AADA;;;;;;;;;;;AAMA;AACA;AAEA;AACA;;AACA;AAAA;;;;;;AAGA;AAGA;AADA;;;;;;;;;;;AAMA;AAEA;AACA;AAEA;AACA;AACA;AACA;;AACA;AAGA;AACA;AACA;AACA;AAJA;;;;;AASA;AAGA;AADA;;;;;;;;;;;AAMA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;AAIA;AACA;AACA;AACA;AACA;AACA;;;;;;AAIA;AACA;;AAEA;AAAA;AAAA;;;;;;AAGA;AACA;;AACA;AACA;AAAA;AAAA;AAAA;;;;;AAGA;AACA;AACA;AAAA;;AACA;AAAA;AAAA;;;;;;AACA;;;;;;;;;;;;;;;;;;AAQA;AACA;AAAA;;;;;;AAIA;AACA;;AACA;AAAA;AACA;AAAA;;;;;;;;;;;AACA;;;;;;;;;;;;;AAQA;AAGA;AADA;;;;;;;;;;;AAMA;AACA;AAEA;AACA;;AAEA;AAAA;;;;;;AAGA;AACA;;AAEA;AAAA;AAAA;;;;;;AAGA;AACA;;AACA;AACA;AAAA;AAAA;AAAA;;;;;AAGA;AACA;AACA;AAAA;;AACA;AAAA;AAAA;;;;;;AACA;;;;;;;;;;;;;;;;;;AAQA;AACA;AAAA;;;;;;AAIA;AACA;;AACA;AAAA;AACA;AAAA;;;;;;;;;;;AACA;;;;;;;;;;;;;AAQA;AAGA;AADA;;;;;;;;;;;AAMA;AA5PA"}