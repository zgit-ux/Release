{"version":3,"file":"index.b4c768df4e1e9126.hot-update.js","sources":["/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/entry.css","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Sidebar/BrowserControlToolbar.tsx"],"sourcesContent":["// extracted by css-extract-rspack-plugin\nexport {};\n    if(module.hot) {\n      (function() {\n        var localsJsonString = undefined;\n        // 1748909856065\n        var cssReload = require(\"../../node_modules/.pnpm/@rspack+core@1.3.9_@swc+helpers@0.5.17/node_modules/@rspack/core/dist/cssExtractHmr.js\").cssReload(module.id, {});\n        // only invalidate when locals change\n        if (\n          module.hot.data &&\n          module.hot.data.value &&\n          module.hot.data.value !== localsJsonString\n        ) {\n          module.hot.invalidate();\n        } else {\n          module.hot.accept();\n        }\n        module.hot.dispose(function(data) {\n          data.value = localsJsonString;\n          cssReload();\n        });\n      })();\n    }\n  ","import React, { useEffect, useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { FiCpu, FiEye, FiMonitor, FiCode } from 'react-icons/fi';\nimport { useSession } from '../../hooks/useSession';\nimport { apiService } from '@/v2/services/apiService';\n\n/**\n * BrowserControlToolbar - Displays browser control information in the toolbar\n *\n * Design principles:\n * - Compact visualization of complex browser control data\n * - Unobtrusive presentation that adapts to the vertical toolbar\n * - Provides essential information at a glance\n * - Uses color coding to indicate different control modes\n */\nexport const BrowserControlToolbar: React.FC = () => {\n  const [browserMode, setBrowserMode] = useState<string>('default');\n  const [toolCount, setToolCount] = useState<number>(0);\n  const { activeSessionId, connectionStatus } = useSession();\n\n  // Fetch browser control info when active session changes\n  useEffect(() => {\n    if (activeSessionId && connectionStatus.connected) {\n      apiService\n        .getBrowserControlInfo(activeSessionId)\n        .then((info) => {\n          setBrowserMode(info.mode);\n          setToolCount(info.tools.length);\n        })\n        .catch((error) => {\n          console.error('Failed to get browser control info:', error);\n        });\n    }\n  }, [activeSessionId, connectionStatus.connected]);\n\n  // Don't render if no active browser tools\n  if (!toolCount) return null;\n\n  // Get appropriate icon and color based on mode\n  const getModeDetails = () => {\n    switch (browserMode) {\n      case 'default':\n        return {\n          icon: <FiCpu size={16} />,\n          color: 'text-purple-500 dark:text-purple-400',\n          bgColor: 'bg-purple-100 dark:bg-purple-900/20',\n          borderColor: 'border-purple-200/40 dark:border-purple-800/30',\n          title: 'Hybrid Browser Control',\n        };\n      case 'browser-use-only':\n        return {\n          icon: <FiCode size={16} />,\n          color: 'text-blue-500 dark:text-blue-400',\n          bgColor: 'bg-blue-100 dark:bg-blue-900/20',\n          borderColor: 'border-blue-200/40 dark:border-blue-800/30',\n          title: 'DOM-based Browser Control',\n        };\n      case 'gui-agent-only':\n        return {\n          icon: <FiEye size={16} />,\n          color: 'text-green-500 dark:text-green-400',\n          bgColor: 'bg-green-100 dark:bg-green-900/20',\n          borderColor: 'border-green-200/40 dark:border-green-800/30',\n          title: 'Vision-based Browser Control',\n        };\n      default:\n        return {\n          icon: <FiMonitor size={16} />,\n          color: 'text-gray-500 dark:text-gray-400',\n          bgColor: 'bg-gray-100 dark:bg-gray-700/40',\n          borderColor: 'border-gray-200/40 dark:border-gray-700/30',\n          title: 'Browser Control',\n        };\n    }\n  };\n\n  const { icon, color, bgColor, borderColor, title } = getModeDetails();\n\n  return (\n    <motion.div\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      whileHover={{ scale: 1.05 }}\n      className=\"mx-auto mb-4\"\n    >\n      <div\n        className={`w-10 h-10 rounded-xl flex items-center justify-center ${bgColor} ${color} border ${borderColor}`}\n        title={`${title} (${toolCount} tools)`}\n      >\n        {icon}\n      </div>\n    </motion.div>\n  );\n};\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;AAQA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;;;;;;;;;;;AAIA;AA9EA;;AAGA;;;AAHA"}