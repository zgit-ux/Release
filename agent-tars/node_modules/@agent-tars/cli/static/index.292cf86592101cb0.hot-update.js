"use strict";
self["webpackHotUpdate_agent_tars_web_ui"]("index", {
"./src/entry.css": (function (module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
// extracted by css-extract-rspack-plugin

    if(true) {
      (function() {
        var localsJsonString = undefined;
        // 1751744332748
        var cssReload = (__webpack_require__("../node_modules/.pnpm/@rspack+core@1.3.9_@swc+helpers@0.5.17/node_modules/@rspack/core/dist/cssExtractHmr.js")/* .cssReload */.cssReload)(module.id, {});
        // only invalidate when locals change
        if (
          module.hot.data &&
          module.hot.data.value &&
          module.hot.data.value !== localsJsonString
        ) {
          module.hot.invalidate();
        } else {
          module.hot.accept();
        }
        module.hot.dispose(function(data) {
          data.value = localsJsonString;
          cssReload();
        });
      })();
    }
  

}),
"./src/standalone/workspace/utils/contentStandardizer/handlers.ts": (function (module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  handleBrowserControlContent: () => (handleBrowserControlContent),
  handleCommandContent: () => (handleCommandContent),
  handleDefaultContent: () => (handleDefaultContent),
  handleFileContent: () => (handleFileContent),
  handleImageContent: () => (handleImageContent),
  handleScriptContent: () => (handleScriptContent),
  handleSearchContent: () => (handleSearchContent)
});
/* ESM import */var _typeGuards__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/standalone/workspace/utils/contentStandardizer/typeGuards.ts");
/* ESM import */var _extractors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/standalone/workspace/utils/contentStandardizer/extractors.ts");
/* provided dependency */ var $ReactRefreshRuntime$ = __webpack_require__("../node_modules/.pnpm/@rspack+plugin-react-refresh@1.0.3_react-refresh@0.16.0/node_modules/@rspack/plugin-react-refresh/client/reactRefresh.js");


function handleImageContent(source, title) {
    if (typeof source === 'string') {
        const imageData = (0,_extractors__WEBPACK_IMPORTED_MODULE_1__.parseImageContent)(source);
        if (imageData) {
            return [
                {
                    type: 'image',
                    imageData: imageData.base64Data,
                    mimeType: imageData.mimeType,
                    name: title
                }
            ];
        }
    }
    if (Array.isArray(source)) {
        var _imagePart_image_url;
        const imagePart = (0,_extractors__WEBPACK_IMPORTED_MODULE_1__.findImageContent)(source);
        if (imagePart === null || imagePart === void 0 ? void 0 : (_imagePart_image_url = imagePart.image_url) === null || _imagePart_image_url === void 0 ? void 0 : _imagePart_image_url.url) {
            const imgSrc = imagePart.image_url.url;
            const imageData = (0,_extractors__WEBPACK_IMPORTED_MODULE_1__.parseImageContent)(imgSrc);
            if (imageData) {
                return [
                    {
                        type: 'image',
                        imageData: imageData.base64Data,
                        mimeType: imageData.mimeType,
                        name: title
                    }
                ];
            }
        }
    }
    return [
        {
            type: 'text',
            text: 'Image could not be displayed'
        }
    ];
}
function handleSearchContent(source, toolArguments, title) {
    if ((0,_typeGuards__WEBPACK_IMPORTED_MODULE_0__.isSearchResults)(source)) {
        return [
            {
                type: 'search_result',
                name: 'SEARCH_RESULTS',
                results: source.map((item)=>({
                        title: item.title,
                        url: item.url,
                        snippet: item.content || item.snippet || ''
                    })),
                query: (toolArguments === null || toolArguments === void 0 ? void 0 : toolArguments.query) || (title === null || title === void 0 ? void 0 : title.replace(/^Search: /i, ''))
            }
        ];
    }
    if ((0,_typeGuards__WEBPACK_IMPORTED_MODULE_0__.isMultimodalContent)(source)) {
        const { results, query } = (0,_extractors__WEBPACK_IMPORTED_MODULE_1__.extractSearchResults)(source);
        return [
            {
                type: 'search_result',
                name: 'SEARCH_RESULTS',
                results,
                query
            }
        ];
    }
    if ((0,_typeGuards__WEBPACK_IMPORTED_MODULE_0__.isObjectWithResults)(source)) {
        return [
            {
                type: 'search_result',
                name: 'SEARCH_RESULTS',
                results: source.results,
                query: source.query
            }
        ];
    }
    return [
        {
            type: 'text',
            text: typeof source === 'string' ? source : JSON.stringify(source, null, 2)
        }
    ];
}
function handleCommandContent(source, toolArguments) {
    if ((0,_typeGuards__WEBPACK_IMPORTED_MODULE_0__.isMultimodalContent)(source)) {
        const commandResult = (0,_extractors__WEBPACK_IMPORTED_MODULE_1__.extractCommandResult)(source);
        return [
            {
                type: 'command_result',
                name: 'COMMAND_RESULT',
                command: commandResult.command || (toolArguments === null || toolArguments === void 0 ? void 0 : toolArguments.command),
                stdout: commandResult.stdout || '',
                stderr: commandResult.stderr || '',
                exitCode: commandResult.exitCode
            }
        ];
    }
    if ((0,_typeGuards__WEBPACK_IMPORTED_MODULE_0__.isCommandResult)(source)) {
        return [
            {
                type: 'command_result',
                name: 'COMMAND_RESULT',
                command: source.command || (toolArguments === null || toolArguments === void 0 ? void 0 : toolArguments.command),
                stdout: source.output || source.stdout || '',
                stderr: source.stderr || '',
                exitCode: source.exitCode
            }
        ];
    }
    return [
        {
            type: 'text',
            text: typeof source === 'string' ? source : JSON.stringify(source, null, 2)
        }
    ];
}
function handleScriptContent(source, toolArguments) {
    if ((0,_typeGuards__WEBPACK_IMPORTED_MODULE_0__.isMultimodalContent)(source)) {
        const scriptResult = (0,_extractors__WEBPACK_IMPORTED_MODULE_1__.extractScriptResult)(source);
        return [
            {
                type: 'script_result',
                name: 'SCRIPT_RESULT',
                script: (toolArguments === null || toolArguments === void 0 ? void 0 : toolArguments.script) || '',
                interpreter: (toolArguments === null || toolArguments === void 0 ? void 0 : toolArguments.interpreter) || 'python',
                cwd: (toolArguments === null || toolArguments === void 0 ? void 0 : toolArguments.cwd) || undefined,
                stdout: scriptResult.stdout || '',
                stderr: scriptResult.stderr || '',
                exitCode: scriptResult.exitCode
            }
        ];
    }
    if ((0,_typeGuards__WEBPACK_IMPORTED_MODULE_0__.isScriptResult)(source)) {
        return [
            {
                type: 'script_result',
                name: 'SCRIPT_RESULT',
                script: source.script || (toolArguments === null || toolArguments === void 0 ? void 0 : toolArguments.script) || '',
                interpreter: source.interpreter || (toolArguments === null || toolArguments === void 0 ? void 0 : toolArguments.interpreter) || 'python',
                cwd: source.cwd || (toolArguments === null || toolArguments === void 0 ? void 0 : toolArguments.cwd) || undefined,
                stdout: source.stdout || '',
                stderr: source.stderr || '',
                exitCode: source.exitCode
            }
        ];
    }
    return [
        {
            type: 'text',
            text: typeof source === 'string' ? source : JSON.stringify(source, null, 2)
        }
    ];
}
function handleFileContent(source, toolArguments) {
    if ((0,_typeGuards__WEBPACK_IMPORTED_MODULE_0__.isMultimodalContent)(source)) {
        const { content } = (0,_extractors__WEBPACK_IMPORTED_MODULE_1__.extractFileContent)(source);
        if (content) {
            return [
                {
                    type: 'file_result',
                    name: 'FILE_RESULT',
                    path: (toolArguments === null || toolArguments === void 0 ? void 0 : toolArguments.path) || 'Unknown file',
                    content
                }
            ];
        }
    }
    if ((0,_typeGuards__WEBPACK_IMPORTED_MODULE_0__.isFileResult)(source)) {
        return [
            {
                type: 'file_result',
                name: 'FILE_RESULT',
                path: source.path || (toolArguments === null || toolArguments === void 0 ? void 0 : toolArguments.path) || 'Unknown file',
                content: source.content || 'No content available'
            }
        ];
    }
    if (typeof source === 'string') {
        return [
            {
                type: 'file_result',
                name: 'FILE_RESULT',
                path: (toolArguments === null || toolArguments === void 0 ? void 0 : toolArguments.path) || 'Unknown file',
                content: source
            }
        ];
    }
    // Handle streaming write_file operation
    if ((toolArguments === null || toolArguments === void 0 ? void 0 : toolArguments.path) && (toolArguments === null || toolArguments === void 0 ? void 0 : toolArguments.content) !== undefined) {
        debugger;
        return [
            {
                type: 'file_result',
                name: 'FILE_RESULT',
                path: toolArguments.path,
                content: toolArguments.content
            }
        ];
    }
    return [
        {
            type: 'text',
            text: typeof source === 'string' ? source : JSON.stringify(source, null, 2)
        }
    ];
}
function handleBrowserControlContent(panelContent, source) {
    const { toolCallId, arguments: toolArguments, originalContent } = panelContent;
    const environmentImage = Array.isArray(originalContent) ? (0,_extractors__WEBPACK_IMPORTED_MODULE_1__.extractImageUrl)(originalContent) : null;
    return [
        {
            type: 'browser_control',
            name: 'BROWSER_CONTROL',
            toolCallId,
            thought: (toolArguments === null || toolArguments === void 0 ? void 0 : toolArguments.thought) || '',
            step: (toolArguments === null || toolArguments === void 0 ? void 0 : toolArguments.step) || '',
            action: (toolArguments === null || toolArguments === void 0 ? void 0 : toolArguments.action) || '',
            status: (0,_typeGuards__WEBPACK_IMPORTED_MODULE_0__.isCommandResult)(source) ? source.command || 'unknown' : 'unknown',
            environmentImage
        }
    ];
}
function handleDefaultContent(source) {
    if (typeof source === 'object' && source !== null) {
        return [
            {
                type: 'json',
                name: 'JSON_DATA',
                data: source
            }
        ];
    }
    return [
        {
            type: 'text',
            text: typeof source === 'string' ? source : JSON.stringify(source, null, 2)
        }
    ];
}

function $RefreshSig$() {
  return $ReactRefreshRuntime$.createSignatureFunctionForTransform();
}
function $RefreshReg$(type, id) {
  $ReactRefreshRuntime$.register(type, module.id + "_" + id);
}
Promise.resolve().then(function() {
  $ReactRefreshRuntime$.refresh(module.id, module.hot);
});


}),

},function(__webpack_require__) {
// webpack/runtime/get_full_hash
(() => {
__webpack_require__.h = () => ("6689927de53b1918")
})();

}
);
//# sourceMappingURL=index.292cf86592101cb0.hot-update.js.map