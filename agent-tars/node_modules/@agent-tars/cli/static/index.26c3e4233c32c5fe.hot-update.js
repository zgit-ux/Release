"use strict";
self["webpackHotUpdate_agent_tars_web_ui"]("index", {
"./src/entry.css": (function (module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
// extracted by css-extract-rspack-plugin

    if(true) {
      (function() {
        var localsJsonString = undefined;
        // 1749590174526
        var cssReload = (__webpack_require__("../node_modules/.pnpm/@rspack+core@1.3.9_@swc+helpers@0.5.17/node_modules/@rspack/core/dist/cssExtractHmr.js")/* .cssReload */.cssReload)(module.id, {});
        // only invalidate when locals change
        if (
          module.hot.data &&
          module.hot.data.value &&
          module.hot.data.value !== localsJsonString
        ) {
          module.hot.invalidate();
        } else {
          module.hot.accept();
        }
        module.hot.dispose(function(data) {
          data.value = localsJsonString;
          cssReload();
        });
      })();
    }
  

}),
"./src/v2/hooks/useReplay.ts": (function (module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  useReplay: () => (useReplay)
});
/* ESM import */var jotai__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("../node_modules/.pnpm/jotai@2.12.5_@types+react@18.3.23_react@18.3.1/node_modules/jotai/esm/react.mjs");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/react@18.3.1/node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* ESM import */var _state_atoms_replay__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/v2/state/atoms/replay.ts");
/* ESM import */var _useSession__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/v2/hooks/useSession.ts");
/* ESM import */var _state_atoms_message__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/v2/state/atoms/message.ts");
/* ESM import */var _state_atoms_tool__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/v2/state/atoms/tool.ts");
/* ESM import */var _state_actions_eventProcessor__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./src/v2/state/actions/eventProcessor.ts");
/* ESM import */var _state_atoms_plan__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./src/v2/state/atoms/plan.ts");
/* provided dependency */ var $ReactRefreshRuntime$ = __webpack_require__("../node_modules/.pnpm/@rspack+plugin-react-refresh@1.0.3_react-refresh@0.16.0/node_modules/@rspack/plugin-react-refresh/client/reactRefresh.js");
// /agent-tars-web-ui/src/v2/hooks/useReplay.ts









/**
 * Custom hook for managing replay functionality
 *
 * Provides:
 * - Control for playback (play, pause, jump, etc.)
 * - Event processing through the standard event processor
 * - Timeline calculations and positioning
 */ function useReplay() {
    const [replayState, setReplayState] = (0,jotai__WEBPACK_IMPORTED_MODULE_7__.useAtom)(_state_atoms_replay__WEBPACK_IMPORTED_MODULE_1__.replayStateAtom);
    const { activeSessionId } = (0,_useSession__WEBPACK_IMPORTED_MODULE_2__.useSession)();
    const [playbackInterval, setPlaybackInterval] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);
    const [, setMessages] = (0,jotai__WEBPACK_IMPORTED_MODULE_7__.useAtom)(_state_atoms_message__WEBPACK_IMPORTED_MODULE_3__.messagesAtom);
    const [, setToolResults] = (0,jotai__WEBPACK_IMPORTED_MODULE_7__.useAtom)(_state_atoms_tool__WEBPACK_IMPORTED_MODULE_4__.toolResultsAtom);
    const [, setPlans] = (0,jotai__WEBPACK_IMPORTED_MODULE_7__.useAtom)(_state_atoms_plan__WEBPACK_IMPORTED_MODULE_6__.plansAtom);
    const processEvent = (0,jotai__WEBPACK_IMPORTED_MODULE_7__.useSetAtom)(_state_actions_eventProcessor__WEBPACK_IMPORTED_MODULE_5__.processEventAction);
    /**
   * 重置会话状态并处理事件至指定索引
   */ const processEventsUpToIndex = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((targetIndex)=>{
        if (!activeSessionId || !replayState.events.length || targetIndex < 0) return;
        // 获取需要处理的事件
        const eventsToProcess = replayState.events.slice(0, targetIndex + 1);
        // 清空当前会话状态
        setMessages((prev)=>({
                ...prev,
                [activeSessionId]: []
            }));
        setToolResults((prev)=>({
                ...prev,
                [activeSessionId]: []
            }));
        setPlans((prev)=>({
                ...prev,
                [activeSessionId]: {
                    steps: [],
                    isComplete: false,
                    summary: null,
                    hasGeneratedPlan: false,
                    keyframes: []
                }
            }));
        // 处理环境输入事件优先，确保图片资源先加载
        const envEvents = eventsToProcess.filter((event)=>event.type === 'environment_input');
        const nonEnvEvents = eventsToProcess.filter((event)=>event.type !== 'environment_input');
        // 先处理环境输入事件
        for (const event of envEvents){
            processEvent({
                sessionId: activeSessionId,
                event
            });
        }
        // 然后处理其他事件
        for (const event of nonEnvEvents){
            processEvent({
                sessionId: activeSessionId,
                event
            });
        }
    }, [
        activeSessionId,
        replayState.events,
        setMessages,
        setToolResults,
        setPlans,
        processEvent
    ]);
    /**
   * 开始回放
   */ const startReplay = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{
        // 清除现有的定时器
        if (playbackInterval) {
            clearInterval(playbackInterval);
        }
        setReplayState((prev)=>({
                ...prev,
                isPaused: false
            }));
        // 设置定时器按间隔前进
        const interval = setInterval(()=>{
            setReplayState((prev)=>{
                // 到达末尾时停止
                if (prev.currentEventIndex >= prev.events.length - 1) {
                    clearInterval(interval);
                    return {
                        ...prev,
                        isPaused: true,
                        currentEventIndex: prev.events.length - 1
                    };
                }
                // 前进到下一个事件
                const nextIndex = prev.currentEventIndex + 1;
                // 处理到新位置
                if (activeSessionId) {
                    processEvent({
                        sessionId: activeSessionId,
                        event: prev.events[nextIndex]
                    });
                }
                return {
                    ...prev,
                    currentEventIndex: nextIndex
                };
            });
        }, 500 / replayState.playbackSpeed);
        setPlaybackInterval(interval);
    }, [
        activeSessionId,
        playbackInterval,
        processEvent,
        replayState.playbackSpeed,
        setReplayState
    ]);
    /**
   * 暂停回放
   */ const pauseReplay = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{
        if (playbackInterval) {
            clearInterval(playbackInterval);
            setPlaybackInterval(null);
        }
        setReplayState((prev)=>({
                ...prev,
                isPaused: true
            }));
    }, [
        playbackInterval,
        setReplayState
    ]);
    /**
   * 跳转到时间轴上的指定位置
   */ const jumpToPosition = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((position)=>{
        // 确保位置在有效范围内
        const normalizedPosition = Math.max(0, Math.min(1, position));
        if (replayState.events.length === 0 || !activeSessionId) return;
        // 根据位置计算目标事件索引
        const targetIndex = Math.floor(normalizedPosition * (replayState.events.length - 1));
        // 暂停任何正在进行的回放
        if (playbackInterval) {
            clearInterval(playbackInterval);
            setPlaybackInterval(null);
        }
        // 处理到新位置
        processEventsUpToIndex(targetIndex);
        setReplayState((prev)=>({
                ...prev,
                isPaused: true,
                currentEventIndex: targetIndex
            }));
    }, [
        activeSessionId,
        playbackInterval,
        processEventsUpToIndex,
        replayState.events.length,
        setReplayState
    ]);
    /**
   * 跳转到最终结果
   */ const jumpToResult = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{
        if (replayState.events.length === 0 || !activeSessionId) return;
        const finalIndex = replayState.events.length - 1;
        // 暂停任何正在进行的回放
        if (playbackInterval) {
            clearInterval(playbackInterval);
            setPlaybackInterval(null);
        }
        // 处理到最终位置
        processEventsUpToIndex(finalIndex);
        setReplayState((prev)=>({
                ...prev,
                isPaused: true,
                currentEventIndex: finalIndex
            }));
    }, [
        activeSessionId,
        playbackInterval,
        processEventsUpToIndex,
        replayState.events.length,
        setReplayState
    ]);
    /**
   * 设置播放速度
   */ const setPlaybackSpeed = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((speed)=>{
        setReplayState((prev)=>({
                ...prev,
                playbackSpeed: speed
            }));
        // 如果正在播放，以新速度重启
        if (!replayState.isPaused && playbackInterval) {
            clearInterval(playbackInterval);
            startReplay();
        }
    }, [
        playbackInterval,
        replayState.isPaused,
        setReplayState,
        startReplay
    ]);
    /**
   * 退出回放模式
   */ const exitReplay = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{
        if (playbackInterval) {
            clearInterval(playbackInterval);
        }
        setReplayState((prev)=>({
                ...prev,
                isActive: false,
                isPaused: true,
                currentEventIndex: -1,
                events: [],
                processedEvents: {}
            }));
    }, [
        playbackInterval,
        setReplayState
    ]);
    /**
   * 获取当前事件
   */ const getCurrentEvent = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{
        if (!replayState.isActive || replayState.currentEventIndex < 0 || replayState.currentEventIndex >= replayState.events.length) {
            return null;
        }
        return replayState.events[replayState.currentEventIndex];
    }, [
        replayState.currentEventIndex,
        replayState.events,
        replayState.isActive
    ]);
    /**
   * 获取当前位置百分比 (0-100)
   */ const getCurrentPosition = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{
        if (!replayState.isActive || replayState.events.length <= 1) {
            return 0;
        }
        return replayState.currentEventIndex / (replayState.events.length - 1) * 100;
    }, [
        replayState.currentEventIndex,
        replayState.events.length,
        replayState.isActive
    ]);
    /**
   * 获取当前所有事件
   */ const getCurrentEvents = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{
        if (!replayState.isActive || replayState.currentEventIndex < 0) {
            return [];
        }
        return replayState.events.slice(0, replayState.currentEventIndex + 1);
    }, [
        replayState.currentEventIndex,
        replayState.events,
        replayState.isActive
    ]);
    // 组件卸载时清理定时器
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{
        return ()=>{
            if (playbackInterval) {
                clearInterval(playbackInterval);
            }
        };
    }, [
        playbackInterval
    ]);
    // 回放模式初始化时：如果索引为-1，需要手动触发第一步，否则会显示为空白
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{
        if (replayState.isActive && replayState.currentEventIndex === -1 && replayState.events.length > 0) {
            // 如果启动回放后立即跳到第一个事件
            processEventsUpToIndex(0);
            setReplayState((prev)=>({
                    ...prev,
                    currentEventIndex: 0
                }));
        }
    }, [
        replayState.isActive,
        replayState.currentEventIndex,
        replayState.events.length,
        processEventsUpToIndex,
        setReplayState
    ]);
    /**
   * 取消自动播放倒计时
   */ const cancelAutoPlay = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{
        setReplayState((prev)=>({
                ...prev,
                autoPlayCountdown: null
            }));
    }, [
        setReplayState
    ]);
    // 添加对自动播放事件的监听
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{
        const handleAutoStart = ()=>{
            console.log('Auto-play event received, starting replay...');
            startReplay();
        };
        // 添加事件监听器
        window.addEventListener('replay-autostart', handleAutoStart);
        // 清理函数
        return ()=>{
            window.removeEventListener('replay-autostart', handleAutoStart);
        };
    }, [
        startReplay
    ]); // 依赖于startReplay函数
    return {
        // 状态
        replayState,
        // 操作方法
        startReplay,
        pauseReplay,
        jumpToPosition,
        jumpToResult,
        setPlaybackSpeed,
        exitReplay,
        cancelAutoPlay,
        // 工具方法
        getCurrentEvents,
        getCurrentPosition,
        getCurrentEvent
    };
}

function $RefreshSig$() {
  return $ReactRefreshRuntime$.createSignatureFunctionForTransform();
}
function $RefreshReg$(type, id) {
  $ReactRefreshRuntime$.register(type, module.id + "_" + id);
}
Promise.resolve().then(function() {
  $ReactRefreshRuntime$.refresh(module.id, module.hot);
});


}),
"./src/v2/state/actions/eventProcessor.ts": (function (module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  processEventAction: () => (processEventAction),
  updateProcessingStatusAction: () => (updateProcessingStatusAction)
});
/* ESM import */var jotai__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("../node_modules/.pnpm/jotai@2.12.5_@types+react@18.3.23_react@18.3.1/node_modules/jotai/esm/vanilla.mjs");
/* ESM import */var uuid__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-browser/v4.js");
/* ESM import */var _atoms_message__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/v2/state/atoms/message.ts");
/* ESM import */var _atoms_tool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/v2/state/atoms/tool.ts");
/* ESM import */var _atoms_ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/v2/state/atoms/ui.ts");
/* ESM import */var _utils_formatters__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/v2/utils/formatters.ts");
/* ESM import */var _atoms_plan__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/v2/state/atoms/plan.ts");
/* ESM import */var _atoms_replay__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./src/v2/state/atoms/replay.ts");
/* provided dependency */ var $ReactRefreshRuntime$ = __webpack_require__("../node_modules/.pnpm/@rspack+plugin-react-refresh@1.0.3_react-refresh@0.16.0/node_modules/@rspack/plugin-react-refresh/client/reactRefresh.js");
/* eslint-disable @typescript-eslint/no-explicit-any */ 







// 存储工具调用参数的映射表 (不是 Atom，是内部缓存)
const toolCallArgumentsMap = new Map();
/**
 * Process a single event and update the appropriate state atoms
 */ const processEventAction = (0,jotai__WEBPACK_IMPORTED_MODULE_6__.atom)(null, (get, set, params)=>{
    const { sessionId, event } = params;
    const replayState = get(_atoms_replay__WEBPACK_IMPORTED_MODULE_5__.replayStateAtom);
    const isReplayMode = replayState.isActive;
    console.log('[GUI] event.type', event.type);
    switch(event.type){
        case 'user_message':
            handleUserMessage(set, sessionId, event);
            break;
        case 'assistant_message':
            handleAssistantMessage(get, set, sessionId, event);
            break;
        case 'assistant_streaming_message':
            if (!isReplayMode) {
                handleStreamingMessage(get, set, sessionId, event);
            }
            break;
        case 'assistant_thinking_message':
        case 'assistant_streaming_thinking_message':
            handleThinkingMessage(get, set, sessionId, event);
            break;
        case 'tool_call':
            handleToolCall(set, sessionId, event);
            break;
        case 'tool_result':
            handleToolResult(set, sessionId, event);
            break;
        case 'system':
            handleSystemMessage(set, sessionId, event);
            break;
        case 'environment_input':
            handleEnvironmentInput(set, sessionId, event);
            break;
        case 'agent_run_start':
            set(_atoms_ui__WEBPACK_IMPORTED_MODULE_2__.isProcessingAtom, true);
            break;
        case 'agent_run_end':
            set(_atoms_ui__WEBPACK_IMPORTED_MODULE_2__.isProcessingAtom, false);
            break;
        case 'plan_start':
            handlePlanStart(set, sessionId, event);
            break;
        case 'plan_update':
            handlePlanUpdate(set, sessionId, event);
            break;
        case 'plan_finish':
            handlePlanFinish(set, sessionId, event);
            break;
        case 'final_answer':
            handleFinalAnswer(get, set, sessionId, event);
            break;
        case 'final_answer_streaming':
            if (!isReplayMode) {
                handleFinalAnswerStreaming(get, set, sessionId, event);
            }
            break;
    }
});
const updateProcessingStatusAction = (0,jotai__WEBPACK_IMPORTED_MODULE_6__.atom)(null, (get, set, status)=>{
    // Update processing state
    set(_atoms_ui__WEBPACK_IMPORTED_MODULE_2__.isProcessingAtom, !!status.isProcessing);
});
/**
 * Handle user message event
 */ function handleUserMessage(set, sessionId, event) {
    const userMessage = {
        id: event.id,
        role: 'user',
        content: event.content,
        timestamp: event.timestamp
    };
    set(_atoms_message__WEBPACK_IMPORTED_MODULE_0__.messagesAtom, (prev)=>{
        const sessionMessages = prev[sessionId] || [];
        return {
            ...prev,
            [sessionId]: [
                ...sessionMessages,
                userMessage
            ]
        };
    });
    // Check for images in user message and set active panel content if found
    if (Array.isArray(event.content)) {
        const images = event.content.filter((part)=>part.type === 'image_url');
        if (images.length > 0) {
            set(_atoms_ui__WEBPACK_IMPORTED_MODULE_2__.activePanelContentAtom, {
                type: 'image',
                source: images[0].image_url.url,
                title: 'User Upload',
                timestamp: Date.now()
            });
        }
    }
}
/**
 * Handle assistant message event (complete message)
 */ function handleAssistantMessage(get, set, sessionId, event) {
    // 获取消息ID
    const messageId = event.messageId;
    set(_atoms_message__WEBPACK_IMPORTED_MODULE_0__.messagesAtom, (prev)=>{
        const sessionMessages = prev[sessionId] || [];
        // 检查是否已存在相同messageId的消息
        if (messageId) {
            const existingMessageIndex = sessionMessages.findIndex((msg)=>msg.messageId === messageId);
            // 如果找到了现有消息，更新它而不是添加新消息
            if (existingMessageIndex !== -1) {
                const updatedMessages = [
                    ...sessionMessages
                ];
                updatedMessages[existingMessageIndex] = {
                    ...updatedMessages[existingMessageIndex],
                    content: event.content,
                    timestamp: event.timestamp,
                    toolCalls: event.toolCalls,
                    finishReason: event.finishReason,
                    isStreaming: false
                };
                return {
                    ...prev,
                    [sessionId]: updatedMessages
                };
            }
        }
        // 没有找到现有消息，添加新消息
        return {
            ...prev,
            [sessionId]: [
                ...sessionMessages,
                {
                    id: event.id,
                    role: 'assistant',
                    content: event.content,
                    timestamp: event.timestamp,
                    toolCalls: event.toolCalls,
                    finishReason: event.finishReason,
                    messageId: messageId
                }
            ]
        };
    });
    // 检查是否需要关联最近的环境输入
    const currentMessages = get(_atoms_message__WEBPACK_IMPORTED_MODULE_0__.messagesAtom)[sessionId] || [];
    // 从后往前查找最近的环境输入
    for(let i = currentMessages.length - 1; i >= 0; i--){
        const msg = currentMessages[i];
        if (msg.role === 'environment' && Array.isArray(msg.content)) {
            const imageContent = msg.content.find((item)=>item.type === 'image_url' && item.image_url && item.image_url.url);
            if (imageContent) {
                set(_atoms_ui__WEBPACK_IMPORTED_MODULE_2__.activePanelContentAtom, {
                    type: 'image',
                    source: msg.content,
                    title: msg.description || 'Final Browser State',
                    timestamp: msg.timestamp,
                    environmentId: msg.id
                });
                break;
            }
        }
    }
    set(_atoms_ui__WEBPACK_IMPORTED_MODULE_2__.isProcessingAtom, false);
}
/**
 * Handle streaming message event (incremental content)
 */ function handleStreamingMessage(get, set, sessionId, event) {
    set(_atoms_message__WEBPACK_IMPORTED_MODULE_0__.messagesAtom, (prev)=>{
        const sessionMessages = prev[sessionId] || [];
        const messageIdToFind = event.messageId;
        let existingMessageIndex = -1;
        // 优先按messageId查找
        if (messageIdToFind) {
            existingMessageIndex = sessionMessages.findIndex((msg)=>msg.messageId === messageIdToFind);
        } else if (sessionMessages.length > 0) {
            const lastMessageIndex = sessionMessages.length - 1;
            const lastMessage = sessionMessages[lastMessageIndex];
            if (lastMessage && lastMessage.isStreaming) {
                existingMessageIndex = lastMessageIndex;
            }
        }
        // 更新现有消息
        if (existingMessageIndex !== -1) {
            const existingMessage = sessionMessages[existingMessageIndex];
            const updatedMessage = {
                ...existingMessage,
                content: typeof existingMessage.content === 'string' ? existingMessage.content + event.content : event.content,
                isStreaming: !event.isComplete,
                toolCalls: event.toolCalls || existingMessage.toolCalls
            };
            return {
                ...prev,
                [sessionId]: [
                    ...sessionMessages.slice(0, existingMessageIndex),
                    updatedMessage,
                    ...sessionMessages.slice(existingMessageIndex + 1)
                ]
            };
        }
        // 创建新消息
        const newMessage = {
            id: event.id || (0,uuid__WEBPACK_IMPORTED_MODULE_7__["default"])(),
            role: 'assistant',
            content: event.content,
            timestamp: event.timestamp,
            isStreaming: !event.isComplete,
            toolCalls: event.toolCalls,
            messageId: event.messageId
        };
        return {
            ...prev,
            [sessionId]: [
                ...sessionMessages,
                newMessage
            ]
        };
    });
    if (event.isComplete) {
        set(_atoms_ui__WEBPACK_IMPORTED_MODULE_2__.isProcessingAtom, false);
    }
}
/**
 * Handle thinking message event
 */ function handleThinkingMessage(get, set, sessionId, event) {
    set(_atoms_message__WEBPACK_IMPORTED_MODULE_0__.messagesAtom, (prev)=>{
        const sessionMessages = prev[sessionId] || [];
        const lastAssistantIndex = [
            ...sessionMessages
        ].reverse().findIndex((m)=>m.role === 'assistant');
        if (lastAssistantIndex !== -1) {
            const actualIndex = sessionMessages.length - 1 - lastAssistantIndex;
            const message = sessionMessages[actualIndex];
            return {
                ...prev,
                [sessionId]: [
                    ...sessionMessages.slice(0, actualIndex),
                    {
                        ...message,
                        thinking: event.content
                    },
                    ...sessionMessages.slice(actualIndex + 1)
                ]
            };
        }
        return prev;
    });
}
/**
 * Handle tool call event - store arguments for later use
 */ function handleToolCall(set, sessionId, event) {
    // 保存工具调用的参数信息以便后续使用
    if (event.toolCallId && event.arguments) {
        toolCallArgumentsMap.set(event.toolCallId, event.arguments);
    }
    console.log('Tool call stored:', event.name, event.toolCallId);
}
/**
 * Handle tool result event
 */ function handleToolResult(set, sessionId, event) {
    // 获取之前存储的参数信息
    const args = toolCallArgumentsMap.get(event.toolCallId);
    // 添加调试日志来跟踪内容格式
    console.log(`Tool result for ${event.name}:`, {
        content: event.content,
        isArray: Array.isArray(event.content),
        hasTextItems: Array.isArray(event.content) && event.content.some((item)=>item.type === 'text'),
        names: Array.isArray(event.content) ? event.content.map((item)=>item.name) : 'not-an-array'
    });
    // 如果内容是标准化工具结果格式的数组，则直接使用
    const isStandardFormat = Array.isArray(event.content) && event.content.length > 0 && typeof event.content[0] === 'object' && 'type' in event.content[0];
    const result = {
        id: (0,uuid__WEBPACK_IMPORTED_MODULE_7__["default"])(),
        toolCallId: event.toolCallId,
        name: event.name,
        content: event.content,
        timestamp: event.timestamp,
        error: event.error,
        type: (0,_utils_formatters__WEBPACK_IMPORTED_MODULE_3__.determineToolType)(event.name, event.content),
        arguments: args
    };
    // 添加调试日志，显示确定的类型
    console.log(`Determined type for ${event.name}: ${result.type}`);
    // 如果是browser_vision_control工具，检查是否有关联的环境输入面板
    if (result.type === 'browser_vision_control') {
        // 获取当前活动面板内容
        set(_atoms_ui__WEBPACK_IMPORTED_MODULE_2__.activePanelContentAtom, (prev)=>{
            // 如果当前面板是图片类型且来自环境输入，则进行增强而非替换
            if (prev && prev.type === 'image' && prev.environmentId) {
                return {
                    ...prev,
                    type: 'browser_vision_control',
                    source: event.content,
                    title: prev.title,
                    timestamp: event.timestamp,
                    toolCallId: event.toolCallId,
                    error: event.error,
                    arguments: args,
                    originalContent: prev.source,
                    environmentId: prev.environmentId
                };
            } else {
                // 否则使用标准处理方式
                return {
                    type: result.type,
                    source: result.content,
                    title: result.name,
                    timestamp: result.timestamp,
                    toolCallId: result.toolCallId,
                    error: result.error,
                    arguments: args
                };
            }
        });
    } else {
        // 非browser_vision_control工具使用标准处理
        set(_atoms_ui__WEBPACK_IMPORTED_MODULE_2__.activePanelContentAtom, {
            type: result.type,
            source: result.content,
            title: result.name,
            timestamp: result.timestamp,
            toolCallId: result.toolCallId,
            error: result.error,
            arguments: args
        });
    }
    // Store in the map for future reference
    _atoms_tool__WEBPACK_IMPORTED_MODULE_1__.toolCallResultMap.set(result.toolCallId, result);
    // Add to toolResults atom
    set(_atoms_tool__WEBPACK_IMPORTED_MODULE_1__.toolResultsAtom, (prev)=>{
        const sessionResults = prev[sessionId] || [];
        return {
            ...prev,
            [sessionId]: [
                ...sessionResults,
                result
            ]
        };
    });
    // Link to message with this tool call
    set(_atoms_message__WEBPACK_IMPORTED_MODULE_0__.messagesAtom, (prev)=>{
        const sessionMessages = prev[sessionId] || [];
        // Find message with this tool call
        const messageIndex = [
            ...sessionMessages
        ].reverse().findIndex((m)=>{
            var _m_toolCalls;
            return (_m_toolCalls = m.toolCalls) === null || _m_toolCalls === void 0 ? void 0 : _m_toolCalls.some((tc)=>tc.id === result.toolCallId);
        });
        if (messageIndex !== -1) {
            const actualIndex = sessionMessages.length - 1 - messageIndex;
            const message = sessionMessages[actualIndex];
            const toolResults = message.toolResults || [];
            const updatedMessage = {
                ...message,
                toolResults: [
                    ...toolResults,
                    result
                ]
            };
            return {
                ...prev,
                [sessionId]: [
                    ...sessionMessages.slice(0, actualIndex),
                    updatedMessage,
                    ...sessionMessages.slice(actualIndex + 1)
                ]
            };
        }
        return prev;
    });
}
/**
 * Handle system message event
 */ function handleSystemMessage(set, sessionId, event) {
    const systemMessage = {
        id: (0,uuid__WEBPACK_IMPORTED_MODULE_7__["default"])(),
        role: 'system',
        content: event.message,
        timestamp: event.timestamp || Date.now()
    };
    set(_atoms_message__WEBPACK_IMPORTED_MODULE_0__.messagesAtom, (prev)=>{
        const sessionMessages = prev[sessionId] || [];
        return {
            ...prev,
            [sessionId]: [
                ...sessionMessages,
                systemMessage
            ]
        };
    });
}
/**
 * Handle environment input event
 * Adds it to messages but doesn't set it as active panel content
 */ function handleEnvironmentInput(set, sessionId, event) {
    const environmentMessage = {
        id: event.id,
        role: 'environment',
        content: event.content,
        timestamp: event.timestamp,
        description: event.description || 'Environment Input'
    };
    console.log('[GUI] environmentMessage', environmentMessage);
    set(_atoms_message__WEBPACK_IMPORTED_MODULE_0__.messagesAtom, (prev)=>{
        const sessionMessages = prev[sessionId] || [];
        return {
            ...prev,
            [sessionId]: [
                ...sessionMessages,
                environmentMessage
            ]
        };
    });
    // 检查是否包含图片内容并直接设置为活动面板内容
    if (Array.isArray(event.content)) {
        const imageContent = event.content.find((item)=>item.type === 'image_url' && item.image_url && item.image_url.url);
        if (imageContent && imageContent.image_url) {
            set(_atoms_ui__WEBPACK_IMPORTED_MODULE_2__.activePanelContentAtom, (prev)=>{
                console.log('[GUI] prev', prev === null || prev === void 0 ? void 0 : prev.type);
                // 如果当前面板是来自 browser_vision_control，选择增强而不是替换
                if (prev && prev.type === 'browser_vision_control') {
                    console.log('[GUI] prev event.content', event.content);
                    return {
                        ...prev,
                        type: 'browser_vision_control',
                        title: `${prev.title} - New Screenshot`,
                        timestamp: event.timestamp,
                        originalContent: event.content,
                        environmentId: prev.environmentId
                    };
                } else {
                    console.log('[GUI] prev', 111);
                    // 否则使用标准处理方式
                    return prev;
                // return {
                //   type: 'image',
                //   source: event.content,
                //   title: event.description || 'Browser Screenshot',
                //   timestamp: event.timestamp,
                //   environmentId: event.id, // 添加标识，用于browser_vision_control增量更新
                // };
                }
            });
        }
    }
}
/**
 * Handle plan start event
 */ function handlePlanStart(set, sessionId, event) {
    console.log('Plan start event:', event);
    set(_atoms_plan__WEBPACK_IMPORTED_MODULE_4__.plansAtom, (prev)=>({
            ...prev,
            [sessionId]: {
                steps: [],
                isComplete: false,
                summary: null,
                hasGeneratedPlan: true,
                keyframes: []
            }
        }));
}
/**
 * Handle plan update event
 */ function handlePlanUpdate(set, sessionId, event) {
    console.log('Plan update event:', event);
    set(_atoms_plan__WEBPACK_IMPORTED_MODULE_4__.plansAtom, (prev)=>{
        const currentPlan = prev[sessionId] || {
            steps: [],
            isComplete: false,
            summary: null,
            hasGeneratedPlan: true,
            keyframes: []
        };
        // Create a new keyframe for this update
        const newKeyframe = {
            timestamp: event.timestamp || Date.now(),
            steps: event.steps,
            isComplete: false,
            summary: null
        };
        // Add the keyframe to the history
        const keyframes = [
            ...currentPlan.keyframes || [],
            newKeyframe
        ];
        return {
            ...prev,
            [sessionId]: {
                ...currentPlan,
                steps: event.steps,
                hasGeneratedPlan: true,
                keyframes
            }
        };
    });
}
/**
 * Handle plan finish event
 */ function handlePlanFinish(set, sessionId, event) {
    console.log('Plan finish event:', event);
    set(_atoms_plan__WEBPACK_IMPORTED_MODULE_4__.plansAtom, (prev)=>{
        const currentPlan = prev[sessionId] || {
            steps: [],
            isComplete: false,
            summary: null,
            hasGeneratedPlan: true,
            keyframes: []
        };
        // Create a final keyframe for the completed plan
        const finalKeyframe = {
            timestamp: event.timestamp || Date.now(),
            steps: currentPlan.steps,
            isComplete: true,
            summary: event.summary
        };
        // Add the final keyframe to the history
        const keyframes = [
            ...currentPlan.keyframes || [],
            finalKeyframe
        ];
        return {
            ...prev,
            [sessionId]: {
                ...currentPlan,
                isComplete: true,
                summary: event.summary,
                keyframes
            }
        };
    });
}
/**
 * Handle final answer event (complete answer/report)
 */ function handleFinalAnswer(get, set, sessionId, event) {
    const messageId = event.messageId || `final-answer-${(0,uuid__WEBPACK_IMPORTED_MODULE_7__["default"])()}`;
    // 始终将内容当作研究报告处理，移除JSON_DATA状态
    // 设置活动面板内容为研究报告
    set(_atoms_ui__WEBPACK_IMPORTED_MODULE_2__.activePanelContentAtom, {
        type: 'research_report',
        source: event.content,
        title: event.title || 'Research Report',
        timestamp: event.timestamp,
        isDeepResearch: true,
        messageId
    });
    // 添加消息到聊天引用报告
    const finalAnswerMessage = {
        id: event.id || (0,uuid__WEBPACK_IMPORTED_MODULE_7__["default"])(),
        role: 'final_answer',
        content: event.content,
        timestamp: event.timestamp,
        messageId,
        isDeepResearch: true,
        title: event.title || 'Research Report'
    };
    set(_atoms_message__WEBPACK_IMPORTED_MODULE_0__.messagesAtom, (prev)=>{
        const sessionMessages = prev[sessionId] || [];
        return {
            ...prev,
            [sessionId]: [
                ...sessionMessages,
                finalAnswerMessage
            ]
        };
    });
    // 标记处理完成
    set(_atoms_ui__WEBPACK_IMPORTED_MODULE_2__.isProcessingAtom, false);
}
function handleFinalAnswerStreaming(get, set, sessionId, event) {
    const messageId = event.messageId || `final-answer-${(0,uuid__WEBPACK_IMPORTED_MODULE_7__["default"])()}`;
    // 从当前消息列表中查找已有的相同 messageId 的消息
    const messages = get(_atoms_message__WEBPACK_IMPORTED_MODULE_0__.messagesAtom)[sessionId] || [];
    const existingMessageIndex = messages.findIndex((msg)=>msg.messageId === messageId);
    // 当处理一系列流式事件时，将内容追加到现有消息，或创建新消息
    set(_atoms_message__WEBPACK_IMPORTED_MODULE_0__.messagesAtom, (prev)=>{
        const sessionMessages = prev[sessionId] || [];
        // 如果找到现有消息，则更新它
        if (existingMessageIndex >= 0) {
            const existingMessage = sessionMessages[existingMessageIndex];
            const updatedMessage = {
                ...existingMessage,
                content: typeof existingMessage.content === 'string' ? existingMessage.content + event.content : event.content,
                isStreaming: !event.isComplete,
                timestamp: event.timestamp
            };
            return {
                ...prev,
                [sessionId]: [
                    ...sessionMessages.slice(0, existingMessageIndex),
                    updatedMessage,
                    ...sessionMessages.slice(existingMessageIndex + 1)
                ]
            };
        }
        // 否则创建新消息
        const newMessage = {
            id: event.id || (0,uuid__WEBPACK_IMPORTED_MODULE_7__["default"])(),
            role: 'final_answer',
            content: event.content,
            timestamp: event.timestamp,
            messageId,
            isDeepResearch: true,
            isStreaming: !event.isComplete,
            title: event.title || 'Research Report'
        };
        return {
            ...prev,
            [sessionId]: [
                ...sessionMessages,
                newMessage
            ]
        };
    });
    // 更新活动面板内容 - 同步面板与消息状态
    set(_atoms_ui__WEBPACK_IMPORTED_MODULE_2__.activePanelContentAtom, (prev)=>{
        // 如果是新流或不同的messageId，重新开始
        if (!prev || prev.type !== 'research_report' || prev.messageId !== messageId) {
            return {
                role: 'assistant',
                type: 'research_report',
                source: event.content,
                title: event.title || 'Research Report (Generating...)',
                timestamp: event.timestamp,
                isDeepResearch: true,
                messageId,
                isStreaming: !event.isComplete
            };
        }
        // 否则追加到现有内容
        return {
            ...prev,
            source: prev.source + event.content,
            isStreaming: !event.isComplete,
            timestamp: event.timestamp,
            title: event.title || prev.title
        };
    });
    // 如果这是第一个数据块，也添加一条消息到聊天
    const prevActivePanelContent = get(_atoms_ui__WEBPACK_IMPORTED_MODULE_2__.activePanelContentAtom);
    if (!prevActivePanelContent || prevActivePanelContent.messageId !== messageId) {
        const initialMessage = {
            id: event.id || (0,uuid__WEBPACK_IMPORTED_MODULE_7__["default"])(),
            role: 'final_answer',
            content: event.content,
            timestamp: event.timestamp,
            messageId,
            isDeepResearch: true,
            isStreaming: !event.isComplete,
            title: event.title || 'Research Report'
        };
        set(_atoms_message__WEBPACK_IMPORTED_MODULE_0__.messagesAtom, (prev)=>{
            const sessionMessages = prev[sessionId] || [];
            return {
                ...prev,
                [sessionId]: [
                    ...sessionMessages,
                    initialMessage
                ]
            };
        });
    } else if (event.isComplete) {
        // 当流式生成完成时，更新消息的完整内容
        const fullContent = get(_atoms_ui__WEBPACK_IMPORTED_MODULE_2__.activePanelContentAtom).source;
        set(_atoms_message__WEBPACK_IMPORTED_MODULE_0__.messagesAtom, (prev)=>{
            const sessionMessages = prev[sessionId] || [];
            const messageIndex = sessionMessages.findIndex((msg)=>msg.messageId === messageId);
            if (messageIndex >= 0) {
                const updatedMessages = [
                    ...sessionMessages
                ];
                updatedMessages[messageIndex] = {
                    ...updatedMessages[messageIndex],
                    content: fullContent,
                    isStreaming: false,
                    title: event.title || updatedMessages[messageIndex].title || 'Research Report'
                };
                return {
                    ...prev,
                    [sessionId]: updatedMessages
                };
            }
            return prev;
        });
    }
    // 如果这是最后一个数据块，标记处理完成
    if (event.isComplete) {
        set(_atoms_ui__WEBPACK_IMPORTED_MODULE_2__.isProcessingAtom, false);
    }
}

function $RefreshSig$() {
  return $ReactRefreshRuntime$.createSignatureFunctionForTransform();
}
function $RefreshReg$(type, id) {
  $ReactRefreshRuntime$.register(type, module.id + "_" + id);
}
Promise.resolve().then(function() {
  $ReactRefreshRuntime$.refresh(module.id, module.hot);
});


}),
"./src/v2/state/actions/sessionActions.ts": (function (module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  abortQueryAction: () => (abortQueryAction),
  checkSessionStatusAction: () => (checkSessionStatusAction),
  createSessionAction: () => (createSessionAction),
  deleteSessionAction: () => (deleteSessionAction),
  loadSessionsAction: () => (loadSessionsAction),
  sendMessageAction: () => (sendMessageAction),
  setActiveSessionAction: () => (setActiveSessionAction),
  updateSessionAction: () => (updateSessionAction)
});
/* ESM import */var jotai__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("../node_modules/.pnpm/jotai@2.12.5_@types+react@18.3.23_react@18.3.1/node_modules/jotai/esm/vanilla.mjs");
/* ESM import */var uuid__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-browser/v4.js");
/* ESM import */var _services_apiService__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/v2/services/apiService.ts");
/* ESM import */var _atoms_session__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/v2/state/atoms/session.ts");
/* ESM import */var _atoms_message__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/v2/state/atoms/message.ts");
/* ESM import */var _atoms_tool__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/v2/state/atoms/tool.ts");
/* ESM import */var _atoms_ui__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/v2/state/atoms/ui.ts");
/* ESM import */var _eventProcessor__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./src/v2/state/actions/eventProcessor.ts");
/* ESM import */var _atoms_replay__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./src/v2/state/atoms/replay.ts");
/* provided dependency */ var $ReactRefreshRuntime$ = __webpack_require__("../node_modules/.pnpm/@rspack+plugin-react-refresh@1.0.3_react-refresh@0.16.0/node_modules/@rspack/plugin-react-refresh/client/reactRefresh.js");








 // 假设 connectionStatusAtom 已经存在
 // 添加引入回放状态atom
/**
 * Load all available sessions
 */ const loadSessionsAction = (0,jotai__WEBPACK_IMPORTED_MODULE_7__.atom)(null, async (get, set)=>{
    try {
        const loadedSessions = await _services_apiService__WEBPACK_IMPORTED_MODULE_0__.apiService.getSessions();
        set(_atoms_session__WEBPACK_IMPORTED_MODULE_1__.sessionsAtom, loadedSessions);
    } catch (error) {
        console.error('Failed to load sessions:', error);
        throw error;
    }
});
/**
 * Create a new session
 */ const createSessionAction = (0,jotai__WEBPACK_IMPORTED_MODULE_7__.atom)(null, async (get, set)=>{
    try {
        const newSession = await _services_apiService__WEBPACK_IMPORTED_MODULE_0__.apiService.createSession();
        // Add to sessions list
        set(_atoms_session__WEBPACK_IMPORTED_MODULE_1__.sessionsAtom, (prev)=>[
                newSession,
                ...prev
            ]);
        // Initialize session data
        set(_atoms_message__WEBPACK_IMPORTED_MODULE_2__.messagesAtom, (prev)=>({
                ...prev,
                [newSession.id]: []
            }));
        set(_atoms_tool__WEBPACK_IMPORTED_MODULE_3__.toolResultsAtom, (prev)=>({
                ...prev,
                [newSession.id]: []
            }));
        // Set as active session
        set(_atoms_session__WEBPACK_IMPORTED_MODULE_1__.activeSessionIdAtom, newSession.id);
        return newSession.id;
    } catch (error) {
        console.error('Failed to create session:', error);
        throw error;
    }
});
/**
 * Set the active session
 * 简化加载逻辑，移除恢复会话的复杂性
 */ const setActiveSessionAction = (0,jotai__WEBPACK_IMPORTED_MODULE_7__.atom)(null, async (get, set, sessionId)=>{
    try {
        // 检查是否已经是活动会话
        const currentActiveSessionId = get(_atoms_session__WEBPACK_IMPORTED_MODULE_1__.activeSessionIdAtom);
        if (currentActiveSessionId === sessionId) {
            console.log(`Session ${sessionId} is already active, skipping load`);
            return;
        }
        // 检查回放状态并退出回放模式（除非是同一会话）
        const replayState = get(_atoms_replay__WEBPACK_IMPORTED_MODULE_6__.replayStateAtom);
        if (replayState.isActive) {
            console.log('Exiting replay mode due to session change');
            set(_atoms_replay__WEBPACK_IMPORTED_MODULE_6__.replayStateAtom, {
                isActive: false,
                isPaused: true,
                events: [],
                currentEventIndex: -1,
                startTimestamp: null,
                endTimestamp: null,
                playbackSpeed: 1,
                visibleTimeWindow: null,
                processedEvents: {}
            });
        }
        // 直接获取会话详情，不需要检查 active 状态
        const sessionDetails = await _services_apiService__WEBPACK_IMPORTED_MODULE_0__.apiService.getSessionDetails(sessionId);
        // 获取当前会话状态以更新 isProcessing 状态
        try {
            const status = await _services_apiService__WEBPACK_IMPORTED_MODULE_0__.apiService.getSessionStatus(sessionId);
            set(_atoms_ui__WEBPACK_IMPORTED_MODULE_4__.isProcessingAtom, status.isProcessing);
        } catch (error) {
            console.warn('Failed to get session status:', error);
            set(_atoms_ui__WEBPACK_IMPORTED_MODULE_4__.isProcessingAtom, false);
        }
        // 清理工具调用映射缓存
        _atoms_tool__WEBPACK_IMPORTED_MODULE_3__.toolCallResultMap.clear();
        // 只有在消息不存在时才加载会话事件
        const messages = get(_atoms_message__WEBPACK_IMPORTED_MODULE_2__.messagesAtom);
        if (!messages[sessionId] || messages[sessionId].length === 0) {
            console.log(`Loading events for session ${sessionId}`);
            const events = await _services_apiService__WEBPACK_IMPORTED_MODULE_0__.apiService.getSessionEvents(sessionId);
            // 对流式事件进行预处理，确保正确的连续性
            const processedEvents = preprocessStreamingEvents(events);
            // 处理每个事件以构建消息和工具结果
            for (const event of processedEvents){
                set(_eventProcessor__WEBPACK_IMPORTED_MODULE_5__.processEventAction, {
                    sessionId,
                    event
                });
            }
        } else {
            console.log(`Session ${sessionId} already has messages, skipping event loading`);
        }
        // 设置为活动会话
        set(_atoms_session__WEBPACK_IMPORTED_MODULE_1__.activeSessionIdAtom, sessionId);
    } catch (error) {
        console.error('Failed to set active session:', error);
        set(_atoms_ui__WEBPACK_IMPORTED_MODULE_4__.connectionStatusAtom, (prev)=>({
                ...prev,
                connected: false,
                lastError: error instanceof Error ? error.message : String(error)
            }));
        throw error;
    }
});
/**
 * Update session metadata
 */ const updateSessionAction = (0,jotai__WEBPACK_IMPORTED_MODULE_7__.atom)(null, async (get, set, params)=>{
    const { sessionId, updates } = params;
    try {
        const updatedSession = await _services_apiService__WEBPACK_IMPORTED_MODULE_0__.apiService.updateSessionMetadata(sessionId, updates);
        // Update session in the list
        set(_atoms_session__WEBPACK_IMPORTED_MODULE_1__.sessionsAtom, (prev)=>prev.map((session)=>session.id === sessionId ? {
                    ...session,
                    ...updatedSession
                } : session));
        return updatedSession;
    } catch (error) {
        console.error('Failed to update session:', error);
        throw error;
    }
});
/**
 * 预处理事件，确保流式事件按正确顺序处理
 */ function preprocessStreamingEvents(events) {
    // 对流式消息进行整理
    const messageStreams = {};
    // 收集所有流式事件，按messageId分组
    events.forEach((event)=>{
        if (event.type === 'final_answer_streaming' && 'messageId' in event) {
            const messageId = event.messageId;
            if (!messageStreams[messageId]) {
                messageStreams[messageId] = [];
            }
            messageStreams[messageId].push(event);
        }
    });
    // 返回预处理后的事件，确保流式事件以正确顺序处理
    return events;
}
/**
 * Delete a session
 */ const deleteSessionAction = (0,jotai__WEBPACK_IMPORTED_MODULE_7__.atom)(null, async (get, set, sessionId)=>{
    try {
        const success = await _services_apiService__WEBPACK_IMPORTED_MODULE_0__.apiService.deleteSession(sessionId);
        const activeSessionId = get(_atoms_session__WEBPACK_IMPORTED_MODULE_1__.activeSessionIdAtom);
        if (success) {
            // Remove from sessions list
            set(_atoms_session__WEBPACK_IMPORTED_MODULE_1__.sessionsAtom, (prev)=>prev.filter((session)=>session.id !== sessionId));
            // Clear active session if it was deleted
            if (activeSessionId === sessionId) {
                set(_atoms_session__WEBPACK_IMPORTED_MODULE_1__.activeSessionIdAtom, null);
            }
            // Clear session data
            set(_atoms_message__WEBPACK_IMPORTED_MODULE_2__.messagesAtom, (prev)=>{
                const newMessages = {
                    ...prev
                };
                delete newMessages[sessionId];
                return newMessages;
            });
            set(_atoms_tool__WEBPACK_IMPORTED_MODULE_3__.toolResultsAtom, (prev)=>{
                const newResults = {
                    ...prev
                };
                delete newResults[sessionId];
                return newResults;
            });
        }
        return success;
    } catch (error) {
        console.error('Failed to delete session:', error);
        throw error;
    }
});
/**
 * Send a message in the current session
 */ const sendMessageAction = (0,jotai__WEBPACK_IMPORTED_MODULE_7__.atom)(null, async (get, set, content)=>{
    const activeSessionId = get(_atoms_session__WEBPACK_IMPORTED_MODULE_1__.activeSessionIdAtom);
    if (!activeSessionId) {
        throw new Error('No active session');
    }
    // 明确设置处理状态
    set(_atoms_ui__WEBPACK_IMPORTED_MODULE_4__.isProcessingAtom, true);
    // 添加用户消息到状态
    const userMessage = {
        id: (0,uuid__WEBPACK_IMPORTED_MODULE_8__["default"])(),
        role: 'user',
        content,
        timestamp: Date.now()
    };
    set(_atoms_message__WEBPACK_IMPORTED_MODULE_2__.messagesAtom, (prev)=>{
        const sessionMessages = prev[activeSessionId] || [];
        return {
            ...prev,
            [activeSessionId]: [
                ...sessionMessages,
                userMessage
            ]
        };
    });
    // 立即更新会话名称，使用用户查询作为 Summary
    // 这样即使后续更新失败也至少有一个基本的名称
    try {
        // 检查是否是第一条消息，如果是则直接用查询内容作为会话名称
        const messages = get(_atoms_message__WEBPACK_IMPORTED_MODULE_2__.messagesAtom)[activeSessionId] || [];
        if (messages.length <= 2) {
            // 算上刚刚添加的用户消息
            let summary = '';
            if (typeof content === 'string') {
                summary = content.length > 50 ? content.substring(0, 47) + '...' : content;
            } else {
                // 从多模态内容中提取文本部分
                const textPart = content.find((part)=>part.type === 'text');
                if (textPart && 'text' in textPart) {
                    summary = textPart.text.length > 50 ? textPart.text.substring(0, 47) + '...' : textPart.text;
                } else {
                    summary = 'Image message';
                }
            }
            await _services_apiService__WEBPACK_IMPORTED_MODULE_0__.apiService.updateSessionMetadata(activeSessionId, {
                name: summary
            });
            // 更新 sessions atom
            set(_atoms_session__WEBPACK_IMPORTED_MODULE_1__.sessionsAtom, (prev)=>prev.map((session)=>session.id === activeSessionId ? {
                        ...session,
                        name: summary
                    } : session));
        }
    } catch (error) {
        console.log('Failed to update initial summary, continuing anyway:', error);
    // 错误不中断主流程
    }
    try {
        // 使用流式查询
        await _services_apiService__WEBPACK_IMPORTED_MODULE_0__.apiService.sendStreamingQuery(activeSessionId, content, (event)=>{
            // 处理每个事件
            set(_eventProcessor__WEBPACK_IMPORTED_MODULE_5__.processEventAction, {
                sessionId: activeSessionId,
                event
            });
            // 确保状态保持为处理中，直到明确收到结束事件
            if (event.type !== 'agent_run_end' && event.type !== 'assistant_message') {
                set(_atoms_ui__WEBPACK_IMPORTED_MODULE_4__.isProcessingAtom, true);
            }
        });
    } catch (error) {
        console.error('Error sending message:', error);
        // 错误时重置处理状态
        set(_atoms_ui__WEBPACK_IMPORTED_MODULE_4__.isProcessingAtom, false);
        throw error;
    }
});
/**
 * Abort the current running query
 */ const abortQueryAction = (0,jotai__WEBPACK_IMPORTED_MODULE_7__.atom)(null, async (get, set)=>{
    const activeSessionId = get(_atoms_session__WEBPACK_IMPORTED_MODULE_1__.activeSessionIdAtom);
    if (!activeSessionId) {
        return false;
    }
    try {
        const success = await _services_apiService__WEBPACK_IMPORTED_MODULE_0__.apiService.abortQuery(activeSessionId);
        if (success) {
            set(_atoms_ui__WEBPACK_IMPORTED_MODULE_4__.isProcessingAtom, false);
            // Add system message about abort
            const abortMessage = {
                id: (0,uuid__WEBPACK_IMPORTED_MODULE_8__["default"])(),
                role: 'system',
                content: 'The operation was aborted.',
                timestamp: Date.now()
            };
            set(_atoms_message__WEBPACK_IMPORTED_MODULE_2__.messagesAtom, (prev)=>{
                const sessionMessages = prev[activeSessionId] || [];
                return {
                    ...prev,
                    [activeSessionId]: [
                        ...sessionMessages,
                        abortMessage
                    ]
                };
            });
        }
        return success;
    } catch (error) {
        console.error('Error aborting query:', error);
        return false;
    }
});
/**
 * Check the current status of a session
 */ const checkSessionStatusAction = (0,jotai__WEBPACK_IMPORTED_MODULE_7__.atom)(null, async (get, set, sessionId)=>{
    if (!sessionId) return;
    try {
        console.log(`Checking status for session: ${sessionId}`);
        const status = await _services_apiService__WEBPACK_IMPORTED_MODULE_0__.apiService.getSessionStatus(sessionId);
        console.log(`Status for session ${sessionId}:`, status);
        // 根据服务器响应更新处理状态
        set(_atoms_ui__WEBPACK_IMPORTED_MODULE_4__.isProcessingAtom, status.isProcessing);
        return status;
    } catch (error) {
        console.error('Failed to check session status:', error);
    // 错误时不更新处理状态，避免误报
    }
});
/**
 * Handle the end of a conversation
 * 仍然保留此函数，但减少其重要性，避免更新失败带来的影响
 */ async function handleConversationEnd(get, set, sessionId) {
    // 我们不再依赖这个函数来设置会话名称，但仍然保留它作为备份机制
    const allMessages = get(_atoms_message__WEBPACK_IMPORTED_MODULE_2__.messagesAtom)[sessionId] || [];
    // 只在有足够的消息并且会话没有名称时才尝试生成摘要
    const sessions = get(_atoms_session__WEBPACK_IMPORTED_MODULE_1__.sessionsAtom);
    const currentSession = sessions.find((s)=>s.id === sessionId);
    // 如果会话已经有名称，则不需要再生成
    if (currentSession && currentSession.name) {
        return;
    }
    // 只在有实际对话时才尝试生成摘要
    if (allMessages.length > 1) {
        try {
            // 转换消息为 API 期望的格式
            const apiMessages = allMessages.map((msg)=>({
                    role: msg.role,
                    content: typeof msg.content === 'string' ? msg.content : 'multimodal content'
                }));
            // 生成摘要
            const summary = await _services_apiService__WEBPACK_IMPORTED_MODULE_0__.apiService.generateSummary(sessionId, apiMessages);
            if (summary) {
                // 更新会话名称
                await _services_apiService__WEBPACK_IMPORTED_MODULE_0__.apiService.updateSessionMetadata(sessionId, {
                    name: summary
                });
                // 更新 sessions atom
                set(_atoms_session__WEBPACK_IMPORTED_MODULE_1__.sessionsAtom, (prev)=>prev.map((session)=>session.id === sessionId ? {
                            ...session,
                            name: summary
                        } : session));
            }
        } catch (error) {
            console.error('Failed to generate or update summary, continuing anyway:', error);
        // 错误不影响主流程
        }
    }
}

function $RefreshSig$() {
  return $ReactRefreshRuntime$.createSignatureFunctionForTransform();
}
function $RefreshReg$(type, id) {
  $ReactRefreshRuntime$.register(type, module.id + "_" + id);
}
Promise.resolve().then(function() {
  $ReactRefreshRuntime$.refresh(module.id, module.hot);
});


}),

},function(__webpack_require__) {
// webpack/runtime/get_full_hash
(() => {
__webpack_require__.h = () => ("3fe1124bad6f81b2")
})();

}
);
//# sourceMappingURL=index.26c3e4233c32c5fe.hot-update.js.map