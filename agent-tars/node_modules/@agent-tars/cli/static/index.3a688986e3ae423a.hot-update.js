"use strict";
self["webpackHotUpdate_agent_tars_web_ui"]("index", {
"./src/common/state/actions/eventProcessor.ts": (function (module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  processEventAction: () => (processEventAction),
  updateProcessingStatusAction: () => (updateProcessingStatusAction)
});
/* ESM import */var jotai__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("../node_modules/.pnpm/jotai@2.12.5_@types+react@18.3.23_react@18.3.1/node_modules/jotai/esm/vanilla.mjs");
/* ESM import */var uuid__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-browser/v4.js");
/* ESM import */var _common_utils_formatters__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/common/utils/formatters.ts");
/* ESM import */var _atoms_message__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/common/state/atoms/message.ts");
/* ESM import */var _atoms_tool__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/common/state/atoms/tool.ts");
/* ESM import */var _atoms_ui__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/common/state/atoms/ui.ts");
/* ESM import */var _atoms_plan__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/common/state/atoms/plan.ts");
/* ESM import */var _atoms_replay__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./src/common/state/atoms/replay.ts");
/* provided dependency */ var $ReactRefreshRuntime$ = __webpack_require__("../node_modules/.pnpm/@rspack+plugin-react-refresh@1.0.3_react-refresh@0.16.0/node_modules/@rspack/plugin-react-refresh/client/reactRefresh.js");
/* eslint-disable @typescript-eslint/no-explicit-any */ 







// 存储工具调用参数的映射表 (不是 Atom，是内部缓存)
const toolCallArgumentsMap = new Map();
/**
 * Process a single event and update the appropriate state atoms
 */ const processEventAction = (0,jotai__WEBPACK_IMPORTED_MODULE_6__.atom)(null, (get, set, params)=>{
    const { sessionId, event } = params;
    const replayState = get(_atoms_replay__WEBPACK_IMPORTED_MODULE_5__.replayStateAtom);
    const isReplayMode = replayState.isActive;
    switch(event.type){
        case 'user_message':
            handleUserMessage(set, sessionId, event);
            break;
        case 'assistant_message':
            handleAssistantMessage(get, set, sessionId, event);
            break;
        case 'assistant_streaming_message':
            if (!isReplayMode) {
                handleStreamingMessage(get, set, sessionId, event);
            }
            break;
        case 'assistant_thinking_message':
        case 'assistant_streaming_thinking_message':
            handleThinkingMessage(get, set, sessionId, event);
            break;
        case 'tool_call':
            handleToolCall(set, sessionId, event);
            break;
        case 'tool_result':
            handleToolResult(set, sessionId, event);
            break;
        case 'system':
            handleSystemMessage(set, sessionId, event);
            break;
        case 'environment_input':
            handleEnvironmentInput(get, set, sessionId, event);
            break;
        case 'agent_run_start':
            set(_atoms_ui__WEBPACK_IMPORTED_MODULE_3__.isProcessingAtom, true);
            break;
        case 'agent_run_end':
            set(_atoms_ui__WEBPACK_IMPORTED_MODULE_3__.isProcessingAtom, false);
            break;
        case 'plan_start':
            handlePlanStart(set, sessionId, event);
            break;
        case 'plan_update':
            handlePlanUpdate(set, sessionId, event);
            break;
        case 'plan_finish':
            handlePlanFinish(set, sessionId, event);
            break;
        case 'final_answer':
            handleFinalAnswer(get, set, sessionId, event);
            break;
        case 'final_answer_streaming':
            if (!isReplayMode) {
                handleFinalAnswerStreaming(get, set, sessionId, event);
            }
            break;
    }
});
const updateProcessingStatusAction = (0,jotai__WEBPACK_IMPORTED_MODULE_6__.atom)(null, (get, set, status)=>{
    // Update processing state
    set(_atoms_ui__WEBPACK_IMPORTED_MODULE_3__.isProcessingAtom, !!status.isProcessing);
});
/**
 * Handle user message event
 */ function handleUserMessage(set, sessionId, event) {
    const userMessage = {
        id: event.id,
        role: 'user',
        content: event.content,
        timestamp: event.timestamp
    };
    set(_atoms_message__WEBPACK_IMPORTED_MODULE_1__.messagesAtom, (prev)=>{
        const sessionMessages = prev[sessionId] || [];
        return {
            ...prev,
            [sessionId]: [
                ...sessionMessages,
                userMessage
            ]
        };
    });
    // Check for images in user message and set active panel content if found
    if (Array.isArray(event.content)) {
        const images = event.content.filter((part)=>part.type === 'image_url');
        if (images.length > 0) {
            set(_atoms_ui__WEBPACK_IMPORTED_MODULE_3__.activePanelContentAtom, {
                type: 'image',
                source: images[0].image_url.url,
                title: 'User Upload',
                timestamp: Date.now()
            });
        }
    }
}
/**
 * Handle assistant message event (complete message)
 */ function handleAssistantMessage(get, set, sessionId, event) {
    // 获取消息ID
    const messageId = event.messageId;
    set(_atoms_message__WEBPACK_IMPORTED_MODULE_1__.messagesAtom, (prev)=>{
        const sessionMessages = prev[sessionId] || [];
        // 检查是否已存在相同messageId的消息
        if (messageId) {
            const existingMessageIndex = sessionMessages.findIndex((msg)=>msg.messageId === messageId);
            // 如果找到了现有消息，更新它而不是添加新消息
            if (existingMessageIndex !== -1) {
                const updatedMessages = [
                    ...sessionMessages
                ];
                updatedMessages[existingMessageIndex] = {
                    ...updatedMessages[existingMessageIndex],
                    content: event.content,
                    timestamp: event.timestamp,
                    toolCalls: event.toolCalls,
                    finishReason: event.finishReason,
                    isStreaming: false
                };
                return {
                    ...prev,
                    [sessionId]: updatedMessages
                };
            }
        }
        // 没有找到现有消息，添加新消息
        return {
            ...prev,
            [sessionId]: [
                ...sessionMessages,
                {
                    id: event.id,
                    role: 'assistant',
                    content: event.content,
                    timestamp: event.timestamp,
                    toolCalls: event.toolCalls,
                    finishReason: event.finishReason,
                    messageId: messageId
                }
            ]
        };
    });
    if (event.finishReason !== 'tool_calls') {
        // 检查是否需要关联最近的环境输入
        const currentMessages = get(_atoms_message__WEBPACK_IMPORTED_MODULE_1__.messagesAtom)[sessionId] || [];
        // 从后往前查找最近的环境输入
        for(let i = currentMessages.length - 1; i >= 0; i--){
            const msg = currentMessages[i];
            if (msg.role === 'environment' && Array.isArray(msg.content)) {
                const imageContent = msg.content.find((item)=>item.type === 'image_url' && item.image_url && item.image_url.url);
                if (imageContent) {
                    set(_atoms_ui__WEBPACK_IMPORTED_MODULE_3__.activePanelContentAtom, {
                        type: 'image',
                        source: msg.content,
                        title: msg.description || 'Final Browser State',
                        timestamp: msg.timestamp,
                        environmentId: msg.id
                    });
                    break;
                }
            }
        }
    }
    set(_atoms_ui__WEBPACK_IMPORTED_MODULE_3__.isProcessingAtom, false);
}
/**
 * Handle streaming message event (incremental content)
 */ function handleStreamingMessage(get, set, sessionId, event) {
    set(_atoms_message__WEBPACK_IMPORTED_MODULE_1__.messagesAtom, (prev)=>{
        const sessionMessages = prev[sessionId] || [];
        const messageIdToFind = event.messageId;
        let existingMessageIndex = -1;
        // 优先按messageId查找
        if (messageIdToFind) {
            existingMessageIndex = sessionMessages.findIndex((msg)=>msg.messageId === messageIdToFind);
        } else if (sessionMessages.length > 0) {
            const lastMessageIndex = sessionMessages.length - 1;
            const lastMessage = sessionMessages[lastMessageIndex];
            if (lastMessage && lastMessage.isStreaming) {
                existingMessageIndex = lastMessageIndex;
            }
        }
        // 更新现有消息
        if (existingMessageIndex !== -1) {
            const existingMessage = sessionMessages[existingMessageIndex];
            const updatedMessage = {
                ...existingMessage,
                content: typeof existingMessage.content === 'string' ? existingMessage.content + event.content : event.content,
                isStreaming: !event.isComplete,
                toolCalls: event.toolCalls || existingMessage.toolCalls
            };
            return {
                ...prev,
                [sessionId]: [
                    ...sessionMessages.slice(0, existingMessageIndex),
                    updatedMessage,
                    ...sessionMessages.slice(existingMessageIndex + 1)
                ]
            };
        }
        // 创建新消息
        const newMessage = {
            id: event.id || (0,uuid__WEBPACK_IMPORTED_MODULE_7__["default"])(),
            role: 'assistant',
            content: event.content,
            timestamp: event.timestamp,
            isStreaming: !event.isComplete,
            toolCalls: event.toolCalls,
            messageId: event.messageId
        };
        return {
            ...prev,
            [sessionId]: [
                ...sessionMessages,
                newMessage
            ]
        };
    });
    if (event.isComplete) {
        set(_atoms_ui__WEBPACK_IMPORTED_MODULE_3__.isProcessingAtom, false);
    }
}
/**
 * Handle thinking message event
 */ function handleThinkingMessage(get, set, sessionId, event) {
    set(_atoms_message__WEBPACK_IMPORTED_MODULE_1__.messagesAtom, (prev)=>{
        const sessionMessages = prev[sessionId] || [];
        const lastAssistantIndex = [
            ...sessionMessages
        ].reverse().findIndex((m)=>m.role === 'assistant');
        if (lastAssistantIndex !== -1) {
            const actualIndex = sessionMessages.length - 1 - lastAssistantIndex;
            const message = sessionMessages[actualIndex];
            return {
                ...prev,
                [sessionId]: [
                    ...sessionMessages.slice(0, actualIndex),
                    {
                        ...message,
                        thinking: event.content
                    },
                    ...sessionMessages.slice(actualIndex + 1)
                ]
            };
        }
        return prev;
    });
}
/**
 * Handle tool call event - store arguments for later use
 */ function handleToolCall(set, sessionId, event) {
    // 保存工具调用的参数信息以便后续使用
    if (event.toolCallId && event.arguments) {
        toolCallArgumentsMap.set(event.toolCallId, event.arguments);
    }
}
function handleToolResult(set, sessionId, event) {
    // 获取之前存储的参数信息
    const args = toolCallArgumentsMap.get(event.toolCallId);
    const result = {
        id: (0,uuid__WEBPACK_IMPORTED_MODULE_7__["default"])(),
        toolCallId: event.toolCallId,
        name: event.name,
        content: event.content,
        timestamp: event.timestamp,
        error: event.error,
        type: (0,_common_utils_formatters__WEBPACK_IMPORTED_MODULE_0__.determineToolType)(event.name, event.content),
        arguments: args
    };
    // 1. 先更新消息atom和工具结果 - 确保chat UI能立即响应
    set(_atoms_message__WEBPACK_IMPORTED_MODULE_1__.messagesAtom, (prev)=>{
        const sessionMessages = prev[sessionId] || [];
        // 找到对应的消息并添加toolResults
        const messageIndex = [
            ...sessionMessages
        ].reverse().findIndex((m)=>{
            var _m_toolCalls;
            return (_m_toolCalls = m.toolCalls) === null || _m_toolCalls === void 0 ? void 0 : _m_toolCalls.some((tc)=>tc.id === result.toolCallId);
        });
        if (messageIndex !== -1) {
            const actualIndex = sessionMessages.length - 1 - messageIndex;
            const message = sessionMessages[actualIndex];
            const toolResults = message.toolResults || [];
            const updatedMessage = {
                ...message,
                toolResults: [
                    ...toolResults,
                    result
                ]
            };
            return {
                ...prev,
                [sessionId]: [
                    ...sessionMessages.slice(0, actualIndex),
                    updatedMessage,
                    ...sessionMessages.slice(actualIndex + 1)
                ]
            };
        }
        return prev;
    });
    // 2. 同时更新工具结果atom
    set(_atoms_tool__WEBPACK_IMPORTED_MODULE_2__.toolResultsAtom, (prev)=>{
        const sessionResults = prev[sessionId] || [];
        return {
            ...prev,
            [sessionId]: [
                ...sessionResults,
                result
            ]
        };
    });
    // 3. 最后更新workspace面板内容 - 保持时序一致
    if (result.type === 'browser_vision_control') {
        set(_atoms_ui__WEBPACK_IMPORTED_MODULE_3__.activePanelContentAtom, (prev)=>{
            if (prev && prev.type === 'image' && prev.environmentId) {
                // 在这里添加环境ID到已处理列表，避免重复渲染
                const environmentId = prev.environmentId;
                return {
                    ...prev,
                    type: 'browser_vision_control',
                    source: event.content,
                    title: prev.title,
                    timestamp: event.timestamp,
                    toolCallId: event.toolCallId,
                    error: event.error,
                    arguments: args,
                    originalContent: prev.source,
                    environmentId: environmentId,
                    processedEnvironmentIds: [
                        environmentId
                    ]
                };
            } else {
                return {
                    type: result.type,
                    source: result.content,
                    title: result.name,
                    timestamp: result.timestamp,
                    toolCallId: result.toolCallId,
                    error: result.error,
                    arguments: args
                };
            }
        });
    } else {
        set(_atoms_ui__WEBPACK_IMPORTED_MODULE_3__.activePanelContentAtom, {
            type: result.type,
            source: result.content,
            title: result.name,
            timestamp: result.timestamp,
            toolCallId: result.toolCallId,
            error: result.error,
            arguments: args
        });
    }
    // Store in the map for future reference
    _atoms_tool__WEBPACK_IMPORTED_MODULE_2__.toolCallResultMap.set(result.toolCallId, result);
}
/**
 * Handle system message event
 */ function handleSystemMessage(set, sessionId, event) {
    const systemMessage = {
        id: (0,uuid__WEBPACK_IMPORTED_MODULE_7__["default"])(),
        role: 'system',
        content: event.message,
        timestamp: event.timestamp || Date.now()
    };
    set(_atoms_message__WEBPACK_IMPORTED_MODULE_1__.messagesAtom, (prev)=>{
        const sessionMessages = prev[sessionId] || [];
        return {
            ...prev,
            [sessionId]: [
                ...sessionMessages,
                systemMessage
            ]
        };
    });
}
/**
 * Handle environment input event
 * Adds it to messages but doesn't set it as active panel content
 */ function handleEnvironmentInput(get, set, sessionId, event) {
    const environmentMessage = {
        id: event.id,
        role: 'environment',
        content: event.content,
        timestamp: event.timestamp,
        description: event.description || 'Environment Input'
    };
    set(_atoms_message__WEBPACK_IMPORTED_MODULE_1__.messagesAtom, (prev)=>{
        const sessionMessages = prev[sessionId] || [];
        return {
            ...prev,
            [sessionId]: [
                ...sessionMessages,
                environmentMessage
            ]
        };
    });
    // 检查是否包含图片内容并直接设置为活动面板内容
    if (Array.isArray(event.content)) {
        const imageContent = event.content.find((item)=>item.type === 'image_url' && item.image_url && item.image_url.url);
        if (imageContent && imageContent.image_url) {
            // 获取当前面板状态
            const currentPanel = get(_atoms_ui__WEBPACK_IMPORTED_MODULE_3__.activePanelContentAtom);
            // 只有当前面板是 browser_vision_control 类型时才更新
            if (currentPanel && currentPanel.type === 'browser_vision_control') {
                set(_atoms_ui__WEBPACK_IMPORTED_MODULE_3__.activePanelContentAtom, {
                    ...currentPanel,
                    type: 'browser_vision_control',
                    title: `${currentPanel.title} \xb7 Screenshot Update`,
                    timestamp: event.timestamp,
                    originalContent: event.content,
                    environmentId: event.id
                });
            }
        // 不是 browser_vision_control 类型时完全跳过 set 操作
        // 这样避免了 Browser Screenshot 被重复渲染
        }
    }
}
/**
 * Handle plan start event
 */ function handlePlanStart(set, sessionId, event) {
    set(_atoms_plan__WEBPACK_IMPORTED_MODULE_4__.plansAtom, (prev)=>({
            ...prev,
            [sessionId]: {
                steps: [],
                isComplete: false,
                summary: null,
                hasGeneratedPlan: true,
                keyframes: []
            }
        }));
}
/**
 * Handle plan update event
 */ function handlePlanUpdate(set, sessionId, event) {
    console.log('Plan update event:', event);
    set(_atoms_plan__WEBPACK_IMPORTED_MODULE_4__.plansAtom, (prev)=>{
        const currentPlan = prev[sessionId] || {
            steps: [],
            isComplete: false,
            summary: null,
            hasGeneratedPlan: true,
            keyframes: []
        };
        // Create a new keyframe for this update
        const newKeyframe = {
            timestamp: event.timestamp || Date.now(),
            steps: event.steps,
            isComplete: false,
            summary: null
        };
        // Add the keyframe to the history
        const keyframes = [
            ...currentPlan.keyframes || [],
            newKeyframe
        ];
        return {
            ...prev,
            [sessionId]: {
                ...currentPlan,
                steps: event.steps,
                hasGeneratedPlan: true,
                keyframes
            }
        };
    });
}
/**
 * Handle plan finish event
 */ function handlePlanFinish(set, sessionId, event) {
    console.log('Plan finish event:', event);
    set(_atoms_plan__WEBPACK_IMPORTED_MODULE_4__.plansAtom, (prev)=>{
        const currentPlan = prev[sessionId] || {
            steps: [],
            isComplete: false,
            summary: null,
            hasGeneratedPlan: true,
            keyframes: []
        };
        // Create a final keyframe for the completed plan
        const finalKeyframe = {
            timestamp: event.timestamp || Date.now(),
            steps: currentPlan.steps,
            isComplete: true,
            summary: event.summary
        };
        // Add the final keyframe to the history
        const keyframes = [
            ...currentPlan.keyframes || [],
            finalKeyframe
        ];
        return {
            ...prev,
            [sessionId]: {
                ...currentPlan,
                isComplete: true,
                summary: event.summary,
                keyframes
            }
        };
    });
}
/**
 * Handle final answer event (complete answer/report)
 */ function handleFinalAnswer(get, set, sessionId, event) {
    const messageId = event.messageId || `final-answer-${(0,uuid__WEBPACK_IMPORTED_MODULE_7__["default"])()}`;
    // 始终将内容当作研究报告处理，移除JSON_DATA状态
    // 设置活动面板内容为研究报告
    set(_atoms_ui__WEBPACK_IMPORTED_MODULE_3__.activePanelContentAtom, {
        type: 'research_report',
        source: event.content,
        title: event.title || 'Research Report',
        timestamp: event.timestamp,
        isDeepResearch: true,
        messageId
    });
    // 添加消息到聊天引用报告
    const finalAnswerMessage = {
        id: event.id || (0,uuid__WEBPACK_IMPORTED_MODULE_7__["default"])(),
        role: 'final_answer',
        content: event.content,
        timestamp: event.timestamp,
        messageId,
        isDeepResearch: true,
        title: event.title || 'Research Report'
    };
    set(_atoms_message__WEBPACK_IMPORTED_MODULE_1__.messagesAtom, (prev)=>{
        const sessionMessages = prev[sessionId] || [];
        return {
            ...prev,
            [sessionId]: [
                ...sessionMessages,
                finalAnswerMessage
            ]
        };
    });
    // 标记处理完成
    set(_atoms_ui__WEBPACK_IMPORTED_MODULE_3__.isProcessingAtom, false);
}
function handleFinalAnswerStreaming(get, set, sessionId, event) {
    const messageId = event.messageId || `final-answer-${(0,uuid__WEBPACK_IMPORTED_MODULE_7__["default"])()}`;
    // 从当前消息列表中查找已有的相同 messageId 的消息
    const messages = get(_atoms_message__WEBPACK_IMPORTED_MODULE_1__.messagesAtom)[sessionId] || [];
    const existingMessageIndex = messages.findIndex((msg)=>msg.messageId === messageId);
    // 当处理一系列流式事件时，将内容追加到现有消息，或创建新消息
    set(_atoms_message__WEBPACK_IMPORTED_MODULE_1__.messagesAtom, (prev)=>{
        const sessionMessages = prev[sessionId] || [];
        // 如果找到现有消息，则更新它
        if (existingMessageIndex >= 0) {
            const existingMessage = sessionMessages[existingMessageIndex];
            const updatedMessage = {
                ...existingMessage,
                content: typeof existingMessage.content === 'string' ? existingMessage.content + event.content : event.content,
                isStreaming: !event.isComplete,
                timestamp: event.timestamp
            };
            return {
                ...prev,
                [sessionId]: [
                    ...sessionMessages.slice(0, existingMessageIndex),
                    updatedMessage,
                    ...sessionMessages.slice(existingMessageIndex + 1)
                ]
            };
        }
        // 否则创建新消息
        const newMessage = {
            id: event.id || (0,uuid__WEBPACK_IMPORTED_MODULE_7__["default"])(),
            role: 'final_answer',
            content: event.content,
            timestamp: event.timestamp,
            messageId,
            isDeepResearch: true,
            isStreaming: !event.isComplete,
            title: event.title || 'Research Report'
        };
        return {
            ...prev,
            [sessionId]: [
                ...sessionMessages,
                newMessage
            ]
        };
    });
    // 更新活动面板内容 - 同步面板与消息状态
    set(_atoms_ui__WEBPACK_IMPORTED_MODULE_3__.activePanelContentAtom, (prev)=>{
        // 如果是新流或不同的messageId，重新开始
        if (!prev || prev.type !== 'research_report' || prev.messageId !== messageId) {
            return {
                role: 'assistant',
                type: 'research_report',
                source: event.content,
                title: event.title || 'Research Report (Generating...)',
                timestamp: event.timestamp,
                isDeepResearch: true,
                messageId,
                isStreaming: !event.isComplete
            };
        }
        // 否则追加到现有内容
        return {
            ...prev,
            source: prev.source + event.content,
            isStreaming: !event.isComplete,
            timestamp: event.timestamp,
            title: event.title || prev.title
        };
    });
    // 如果这是第一个数据块，也添加一条消息到聊天
    const prevActivePanelContent = get(_atoms_ui__WEBPACK_IMPORTED_MODULE_3__.activePanelContentAtom);
    if (!prevActivePanelContent || prevActivePanelContent.messageId !== messageId) {
        const initialMessage = {
            id: event.id || (0,uuid__WEBPACK_IMPORTED_MODULE_7__["default"])(),
            role: 'final_answer',
            content: event.content,
            timestamp: event.timestamp,
            messageId,
            isDeepResearch: true,
            isStreaming: !event.isComplete,
            title: event.title || 'Research Report'
        };
        set(_atoms_message__WEBPACK_IMPORTED_MODULE_1__.messagesAtom, (prev)=>{
            const sessionMessages = prev[sessionId] || [];
            return {
                ...prev,
                [sessionId]: [
                    ...sessionMessages,
                    initialMessage
                ]
            };
        });
    } else if (event.isComplete) {
        // 当流式生成完成时，更新消息的完整内容
        const fullContent = get(_atoms_ui__WEBPACK_IMPORTED_MODULE_3__.activePanelContentAtom).source;
        set(_atoms_message__WEBPACK_IMPORTED_MODULE_1__.messagesAtom, (prev)=>{
            const sessionMessages = prev[sessionId] || [];
            const messageIndex = sessionMessages.findIndex((msg)=>msg.messageId === messageId);
            if (messageIndex >= 0) {
                const updatedMessages = [
                    ...sessionMessages
                ];
                updatedMessages[messageIndex] = {
                    ...updatedMessages[messageIndex],
                    content: fullContent,
                    isStreaming: false,
                    title: event.title || updatedMessages[messageIndex].title || 'Research Report'
                };
                return {
                    ...prev,
                    [sessionId]: updatedMessages
                };
            }
            return prev;
        });
    }
    // 如果这是最后一个数据块，标记处理完成
    if (event.isComplete) {
        set(_atoms_ui__WEBPACK_IMPORTED_MODULE_3__.isProcessingAtom, false);
    }
}

function $RefreshSig$() {
  return $ReactRefreshRuntime$.createSignatureFunctionForTransform();
}
function $RefreshReg$(type, id) {
  $ReactRefreshRuntime$.register(type, module.id + "_" + id);
}
Promise.resolve().then(function() {
  $ReactRefreshRuntime$.refresh(module.id, module.hot);
});


}),
"./src/standalone/chat/Message/components/MessageGroup.tsx": (function (module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  MessageGroup: () => (MessageGroup)
});
/* ESM import */var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/react@18.3.1/node_modules/react/jsx-dev-runtime.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../node_modules/.pnpm/react@18.3.1/node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* ESM import */var _index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/standalone/chat/Message/index.tsx");
/* ESM import */var react_icons_fi__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("../node_modules/.pnpm/react-icons@4.12.0_react@18.3.1/node_modules/react-icons/fi/index.esm.js");
/* ESM import */var _common_utils_formatters__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/common/utils/formatters.ts");
/* ESM import */var _common_utils_typeGuards__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/common/utils/typeGuards.ts");
/* ESM import */var _ThinkingAnimation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./src/standalone/chat/Message/components/ThinkingAnimation.tsx");
/* provided dependency */ var $ReactRefreshRuntime$ = __webpack_require__("../node_modules/.pnpm/@rspack+plugin-react-refresh@1.0.3_react-refresh@0.16.0/node_modules/@rspack/plugin-react-refresh/client/reactRefresh.js");







/**
 * MessageGroup Component - Groups related messages in a thinking sequence
 *
 * Design principles:
 * - Minimalist design with no avatars or indentation
 * - Clean, full-width message layout
 * - All intermediate thinking steps are always visible
 * - Visual hierarchy emphasizing final answers
 * - Consistent monochromatic styling
 */ const MessageGroup = (param)=>{
    let { messages, isThinking } = param;
    // 过滤掉环境消息
    const filteredMessages = messages.filter((msg)=>msg.role !== 'environment');
    // 如果过滤后没有消息，则不渲染任何内容
    if (filteredMessages.length === 0) {
        return null;
    }
    // 如果只有一条消息，检查是否需要拆分
    if (filteredMessages.length === 1) {
        const message = filteredMessages[0];
        // 检查是否是包含图片和文本的多模态用户消息
        if (message.role === 'user' && (0,_common_utils_typeGuards__WEBPACK_IMPORTED_MODULE_4__.isMultimodalContent)(message.content)) {
            const imageContents = message.content.filter((part)=>part.type === 'image_url');
            const textContents = message.content.filter((part)=>part.type === 'text');
            // 只有同时包含图片和文本时才拆分显示
            if (imageContents.length > 0 && textContents.length > 0) {
                return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                    className: "space-y-3",
                    children: [
                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_index__WEBPACK_IMPORTED_MODULE_2__.Message, {
                            message: {
                                ...message,
                                content: imageContents,
                                id: `${message.id}-images`
                            }
                        }, `${message.id}-images`, false, {
                            fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/components/MessageGroup.tsx",
                            lineNumber: 47,
                            columnNumber: 13
                        }, undefined),
                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_index__WEBPACK_IMPORTED_MODULE_2__.Message, {
                            message: {
                                ...message,
                                content: textContents,
                                id: `${message.id}-text`
                            }
                        }, `${message.id}-text`, false, {
                            fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/components/MessageGroup.tsx",
                            lineNumber: 57,
                            columnNumber: 13
                        }, undefined)
                    ]
                }, void 0, true, {
                    fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/components/MessageGroup.tsx",
                    lineNumber: 45,
                    columnNumber: 11
                }, undefined);
            }
        }
        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_index__WEBPACK_IMPORTED_MODULE_2__.Message, {
            message: filteredMessages[0]
        }, void 0, false, {
            fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/components/MessageGroup.tsx",
            lineNumber: 70,
            columnNumber: 12
        }, undefined);
    }
    // 获取第一条消息 - 通常是用户消息
    const firstMessage = filteredMessages[0];
    // If not a user message, use simplified rendering
    if (firstMessage.role !== 'user') {
        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
            className: "space-y-3",
            children: filteredMessages.map((message, index)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_index__WEBPACK_IMPORTED_MODULE_2__.Message, {
                    message: message,
                    isInGroup: index > 0 && index < filteredMessages.length - 1,
                    isIntermediate: index > 0 && index < filteredMessages.length - 1,
                    shouldDisplayTimestamp: false
                }, message.id, false, {
                    fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/components/MessageGroup.tsx",
                    lineNumber: 81,
                    columnNumber: 11
                }, undefined))
        }, void 0, false, {
            fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/components/MessageGroup.tsx",
            lineNumber: 79,
            columnNumber: 7
        }, undefined);
    }
    // For user-initiated groups, use enhanced rendering with thinking sequence
    const responseMessage = filteredMessages.length > 1 ? filteredMessages[1] : null;
    const intermediateMessages = filteredMessages.slice(2, -1);
    const lastMessage = filteredMessages[filteredMessages.length - 1];
    const hasFinalAnswer = lastMessage.role === 'assistant' && lastMessage.finishReason === 'stop';
    const finalMessage = hasFinalAnswer ? lastMessage : null;
    const hasThinkingSteps = intermediateMessages.length > 0;
    // 检查用户消息是否需要拆分
    if ((0,_common_utils_typeGuards__WEBPACK_IMPORTED_MODULE_4__.isMultimodalContent)(firstMessage.content)) {
        const imageContents = firstMessage.content.filter((part)=>part.type === 'image_url');
        const textContents = firstMessage.content.filter((part)=>part.type === 'text');
        // 只有同时包含图片和文本时才拆分显示
        if (imageContents.length > 0 && textContents.length > 0) {
            return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                className: "message-group-container space-y-3",
                children: [
                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_index__WEBPACK_IMPORTED_MODULE_2__.Message, {
                        message: {
                            ...firstMessage,
                            content: imageContents,
                            id: `${firstMessage.id}-images`
                        }
                    }, void 0, false, {
                        fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/components/MessageGroup.tsx",
                        lineNumber: 114,
                        columnNumber: 11
                    }, undefined),
                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_index__WEBPACK_IMPORTED_MODULE_2__.Message, {
                        message: {
                            ...firstMessage,
                            content: textContents,
                            id: `${firstMessage.id}-text`
                        }
                    }, void 0, false, {
                        fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/components/MessageGroup.tsx",
                        lineNumber: 123,
                        columnNumber: 11
                    }, undefined),
                    responseMessage && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                        className: "assistant-response-container",
                        children: [
                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_index__WEBPACK_IMPORTED_MODULE_2__.Message, {
                                message: responseMessage,
                                isInGroup: true
                            }, void 0, false, {
                                fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/components/MessageGroup.tsx",
                                lineNumber: 135,
                                columnNumber: 15
                            }, undefined),
                            hasThinkingSteps && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                                className: "thinking-steps-container",
                                children: [
                                    intermediateMessages.map((msg)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_index__WEBPACK_IMPORTED_MODULE_2__.Message, {
                                            message: msg,
                                            isIntermediate: true,
                                            isInGroup: true
                                        }, msg.id, false, {
                                            fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/components/MessageGroup.tsx",
                                            lineNumber: 141,
                                            columnNumber: 21
                                        }, undefined)),
                                    !isThinking && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                                        className: "mt-1 mb-2",
                                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                                            className: "flex items-center text-xs text-gray-500 dark:text-gray-400 py-1",
                                            children: [
                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_icons_fi__WEBPACK_IMPORTED_MODULE_6__.FiClock, {
                                                    size: 10,
                                                    className: "mr-1"
                                                }, void 0, false, {
                                                    fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/components/MessageGroup.tsx",
                                                    lineNumber: 147,
                                                    columnNumber: 25
                                                }, undefined),
                                                responseMessage && (0,_common_utils_formatters__WEBPACK_IMPORTED_MODULE_3__.formatTimestamp)(responseMessage.timestamp)
                                            ]
                                        }, void 0, true, {
                                            fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/components/MessageGroup.tsx",
                                            lineNumber: 146,
                                            columnNumber: 23
                                        }, undefined)
                                    }, void 0, false, {
                                        fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/components/MessageGroup.tsx",
                                        lineNumber: 145,
                                        columnNumber: 21
                                    }, undefined)
                                ]
                            }, void 0, true, {
                                fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/components/MessageGroup.tsx",
                                lineNumber: 139,
                                columnNumber: 17
                            }, undefined),
                            finalMessage && finalMessage !== responseMessage && !isThinking && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_index__WEBPACK_IMPORTED_MODULE_2__.Message, {
                                message: finalMessage,
                                isInGroup: false
                            }, void 0, false, {
                                fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/components/MessageGroup.tsx",
                                lineNumber: 157,
                                columnNumber: 17
                            }, undefined),
                            isThinking && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                                className: "mt-2 pl-1",
                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_ThinkingAnimation__WEBPACK_IMPORTED_MODULE_5__.ThinkingAnimation, {}, void 0, false, {
                                    fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/components/MessageGroup.tsx",
                                    lineNumber: 163,
                                    columnNumber: 19
                                }, undefined)
                            }, void 0, false, {
                                fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/components/MessageGroup.tsx",
                                lineNumber: 162,
                                columnNumber: 17
                            }, undefined)
                        ]
                    }, void 0, true, {
                        fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/components/MessageGroup.tsx",
                        lineNumber: 133,
                        columnNumber: 13
                    }, undefined)
                ]
            }, void 0, true, {
                fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/components/MessageGroup.tsx",
                lineNumber: 112,
                columnNumber: 9
            }, undefined);
        }
    }
    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
        className: "message-group-container space-y-3",
        children: [
            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_index__WEBPACK_IMPORTED_MODULE_2__.Message, {
                message: firstMessage
            }, void 0, false, {
                fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/components/MessageGroup.tsx",
                lineNumber: 176,
                columnNumber: 7
            }, undefined),
            responseMessage && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                className: "assistant-response-container",
                children: [
                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_index__WEBPACK_IMPORTED_MODULE_2__.Message, {
                        message: responseMessage,
                        isInGroup: true
                    }, void 0, false, {
                        fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/components/MessageGroup.tsx",
                        lineNumber: 182,
                        columnNumber: 11
                    }, undefined),
                    hasThinkingSteps && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                        className: "thinking-steps-container",
                        children: [
                            intermediateMessages.map((msg)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_index__WEBPACK_IMPORTED_MODULE_2__.Message, {
                                    message: msg,
                                    isIntermediate: true,
                                    isInGroup: true
                                }, msg.id, false, {
                                    fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/components/MessageGroup.tsx",
                                    lineNumber: 188,
                                    columnNumber: 17
                                }, undefined)),
                            !isThinking && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                                className: "mt-1 mb-2",
                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                                    className: "flex items-center text-xs text-gray-500 dark:text-gray-400 py-1",
                                    children: [
                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_icons_fi__WEBPACK_IMPORTED_MODULE_6__.FiClock, {
                                            size: 10,
                                            className: "mr-1"
                                        }, void 0, false, {
                                            fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/components/MessageGroup.tsx",
                                            lineNumber: 194,
                                            columnNumber: 21
                                        }, undefined),
                                        responseMessage && (0,_common_utils_formatters__WEBPACK_IMPORTED_MODULE_3__.formatTimestamp)(responseMessage.timestamp)
                                    ]
                                }, void 0, true, {
                                    fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/components/MessageGroup.tsx",
                                    lineNumber: 193,
                                    columnNumber: 19
                                }, undefined)
                            }, void 0, false, {
                                fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/components/MessageGroup.tsx",
                                lineNumber: 192,
                                columnNumber: 17
                            }, undefined)
                        ]
                    }, void 0, true, {
                        fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/components/MessageGroup.tsx",
                        lineNumber: 186,
                        columnNumber: 13
                    }, undefined),
                    finalMessage && finalMessage !== responseMessage && !isThinking && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_index__WEBPACK_IMPORTED_MODULE_2__.Message, {
                        message: finalMessage,
                        isInGroup: false
                    }, void 0, false, {
                        fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/components/MessageGroup.tsx",
                        lineNumber: 204,
                        columnNumber: 13
                    }, undefined),
                    isThinking && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                        className: "mt-2 pl-1",
                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_ThinkingAnimation__WEBPACK_IMPORTED_MODULE_5__.ThinkingAnimation, {}, void 0, false, {
                            fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/components/MessageGroup.tsx",
                            lineNumber: 210,
                            columnNumber: 15
                        }, undefined)
                    }, void 0, false, {
                        fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/components/MessageGroup.tsx",
                        lineNumber: 209,
                        columnNumber: 13
                    }, undefined)
                ]
            }, void 0, true, {
                fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/components/MessageGroup.tsx",
                lineNumber: 180,
                columnNumber: 9
            }, undefined)
        ]
    }, void 0, true, {
        fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/components/MessageGroup.tsx",
        lineNumber: 174,
        columnNumber: 5
    }, undefined);
};
_c = MessageGroup;
var _c;
$RefreshReg$(_c, "MessageGroup");

function $RefreshSig$() {
  return $ReactRefreshRuntime$.createSignatureFunctionForTransform();
}
function $RefreshReg$(type, id) {
  $ReactRefreshRuntime$.register(type, module.id + "_" + id);
}
Promise.resolve().then(function() {
  $ReactRefreshRuntime$.refresh(module.id, module.hot);
});


}),
"./src/standalone/chat/Message/index.tsx": (function (module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  Message: () => (Message)
});
/* ESM import */var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/react@18.3.1/node_modules/react/jsx-dev-runtime.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../node_modules/.pnpm/react@18.3.1/node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* ESM import */var framer_motion__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__("../node_modules/.pnpm/framer-motion@10.18.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/render/dom/motion.mjs");
/* ESM import */var _common_utils_typeGuards__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/common/utils/typeGuards.ts");
/* ESM import */var _common_hooks_useSession__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/common/hooks/useSession.ts");
/* ESM import */var _common_hooks_useTool__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/common/hooks/useTool.tsx");
/* ESM import */var _sdk_markdown_renderer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./src/sdk/markdown-renderer/index.tsx");
/* ESM import */var _Message_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./src/standalone/chat/Message/Message.css");
/* ESM import */var _components_SystemMessage__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("./src/standalone/chat/Message/components/SystemMessage.tsx");
/* ESM import */var _components_MultimodalContent__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("./src/standalone/chat/Message/components/MultimodalContent.tsx");
/* ESM import */var _components_AssistantExpandableContent__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__("./src/standalone/chat/Message/components/AssistantExpandableContent.tsx");
/* ESM import */var _components_ToolCalls__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__("./src/standalone/chat/Message/components/ToolCalls.tsx");
/* ESM import */var _components_ThinkingToggle__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__("./src/standalone/chat/Message/components/ThinkingToggle.tsx");
/* ESM import */var _components_MessageTimestamp__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__("./src/standalone/chat/Message/components/MessageTimestamp.tsx");
/* ESM import */var jotai__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__("../node_modules/.pnpm/jotai@2.12.5_@types+react@18.3.23_react@18.3.1/node_modules/jotai/esm/react.mjs");
/* ESM import */var _common_state_atoms_replay__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__("./src/common/state/atoms/replay.ts");
/* ESM import */var _components_ReportFileEntry__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__("./src/standalone/chat/Message/components/ReportFileEntry.tsx");
/* ESM import */var _common_state_atoms_message__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__("./src/common/state/atoms/message.ts");
/* ESM import */var react_icons_fi__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__("../node_modules/.pnpm/react-icons@4.12.0_react@18.3.1/node_modules/react-icons/fi/index.esm.js");
/* ESM import */var _components_ActionButton__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__("./src/standalone/chat/Message/components/ActionButton.tsx");
/* provided dependency */ var $ReactRefreshRuntime$ = __webpack_require__("../node_modules/.pnpm/@rspack+plugin-react-refresh@1.0.3_react-refresh@0.16.0/node_modules/@rspack/plugin-react-refresh/client/reactRefresh.js");

var _s = $RefreshSig$();







// Import sub-components












/**
 * Message Component - Displays a single message in the chat
 *
 * Design principles:
 * - Minimalist black & white design with no avatars
 * - Clean, full-width message bubbles with subtle differentiation
 * - Focus on content with minimal visual distractions
 * - Elegant spacing and typography
 * - Progressive disclosure for detailed content
 */ const Message = (param)=>{
    let { message, isIntermediate = false, isInGroup = false, shouldDisplayTimestamp = true } = param;
    _s();
    const [showThinking, setShowThinking] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);
    const [showSteps, setShowSteps] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);
    const { setActivePanelContent, activeSessionId } = (0,_common_hooks_useSession__WEBPACK_IMPORTED_MODULE_3__.useSession)();
    const { getToolIcon } = (0,_common_hooks_useTool__WEBPACK_IMPORTED_MODULE_4__.useTool)();
    const replayState = (0,jotai__WEBPACK_IMPORTED_MODULE_17__.useAtomValue)(_common_state_atoms_replay__WEBPACK_IMPORTED_MODULE_13__.replayStateAtom);
    const allMessages = (0,jotai__WEBPACK_IMPORTED_MODULE_17__.useAtomValue)(_common_state_atoms_message__WEBPACK_IMPORTED_MODULE_15__.messagesAtom);
    const isMultimodal = (0,_common_utils_typeGuards__WEBPACK_IMPORTED_MODULE_2__.isMultimodalContent)(message.content);
    const isEnvironment = message.role === 'environment';
    const isUserMessage = message.role === 'user';
    const isFinalAnswer = message.role === 'final_answer' || message.isDeepResearch;
    // Check if this is a final assistant response
    const isFinalAssistantResponse = message.role === 'assistant' && message.finishReason === 'stop';
    // Handle tool call click - show in panel
    const handleToolCallClick = (toolCall)=>{
        if (message.toolResults && message.toolResults.length > 0) {
            const result = message.toolResults.find((r)=>r.toolCallId === toolCall.id);
            if (result) {
                setActivePanelContent({
                    type: result.type,
                    source: result.content,
                    title: result.name,
                    timestamp: result.timestamp,
                    toolCallId: result.toolCallId,
                    error: result.error,
                    arguments: result.arguments
                });
            }
        }
    };
    // Handle click on final assistant response to show latest environment state
    const handleFinalResponseClick = ()=>{
        if (!activeSessionId || !isFinalAssistantResponse) return;
        const sessionMessages = allMessages[activeSessionId] || [];
        // Find the most recent environment input
        for(let i = sessionMessages.length - 1; i >= 0; i--){
            const msg = sessionMessages[i];
            if (msg.role === 'environment' && Array.isArray(msg.content)) {
                const imageContent = msg.content.find((item)=>item.type === 'image_url' && item.image_url && item.image_url.url);
                if (imageContent) {
                    setActivePanelContent({
                        type: 'image',
                        source: msg.content,
                        title: msg.description || 'Final Environment State',
                        timestamp: msg.timestamp,
                        environmentId: msg.id
                    });
                    break;
                }
            }
        }
    };
    // Render content based on type
    const renderContent = ()=>{
        if (isMultimodal) {
            return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_MultimodalContent__WEBPACK_IMPORTED_MODULE_8__.MultimodalContent, {
                content: message.content,
                timestamp: message.timestamp,
                setActivePanelContent: setActivePanelContent
            }, void 0, false, {
                fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/index.tsx",
                lineNumber: 114,
                columnNumber: 9
            }, undefined);
        }
        // For assistant messages with tool calls, first show summary
        if (message.role === 'assistant' && message.toolCalls && message.toolCalls.length > 0) {
            return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_AssistantExpandableContent__WEBPACK_IMPORTED_MODULE_9__.AssistantExpandableContent, {
                content: message.content,
                showSteps: showSteps,
                setShowSteps: setShowSteps
            }, void 0, false, {
                fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/index.tsx",
                lineNumber: 125,
                columnNumber: 9
            }, undefined);
        }
        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_sdk_markdown_renderer__WEBPACK_IMPORTED_MODULE_5__.MarkdownRenderer, {
            content: message.content,
            forceDarkTheme: isUserMessage
        }, void 0, false, {
            fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/index.tsx",
            lineNumber: 133,
            columnNumber: 12
        }, undefined);
    };
    // Message animation variants
    const messageVariants = {
        initial: {
            opacity: 0,
            y: 10
        },
        animate: {
            opacity: 1,
            y: 0
        },
        transition: {
            duration: 0.3
        }
    };
    // Determine message bubble style based on role and state
    const getMessageBubbleClasses = ()=>{
        let baseClasses = '';
        if (message.role === 'user') {
            if (isImageOnlyMessage) {
                baseClasses = 'message-user message-user-image';
            } else {
                baseClasses = 'message-user';
            }
        } else if (message.role === 'system') {
            baseClasses = 'message-system';
        } else if (message.role === 'environment') {
            baseClasses = 'environment-message-minimal';
        } else {
            baseClasses = 'message-assistant';
        }
        // 添加更平滑的点击样式
        if (isFinalAssistantResponse) {
            baseClasses += ' cursor-pointer transition-all duration-300';
        }
        return baseClasses;
    };
    // 检查消息是否只包含图片（用于样式优化）
    const isImageOnlyMessage = react__WEBPACK_IMPORTED_MODULE_1___default().useMemo(()=>{
        if (!(0,_common_utils_typeGuards__WEBPACK_IMPORTED_MODULE_2__.isMultimodalContent)(message.content)) return false;
        const imageContents = message.content.filter((part)=>part.type === 'image_url');
        const textContents = message.content.filter((part)=>part.type === 'text');
        return imageContents.length > 0 && textContents.length === 0;
    }, [
        message.content
    ]);
    // 检查消息是否只包含文本（用于样式优化）
    const isTextOnlyMessage = react__WEBPACK_IMPORTED_MODULE_1___default().useMemo(()=>{
        if (!(0,_common_utils_typeGuards__WEBPACK_IMPORTED_MODULE_2__.isMultimodalContent)(message.content)) return true;
        const imageContents = message.content.filter((part)=>part.type === 'image_url');
        const textContents = message.content.filter((part)=>part.type === 'text');
        return textContents.length > 0 && imageContents.length === 0;
    }, [
        message.content
    ]);
    // 检查是否有环境状态可显示
    const hasEnvironmentState = react__WEBPACK_IMPORTED_MODULE_1___default().useMemo(()=>{
        if (!activeSessionId || !isFinalAssistantResponse || !allMessages[activeSessionId]) return false;
        const sessionMessages = allMessages[activeSessionId] || [];
        // 检查是否有环境消息
        return sessionMessages.some((msg)=>msg.role === 'environment' && Array.isArray(msg.content) && msg.content.some((item)=>item.type === 'image_url' && item.image_url && item.image_url.url));
    }, [
        activeSessionId,
        isFinalAssistantResponse,
        allMessages
    ]);
    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_18__.motion.div, {
        initial: "initial",
        animate: "animate",
        variants: messageVariants,
        className: `message-container ${message.role === 'user' ? 'message-container-user' : 'message-container-assistant'} ${isIntermediate ? 'message-container-intermediate' : ''}`,
        children: [
            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                className: `message-bubble ${getMessageBubbleClasses()} ${isIntermediate ? 'message-bubble-intermediate' : ''}`,
                children: message.role === 'system' ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_SystemMessage__WEBPACK_IMPORTED_MODULE_7__.SystemMessage, {
                    content: message.content
                }, void 0, false, {
                    fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/index.tsx",
                    lineNumber: 218,
                    columnNumber: 11
                }, undefined) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {
                    children: [
                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                            className: `prose ${message.role === 'user' ? 'prose-invert' : 'dark:prose-invert'} prose-sm max-w-none text-sm`,
                            children: renderContent()
                        }, void 0, false, {
                            fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/index.tsx",
                            lineNumber: 221,
                            columnNumber: 13
                        }, undefined),
                        isFinalAssistantResponse && !isIntermediate && !isInGroup && hasEnvironmentState && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_ActionButton__WEBPACK_IMPORTED_MODULE_16__.ActionButton, {
                            icon: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_icons_fi__WEBPACK_IMPORTED_MODULE_19__.FiMonitor, {
                                size: 14
                            }, void 0, false, {
                                fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/index.tsx",
                                lineNumber: 230,
                                columnNumber: 23
                            }, void 0),
                            label: "view final environment state",
                            onClick: handleFinalResponseClick
                        }, void 0, false, {
                            fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/index.tsx",
                            lineNumber: 229,
                            columnNumber: 15
                        }, undefined),
                        isFinalAnswer && message.title && typeof message.content === 'string' && !isIntermediate && !isInGroup && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_ReportFileEntry__WEBPACK_IMPORTED_MODULE_14__.ReportFileEntry, {
                            title: message.title || 'Research Report',
                            timestamp: message.timestamp,
                            content: message.content
                        }, void 0, false, {
                            fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/index.tsx",
                            lineNumber: 242,
                            columnNumber: 17
                        }, undefined),
                        message.toolCalls && message.toolCalls.length > 0 && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_ToolCalls__WEBPACK_IMPORTED_MODULE_10__.ToolCalls, {
                            toolCalls: message.toolCalls,
                            onToolCallClick: handleToolCallClick,
                            getToolIcon: getToolIcon,
                            isIntermediate: isIntermediate,
                            toolResults: message.toolResults || []
                        }, void 0, false, {
                            fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/index.tsx",
                            lineNumber: 251,
                            columnNumber: 15
                        }, undefined),
                        message.thinking && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_ThinkingToggle__WEBPACK_IMPORTED_MODULE_11__.ThinkingToggle, {
                            thinking: message.thinking,
                            showThinking: showThinking,
                            setShowThinking: setShowThinking
                        }, void 0, false, {
                            fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/index.tsx",
                            lineNumber: 262,
                            columnNumber: 15
                        }, undefined)
                    ]
                }, void 0, true)
            }, void 0, false, {
                fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/index.tsx",
                lineNumber: 213,
                columnNumber: 7
            }, undefined),
            message.role !== 'system' && !isIntermediate && !isInGroup && shouldDisplayTimestamp && !replayState.isActive && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_MessageTimestamp__WEBPACK_IMPORTED_MODULE_12__.MessageTimestamp, {
                timestamp: message.timestamp,
                content: message.content,
                role: message.role
            }, void 0, false, {
                fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/index.tsx",
                lineNumber: 278,
                columnNumber: 11
            }, undefined)
        ]
    }, void 0, true, {
        fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/index.tsx",
        lineNumber: 207,
        columnNumber: 5
    }, undefined);
};
_s(Message, "ibgMW8wikygi+C8Zj59eGp70Noc=", false, function() {
    return [
        _common_hooks_useSession__WEBPACK_IMPORTED_MODULE_3__.useSession,
        _common_hooks_useTool__WEBPACK_IMPORTED_MODULE_4__.useTool,
        jotai__WEBPACK_IMPORTED_MODULE_17__.useAtomValue,
        jotai__WEBPACK_IMPORTED_MODULE_17__.useAtomValue
    ];
});
_c = Message;
var _c;
$RefreshReg$(_c, "Message");

function $RefreshSig$() {
  return $ReactRefreshRuntime$.createSignatureFunctionForTransform();
}
function $RefreshReg$(type, id) {
  $ReactRefreshRuntime$.register(type, module.id + "_" + id);
}
Promise.resolve().then(function() {
  $ReactRefreshRuntime$.refresh(module.id, module.hot);
});


}),

},function(__webpack_require__) {
// webpack/runtime/get_full_hash
(() => {
__webpack_require__.h = () => ("39d749d66d32ef4a")
})();

}
);
//# sourceMappingURL=index.3a688986e3ae423a.hot-update.js.map