{"version":3,"file":"index.01b808be1b2693bc.hot-update.js","sources":["/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/entry.css","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/main/components/Router/SessionRouter.tsx"],"sourcesContent":["// extracted by css-extract-rspack-plugin\nexport {};\n    if(module.hot) {\n      (function() {\n        var localsJsonString = undefined;\n        // 1749662492761\n        var cssReload = require(\"../../node_modules/.pnpm/@rspack+core@1.3.9_@swc+helpers@0.5.17/node_modules/@rspack/core/dist/cssExtractHmr.js\").cssReload(module.id, {});\n        // only invalidate when locals change\n        if (\n          module.hot.data &&\n          module.hot.data.value &&\n          module.hot.data.value !== localsJsonString\n        ) {\n          module.hot.invalidate();\n        } else {\n          module.hot.accept();\n        }\n        module.hot.dispose(function(data) {\n          data.value = localsJsonString;\n          cssReload();\n        });\n      })();\n    }\n  ","import React, { useEffect } from 'react';\nimport { useParams, Navigate, useLocation } from 'react-router-dom';\nimport { useSession } from '../../hooks/useSession';\nimport { useReplayMode } from '../../hooks/useReplayMode';\n\ninterface SessionRouterProps {\n  children: React.ReactNode;\n}\n\n/**\n * SessionRouter Component - Handles session routing logic\n */\nexport const SessionRouter: React.FC<SessionRouterProps> = ({ children }) => {\n  const { sessionId } = useParams<{ sessionId: string }>();\n  const { setActiveSession, sessions, connectionStatus, activeSessionId, sendMessage } =\n    useSession();\n  const isReplayMode = useReplayMode();\n  const location = useLocation();\n\n  // Check if session exists in our loaded sessions\n  const sessionExists = sessions.some((session) => session.id === sessionId);\n\n  // Handle query parameter if present\n  useEffect(() => {\n    const searchParams = new URLSearchParams(location.search);\n    const query = searchParams.get('q');\n\n    if (\n      query &&\n      sessionId &&\n      activeSessionId === sessionId &&\n      !location.pathname.includes('/welcome')\n    ) {\n      // Process the query\n      sendMessage(query).catch((error) => {\n        console.error(`Failed to send query: ${error}`);\n      });\n    }\n  }, [location.search, sessionId, activeSessionId, sendMessage, location.pathname]);\n\n  // Setup session - but skip in replay mode as it's handled by ReplayModeProvider\n  useEffect(() => {\n    // Skip this logic in replay mode since session is already set\n    if (isReplayMode) {\n      console.log('[ReplayMode] SessionRouter: Skipping session setup in replay mode');\n      return;\n    }\n\n    // Only set active session if:\n    // 1. We have a session ID from URL\n    // 2. It exists in our sessions list\n    // 3. We're connected\n    if (sessionId && sessionExists && connectionStatus.connected) {\n      console.log(`SessionRouter: Loading session ${sessionId} from URL`);\n\n      setActiveSession(sessionId).catch((error) => {\n        console.error(`Failed to load session ${sessionId}:`, error);\n      });\n    }\n  }, [sessionId, sessionExists, connectionStatus.connected, setActiveSession, isReplayMode]);\n\n  // In replay mode, always show content regardless of session existence\n  if (isReplayMode) {\n    console.log('[ReplayMode] SessionRouter: Rendering children in replay mode');\n    return <>{children}</>;\n  }\n\n  // For normal mode, redirect if session doesn't exist\n  if (!sessionExists && sessions.length > 0 && sessionId) {\n    return <Navigate to=\"/\" replace />;\n  }\n\n  return <>{children}</>;\n};\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACvBA;AACA;AACA;AACA;AAMA;;AAEA;AACA;;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAMA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;;AACA;AAEA;AACA;AACA;AAAA;AAAA;;;;;;AACA;AAEA;AAAA;;AACA;AA7DA;;AACA;AAEA;AACA;AACA;;;AALA"}