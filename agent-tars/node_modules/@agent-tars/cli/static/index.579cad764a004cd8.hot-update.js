"use strict";
self["webpackHotUpdate_agent_tars_web_ui"]("index", {
"./src/entry.css": (function (module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
// extracted by css-extract-rspack-plugin

    if(true) {
      (function() {
        var localsJsonString = undefined;
        // 1749663205817
        var cssReload = (__webpack_require__("../node_modules/.pnpm/@rspack+core@1.3.9_@swc+helpers@0.5.17/node_modules/@rspack/core/dist/cssExtractHmr.js")/* .cssReload */.cssReload)(module.id, {});
        // only invalidate when locals change
        if (
          module.hot.data &&
          module.hot.data.value &&
          module.hot.data.value !== localsJsonString
        ) {
          module.hot.invalidate();
        } else {
          module.hot.accept();
        }
        module.hot.dispose(function(data) {
          data.value = localsJsonString;
          cssReload();
        });
      })();
    }
  

}),
"./src/common/constants/index.ts": (function (module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  API_BASE_URL: () => (API_BASE_URL),
  API_ENDPOINTS: () => (API_ENDPOINTS),
  CONNECTION_SETTINGS: () => (CONNECTION_SETTINGS),
  MESSAGE_ROLES: () => (MESSAGE_ROLES),
  SOCKET_EVENTS: () => (SOCKET_EVENTS),
  STORAGE_KEYS: () => (STORAGE_KEYS),
  TOOL_TYPES: () => (TOOL_TYPES)
});
/* provided dependency */ var $ReactRefreshRuntime$ = __webpack_require__("../node_modules/.pnpm/@rspack+plugin-react-refresh@1.0.3_react-refresh@0.16.0/node_modules/@rspack/plugin-react-refresh/client/reactRefresh.js");
/**
 * Base API URL for server communication
 */ const API_BASE_URL = window.AGENT_TARS_BASE_URL ?? 'http://localhost:3000';
/**
 * Default API endpoints
 */ const API_ENDPOINTS = {
    SESSIONS: '/api/sessions',
    CREATE_SESSION: '/api/sessions/create',
    SESSION_DETAILS: '/api/sessions/details',
    SESSION_EVENTS: '/api/sessions/events',
    SESSION_STATUS: '/api/sessions/status',
    UPDATE_SESSION: '/api/sessions/update',
    DELETE_SESSION: '/api/sessions/delete',
    QUERY: '/api/sessions/query',
    QUERY_STREAM: '/api/sessions/query/stream',
    ABORT: '/api/sessions/abort',
    GENERATE_SUMMARY: '/api/sessions/generate-summary',
    HEALTH: '/api/health',
    BROWSER_CONTROL_INFO: '/api/sessions/browser-control',
    MODEL_INFO: '/api/model-info'
};
/**
 * WebSocket events
 */ const SOCKET_EVENTS = {
    CONNECT: 'connect',
    DISCONNECT: 'disconnect',
    ERROR: 'error',
    RECONNECT_ATTEMPT: 'reconnect_attempt',
    RECONNECT_FAILED: 'reconnect_failed',
    JOIN_SESSION: 'join-session',
    AGENT_EVENT: 'agent-event',
    AGENT_STATUS: 'agent-status',
    PING: 'ping',
    SEND_QUERY: 'send-query',
    ABORT_QUERY: 'abort-query'
};
/**
 * Local storage keys
 */ const STORAGE_KEYS = {
    ACTIVE_SESSION: 'agent-tars-active-session',
    THEME: 'agent-tars-theme'
};
/**
 * Tool types
 */ const TOOL_TYPES = {
    SEARCH: 'search',
    BROWSER: 'browser',
    COMMAND: 'command',
    IMAGE: 'image',
    FILE: 'file',
    BROWSER_CONTROL: 'browser_vision_control',
    OTHER: 'other'
};
/**
 * Message roles
 */ const MESSAGE_ROLES = {
    USER: 'user',
    ASSISTANT: 'assistant',
    SYSTEM: 'system',
    TOOL: 'tool'
};
/**
 * Connection settings
 */ const CONNECTION_SETTINGS = {
    HEARTBEAT_INTERVAL: 15000,
    MAX_MISSED_HEARTBEATS: 2,
    MAX_RECONNECT_ATTEMPTS: 5,
    RECONNECTION_DELAY: 1000,
    RECONNECTION_DELAY_MAX: 5000
};

function $RefreshSig$() {
  return $ReactRefreshRuntime$.createSignatureFunctionForTransform();
}
function $RefreshReg$(type, id) {
  $ReactRefreshRuntime$.register(type, module.id + "_" + id);
}
Promise.resolve().then(function() {
  $ReactRefreshRuntime$.refresh(module.id, module.hot);
});


}),
"./src/standalone/share/shareService.ts": (function (module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  shareService: () => (shareService)
});
/* ESM import */var _swc_helpers_define_property__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../node_modules/.pnpm/@swc+helpers@0.5.17/node_modules/@swc/helpers/esm/_define_property.js");
/* ESM import */var _common_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/common/constants/index.ts");
/* provided dependency */ var $ReactRefreshRuntime$ = __webpack_require__("../node_modules/.pnpm/@rspack+plugin-react-refresh@1.0.3_react-refresh@0.16.0/node_modules/@rspack/plugin-react-refresh/client/reactRefresh.js");


/**
 * 分享服务类 - 处理分享相关功能
 */ class ShareService {
    /**
   * 获取分享配置
   */ async getShareConfig() {
        if (this.shareConfig) {
            return this.shareConfig;
        }
        try {
            const response = await fetch(`${_common_constants__WEBPACK_IMPORTED_MODULE_0__.API_BASE_URL}/api/share/config`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            if (!response.ok) {
                throw new Error(`Failed to get share config: ${response.statusText}`);
            }
            this.shareConfig = await response.json();
            return this.shareConfig;
        } catch (error) {
            console.error('Failed to get share config:', error);
            // 默认配置
            return {
                hasShareProvider: false,
                shareProvider: null
            };
        }
    }
    /**
   * 分享会话
   * @param sessionId 会话ID
   * @param upload 是否上传到分享提供者（如果存在）
   */ async shareSession(sessionId) {
        let upload = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
        try {
            const response = await fetch(`${_common_constants__WEBPACK_IMPORTED_MODULE_0__.API_BASE_URL}/api/sessions/share`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    sessionId,
                    upload
                })
            });
            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || `Failed to share session: ${response.statusText}`);
            }
            return await response.json();
        } catch (error) {
            console.error('Failed to share session:', error);
            return {
                success: false,
                error: error instanceof Error ? error.message : String(error)
            };
        }
    }
    /**
   * 下载 HTML 分享文件
   * @param html HTML 内容
   * @param sessionId 会话ID
   */ downloadShareHtml(html, sessionId) {
        const blob = new Blob([
            html
        ], {
            type: 'text/html'
        });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `agent-tars-${sessionId}-${Date.now()}.html`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
    }
    constructor(){
        (0,_swc_helpers_define_property__WEBPACK_IMPORTED_MODULE_1__._)(this, "shareConfig", null);
    }
}
const shareService = new ShareService();

function $RefreshSig$() {
  return $ReactRefreshRuntime$.createSignatureFunctionForTransform();
}
function $RefreshReg$(type, id) {
  $ReactRefreshRuntime$.register(type, module.id + "_" + id);
}
Promise.resolve().then(function() {
  $ReactRefreshRuntime$.refresh(module.id, module.hot);
});


}),

},function(__webpack_require__) {
// webpack/runtime/get_full_hash
(() => {
__webpack_require__.h = () => ("b256036394c52c6b")
})();

}
);
//# sourceMappingURL=index.579cad764a004cd8.hot-update.js.map