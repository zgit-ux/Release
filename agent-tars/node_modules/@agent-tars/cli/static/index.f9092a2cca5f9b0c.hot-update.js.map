{"version":3,"file":"index.f9092a2cca5f9b0c.hot-update.js","sources":["/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/entry.css","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Chat/Message/components/EnvironmentMessage.tsx"],"sourcesContent":["// extracted by css-extract-rspack-plugin\nexport {};\n    if(module.hot) {\n      (function() {\n        var localsJsonString = undefined;\n        // 1749577188302\n        var cssReload = require(\"../../node_modules/.pnpm/@rspack+core@1.3.9_@swc+helpers@0.5.17/node_modules/@rspack/core/dist/cssExtractHmr.js\").cssReload(module.id, {});\n        // only invalidate when locals change\n        if (\n          module.hot.data &&\n          module.hot.data.value &&\n          module.hot.data.value !== localsJsonString\n        ) {\n          module.hot.invalidate();\n        } else {\n          module.hot.accept();\n        }\n        module.hot.dispose(function(data) {\n          data.value = localsJsonString;\n          cssReload();\n        });\n      })();\n    }\n  ","import React from 'react';\nimport { motion } from 'framer-motion';\nimport { FiMaximize } from 'react-icons/fi';\nimport { MarkdownRenderer } from '../../../Markdown';\nimport { BrowserShell } from '../../../Workspace/renderers/BrowserShell';\nimport { useSession } from '../../../../hooks/useSession';\n\ninterface EnvironmentMessageProps {\n  content: any;\n  description?: string;\n  timestamp: number;\n  setActivePanelContent: (content: any) => void;\n  isIntermediate?: boolean;\n}\n\n/**\n * Component for displaying environment messages with optimized image rendering\n *\n * Design principles:\n * - Efficient rendering of multi-format content\n * - Interactive image thumbnails with preview capability\n * - Clear visual hierarchy with descriptive labels\n * - Compact and elegant styling for images without borders\n * - Support for intermediate display in thinking sequences\n * - Uses BrowserShell for browser screenshots for consistent UI with browser_vision_control\n */\nexport const EnvironmentMessage: React.FC<EnvironmentMessageProps> = ({\n  content,\n  description,\n  timestamp,\n  setActivePanelContent,\n  isIntermediate = false,\n}) => {\n  const { replayState } = useSession();\n\n  // 处理直接从环境输入渲染图像\n  if (Array.isArray(content)) {\n    const images = content.filter((part) => part.type === 'image_url');\n    const textParts = content.filter((part) => part.type === 'text');\n\n    // 空内容处理\n    if (images.length === 0 && textParts.length === 0) {\n      return <div className=\"text-xs text-gray-500 italic\">环境输入</div>;\n    }\n\n    // 检查是否是浏览器截图 - 通过description判断或使用启发式方法\n    const isBrowserScreenshot =\n      description?.toLowerCase().includes('browser') ||\n      description?.toLowerCase().includes('screenshot') ||\n      // 如果描述包含特定关键词但图片数量较少，可能是浏览器截图\n      (images.length === 1 && !isIntermediate);\n\n    // 确保在回放模式下图片能够正确加载\n    const handleImageError = (e: React.SyntheticEvent<HTMLImageElement, Event>) => {\n      console.warn('Image failed to load:', e.currentTarget.src);\n      // 可以在这里添加重试逻辑或替代图片\n    };\n\n    // 对于浏览器截图，使用BrowserShell进行渲染\n    if (isBrowserScreenshot && images.length > 0) {\n      return (\n        <div className=\"space-y-1\">\n          {/* 渲染文本内容 */}\n          {textParts.length > 0 && (\n            <div\n              className={`prose dark:prose-invert prose-sm max-w-none ${isIntermediate ? 'text-xs' : 'text-sm'} mb-2`}\n            >\n              {textParts.map((part, idx) => (\n                <MarkdownRenderer key={idx} content={part.text} />\n              ))}\n            </div>\n          )}\n\n          {/* 使用BrowserShell渲染浏览器截图 */}\n          <BrowserShell title={description || 'Browser Screenshot'}>\n            <div\n              className=\"relative group cursor-pointer\"\n              onClick={() =>\n                setActivePanelContent({\n                  type: 'image',\n                  source: images[0].image_url.url,\n                  title: description || '浏览器截图',\n                  timestamp,\n                  isEnvironmentInput: true, // 新增标记为环境输入\n                })\n              }\n            >\n              <img\n                src={images[0].image_url.url}\n                alt={images[0].image_url.alt || '截图'}\n                className=\"w-full h-auto object-contain\"\n                onError={handleImageError}\n              />\n\n              {/* 悬停覆盖层 */}\n              <div className=\"absolute inset-0 bg-black/20 opacity-0 group-hover:opacity-100 transition-opacity duration-200 flex items-center justify-center\">\n                <FiMaximize className=\"text-white\" size={20} />\n              </div>\n            </div>\n          </BrowserShell>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"space-y-1\">\n        {/* 渲染文本内容 */}\n        {textParts.length > 0 && (\n          <div\n            className={`prose dark:prose-invert prose-sm max-w-none ${isIntermediate ? 'text-xs' : 'text-sm'}`}\n          >\n            {textParts.map((part, idx) => (\n              <MarkdownRenderer key={idx} content={part.text} />\n            ))}\n          </div>\n        )}\n\n        {/* 将图像渲染为无边框的缩略图 */}\n        {images.length > 0 && (\n          <div className=\"flex flex-wrap gap-1 mt-1\">\n            {images.map((image, idx) => (\n              <motion.div\n                key={idx}\n                whileHover={{ scale: 1.02 }}\n                className=\"relative group cursor-pointer\"\n                onClick={() =>\n                  setActivePanelContent({\n                    type: 'image',\n                    source: image.image_url.url,\n                    title: description || '环境输入',\n                    timestamp,\n                  })\n                }\n              >\n                {/* 缩略图 */}\n                <img\n                  src={image.image_url.url}\n                  alt={image.image_url.alt || '截图'}\n                  className={`${isIntermediate ? 'h-16' : 'h-20'} rounded-lg object-cover shadow-sm`}\n                  onError={handleImageError}\n                />\n\n                {/* 悬停覆盖层 */}\n                <div className=\"absolute inset-0 bg-black/20 opacity-0 group-hover:opacity-100 rounded-lg transition-opacity duration-200 flex items-center justify-center\">\n                  <FiMaximize className=\"text-white\" size={isIntermediate ? 14 : 16} />\n                </div>\n              </motion.div>\n            ))}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  // 非数组内容的回退\n  return (\n    <div\n      className={`prose dark:prose-invert prose-sm max-w-none ${isIntermediate ? 'text-xs' : 'text-sm'}`}\n    >\n      {description && !isIntermediate && (\n        <div className=\"text-xs font-medium text-gray-500 dark:text-gray-400 mb-1\">\n          {description}\n        </div>\n      )}\n      {typeof content === 'string' ? (\n        <MarkdownRenderer content={content} />\n      ) : (\n        <pre className=\"text-xs\">{JSON.stringify(content, null, 2)}</pre>\n      )}\n    </div>\n  );\n};"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AAUA;;;;;;;;;;AAUA;AACA;;AAOA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;;;;;;AACA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AAEA;AAEA;AACA;AAAA;;;;;;;;;;AAMA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;;;;;AAIA;AAAA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA;AAEA;AACA;;AAEA;AAEA;AAEA;AACA;AAAA;;;;;;;;;;AAMA;AACA;AACA;AAGA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;;;;;;AAIA;AAAA;AACA;AAAA;AAAA;;;;;;;;;;;;AAtBA;;;;;;;;;;;;;;;;AA8BA;AAEA;AACA;AAEA;;AAEA;AACA;AACA;;;;;;AAGA;AACA;;;;;AAEA;AAAA;AAAA;;;;;;;;;;;;AAIA;AAjJA;;AAOA;;;AAPA"}