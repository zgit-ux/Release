"use strict";
self["webpackHotUpdate_agent_tars_web_ui"]("index", {
"./src/standalone/chat/Message/components/ToolCalls.tsx": (function (module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  ToolCalls: () => (ToolCalls)
});
/* ESM import */var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/react@18.3.1/node_modules/react/jsx-dev-runtime.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../node_modules/.pnpm/react@18.3.1/node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* ESM import */var react_icons_fi__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../node_modules/.pnpm/react-icons@4.12.0_react@18.3.1/node_modules/react-icons/fi/index.esm.js");
/* ESM import */var framer_motion__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../node_modules/.pnpm/framer-motion@12.19.2_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/render/components/motion/proxy.mjs");
/* ESM import */var _ActionButton__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/standalone/chat/Message/components/ActionButton.tsx");
/* provided dependency */ var $ReactRefreshRuntime$ = __webpack_require__("../node_modules/.pnpm/@rspack+plugin-react-refresh@1.0.3_react-refresh@0.16.0/node_modules/@rspack/plugin-react-refresh/client/reactRefresh.js");





/**
 * Component for displaying tool calls with enhanced icons and loading states
 *
 * Design principles:
 * - Distinct visual identity for different tool types
 * - Shows loading state for pending tool calls
 * - Displays success/error status with appropriate icons
 * - Provides clear visual feedback with enhanced tool-specific colors
 */ const ToolCalls = (param)=>{
    let { toolCalls, onToolCallClick, getToolIcon, isIntermediate = false, toolResults = [] } = param;
    var _this = undefined;
    // Helper function to get tool call status
    const getToolCallStatus = (toolCall)=>{
        const result = toolResults.find((result)=>result.toolCallId === toolCall.id);
        if (!result) {
            return 'pending'; // No result yet, tool is still running or streaming
        }
        if (result.error) {
            return 'error'; // Tool execution failed
        }
        return 'success'; // Tool completed successfully
    };
    // Helper function to check if tool call is currently streaming
    const isToolCallStreaming = (toolCall, parentMessage)=>{
        // Check if the parent message is still streaming and this tool call might be streaming
        return (parentMessage === null || parentMessage === void 0 ? void 0 : parentMessage.isStreaming) && !toolResults.find((result)=>result.toolCallId === toolCall.id);
    };
    // Helper function to get status icon with enhanced visual styling
    const getStatusIcon = function(status, toolName) {
        let isStreaming = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
        if (isStreaming) {
            return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_3__.motion.div, {
                animate: {
                    rotate: 360
                },
                transition: {
                    duration: 1,
                    repeat: Infinity,
                    ease: 'linear'
                },
                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_icons_fi__WEBPACK_IMPORTED_MODULE_4__.FiLoader, {
                    size: 16,
                    className: "text-accent-500 dark:text-accent-400"
                }, void 0, false, {
                    fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/components/ToolCalls.tsx",
                    lineNumber: 59,
                    columnNumber: 11
                }, _this)
            }, void 0, false, {
                fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/components/ToolCalls.tsx",
                lineNumber: 55,
                columnNumber: 9
            }, _this);
        }
        switch(status){
            case 'pending':
                return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_3__.motion.div, {
                    animate: {
                        rotate: 360
                    },
                    transition: {
                        duration: 1,
                        repeat: Infinity,
                        ease: 'linear'
                    },
                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_icons_fi__WEBPACK_IMPORTED_MODULE_4__.FiLoader, {
                        size: 16,
                        className: "text-slate-500 dark:text-slate-400"
                    }, void 0, false, {
                        fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/components/ToolCalls.tsx",
                        lineNumber: 71,
                        columnNumber: 13
                    }, _this)
                }, void 0, false, {
                    fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/components/ToolCalls.tsx",
                    lineNumber: 67,
                    columnNumber: 11
                }, _this);
            case 'success':
                return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_icons_fi__WEBPACK_IMPORTED_MODULE_4__.FiCheck, {
                    size: 16,
                    className: "text-green-600 dark:text-green-400"
                }, void 0, false, {
                    fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/components/ToolCalls.tsx",
                    lineNumber: 75,
                    columnNumber: 16
                }, _this);
            case 'error':
                return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_icons_fi__WEBPACK_IMPORTED_MODULE_4__.FiAlertCircle, {
                    size: 16,
                    className: "text-red-600 dark:text-red-400"
                }, void 0, false, {
                    fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/components/ToolCalls.tsx",
                    lineNumber: 77,
                    columnNumber: 16
                }, _this);
            default:
                return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_icons_fi__WEBPACK_IMPORTED_MODULE_4__.FiClock, {
                    size: 16,
                    className: "text-slate-500 dark:text-slate-400"
                }, void 0, false, {
                    fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/components/ToolCalls.tsx",
                    lineNumber: 79,
                    columnNumber: 16
                }, _this);
        }
    };
    // Enhanced tool description with streaming indication
    const getToolDescription = function(toolCall) {
        let isStreaming = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
        try {
            const args = JSON.parse(toolCall.function.arguments || '{}');
            // For streaming write_file calls, show file path and streaming status
            if (toolCall.function.name === 'write_file') {
                if (isStreaming) {
                    return args.path ? `streaming to ${args.path.split('/').pop()}` : 'streaming content';
                }
                return args.path ? `file: ${args.path.split('/').pop()}` : '';
            }
            // ... 保留现有的其他工具描述逻辑 ...
            switch(toolCall.function.name){
                case 'web_search':
                    return args.query ? `"${args.query}"` : '';
                case 'browser_navigate':
                    return args.url;
                case 'browser_vision_control':
                case 'browser_control':
                    return args.action ? `${args.action}` : '';
                case 'browser_click':
                    return args.selector || args.text ? `click: ${args.selector || args.text}` : 'click';
                case 'list_directory':
                    return args.path ? `path: ${args.path}` : '';
                case 'run_command':
                    return args.command;
                case 'read_file':
                    return args.path ? `file: ${args.path.split('/').pop()}` : '';
                default:
                    return '';
            }
        } catch (error) {
            console.error('Failed to parse tool arguments:', error);
            return isStreaming ? 'streaming...' : '';
        }
    };
    // 获取浏览器操作结果说明
    const getResultInfo = (toolCall, status)=>{
        const result = toolResults.find((result)=>result.toolCallId === toolCall.id);
        if (status === 'error' && (result === null || result === void 0 ? void 0 : result.error)) {
            return '"operation failed"';
        } else if (status === 'success') {
            if (toolCall.function.name === 'browser_get_markdown') {
                return '"content retrieved"';
            } else if (toolCall.function.name === 'browser_navigate') {
                return '"navigation success"';
            } else if (toolCall.function.name === 'browser_click') {
                return '"click successful"';
            } else if (toolCall.function.name.startsWith('run_')) {
                return '"command executed"';
            } else if (toolCall.function.name.startsWith('list_')) {
                return '"files listed"';
            } else if (toolCall.function.name.startsWith('read_')) {
                return '"file read"';
            } else if (toolCall.function.name.startsWith('write_')) {
                return '"file saved"';
            }
        }
        return '';
    };
    // 获取工具的格式化名称，使其更易读
    const getToolDisplayName = (toolName)=>{
        // 替换下划线为空格
        const nameWithSpaces = toolName.replace(/_/g, ' ');
        // 特殊情况处理
        switch(toolName){
            case 'browser_navigate':
                return 'Navigate';
            case 'browser_get_markdown':
                return 'Extract Content';
            case 'browser_click':
                return 'Click Element';
            case 'web_search':
                return 'Web Search';
            case 'list_directory':
                return 'List Files';
            case 'run_command':
                return 'Run Command';
            case 'read_file':
                return 'Read File';
            case 'write_file':
                return 'Write File';
            default:
                // 首字母大写
                return nameWithSpaces.split(' ').map((word)=>word.charAt(0).toUpperCase() + word.slice(1)).join(' ');
        }
    };
    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
        className: "mt-2 space-y-1.5",
        children: toolCalls.map((toolCall)=>{
            const status = getToolCallStatus(toolCall);
            const isStreaming = isToolCallStreaming(toolCall);
            const description = getToolDescription(toolCall, isStreaming);
            const browserInfo = getResultInfo(toolCall, status);
            const displayName = getToolDisplayName(toolCall.function.name);
            return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_ActionButton__WEBPACK_IMPORTED_MODULE_2__.ActionButton, {
                icon: getToolIcon(toolCall.function.name),
                label: displayName,
                onClick: ()=>onToolCallClick(toolCall),
                status: isStreaming ? 'pending' : status,
                statusIcon: getStatusIcon(status, toolCall.function.name, isStreaming),
                description: description || browserInfo || undefined
            }, toolCall.id, false, {
                fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/components/ToolCalls.tsx",
                lineNumber: 191,
                columnNumber: 11
            }, undefined);
        })
    }, void 0, false, {
        fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/components/ToolCalls.tsx",
        lineNumber: 182,
        columnNumber: 5
    }, undefined);
}; // ... 保留其他代码 ...
_c = ToolCalls;
var _c;
$RefreshReg$(_c, "ToolCalls");

function $RefreshSig$() {
  return $ReactRefreshRuntime$.createSignatureFunctionForTransform();
}
function $RefreshReg$(type, id) {
  $ReactRefreshRuntime$.register(type, module.id + "_" + id);
}
Promise.resolve().then(function() {
  $ReactRefreshRuntime$.refresh(module.id, module.hot);
});


}),

},function(__webpack_require__) {
// webpack/runtime/get_full_hash
(() => {
__webpack_require__.h = () => ("d7b85dbcceb4e02b")
})();

}
);
//# sourceMappingURL=index.3628b12cc8f64d05.hot-update.js.map