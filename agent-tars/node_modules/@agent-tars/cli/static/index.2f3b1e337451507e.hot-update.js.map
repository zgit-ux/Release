{"version":3,"file":"index.2f3b1e337451507e.hot-update.js","sources":["/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/entry.css","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/hooks/useSession.ts"],"sourcesContent":["// extracted by css-extract-rspack-plugin\nexport {};\n    if(module.hot) {\n      (function() {\n        var localsJsonString = undefined;\n        // 1749334957561\n        var cssReload = require(\"../../node_modules/.pnpm/@rspack+core@1.3.9_@swc+helpers@0.5.17/node_modules/@rspack/core/dist/cssExtractHmr.js\").cssReload(module.id, {});\n        // only invalidate when locals change\n        if (\n          module.hot.data &&\n          module.hot.data.value &&\n          module.hot.data.value !== localsJsonString\n        ) {\n          module.hot.invalidate();\n        } else {\n          module.hot.accept();\n        }\n        module.hot.dispose(function(data) {\n          data.value = localsJsonString;\n          cssReload();\n        });\n      })();\n    }\n  ","import { useAtom, useAtomValue, useSetAtom } from 'jotai';\nimport { useLocation } from 'react-router-dom';\nimport { sessionsAtom, activeSessionIdAtom } from '../state/atoms/session';\nimport { messagesAtom, groupedMessagesAtom } from '../state/atoms/message';\nimport { toolResultsAtom } from '../state/atoms/tool';\nimport { plansAtom, planUIStateAtom } from '../state/atoms/plan';\nimport {\n  isProcessingAtom,\n  activePanelContentAtom,\n  connectionStatusAtom,\n  modelInfoAtom,\n} from '../state/atoms/ui';\nimport { replayStateAtom } from '../state/atoms/replay';\nimport {\n  loadSessionsAction,\n  createSessionAction,\n  setActiveSessionAction,\n  updateSessionAction,\n  deleteSessionAction,\n  sendMessageAction,\n  abortQueryAction,\n  checkSessionStatusAction,\n} from '../state/actions/sessionActions';\nimport {\n  initConnectionMonitoringAction,\n  checkConnectionStatusAction,\n} from '../state/actions/connectionActions';\nimport { fetchModelInfoAction, setModelInfoAction } from '../state/actions/modelInfoAction';\nimport { socketService } from '../services/socketService';\n\nimport { useEffect, useCallback, useMemo } from 'react';\nimport { useReplayMode, useReplayModelInfo } from '../context/ReplayModeContext';\n\n/**\n * Hook for session management functionality\n */\nexport function useSession() {\n  // State\n  const [sessions, setSessions] = useAtom(sessionsAtom);\n  const [activeSessionId, setActiveSessionId] = useAtom(activeSessionIdAtom);\n  const messages = useAtomValue(messagesAtom);\n  const groupedMessages = useAtomValue(groupedMessagesAtom);\n  const toolResults = useAtomValue(toolResultsAtom);\n  const [isProcessing, setIsProcessing] = useAtom(isProcessingAtom);\n  const [activePanelContent, setActivePanelContent] = useAtom(activePanelContentAtom);\n  const [connectionStatus, setConnectionStatus] = useAtom(connectionStatusAtom);\n  const [plans, setPlans] = useAtom(plansAtom);\n  const setPlanUIState = useSetAtom(planUIStateAtom);\n  const [replayState, setReplayState] = useAtom(replayStateAtom);\n  const modelInfo = useAtomValue(modelInfoAtom);\n\n  // Check if we're in replay mode using the context hook\n  const isReplayMode = useReplayMode();\n  // 获取回放模式下的模型信息\n  const replayModelInfo = useReplayModelInfo();\n\n  // Actions\n  const loadSessions = useSetAtom(loadSessionsAction);\n  const createSession = useSetAtom(createSessionAction);\n  const setActiveSession = useSetAtom(setActiveSessionAction);\n  const updateSessionMetadata = useSetAtom(updateSessionAction);\n  const deleteSession = useSetAtom(deleteSessionAction);\n  const sendMessage = useSetAtom(sendMessageAction);\n  const abortQuery = useSetAtom(abortQueryAction);\n  const initConnectionMonitoring = useSetAtom(initConnectionMonitoringAction);\n  const checkServerStatus = useSetAtom(checkConnectionStatusAction);\n  const checkSessionStatus = useSetAtom(checkSessionStatusAction);\n  const fetchModelInfo = useSetAtom(fetchModelInfoAction);\n  const setModelInfo = useSetAtom(setModelInfoAction);\n\n  // Get current location\n  const location = useLocation();\n\n  // 保留这个工具函数，但移除自动同步逻辑\n  const getSessionIdFromUrl = useCallback(() => {\n    const pathParts = location.pathname.split('/').filter(Boolean);\n    return pathParts.length > 0 ? pathParts[0] : null;\n  }, [location]);\n\n  // Periodic status checking for active session - 在回放模式下不检查状态\n  useEffect(() => {\n    if (!activeSessionId || !connectionStatus.connected || isReplayMode) return;\n\n    // Initial status check when session becomes active\n    checkSessionStatus(activeSessionId);\n  }, [activeSessionId, connectionStatus.connected, checkSessionStatus, isReplayMode]);\n\n  // Enhanced socket handler for session status sync - 在回放模式下不更新状态\n  const handleSessionStatusUpdate = useCallback(\n    (status: any) => {\n      if (status && typeof status.isProcessing === 'boolean' && !isReplayMode) {\n        setIsProcessing(status.isProcessing);\n      }\n    },\n    [setIsProcessing, isReplayMode],\n  );\n\n  // Set up socket event handlers when active session changes - 在回放模式下不设置socket事件处理\n  useEffect(() => {\n    if (!activeSessionId || !socketService.isConnected() || isReplayMode) return;\n\n    // Join session and listen for status updates\n    socketService.joinSession(\n      activeSessionId,\n      () => {\n        /* existing event handling */\n      },\n      handleSessionStatusUpdate,\n    );\n\n    // Register global status handler\n    socketService.on('agent-status', handleSessionStatusUpdate);\n\n    return () => {\n      // Clean up handlers\n      socketService.off('agent-status', handleSessionStatusUpdate);\n    };\n  }, [activeSessionId, handleSessionStatusUpdate, isReplayMode]);\n\n  // Auto-show plan when it's first created - 在回放模式下不自动显示计划\n  useEffect(() => {\n    if (activeSessionId && plans[activeSessionId]?.hasGeneratedPlan && !isReplayMode) {\n      const currentPlan = plans[activeSessionId];\n\n      // If this is a newly generated plan, automatically show it\n      if (currentPlan.steps.length > 0 && currentPlan.steps.every((step) => !step.done)) {\n        setPlanUIState((prev) => ({\n          ...prev,\n          isVisible: true,\n        }));\n      }\n    }\n  }, [activeSessionId, plans, setPlanUIState, isReplayMode]);\n\n  // 添加获取模型信息的效果\n  useEffect(() => {\n    // 在回放模式下使用回放模式的模型信息\n    if (isReplayMode && replayModelInfo) {\n      setModelInfo(replayModelInfo);\n      return;\n    }\n\n    // 在回放模式或未连接时不获取模型信息\n    if (isReplayMode || !connectionStatus.connected) return;\n\n    // 使用新的 action 获取模型信息\n    fetchModelInfo();\n  }, [connectionStatus.connected, isReplayMode, replayModelInfo, fetchModelInfo, setModelInfo]);\n\n  // Memoize the session state object to avoid unnecessary re-renders\n  const sessionState = useMemo(\n    () => ({\n      // State\n      sessions,\n      activeSessionId,\n      messages,\n      groupedMessages,\n      toolResults,\n      isProcessing,\n      activePanelContent,\n      connectionStatus,\n      plans,\n      replayState,\n      modelInfo, // Now from atom\n\n      // Session operations\n      loadSessions,\n      createSession,\n      setActiveSession,\n      updateSessionMetadata,\n      deleteSession,\n\n      // Message operations\n      sendMessage,\n      abortQuery,\n\n      // UI operations\n      setActivePanelContent,\n\n      // Connection operations\n      initConnectionMonitoring,\n      checkServerStatus,\n\n      // Status operations\n      checkSessionStatus,\n      getSessionIdFromUrl,\n    }),\n    [\n      sessions,\n      activeSessionId,\n      messages,\n      groupedMessages,\n      toolResults,\n      isProcessing,\n      activePanelContent,\n      connectionStatus,\n      plans,\n      replayState,\n      modelInfo,\n      loadSessions,\n      createSession,\n      setActiveSession,\n      updateSessionMetadata,\n      deleteSession,\n      sendMessage,\n      abortQuery,\n      setActivePanelContent,\n      initConnectionMonitoring,\n      checkServerStatus,\n      checkSessionStatus,\n      getSessionIdFromUrl,\n    ],\n  );\n\n  return sessionState;\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;ACv}