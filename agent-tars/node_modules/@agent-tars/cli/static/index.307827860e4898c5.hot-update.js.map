{"version":3,"file":"index.307827860e4898c5.hot-update.js","sources":["/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/entry.css","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Workspace/WorkspaceDetail.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Workspace/renderers/GenericResultRenderer.tsx"],"sourcesContent":["// extracted by css-extract-rspack-plugin\nexport {};\n    if(module.hot) {\n      (function() {\n        var localsJsonString = undefined;\n        // 1749632684609\n        var cssReload = require(\"../../node_modules/.pnpm/@rspack+core@1.3.9_@swc+helpers@0.5.17/node_modules/@rspack/core/dist/cssExtractHmr.js\").cssReload(module.id, {});\n        // only invalidate when locals change\n        if (\n          module.hot.data &&\n          module.hot.data.value &&\n          module.hot.data.value !== localsJsonString\n        ) {\n          module.hot.invalidate();\n        } else {\n          module.hot.accept();\n        }\n        module.hot.dispose(function(data) {\n          data.value = localsJsonString;\n          cssReload();\n        });\n      })();\n    }\n  ","import React from 'react';\nimport { motion } from 'framer-motion';\nimport { useSession } from '../../hooks/useSession';\nimport { useTool } from '../../hooks/useTool';\nimport { FiFileText, FiBookOpen } from 'react-icons/fi';\nimport { formatTimestamp } from '../../utils/formatters';\nimport { ToolResultRenderer } from './renderers/ToolResultRenderer';\nimport { ResearchReportRenderer } from './renderers/ResearchReportRenderer';\n\n/**\n * WorkspaceDetail Component - Displays details of a single tool result or report\n */\nexport const WorkspaceDetail: React.FC = () => {\n  const { activePanelContent } = useSession();\n  const { getToolIcon } = useTool();\n\n  if (!activePanelContent) {\n    return null;\n  }\n\n  // 特殊处理 final_answer 类型或研究报告内容\n  if (\n    activePanelContent?.type === 'research_report' ||\n    (activePanelContent.toolCallId && activePanelContent.toolCallId.startsWith('final-answer'))\n  ) {\n    return (\n      <ResearchReportRenderer\n        content={\n          typeof activePanelContent.source === 'string'\n            ? activePanelContent.source\n            : JSON.stringify(activePanelContent.source, null, 2)\n        }\n        title={activePanelContent.title || 'Research Report'}\n        isStreaming={activePanelContent.isStreaming}\n      />\n    );\n  }\n\n  // 特殊处理研究报告内容\n  if (activePanelContent?.type === 'research_report') {\n    return (\n      <ResearchReportRenderer\n        content={activePanelContent.source}\n        title={activePanelContent.title}\n        isStreaming={activePanelContent.isStreaming}\n      />\n    );\n  }\n\n  // Convert legacy format content to standardized tool result parts\n  const getStandardizedContent = (): ToolResultContentPart[] => {\n    const { type, source, title, error, arguments: toolArguments } = activePanelContent;\n\n    // Show error if present\n    if (error) {\n      return [\n        {\n          type: 'text',\n          name: 'ERROR',\n          text: error,\n        },\n      ];\n    }\n\n    // Handle write_file tool specifically\n    if (type === 'file' && toolArguments && typeof toolArguments === 'object') {\n      if (toolArguments.path && (toolArguments.content || typeof source === 'string')) {\n        return [\n          {\n            type: 'file_result',\n            name: 'FILE_RESULT',\n            path: toolArguments.path,\n            content: toolArguments.content || source,\n          },\n        ];\n      }\n    }\n\n    // Handle browser_vision_control type specifically\n    if (type === 'browser_vision_control') {\n      // 如果这是环境增强，包含原始截图数据\n      const environmentImage = Array.isArray(activePanelContent.originalContent)\n        ? extractImageUrl(activePanelContent.originalContent)\n        : null;\n\n      // Create browser_control part for the specialized renderer\n      return [\n        {\n          type: 'browser_control',\n          name: 'BROWSER_CONTROL',\n          toolCallId: activePanelContent.toolCallId,\n          thought: toolArguments?.thought || '',\n          step: toolArguments?.step || '',\n          action: toolArguments?.action || '',\n          status: source?.status || 'unknown',\n          environmentImage: environmentImage, // 传递环境图像\n        },\n      ];\n    }\n\n    // Handle array of content parts from environment_input\n    if (Array.isArray(source) && source.some((part) => part.type === 'image_url')) {\n      const imagePart = source.find((part) => part.type === 'image_url');\n      if (imagePart && imagePart.image_url && imagePart.image_url.url) {\n        const imgSrc = imagePart.image_url.url;\n        if (imgSrc.startsWith('data:image/')) {\n          const [mimeTypePrefix, base64Data] = imgSrc.split(',');\n          const mimeType = mimeTypePrefix.split(':')[1].split(';')[0];\n          return [\n            {\n              type: 'image',\n              imageData: base64Data,\n              mimeType,\n              name: activePanelContent.title,\n            },\n          ];\n        }\n      }\n    }\n\n    // Based on tool type, convert to standardized format\n    switch (type) {\n      case 'image':\n        // Image content\n        if (typeof source === 'string' && source.startsWith('data:image/')) {\n          const [mimeTypePrefix, base64Data] = source.split(',');\n          const mimeType = mimeTypePrefix.split(':')[1].split(';')[0];\n\n          return [\n            {\n              type: 'image',\n              imageData: base64Data,\n              mimeType,\n              name: activePanelContent.title,\n            },\n          ];\n        }\n        return [\n          {\n            type: 'text',\n            text: 'Image could not be displayed',\n          },\n        ];\n\n      case 'search':\n        // Search results\n        if (Array.isArray(source) && source.some((item) => item.type === 'text')) {\n          // Handle new multimodal format\n          const resultsItem = source.find((item) => item.name === 'RESULTS');\n          const queryItem = source.find((item) => item.name === 'QUERY');\n\n          if (resultsItem && resultsItem.text) {\n            // Parse results text into separate result items\n            const resultBlocks = resultsItem.text.split('---').filter(Boolean);\n            const parsedResults = resultBlocks.map((block) => {\n              const lines = block.trim().split('\\n');\n              const titleLine = lines[0] || '';\n              const urlLine = lines[1] || '';\n              const snippet = lines.slice(2).join('\\n');\n\n              const title = titleLine.replace(/^\\[\\d+\\]\\s*/, '').trim();\n              const url = urlLine.replace(/^URL:\\s*/, '').trim();\n\n              return { title, url, snippet };\n            });\n\n            // Return only the search_result part, removing the redundant text query part\n            return [\n              {\n                type: 'search_result',\n                name: 'SEARCH_RESULTS',\n                results: parsedResults,\n                query: queryItem?.text,\n              },\n            ];\n          }\n        }\n\n        // Handle old format\n        if (source && typeof source === 'object' && source.results) {\n          return [\n            {\n              type: 'search_result',\n              name: 'SEARCH_RESULTS',\n              results: source.results,\n              query: source.query,\n            },\n          ];\n        }\n\n        return [\n          {\n            type: 'text',\n            text: typeof source === 'string' ? source : JSON.stringify(source, null, 2),\n          },\n        ];\n\n      case 'command':\n        // Command results\n        if (Array.isArray(source) && source.some((item) => item.type === 'text')) {\n          // New multimodal format\n          const commandItem = source.find((item) => item.name === 'COMMAND');\n          const stdoutItem = source.find((item) => item.name === 'STDOUT');\n          const stderrItem = source.find((item) => item.name === 'STDERR');\n\n          return [\n            {\n              type: 'command_result',\n              name: 'COMMAND_RESULT',\n              command: commandItem?.text || toolArguments?.command,\n              stdout: stdoutItem?.text || '',\n              stderr: stderrItem?.text || '',\n              exitCode: source.find((item) => item.name === 'EXIT_CODE')?.value,\n            },\n          ];\n        }\n\n        // Old format\n        if (source && typeof source === 'object') {\n          return [\n            {\n              type: 'command_result',\n              name: 'COMMAND_RESULT',\n              command: source.command || toolArguments?.command,\n              stdout: source.output || source.stdout || '',\n              stderr: source.stderr || '',\n              exitCode: source.exitCode,\n            },\n          ];\n        }\n\n        return [\n          {\n            type: 'text',\n            text: typeof source === 'string' ? source : JSON.stringify(source, null, 2),\n          },\n        ];\n\n      case 'browser':\n        const toolName = title?.toLowerCase() || '';\n\n        // 判断是否该使用 GenericResultRenderer 处理的浏览器工具\n        // 1. 检查是否为结构化数据（对象或数组）\n        // 2. 识别特定的浏览器工具\n        if (\n          // 复杂的JSON对象或数组，更适合用GenericResultRenderer处理\n          (typeof source === 'object' && \n           source !== null && \n           !Array.isArray(source) &&\n           Object.keys(source).length > 2) ||\n          // 特定的浏览器工具名称判断\n          toolName.includes('extract') || \n          toolName.includes('analyze') || \n          toolName.includes('get_metadata') ||\n          toolName.includes('json')\n        ) {\n          return [\n            {\n              type: 'json',\n              name: title || 'BROWSER_DATA',\n              data: source,\n            },\n          ];\n        }\n\n        if (toolName.includes('navigate')) {\n          let textContent = '';\n          if (typeof source === 'string') {\n            textContent = source;\n          } else if (Array.isArray(source)) {\n            textContent = source\n              .filter((p) => p.type === 'text')\n              .map((p) => p.text)\n              .join('\\n');\n          } else if (typeof source === 'object' && source !== null) {\n            textContent = source.content || source.text || JSON.stringify(source, null, 2);\n          }\n\n          return [\n            {\n              type: 'text',\n              name: title,\n              text: textContent,\n              showAsRawMarkdown: true,\n            },\n          ];\n        }\n\n        // Browser results\n        if (Array.isArray(source) && source.some((item) => item.type === 'text')) {\n          // 处理数组格式的浏览器结果\n          const contentText = source\n            .filter((item) => item.type === 'text')\n            .map((item) => item.text)\n            .join('\\n');\n\n          return [\n            {\n              type: 'browser_result',\n              name: 'BROWSER_RESULT',\n              url: extractUrlFromContent(contentText),\n              content: contentText,\n              title: 'Browser Navigation',\n              contentType: 'text',\n            },\n          ];\n        }\n\n        // Old format or direct string content\n        return [\n          {\n            type: 'browser_result',\n            name: 'BROWSER_RESULT',\n            url: typeof source === 'object' && source.url ? source.url : '',\n            content:\n              typeof source === 'object'\n                ? source.content || source.text || JSON.stringify(source, null, 2)\n                : typeof source === 'string'\n                  ? source\n                  : JSON.stringify(source, null, 2),\n            contentType: 'text',\n            title: 'Browser Navigation',\n          },\n        ];\n\n      case 'file':\n        // File results\n        if (source && typeof source === 'object') {\n          return [\n            {\n              type: 'text',\n              name: 'FILE_PATH',\n              text: `File: ${source.path || 'Unknown file'}`,\n            },\n            {\n              type: 'text',\n              name: 'FILE_CONTENT',\n              text: source.content || 'No content available',\n            },\n          ];\n        }\n\n        return [\n          {\n            type: 'text',\n            text: typeof source === 'string' ? source : JSON.stringify(source, null, 2),\n          },\n        ];\n\n      default:\n        // Default handling for unknown types\n        if (typeof source === 'object') {\n          return [\n            {\n              type: 'json',\n              name: 'JSON_DATA',\n              data: source,\n            },\n          ];\n        }\n\n        return [\n          {\n            type: 'text',\n            text: typeof source === 'string' ? source : JSON.stringify(source, null, 2),\n          },\n        ];\n    }\n  };\n\n  // 辅助函数：从文本内容中提取URL\n  const extractUrlFromContent = (content: string): string => {\n    if (typeof content === 'string' && content.includes('Navigated to ')) {\n      const lines = content.split('\\n');\n      const firstLine = lines[0] || '';\n      return firstLine.replace('Navigated to ', '').trim();\n    }\n    return '';\n  };\n\n  // 辅助函数：从环境内容中提取图片URL\n  const extractImageUrl = (content: any[]): string | null => {\n    const imgPart = content.find(\n      (part) => part && part.type === 'image_url' && part.image_url && part.image_url.url,\n    );\n    return imgPart ? imgPart.image_url.url : null;\n  };\n\n  // Handle tool result content action\n  const handleContentAction = (action: string, data: any) => {\n    if (action === 'zoom' && data.src) {\n      // Here you could open a modal with the zoomed image\n      console.log('Zoom image:', data.src);\n    }\n  };\n\n  return (\n    <motion.div\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      exit={{ opacity: 0 }}\n      className=\"h-full flex flex-col\"\n    >\n      {/* Header with tool info */}\n      <div className=\"flex items-center justify-between p-4 border-b border-gray-100/40 dark:border-gray-700/20\">\n        <div className=\"flex items-center\">\n          <div className=\"w-10 h-10 mr-3 rounded-xl flex items-center justify-center relative overflow-hidden\">\n            {/* 使用特殊图标替代 final_answer 工具图标 */}\n            {activePanelContent.toolCallId?.startsWith('final-answer') ? (\n              <div className=\"absolute inset-0 bg-gradient-to-br from-accent-400 to-accent-500 opacity-20\"></div>\n            ) : (\n              <div\n                className={`absolute inset-0 opacity-20 ${\n                  activePanelContent?.type === 'search'\n                    ? 'bg-gradient-to-br from-blue-400 to-indigo-500'\n                    : activePanelContent?.type === 'browser'\n                      ? 'bg-gradient-to-br from-purple-400 to-pink-500'\n                      : activePanelContent?.type === 'command'\n                        ? 'bg-gradient-to-br from-green-400 to-emerald-500'\n                        : activePanelContent?.type === 'file'\n                          ? 'bg-gradient-to-br from-yellow-400 to-amber-500'\n                          : activePanelContent?.type === 'image'\n                            ? 'bg-gradient-to-br from-red-400 to-rose-500'\n                            : activePanelContent?.type === 'browser_vision_control'\n                              ? 'bg-gradient-to-br from-cyan-400 to-teal-500'\n                              : 'bg-gradient-to-br from-gray-400 to-gray-500'\n                }`}\n              ></div>\n            )}\n            <div className=\"relative z-10\">\n              {activePanelContent.toolCallId?.startsWith('final-answer') ? (\n                <FiBookOpen className=\"text-accent-600 dark:text-accent-400\" size={20} />\n              ) : (\n                getToolIcon(activePanelContent?.type || 'other')\n              )}\n            </div>\n          </div>\n\n          <div>\n            <h2 className=\"font-medium text-gray-800 dark:text-gray-200 text-lg leading-tight\">\n              {activePanelContent.title}\n            </h2>\n            <div className=\"text-xs text-gray-500 dark:text-gray-400\">\n              {formatTimestamp(activePanelContent.timestamp)}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Content area */}\n      <div className=\"flex-1 overflow-auto bg-gray-50/50 dark:bg-gray-900/30 p-6\">\n        <ToolResultRenderer content={getStandardizedContent()} onAction={handleContentAction} />\n      </div>\n    </motion.div>\n  );\n};","import React from 'react';\nimport { motion } from 'framer-motion';\nimport { FiCheck, FiX, FiAlertCircle, FiInfo, FiRefreshCw, FiGlobe } from 'react-icons/fi';\nimport { ToolResultContentPart } from '../../../types';\n\ninterface GenericResultRendererProps {\n  part: ToolResultContentPart;\n  onAction?: (action: string, data: any) => void;\n}\n\n/**\n * GenericResultRenderer - 智能分析并渲染任意格式的工具结果\n *\n * 特点:\n * - 自动识别常见的状态模式（成功/失败/信息）\n * - 提取并突出显示关键信息\n * - 优雅处理各种数据结构\n * - 美观一致的卡片式布局\n */\nexport const GenericResultRenderer: React.FC<GenericResultRendererProps> = ({ part }) => {\n  const content = part.text || part.data || {};\n\n  // 尝试将字符串内容解析为JSON\n  let parsedContent = content;\n  if (typeof content === 'string') {\n    try {\n      parsedContent = JSON.parse(content);\n    } catch (e) {\n      // 不是有效的JSON，保持字符串格式\n      parsedContent = content;\n    }\n  }\n\n  // 智能检测结果类型\n  const resultInfo = analyzeResult(parsedContent);\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 10 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.3 }}\n      className=\"flex items-center justify-center p-4\"\n    >\n      <div className=\"bg-white dark:bg-gray-800 rounded-xl border border-gray-200/50 dark:border-gray-700/30 shadow-sm overflow-hidden max-w-xl w-full\">\n        {/* 状态头部 */}\n        <div\n          className={`py-4 px-5 flex items-center justify-between border-b ${getHeaderClasses(resultInfo.type)}`}\n        >\n          <div className=\"flex items-center\">\n            {getStatusIcon(resultInfo.type)}\n            <span className=\"font-medium ml-2\">{part.name || resultInfo.title}</span>\n          </div>\n          \n          {/* 添加URL显示（适用于浏览器工具） */}\n          {resultInfo.url && (\n            <div className=\"text-xs flex items-center text-gray-500 dark:text-gray-400\">\n              <FiGlobe size={12} className=\"mr-1\" />\n              <span className=\"max-w-[200px] truncate\">{resultInfo.url}</span>\n            </div>\n          )}\n        </div>\n\n        {/* 内容区域 */}\n        <div className=\"p-5\">\n          {/* 主要消息 */}\n          {resultInfo.message && (\n            <div className=\"text-gray-700 dark:text-gray-300 mb-4\">{resultInfo.message}</div>\n          )}\n\n          {/* 详细信息区 - 只有在有额外信息时显示 */}\n          {resultInfo.details && Object.keys(resultInfo.details).length > 0 && (\n            <div className=\"mt-3 pt-3 border-t border-gray-100 dark:border-gray-700/30\">\n              <div className=\"grid gap-2\">\n                {Object.entries(resultInfo.details).map(([key, value]) => (\n                  <div key={key} className=\"flex items-start\">\n                    <div className=\"text-xs font-medium text-gray-500 dark:text-gray-400 w-24 flex-shrink-0\">\n                      {formatKey(key)}:\n                    </div>\n                    <div className=\"text-sm text-gray-700 dark:text-gray-300\">\n                      {formatValue(value)}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* 空状态处理 */}\n          {!resultInfo.message &&\n            (!resultInfo.details || Object.keys(resultInfo.details).length === 0) && (\n              <div className=\"text-center text-gray-500 dark:text-gray-400 py-2\">\n                {resultInfo.type === 'empty' ? 'No content available' : 'Operation completed'}\n              </div>\n            )}\n        </div>\n      </div>\n    </motion.div>\n  );\n};\n\n/**\n * 分析工具结果并提取关键信息\n */\nfunction analyzeResult(content: any): {\n  type: 'success' | 'error' | 'info' | 'empty';\n  title: string;\n  message: string | null;\n  details: Record<string, any>;\n  url?: string; // 添加URL字段，用于浏览器工具结果\n} {\n  // 默认值\n  const result = {\n    type: 'info' as const,\n    title: 'Operation Result',\n    message: null,\n    details: {} as Record<string, any>,\n  };\n\n  // 处理空内容\n  if (!content || (typeof content === 'object' && Object.keys(content).length === 0)) {\n    return { ...result, type: 'empty', title: 'Empty Result' };\n  }\n\n  // 处理字符串内容\n  if (typeof content === 'string') {\n    return { ...result, message: content };\n  }\n\n  // 处理对象内容\n  if (typeof content === 'object') {\n    // 检测状态字段\n    if ('status' in content) {\n      const status = String(content.status).toLowerCase();\n      if (status === 'success' || status === 'ok' || status === 'completed') {\n        result.type = 'success';\n        result.title = 'Success';\n      } else if (status === 'error' || status === 'fail' || status === 'failed') {\n        result.type = 'error';\n        result.title = 'Error';\n      }\n    }\n\n    // 检测消息字段\n    if ('message' in content) {\n      result.message = String(content.message);\n    } else if ('error' in content) {\n      result.message = String(content.error);\n      result.type = 'error';\n      result.title = 'Error';\n    } else if ('msg' in content) {\n      result.message = String(content.msg);\n    } else if ('content' in content && typeof content.content === 'string') {\n      result.message = content.content;\n    }\n\n    // 提取标题\n    if ('title' in content && typeof content.title === 'string' && content.title.trim()) {\n      result.title = content.title;\n    } else if (result.message && result.message.length < 50) {\n      // 如果消息很短，可以用作标题\n      result.title = result.message;\n      result.message = null;\n    }\n\n    // 特别处理URL (用于浏览器工具结果)\n    let url: string | undefined = undefined;\n    if ('url' in content && typeof content.url === 'string') {\n      url = content.url;\n    }\n\n    // 收集其他重要字段作为详情\n    for (const [key, value] of Object.entries(content)) {\n      // 跳过已处理的字段\n      if (['status', 'message', 'error', 'msg', 'title', 'url'].includes(key)) continue;\n\n      // 特殊处理分页信息\n      if (key === 'pagination' && typeof value === 'object') {\n        for (const [pKey, pValue] of Object.entries(value)) {\n          result.details[`pagination.${pKey}`] = pValue;\n        }\n        continue;\n      }\n\n      // 优先展示这些重要字段\n      const importantFields = ['name', 'description', 'type', 'value', 'data'];\n      if (importantFields.includes(key)) {\n        result.details = { [key]: value, ...result.details };\n      } else {\n        // 添加到详情中\n        result.details[key] = value;\n      }\n    }\n\n    return { ...result, url };\n  }\n\n  return result;\n}\n\n/**\n * 获取状态图标\n */\nfunction getStatusIcon(type: string) {\n  switch (type) {\n    case 'success':\n      return <FiCheck className=\"text-green-500 dark:text-green-400\" size={18} />;\n    case 'error':\n      return <FiX className=\"text-red-500 dark:text-red-400\" size={18} />;\n    case 'empty':\n      return <FiInfo className=\"text-gray-400 dark:text-gray-500\" size={18} />;\n    case 'info':\n    default:\n      return <FiInfo className=\"text-blue-500 dark:text-blue-400\" size={18} />;\n  }\n}\n\n/**\n * 获取头部样式类\n */\nfunction getHeaderClasses(type: string): string {\n  switch (type) {\n    case 'success':\n      return 'border-green-100/50 dark:border-green-800/30 bg-green-50/50 dark:bg-green-900/20';\n    case 'error':\n      return 'border-red-100/50 dark:border-red-800/30 bg-red-50/50 dark:bg-red-900/20';\n    case 'empty':\n      return 'border-gray-100/50 dark:border-gray-700/30 bg-gray-50/50 dark:bg-gray-800/50';\n    case 'info':\n    default:\n      return 'border-blue-100/50 dark:border-blue-800/30 bg-blue-50/50 dark:bg-blue-900/20';\n  }\n}\n\n/**\n * 格式化键名\n */\nfunction formatKey(key: string): string {\n  return key\n    .replace(/([A-Z])/g, ' $1') // 在大写字母前插入空格\n    .replace(/^./, (str) => str.toUpperCase()) // 首字母大写\n    .replace(/[._]/g, ' '); // 将下划线和点替换为空格\n}\n\n/**\n * 格式化值显示\n */\nfunction formatValue(value: any): React.ReactNode {\n  if (value === null || value === undefined) {\n    return <span className=\"text-gray-400 dark:text-gray-500 italic\">None</span>;\n  }\n\n  if (typeof value === 'boolean') {\n    return value ? 'Yes' : 'No';\n  }\n\n  if (Array.isArray(value)) {\n    if (value.length === 0) {\n      return <span className=\"text-gray-400 dark:text-gray-500 italic\">Empty array</span>;\n    }\n\n    if (value.length <= 3 && value.every(item => typeof item === 'string' || typeof item === 'number')) {\n      return value.join(', ');\n    }\n    \n    return (\n      <pre className=\"text-xs bg-gray-50 dark:bg-gray-800/50 p-2 rounded\">\n        {JSON.stringify(value, null, 2)}\n      </pre>\n    );\n  }\n\n  if (typeof value === 'object') {\n    try {\n      return (\n        <pre className=\"text-xs bg-gray-50 dark:bg-gray-800/50 p-2 rounded\">\n          {JSON.stringify(value, null, 2)}\n        </pre>\n      );\n    } catch (e) {\n      return String(value);\n    }\n  }\n\n  // 检测URL并使其可点击\n  if (typeof value === 'string' && (value.startsWith('http://') || value.startsWith('https://'))) {\n    return (\n      <a \n        href={value} \n        target=\"_blank\" \n        rel=\"noopener noreferrer\"\n        className=\"text-accent-600 dark:text-accent-400 hover:underline\"\n      >\n        {value}\n      </a>\n    );\n  }\n\n  return String(value);\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AA6YA;;AA3YA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAIA;AAEA;AAKA;AACA;;;;;;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;;;;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAaA;AAZA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAKA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AAGA;AAAA;AACA;AAAA;;AACA;AAAA;;AAEA;AACA;;;;;AAEA;AACA;;;;;;AAiBA;AAAA;AACA;AACA;AAAA;;;;;AAEA;;;;;;;;;;;;AAKA;;AACA;AAAA;AACA;;;;;;AAEA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;AAOA;AAAA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;AAIA;AA3bA;;AACA;AACA;;;AAFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACZA;AACA;AACA;AAQA;;;;;;;;AAQA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;;AAEA;AACA;;AAEA;AAAA;;AACA;AACA;AAAA;AAAA;;;;;;;;;;;;AAIA;AACA;;AACA;AAAA;AAAA;;;;;;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;AAMA;AAAA;;AAEA;AACA;AAAA;;;;;;AAIA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;;AACA;AAAA;;AACA;AAAA;;;;;;;AAEA;AAAA;AACA;;;;;;;AALA;;;;;;;;;;;;;;;;AAcA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;AAOA;AA/EA;AAiFA;;AAEA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AAAA;AAAA;;;;;;AACA;AACA;AAAA;AAAA;;;;;;AACA;AACA;AAAA;AAAA;;;;;;AACA;AACA;AACA;AAAA;AAAA;;;;;;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AAEA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AAAA;AAAA;;;;;;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;;;;;;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;;;;AAGA;AAEA;AACA;AACA;AACA;AACA;;;;;;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;;;;AAGA;AAEA;AACA"}