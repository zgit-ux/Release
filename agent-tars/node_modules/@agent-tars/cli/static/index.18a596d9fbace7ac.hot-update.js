"use strict";
self["webpackHotUpdate_agent_tars_web_ui"]("index", {
"./src/entry.css": (function (module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
// extracted by css-extract-rspack-plugin

    if(true) {
      (function() {
        var localsJsonString = undefined;
        // 1749663233932
        var cssReload = (__webpack_require__("../node_modules/.pnpm/@rspack+core@1.3.9_@swc+helpers@0.5.17/node_modules/@rspack/core/dist/cssExtractHmr.js")/* .cssReload */.cssReload)(module.id, {});
        // only invalidate when locals change
        if (
          module.hot.data &&
          module.hot.data.value &&
          module.hot.data.value !== localsJsonString
        ) {
          module.hot.invalidate();
        } else {
          module.hot.accept();
        }
        module.hot.dispose(function(data) {
          data.value = localsJsonString;
          cssReload();
        });
      })();
    }
  

}),
"./src/main/state/actions/connectionActions.ts": (function (module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  checkConnectionStatusAction: () => (checkConnectionStatusAction),
  initConnectionMonitoringAction: () => (initConnectionMonitoringAction)
});
/* ESM import */var jotai__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../node_modules/.pnpm/jotai@2.12.5_@types+react@18.3.23_react@18.3.1/node_modules/jotai/esm/vanilla.mjs");
/* ESM import */var _common_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/common/constants/index.ts");
/* ESM import */var _services_apiService__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/main/services/apiService.ts");
/* ESM import */var _services_socketService__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/main/services/socketService.ts");
/* ESM import */var _atoms_ui__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/main/state/atoms/ui.ts");
/* provided dependency */ var $ReactRefreshRuntime$ = __webpack_require__("../node_modules/.pnpm/@rspack+plugin-react-refresh@1.0.3_react-refresh@0.16.0/node_modules/@rspack/plugin-react-refresh/client/reactRefresh.js");





/**
 * Check server connection status
 */ const checkConnectionStatusAction = (0,jotai__WEBPACK_IMPORTED_MODULE_4__.atom)(null, async (get, set)=>{
    const currentStatus = get(_atoms_ui__WEBPACK_IMPORTED_MODULE_3__.connectionStatusAtom);
    try {
        const isConnected = await _services_apiService__WEBPACK_IMPORTED_MODULE_1__.apiService.checkServerHealth();
        set(_atoms_ui__WEBPACK_IMPORTED_MODULE_3__.connectionStatusAtom, {
            ...currentStatus,
            connected: isConnected,
            lastConnected: isConnected ? Date.now() : currentStatus.lastConnected,
            lastError: isConnected ? null : currentStatus.lastError
        });
        return isConnected;
    } catch (error) {
        set(_atoms_ui__WEBPACK_IMPORTED_MODULE_3__.connectionStatusAtom, {
            ...currentStatus,
            connected: false,
            lastError: error instanceof Error ? error.message : String(error)
        });
        return false;
    }
});
/**
 * Initialize connection monitoring
 */ const initConnectionMonitoringAction = (0,jotai__WEBPACK_IMPORTED_MODULE_4__.atom)(null, (get, set)=>{
    // Perform initial check
    set(checkConnectionStatusAction);
    // Set up socket event listeners
    _services_socketService__WEBPACK_IMPORTED_MODULE_2__.socketService.on(_common_constants__WEBPACK_IMPORTED_MODULE_0__.SOCKET_EVENTS.CONNECT, ()=>{
        set(_atoms_ui__WEBPACK_IMPORTED_MODULE_3__.connectionStatusAtom, (prev)=>({
                ...prev,
                connected: true,
                lastConnected: Date.now(),
                lastError: null,
                reconnecting: false
            }));
    });
    _services_socketService__WEBPACK_IMPORTED_MODULE_2__.socketService.on(_common_constants__WEBPACK_IMPORTED_MODULE_0__.SOCKET_EVENTS.DISCONNECT, (reason)=>{
        set(_atoms_ui__WEBPACK_IMPORTED_MODULE_3__.connectionStatusAtom, (prev)=>({
                ...prev,
                connected: false,
                lastError: `Disconnected: ${reason}`,
                reconnecting: true
            }));
    });
    _services_socketService__WEBPACK_IMPORTED_MODULE_2__.socketService.on(_common_constants__WEBPACK_IMPORTED_MODULE_0__.SOCKET_EVENTS.RECONNECT_ATTEMPT, ()=>{
        set(_atoms_ui__WEBPACK_IMPORTED_MODULE_3__.connectionStatusAtom, (prev)=>({
                ...prev,
                reconnecting: true
            }));
    });
    _services_socketService__WEBPACK_IMPORTED_MODULE_2__.socketService.on(_common_constants__WEBPACK_IMPORTED_MODULE_0__.SOCKET_EVENTS.RECONNECT_FAILED, ()=>{
        set(_atoms_ui__WEBPACK_IMPORTED_MODULE_3__.connectionStatusAtom, (prev)=>({
                ...prev,
                connected: false,
                reconnecting: false,
                lastError: 'Failed to reconnect after multiple attempts'
            }));
    });
    // Set up periodic health checks
    const intervalId = setInterval(()=>{
        set(checkConnectionStatusAction);
    }, 30000); // Check every 30 seconds
    // Return cleanup function
    return ()=>{
        clearInterval(intervalId);
        _services_socketService__WEBPACK_IMPORTED_MODULE_2__.socketService.off(_common_constants__WEBPACK_IMPORTED_MODULE_0__.SOCKET_EVENTS.CONNECT, ()=>{});
        _services_socketService__WEBPACK_IMPORTED_MODULE_2__.socketService.off(_common_constants__WEBPACK_IMPORTED_MODULE_0__.SOCKET_EVENTS.DISCONNECT, ()=>{});
        _services_socketService__WEBPACK_IMPORTED_MODULE_2__.socketService.off(_common_constants__WEBPACK_IMPORTED_MODULE_0__.SOCKET_EVENTS.RECONNECT_ATTEMPT, ()=>{});
        _services_socketService__WEBPACK_IMPORTED_MODULE_2__.socketService.off(_common_constants__WEBPACK_IMPORTED_MODULE_0__.SOCKET_EVENTS.RECONNECT_FAILED, ()=>{});
    };
});

function $RefreshSig$() {
  return $ReactRefreshRuntime$.createSignatureFunctionForTransform();
}
function $RefreshReg$(type, id) {
  $ReactRefreshRuntime$.register(type, module.id + "_" + id);
}
Promise.resolve().then(function() {
  $ReactRefreshRuntime$.refresh(module.id, module.hot);
});


}),

},function(__webpack_require__) {
// webpack/runtime/get_full_hash
(() => {
__webpack_require__.h = () => ("d4d584199572f1cd")
})();

}
);
//# sourceMappingURL=index.18a596d9fbace7ac.hot-update.js.map