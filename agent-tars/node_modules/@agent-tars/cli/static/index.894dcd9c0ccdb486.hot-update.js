"use strict";
self["webpackHotUpdate_agent_tars_web_ui"]("index", {
"./src/entry.css": (function (module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
// extracted by css-extract-rspack-plugin

    if(true) {
      (function() {
        var localsJsonString = undefined;
        // 1749661930480
        var cssReload = (__webpack_require__("../node_modules/.pnpm/@rspack+core@1.3.9_@swc+helpers@0.5.17/node_modules/@rspack/core/dist/cssExtractHmr.js")/* .cssReload */.cssReload)(module.id, {});
        // only invalidate when locals change
        if (
          module.hot.data &&
          module.hot.data.value &&
          module.hot.data.value !== localsJsonString
        ) {
          module.hot.invalidate();
        } else {
          module.hot.accept();
        }
        module.hot.dispose(function(data) {
          data.value = localsJsonString;
          cssReload();
        });
      })();
    }
  

}),
"./src/main/constants/index.ts": (function (module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  API_BASE_URL: () => (API_BASE_URL),
  API_ENDPOINTS: () => (API_ENDPOINTS),
  CONNECTION_SETTINGS: () => (CONNECTION_SETTINGS),
  MESSAGE_ROLES: () => (MESSAGE_ROLES),
  SOCKET_EVENTS: () => (SOCKET_EVENTS),
  STORAGE_KEYS: () => (STORAGE_KEYS),
  TOOL_TYPES: () => (TOOL_TYPES)
});
/* provided dependency */ var $ReactRefreshRuntime$ = __webpack_require__("../node_modules/.pnpm/@rspack+plugin-react-refresh@1.0.3_react-refresh@0.16.0/node_modules/@rspack/plugin-react-refresh/client/reactRefresh.js");
/**
 * Base API URL for server communication
 */ const API_BASE_URL = window.AGENT_TARS_BASE_URL ?? 'http://localhost:3000';
/**
 * Default API endpoints
 */ const API_ENDPOINTS = {
    SESSIONS: '/api/sessions',
    CREATE_SESSION: '/api/sessions/create',
    SESSION_DETAILS: '/api/sessions/details',
    SESSION_EVENTS: '/api/sessions/events',
    SESSION_STATUS: '/api/sessions/status',
    UPDATE_SESSION: '/api/sessions/update',
    DELETE_SESSION: '/api/sessions/delete',
    QUERY: '/api/sessions/query',
    QUERY_STREAM: '/api/sessions/query/stream',
    ABORT: '/api/sessions/abort',
    GENERATE_SUMMARY: '/api/sessions/generate-summary',
    HEALTH: '/api/health',
    BROWSER_CONTROL_INFO: '/api/sessions/browser-control',
    MODEL_INFO: '/api/model-info'
};
/**
 * WebSocket events
 */ const SOCKET_EVENTS = {
    CONNECT: 'connect',
    DISCONNECT: 'disconnect',
    ERROR: 'error',
    RECONNECT_ATTEMPT: 'reconnect_attempt',
    RECONNECT_FAILED: 'reconnect_failed',
    JOIN_SESSION: 'join-session',
    AGENT_EVENT: 'agent-event',
    AGENT_STATUS: 'agent-status',
    PING: 'ping',
    SEND_QUERY: 'send-query',
    ABORT_QUERY: 'abort-query'
};
/**
 * Local storage keys
 */ const STORAGE_KEYS = {
    ACTIVE_SESSION: 'agent-tars-active-session',
    THEME: 'agent-tars-theme'
};
/**
 * Tool types
 */ const TOOL_TYPES = {
    SEARCH: 'search',
    BROWSER: 'browser',
    COMMAND: 'command',
    IMAGE: 'image',
    FILE: 'file',
    BROWSER_CONTROL: 'browser_vision_control',
    OTHER: 'other'
};
/**
 * Message roles
 */ const MESSAGE_ROLES = {
    USER: 'user',
    ASSISTANT: 'assistant',
    SYSTEM: 'system',
    TOOL: 'tool'
};
/**
 * Connection settings
 */ const CONNECTION_SETTINGS = {
    HEARTBEAT_INTERVAL: 15000,
    MAX_MISSED_HEARTBEATS: 2,
    MAX_RECONNECT_ATTEMPTS: 5,
    RECONNECTION_DELAY: 1000,
    RECONNECTION_DELAY_MAX: 5000
};

function $RefreshSig$() {
  return $ReactRefreshRuntime$.createSignatureFunctionForTransform();
}
function $RefreshReg$(type, id) {
  $ReactRefreshRuntime$.register(type, module.id + "_" + id);
}
Promise.resolve().then(function() {
  $ReactRefreshRuntime$.refresh(module.id, module.hot);
});


}),

},function(__webpack_require__) {
// webpack/runtime/get_full_hash
(() => {
__webpack_require__.h = () => ("473c9edd3f509cef")
})();

}
);
//# sourceMappingURL=index.894dcd9c0ccdb486.hot-update.js.map