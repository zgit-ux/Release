"use strict";
self["webpackHotUpdate_agent_tars_web_ui"]("index", {
"./src/entry.css": (function (module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
// extracted by css-extract-rspack-plugin

    if(true) {
      (function() {
        var localsJsonString = undefined;
        // 1751739067017
        var cssReload = (__webpack_require__("../node_modules/.pnpm/@rspack+core@1.3.9_@swc+helpers@0.5.17/node_modules/@rspack/core/dist/cssExtractHmr.js")/* .cssReload */.cssReload)(module.id, {});
        // only invalidate when locals change
        if (
          module.hot.data &&
          module.hot.data.value &&
          module.hot.data.value !== localsJsonString
        ) {
          module.hot.invalidate();
        } else {
          module.hot.accept();
        }
        module.hot.dispose(function(data) {
          data.value = localsJsonString;
          cssReload();
        });
      })();
    }
  

}),
"./src/common/state/actions/eventProcessor.ts": (function (module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  processEventAction: () => (processEventAction),
  updateProcessingStatusAction: () => (updateProcessingStatusAction)
});
/* ESM import */var jotai__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("../node_modules/.pnpm/jotai@2.12.5_@types+react@18.3.23_react@18.3.1/node_modules/jotai/esm/vanilla.mjs");
/* ESM import */var uuid__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-browser/v4.js");
/* ESM import */var _common_utils_formatters__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./src/common/utils/formatters.ts");
/* ESM import */var _atoms_message__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./src/common/state/atoms/message.ts");
/* ESM import */var _atoms_tool__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/common/state/atoms/tool.ts");
/* ESM import */var _atoms_ui__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/common/state/atoms/ui.ts");
/* ESM import */var _atoms_plan__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/common/state/atoms/plan.ts");
/* ESM import */var _atoms_replay__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./src/common/state/atoms/replay.ts");
/* provided dependency */ var $ReactRefreshRuntime$ = __webpack_require__("../node_modules/.pnpm/@rspack+plugin-react-refresh@1.0.3_react-refresh@0.16.0/node_modules/@rspack/plugin-react-refresh/client/reactRefresh.js");
/* eslint-disable @typescript-eslint/no-explicit-any */ 







// 存储工具调用参数的映射表 (不是 Atom，是内部缓存)
const toolCallArgumentsMap = new Map();
/**
 * Process a single event and update the appropriate state atoms
 */ const processEventAction = (0,jotai__WEBPACK_IMPORTED_MODULE_6__.atom)(null, (get, set, params)=>{
    const { sessionId, event } = params;
    const replayState = get(_atoms_replay__WEBPACK_IMPORTED_MODULE_5__.replayStateAtom);
    const isReplayMode = replayState.isActive;
    switch(event.type){
        case 'user_message':
            handleUserMessage(set, sessionId, event);
            break;
        case 'assistant_message':
            handleAssistantMessage(get, set, sessionId, event);
            break;
        case 'assistant_streaming_message':
            if (!isReplayMode) {
                handleStreamingMessage(get, set, sessionId, event);
            }
            break;
        case 'assistant_thinking_message':
        case 'assistant_streaming_thinking_message':
            handleThinkingMessage(get, set, sessionId, event);
            break;
        case 'assistant_streaming_tool_call':
            if (!isReplayMode) {
                handleStreamingToolCall(get, set, sessionId, event);
            }
            break;
        case 'tool_call':
            handleToolCall(set, sessionId, event);
            break;
        case 'tool_result':
            handleToolResult(get, set, sessionId, event);
            break;
        case 'system':
            handleSystemMessage(set, sessionId, event);
            break;
        case 'environment_input':
            handleEnvironmentInput(get, set, sessionId, event);
            break;
        case 'agent_run_start':
            if (event.provider || event.model) {
                set(_atoms_ui__WEBPACK_IMPORTED_MODULE_3__.modelInfoAtom, {
                    provider: event.provider || '',
                    model: event.model || ''
                });
            }
            set(_atoms_ui__WEBPACK_IMPORTED_MODULE_3__.isProcessingAtom, true);
            break;
        case 'agent_run_end':
            set(_atoms_ui__WEBPACK_IMPORTED_MODULE_3__.isProcessingAtom, false);
            break;
        case 'plan_start':
            handlePlanStart(set, sessionId, event);
            break;
        case 'plan_update':
            handlePlanUpdate(set, sessionId, event);
            break;
        case 'plan_finish':
            handlePlanFinish(set, sessionId, event);
            break;
        case 'final_answer':
            handleFinalAnswer(get, set, sessionId, event);
            break;
        case 'final_answer_streaming':
            if (!isReplayMode) {
                handleFinalAnswerStreaming(get, set, sessionId, event);
            }
            break;
    }
});
/**
 * Handle user message event
 */ function handleUserMessage(set, sessionId, event) {
    const userMessage = {
        id: event.id,
        role: 'user',
        content: event.content,
        timestamp: event.timestamp
    };
    set(_atoms_message__WEBPACK_IMPORTED_MODULE_1__.messagesAtom, (prev)=>{
        const sessionMessages = prev[sessionId] || [];
        return {
            ...prev,
            [sessionId]: [
                ...sessionMessages,
                userMessage
            ]
        };
    });
    // Check for images in user message and set active panel content if found
    if (Array.isArray(event.content)) {
        const images = event.content.filter((part)=>part.type === 'image_url');
        if (images.length > 0) {
            set(_atoms_ui__WEBPACK_IMPORTED_MODULE_3__.activePanelContentAtom, {
                type: 'image',
                source: images[0].image_url.url,
                title: 'User Upload',
                timestamp: Date.now()
            });
        }
    }
}
/**
 * Handle assistant message event (complete message)
 */ function handleAssistantMessage(get, set, sessionId, event) {
    // 获取消息ID
    const messageId = event.messageId;
    set(_atoms_message__WEBPACK_IMPORTED_MODULE_1__.messagesAtom, (prev)=>{
        const sessionMessages = prev[sessionId] || [];
        // 检查是否已存在相同messageId的消息
        if (messageId) {
            const existingMessageIndex = sessionMessages.findIndex((msg)=>msg.messageId === messageId);
            // 如果找到了现有消息，更新它而不是添加新消息
            if (existingMessageIndex !== -1) {
                const updatedMessages = [
                    ...sessionMessages
                ];
                updatedMessages[existingMessageIndex] = {
                    ...updatedMessages[existingMessageIndex],
                    content: event.content,
                    timestamp: event.timestamp,
                    toolCalls: event.toolCalls,
                    finishReason: event.finishReason,
                    isStreaming: false
                };
                return {
                    ...prev,
                    [sessionId]: updatedMessages
                };
            }
        }
        // 没有找到现有消息，添加新消息
        return {
            ...prev,
            [sessionId]: [
                ...sessionMessages,
                {
                    id: event.id,
                    role: 'assistant',
                    content: event.content,
                    timestamp: event.timestamp,
                    toolCalls: event.toolCalls,
                    finishReason: event.finishReason,
                    messageId: messageId
                }
            ]
        };
    });
    if (event.finishReason !== 'tool_calls') {
        // 检查是否需要关联最近的环境输入
        const currentMessages = get(_atoms_message__WEBPACK_IMPORTED_MODULE_1__.messagesAtom)[sessionId] || [];
        // 从后往前查找最近的环境输入
        for(let i = currentMessages.length - 1; i >= 0; i--){
            const msg = currentMessages[i];
            if (msg.role === 'environment' && Array.isArray(msg.content)) {
                const imageContent = msg.content.find((item)=>item.type === 'image_url' && item.image_url && item.image_url.url);
                if (imageContent) {
                    set(_atoms_ui__WEBPACK_IMPORTED_MODULE_3__.activePanelContentAtom, {
                        type: 'image',
                        source: msg.content,
                        title: msg.description || 'Final Browser State',
                        timestamp: msg.timestamp,
                        environmentId: msg.id
                    });
                    break;
                }
            }
        }
    }
    set(_atoms_ui__WEBPACK_IMPORTED_MODULE_3__.isProcessingAtom, false);
}
/**
 * Handle streaming message event (incremental content)
 */ function handleStreamingMessage(get, set, sessionId, event) {
    set(_atoms_message__WEBPACK_IMPORTED_MODULE_1__.messagesAtom, (prev)=>{
        const sessionMessages = prev[sessionId] || [];
        const messageIdToFind = event.messageId;
        let existingMessageIndex = -1;
        // 优先按messageId查找
        if (messageIdToFind) {
            existingMessageIndex = sessionMessages.findIndex((msg)=>msg.messageId === messageIdToFind);
        } else if (sessionMessages.length > 0) {
            const lastMessageIndex = sessionMessages.length - 1;
            const lastMessage = sessionMessages[lastMessageIndex];
            if (lastMessage && lastMessage.isStreaming) {
                existingMessageIndex = lastMessageIndex;
            }
        }
        // 更新现有消息
        if (existingMessageIndex !== -1) {
            const existingMessage = sessionMessages[existingMessageIndex];
            const updatedMessage = {
                ...existingMessage,
                content: typeof existingMessage.content === 'string' ? existingMessage.content + event.content : event.content,
                isStreaming: !event.isComplete,
                toolCalls: event.toolCalls || existingMessage.toolCalls
            };
            return {
                ...prev,
                [sessionId]: [
                    ...sessionMessages.slice(0, existingMessageIndex),
                    updatedMessage,
                    ...sessionMessages.slice(existingMessageIndex + 1)
                ]
            };
        }
        // 创建新消息
        const newMessage = {
            id: event.id || (0,uuid__WEBPACK_IMPORTED_MODULE_7__["default"])(),
            role: 'assistant',
            content: event.content,
            timestamp: event.timestamp,
            isStreaming: !event.isComplete,
            toolCalls: event.toolCalls,
            messageId: event.messageId
        };
        return {
            ...prev,
            [sessionId]: [
                ...sessionMessages,
                newMessage
            ]
        };
    });
    if (event.isComplete) {
        set(_atoms_ui__WEBPACK_IMPORTED_MODULE_3__.isProcessingAtom, false);
    }
}
/**
 * Handle thinking message event
 */ function handleThinkingMessage(get, set, sessionId, event) {
    set(_atoms_message__WEBPACK_IMPORTED_MODULE_1__.messagesAtom, (prev)=>{
        const sessionMessages = prev[sessionId] || [];
        const lastAssistantIndex = [
            ...sessionMessages
        ].reverse().findIndex((m)=>m.role === 'assistant');
        if (lastAssistantIndex !== -1) {
            const actualIndex = sessionMessages.length - 1 - lastAssistantIndex;
            const message = sessionMessages[actualIndex];
            return {
                ...prev,
                [sessionId]: [
                    ...sessionMessages.slice(0, actualIndex),
                    {
                        ...message,
                        thinking: event.content
                    },
                    ...sessionMessages.slice(actualIndex + 1)
                ]
            };
        }
        return prev;
    });
}
/**
 * Handle tool call event - store arguments for later use
 */ function handleToolCall(set, sessionId, event) {
    // 保存工具调用的参数信息以便后续使用
    if (event.toolCallId && event.arguments) {
        toolCallArgumentsMap.set(event.toolCallId, event.arguments);
    }
}
function handleToolResult(set, sessionId, event) {
    // Clear any streaming state for this tool call
    set(_atoms_tool__WEBPACK_IMPORTED_MODULE_2__.streamingToolCallsAtom, (prev)=>{
        const sessionCalls = prev[sessionId];
        if (sessionCalls && sessionCalls[event.toolCallId]) {
            const updatedSessionCalls = {
                ...sessionCalls
            };
            delete updatedSessionCalls[event.toolCallId];
            return {
                ...prev,
                [sessionId]: updatedSessionCalls
            };
        }
        return prev;
    });
    // 获取之前存储的参数信息
    const args = toolCallArgumentsMap.get(event.toolCallId);
    const result = {
        id: (0,uuid__WEBPACK_IMPORTED_MODULE_7__["default"])(),
        toolCallId: event.toolCallId,
        name: event.name,
        content: event.content,
        timestamp: event.timestamp,
        error: event.error,
        type: (0,_common_utils_formatters__WEBPACK_IMPORTED_MODULE_0__.determineToolType)(event.name, event.content),
        arguments: args,
        _extra: event._extra
    };
    // 1. 先更新消息atom和工具结果 - 确保chat UI能立即响应
    set(_atoms_message__WEBPACK_IMPORTED_MODULE_1__.messagesAtom, (prev)=>{
        const sessionMessages = prev[sessionId] || [];
        // 找到对应的消息并添加toolResults
        const messageIndex = [
            ...sessionMessages
        ].reverse().findIndex((m)=>{
            var _m_toolCalls;
            return (_m_toolCalls = m.toolCalls) === null || _m_toolCalls === void 0 ? void 0 : _m_toolCalls.some((tc)=>tc.id === result.toolCallId);
        });
        if (messageIndex !== -1) {
            const actualIndex = sessionMessages.length - 1 - messageIndex;
            const message = sessionMessages[actualIndex];
            const toolResults = message.toolResults || [];
            const updatedMessage = {
                ...message,
                toolResults: [
                    ...toolResults,
                    result
                ]
            };
            return {
                ...prev,
                [sessionId]: [
                    ...sessionMessages.slice(0, actualIndex),
                    updatedMessage,
                    ...sessionMessages.slice(actualIndex + 1)
                ]
            };
        }
        return prev;
    });
    // 2. 同时更新工具结果atom
    set(_atoms_tool__WEBPACK_IMPORTED_MODULE_2__.toolResultsAtom, (prev)=>{
        const sessionResults = prev[sessionId] || [];
        return {
            ...prev,
            [sessionId]: [
                ...sessionResults,
                result
            ]
        };
    });
    // 3. 最后更新workspace面板内容 - 保持时序一致
    if (result.type === 'browser_vision_control') {
        set(_atoms_ui__WEBPACK_IMPORTED_MODULE_3__.activePanelContentAtom, (prev)=>{
            if (prev && prev.type === 'image' && prev.environmentId) {
                // 在这里添加环境ID到已处理列表，避免重复渲染
                const environmentId = prev.environmentId;
                return {
                    ...prev,
                    type: 'browser_vision_control',
                    source: event.content,
                    title: prev.title,
                    timestamp: event.timestamp,
                    toolCallId: event.toolCallId,
                    error: event.error,
                    arguments: args,
                    originalContent: prev.source,
                    environmentId: environmentId,
                    processedEnvironmentIds: [
                        environmentId
                    ]
                };
            } else {
                return {
                    type: result.type,
                    source: result.content,
                    title: result.name,
                    timestamp: result.timestamp,
                    toolCallId: result.toolCallId,
                    error: result.error,
                    arguments: args
                };
            }
        });
    } else {
        set(_atoms_ui__WEBPACK_IMPORTED_MODULE_3__.activePanelContentAtom, {
            type: result.type,
            source: result.content,
            title: result.name,
            timestamp: result.timestamp,
            toolCallId: result.toolCallId,
            error: result.error,
            arguments: args,
            _extra: result._extra
        });
    }
    // Store in the map for future reference
    _atoms_tool__WEBPACK_IMPORTED_MODULE_2__.toolCallResultMap.set(result.toolCallId, result);
}
/**
 * Handle system message event
 */ function handleSystemMessage(set, sessionId, event) {
    const systemMessage = {
        id: (0,uuid__WEBPACK_IMPORTED_MODULE_7__["default"])(),
        role: 'system',
        content: event.message,
        timestamp: event.timestamp || Date.now()
    };
    set(_atoms_message__WEBPACK_IMPORTED_MODULE_1__.messagesAtom, (prev)=>{
        const sessionMessages = prev[sessionId] || [];
        return {
            ...prev,
            [sessionId]: [
                ...sessionMessages,
                systemMessage
            ]
        };
    });
}
/**
 * Handle environment input event
 * Adds it to messages but doesn't set it as active panel content
 */ function handleEnvironmentInput(get, set, sessionId, event) {
    const environmentMessage = {
        id: event.id,
        role: 'environment',
        content: event.content,
        timestamp: event.timestamp,
        description: event.description || 'Environment Input'
    };
    set(_atoms_message__WEBPACK_IMPORTED_MODULE_1__.messagesAtom, (prev)=>{
        const sessionMessages = prev[sessionId] || [];
        return {
            ...prev,
            [sessionId]: [
                ...sessionMessages,
                environmentMessage
            ]
        };
    });
    // 检查是否包含图片内容并直接设置为活动面板内容
    if (Array.isArray(event.content)) {
        const imageContent = event.content.find((item)=>item.type === 'image_url' && item.image_url && item.image_url.url);
        if (imageContent && imageContent.image_url) {
            // 获取当前面板状态
            const currentPanel = get(_atoms_ui__WEBPACK_IMPORTED_MODULE_3__.activePanelContentAtom);
            // 只有当前面板是 browser_vision_control 类型时才更新
            if (currentPanel && currentPanel.type === 'browser_vision_control') {
                set(_atoms_ui__WEBPACK_IMPORTED_MODULE_3__.activePanelContentAtom, {
                    ...currentPanel,
                    type: 'browser_vision_control',
                    title: `${currentPanel.title} \xb7 Screenshot Update`,
                    timestamp: event.timestamp,
                    originalContent: event.content,
                    environmentId: event.id
                });
            }
        // 不是 browser_vision_control 类型时完全跳过 set 操作
        // 这样避免了 Browser Screenshot 被重复渲染
        }
    }
}
/**
 * Handle plan start event
 */ function handlePlanStart(set, sessionId, event) {
    set(_atoms_plan__WEBPACK_IMPORTED_MODULE_4__.plansAtom, (prev)=>({
            ...prev,
            [sessionId]: {
                steps: [],
                isComplete: false,
                summary: null,
                hasGeneratedPlan: true,
                keyframes: []
            }
        }));
}
/**
 * Handle plan update event
 */ function handlePlanUpdate(set, sessionId, event) {
    console.log('Plan update event:', event);
    set(_atoms_plan__WEBPACK_IMPORTED_MODULE_4__.plansAtom, (prev)=>{
        const currentPlan = prev[sessionId] || {
            steps: [],
            isComplete: false,
            summary: null,
            hasGeneratedPlan: true,
            keyframes: []
        };
        // Create a new keyframe for this update
        const newKeyframe = {
            timestamp: event.timestamp || Date.now(),
            steps: event.steps,
            isComplete: false,
            summary: null
        };
        // Add the keyframe to the history
        const keyframes = [
            ...currentPlan.keyframes || [],
            newKeyframe
        ];
        return {
            ...prev,
            [sessionId]: {
                ...currentPlan,
                steps: event.steps,
                hasGeneratedPlan: true,
                keyframes
            }
        };
    });
}
/**
 * Handle plan finish event
 */ function handlePlanFinish(set, sessionId, event) {
    console.log('Plan finish event:', event);
    set(_atoms_plan__WEBPACK_IMPORTED_MODULE_4__.plansAtom, (prev)=>{
        const currentPlan = prev[sessionId] || {
            steps: [],
            isComplete: false,
            summary: null,
            hasGeneratedPlan: true,
            keyframes: []
        };
        // Create a final keyframe for the completed plan
        const finalKeyframe = {
            timestamp: event.timestamp || Date.now(),
            steps: currentPlan.steps,
            isComplete: true,
            summary: event.summary
        };
        // Add the final keyframe to the history
        const keyframes = [
            ...currentPlan.keyframes || [],
            finalKeyframe
        ];
        return {
            ...prev,
            [sessionId]: {
                ...currentPlan,
                isComplete: true,
                summary: event.summary,
                keyframes
            }
        };
    });
}
/**
 * Handle final answer event (complete answer/report)
 */ function handleFinalAnswer(get, set, sessionId, event) {
    const messageId = event.messageId || `final-answer-${(0,uuid__WEBPACK_IMPORTED_MODULE_7__["default"])()}`;
    // 始终将内容当作研究报告处理，移除JSON_DATA状态
    // 设置活动面板内容为研究报告
    set(_atoms_ui__WEBPACK_IMPORTED_MODULE_3__.activePanelContentAtom, {
        type: 'research_report',
        source: event.content,
        title: event.title || 'Research Report',
        timestamp: event.timestamp,
        isDeepResearch: true,
        messageId
    });
    // 添加消息到聊天引用报告
    const finalAnswerMessage = {
        id: event.id || (0,uuid__WEBPACK_IMPORTED_MODULE_7__["default"])(),
        role: 'final_answer',
        content: event.content,
        timestamp: event.timestamp,
        messageId,
        isDeepResearch: true,
        title: event.title || 'Research Report'
    };
    set(_atoms_message__WEBPACK_IMPORTED_MODULE_1__.messagesAtom, (prev)=>{
        const sessionMessages = prev[sessionId] || [];
        return {
            ...prev,
            [sessionId]: [
                ...sessionMessages,
                finalAnswerMessage
            ]
        };
    });
    // 标记处理完成
    set(_atoms_ui__WEBPACK_IMPORTED_MODULE_3__.isProcessingAtom, false);
}
function handleFinalAnswerStreaming(get, set, sessionId, event) {
    const messageId = event.messageId || `final-answer-${(0,uuid__WEBPACK_IMPORTED_MODULE_7__["default"])()}`;
    // 从当前消息列表中查找已有的相同 messageId 的消息
    const messages = get(_atoms_message__WEBPACK_IMPORTED_MODULE_1__.messagesAtom)[sessionId] || [];
    const existingMessageIndex = messages.findIndex((msg)=>msg.messageId === messageId);
    // 当处理一系列流式事件时，将内容追加到现有消息，或创建新消息
    set(_atoms_message__WEBPACK_IMPORTED_MODULE_1__.messagesAtom, (prev)=>{
        const sessionMessages = prev[sessionId] || [];
        // 如果找到现有消息，则更新它
        if (existingMessageIndex >= 0) {
            const existingMessage = sessionMessages[existingMessageIndex];
            const updatedMessage = {
                ...existingMessage,
                content: typeof existingMessage.content === 'string' ? existingMessage.content + event.content : event.content,
                isStreaming: !event.isComplete,
                timestamp: event.timestamp
            };
            return {
                ...prev,
                [sessionId]: [
                    ...sessionMessages.slice(0, existingMessageIndex),
                    updatedMessage,
                    ...sessionMessages.slice(existingMessageIndex + 1)
                ]
            };
        }
        // 否则创建新消息
        const newMessage = {
            id: event.id || (0,uuid__WEBPACK_IMPORTED_MODULE_7__["default"])(),
            role: 'final_answer',
            content: event.content,
            timestamp: event.timestamp,
            messageId,
            isDeepResearch: true,
            isStreaming: !event.isComplete,
            title: event.title || 'Research Report'
        };
        return {
            ...prev,
            [sessionId]: [
                ...sessionMessages,
                newMessage
            ]
        };
    });
    // 更新活动面板内容 - 同步面板与消息状态
    set(_atoms_ui__WEBPACK_IMPORTED_MODULE_3__.activePanelContentAtom, (prev)=>{
        // 如果是新流或不同的messageId，重新开始
        if (!prev || prev.type !== 'research_report' || prev.messageId !== messageId) {
            return {
                role: 'assistant',
                type: 'research_report',
                source: event.content,
                title: event.title || 'Research Report (Generating...)',
                timestamp: event.timestamp,
                isDeepResearch: true,
                messageId,
                isStreaming: !event.isComplete
            };
        }
        // 否则追加到现有内容
        return {
            ...prev,
            source: prev.source + event.content,
            isStreaming: !event.isComplete,
            timestamp: event.timestamp,
            title: event.title || prev.title
        };
    });
    // 如果这是第一个数据块，也添加一条消息到聊天
    const prevActivePanelContent = get(_atoms_ui__WEBPACK_IMPORTED_MODULE_3__.activePanelContentAtom);
    if (!prevActivePanelContent || prevActivePanelContent.messageId !== messageId) {
        const initialMessage = {
            id: event.id || (0,uuid__WEBPACK_IMPORTED_MODULE_7__["default"])(),
            role: 'final_answer',
            content: event.content,
            timestamp: event.timestamp,
            messageId,
            isDeepResearch: true,
            isStreaming: !event.isComplete,
            title: event.title || 'Research Report'
        };
        set(_atoms_message__WEBPACK_IMPORTED_MODULE_1__.messagesAtom, (prev)=>{
            const sessionMessages = prev[sessionId] || [];
            return {
                ...prev,
                [sessionId]: [
                    ...sessionMessages,
                    initialMessage
                ]
            };
        });
    } else if (event.isComplete) {
        // 当流式生成完成时，更新消息的完整内容
        const fullContent = get(_atoms_ui__WEBPACK_IMPORTED_MODULE_3__.activePanelContentAtom).source;
        set(_atoms_message__WEBPACK_IMPORTED_MODULE_1__.messagesAtom, (prev)=>{
            const sessionMessages = prev[sessionId] || [];
            const messageIndex = sessionMessages.findIndex((msg)=>msg.messageId === messageId);
            if (messageIndex >= 0) {
                const updatedMessages = [
                    ...sessionMessages
                ];
                updatedMessages[messageIndex] = {
                    ...updatedMessages[messageIndex],
                    content: fullContent,
                    isStreaming: false,
                    title: event.title || updatedMessages[messageIndex].title || 'Research Report'
                };
                return {
                    ...prev,
                    [sessionId]: updatedMessages
                };
            }
            return prev;
        });
    }
    // 如果这是最后一个数据块，标记处理完成
    if (event.isComplete) {
        set(_atoms_ui__WEBPACK_IMPORTED_MODULE_3__.isProcessingAtom, false);
    }
}
// Handle streaming tool call event - tracks tool calls as they're being constructed
function handleStreamingToolCall(get, set, sessionId, event) {
    const currentStreamingCalls = get(_atoms_tool__WEBPACK_IMPORTED_MODULE_2__.streamingToolCallsAtom);
    const sessionStreamingCalls = currentStreamingCalls[sessionId] || {};
    const existingCall = sessionStreamingCalls[event.toolCallId];
    const now = Date.now();
    // Create or update the streaming tool call
    const streamingCall = {
        toolCallId: event.toolCallId,
        toolName: event.toolName,
        messageId: event.messageId || '',
        accumulatedArguments: existingCall ? existingCall.accumulatedArguments + event.arguments : event.arguments,
        isComplete: event.isComplete,
        startTimestamp: existingCall ? existingCall.startTimestamp : now,
        lastUpdateTimestamp: now
    };
    // Update the streaming tool calls state
    set(_atoms_tool__WEBPACK_IMPORTED_MODULE_2__.streamingToolCallsAtom, (prev)=>({
            ...prev,
            [sessionId]: {
                ...prev[sessionId],
                [event.toolCallId]: streamingCall
            }
        }));
    // If this is the first chunk and we have a tool name, show it in the workspace
    if (!existingCall && event.toolName && event.toolName.trim()) {
        // Determine if this tool call should be shown in workspace immediately
        const shouldShowInWorkspace = shouldShowStreamingToolCall(event.toolName);
        if (shouldShowInWorkspace) {
            set(_atoms_ui__WEBPACK_IMPORTED_MODULE_3__.activePanelContentAtom, {
                type: 'streaming_tool_call',
                source: streamingCall,
                title: `${event.toolName} (in progress...)`,
                timestamp: now,
                toolCallId: event.toolCallId
            });
        }
    }
    // If the tool call is complete, clean up the streaming state
    if (event.isComplete) {
        set(_atoms_tool__WEBPACK_IMPORTED_MODULE_2__.streamingToolCallsAtom, (prev)=>{
            const updatedSessionCalls = {
                ...prev[sessionId]
            };
            delete updatedSessionCalls[event.toolCallId];
            return {
                ...prev,
                [sessionId]: updatedSessionCalls
            };
        });
    }
}
// Determine if a streaming tool call should be shown in workspace immediately
function shouldShowStreamingToolCall(toolName) {
    // Show streaming for tools that typically have large outputs or take time
    const streamingToolNames = [
        'write_file',
        'edit_file',
        'run_command',
        'browser_get_markdown',
        'web_search',
        'read_file',
        'list_directory',
        'directory_tree'
    ];
    return streamingToolNames.includes(toolName);
}
/**
 * Update processing status
 */ const updateProcessingStatusAction = (0,jotai__WEBPACK_IMPORTED_MODULE_6__.atom)(null, (get, set, status)=>{
    // Update processing state
    set(_atoms_ui__WEBPACK_IMPORTED_MODULE_3__.isProcessingAtom, !!status.isProcessing);
});

function $RefreshSig$() {
  return $ReactRefreshRuntime$.createSignatureFunctionForTransform();
}
function $RefreshReg$(type, id) {
  $ReactRefreshRuntime$.register(type, module.id + "_" + id);
}
Promise.resolve().then(function() {
  $ReactRefreshRuntime$.refresh(module.id, module.hot);
});


}),
"./src/common/state/atoms/tool.ts": (function (module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  streamingToolCallsAtom: () => (streamingToolCallsAtom),
  toolCallResultMap: () => (toolCallResultMap),
  toolResultsAtom: () => (toolResultsAtom)
});
/* ESM import */var jotai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/jotai@2.12.5_@types+react@18.3.23_react@18.3.1/node_modules/jotai/esm/vanilla.mjs");
/* provided dependency */ var $ReactRefreshRuntime$ = __webpack_require__("../node_modules/.pnpm/@rspack+plugin-react-refresh@1.0.3_react-refresh@0.16.0/node_modules/@rspack/plugin-react-refresh/client/reactRefresh.js");

/**
 * Atom for storing tool results for each session
 * Key is the session ID, value is an array of tool results for that session
 */ const toolResultsAtom = (0,jotai__WEBPACK_IMPORTED_MODULE_0__.atom)({});
/**
 * Atom for tracking streaming tool calls in progress
 * Key is the session ID, value is a map of toolCallId to StreamingToolCall
 */ const streamingToolCallsAtom = (0,jotai__WEBPACK_IMPORTED_MODULE_0__.atom)({});
/**
 * Map to track tool calls to their results (not an atom, just a cache)
 */ const toolCallResultMap = new Map();

function $RefreshSig$() {
  return $ReactRefreshRuntime$.createSignatureFunctionForTransform();
}
function $RefreshReg$(type, id) {
  $ReactRefreshRuntime$.register(type, module.id + "_" + id);
}
Promise.resolve().then(function() {
  $ReactRefreshRuntime$.refresh(module.id, module.hot);
});


}),
"./src/standalone/chat/Message/components/ToolCalls.tsx": (function (module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  ToolCalls: () => (ToolCalls)
});
/* ESM import */var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/react@18.3.1/node_modules/react/jsx-dev-runtime.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../node_modules/.pnpm/react@18.3.1/node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* ESM import */var react_icons_fi__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("../node_modules/.pnpm/react-icons@4.12.0_react@18.3.1/node_modules/react-icons/fi/index.esm.js");
/* ESM import */var framer_motion__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("../node_modules/.pnpm/framer-motion@12.19.2_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/render/components/motion/proxy.mjs");
/* ESM import */var _ActionButton__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/standalone/chat/Message/components/ActionButton.tsx");
/* ESM import */var jotai__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../node_modules/.pnpm/jotai@2.12.5_@types+react@18.3.23_react@18.3.1/node_modules/jotai/esm/react.mjs");
/* ESM import */var _common_state_atoms_tool__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/common/state/atoms/tool.ts");
/* ESM import */var _common_hooks_useSession__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/common/hooks/useSession.ts");
/* provided dependency */ var $ReactRefreshRuntime$ = __webpack_require__("../node_modules/.pnpm/@rspack+plugin-react-refresh@1.0.3_react-refresh@0.16.0/node_modules/@rspack/plugin-react-refresh/client/reactRefresh.js");

var _s = $RefreshSig$();







/**
 * Component for displaying tool calls with enhanced icons and loading states
 *
 * Design principles:
 * - Distinct visual identity for different tool types
 * - Shows loading state for pending tool calls
 * - Displays success/error status with appropriate icons
 * - Provides clear visual feedback with enhanced tool-specific colors
 * - Supports streaming tool call state display
 */ const ToolCalls = (param)=>{
    let { toolCalls, onToolCallClick, getToolIcon, isIntermediate = false, toolResults = [] } = param;
    _s();
    const { activeSessionId } = (0,_common_hooks_useSession__WEBPACK_IMPORTED_MODULE_4__.useSession)();
    const streamingToolCalls = (0,jotai__WEBPACK_IMPORTED_MODULE_5__.useAtomValue)(_common_state_atoms_tool__WEBPACK_IMPORTED_MODULE_3__.streamingToolCallsAtom);
    const sessionStreamingCalls = activeSessionId ? streamingToolCalls[activeSessionId] || {} : {};
    // Helper function to get tool call status
    const getToolCallStatus = (toolCall)=>{
        // Check if this tool call is currently streaming
        if (sessionStreamingCalls[toolCall.id]) {
            return 'streaming';
        }
        const result = toolResults.find((result)=>result.toolCallId === toolCall.id);
        if (!result) {
            return 'pending'; // No result yet, tool is still running
        }
        if (result.error) {
            return 'error'; // Tool execution failed
        }
        return 'success'; // Tool completed successfully
    };
    // Helper function to get status icon with enhanced visual styling
    const getStatusIcon = (status, toolName)=>{
        switch(status){
            case 'streaming':
                return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                    className: "flex items-center",
                    children: [
                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_6__.motion.div, {
                            animate: {
                                scale: [
                                    1,
                                    1.2,
                                    1
                                ]
                            },
                            transition: {
                                duration: 1,
                                repeat: Infinity
                            },
                            className: "w-2 h-2 rounded-full bg-blue-500 dark:bg-blue-400 mr-2"
                        }, void 0, false, {
                            fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/components/ToolCalls.tsx",
                            lineNumber: 64,
                            columnNumber: 13
                        }, undefined),
                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("span", {
                            className: "text-xs text-blue-600 dark:text-blue-400",
                            children: "streaming"
                        }, void 0, false, {
                            fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/components/ToolCalls.tsx",
                            lineNumber: 69,
                            columnNumber: 13
                        }, undefined)
                    ]
                }, void 0, true, {
                    fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/components/ToolCalls.tsx",
                    lineNumber: 63,
                    columnNumber: 11
                }, undefined);
            case 'pending':
                return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_6__.motion.div, {
                    animate: {
                        rotate: 360
                    },
                    transition: {
                        duration: 1,
                        repeat: Infinity,
                        ease: 'linear'
                    },
                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_icons_fi__WEBPACK_IMPORTED_MODULE_7__.FiLoader, {
                        size: 16,
                        className: "text-slate-500 dark:text-slate-400"
                    }, void 0, false, {
                        fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/components/ToolCalls.tsx",
                        lineNumber: 78,
                        columnNumber: 13
                    }, undefined)
                }, void 0, false, {
                    fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/components/ToolCalls.tsx",
                    lineNumber: 74,
                    columnNumber: 11
                }, undefined);
            case 'success':
                return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_icons_fi__WEBPACK_IMPORTED_MODULE_7__.FiCheck, {
                    size: 16,
                    className: "text-green-600 dark:text-green-400"
                }, void 0, false, {
                    fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/components/ToolCalls.tsx",
                    lineNumber: 82,
                    columnNumber: 16
                }, undefined);
            case 'error':
                return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_icons_fi__WEBPACK_IMPORTED_MODULE_7__.FiAlertCircle, {
                    size: 16,
                    className: "text-red-600 dark:text-red-400"
                }, void 0, false, {
                    fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/components/ToolCalls.tsx",
                    lineNumber: 84,
                    columnNumber: 16
                }, undefined);
            default:
                return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_icons_fi__WEBPACK_IMPORTED_MODULE_7__.FiClock, {
                    size: 16,
                    className: "text-slate-500 dark:text-slate-400"
                }, void 0, false, {
                    fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/components/ToolCalls.tsx",
                    lineNumber: 86,
                    columnNumber: 16
                }, undefined);
        }
    };
    // 生成工具描述文本 - 增强描述信息的可读性
    const getToolDescription = (toolCall)=>{
        const status = getToolCallStatus(toolCall);
        // For streaming calls, show streaming indicator
        if (status === 'streaming') {
            const streamingCall = sessionStreamingCalls[toolCall.id];
            if (streamingCall && streamingCall.accumulatedArguments) {
                try {
                    const parsed = JSON.parse(streamingCall.accumulatedArguments);
                    // Show relevant field based on tool type
                    if (toolCall.function.name === 'write_file' && parsed.path) {
                        return `${parsed.path} (streaming...)`;
                    }
                    if (toolCall.function.name === 'run_command' && parsed.command) {
                        return `${parsed.command} (streaming...)`;
                    }
                } catch  {
                    // If not valid JSON yet, show streaming indicator
                    return 'streaming arguments...';
                }
            }
            return 'starting...';
        }
        try {
            const args = JSON.parse(toolCall.function.arguments || '{}');
            switch(toolCall.function.name){
                case 'web_search':
                    return args.query ? `"${args.query}"` : '';
                case 'browser_navigate':
                    // 限制 URL 长度以避免溢出
                    return args.url;
                case 'browser_vision_control':
                case 'browser_control':
                    return args.action ? `${args.action}` : '';
                case 'browser_click':
                    return args.selector || args.text ? `click: ${args.selector || args.text}` : 'click';
                case 'list_directory':
                    return args.path ? `path: ${args.path}` : '';
                case 'run_command':
                    return args.command;
                case 'read_file':
                case 'write_file':
                    return args.path ? `file: ${args.path.split('/').pop()}` : '';
                default:
                    return '';
            }
        } catch (error) {
            console.error('Failed to parse tool arguments:', error);
            return '';
        }
    };
    // 获取浏览器操作结果说明
    const getResultInfo = (toolCall, status)=>{
        const result = toolResults.find((result)=>result.toolCallId === toolCall.id);
        if (status === 'error' && (result === null || result === void 0 ? void 0 : result.error)) {
            return '"operation failed"';
        } else if (status === 'success') {
            if (toolCall.function.name === 'browser_get_markdown') {
                return '"content retrieved"';
            } else if (toolCall.function.name === 'browser_navigate') {
                return '"navigation success"';
            } else if (toolCall.function.name === 'browser_click') {
                return '"click successful"';
            } else if (toolCall.function.name.startsWith('run_')) {
                return '"command executed"';
            } else if (toolCall.function.name.startsWith('list_')) {
                return '"files listed"';
            } else if (toolCall.function.name.startsWith('read_')) {
                return '"file read"';
            } else if (toolCall.function.name.startsWith('write_')) {
                return '"file saved"';
            }
        }
        return '';
    };
    // 获取工具的格式化名称，使其更易读
    const getToolDisplayName = (toolName)=>{
        // 替换下划线为空格
        const nameWithSpaces = toolName.replace(/_/g, ' ');
        // 特殊情况处理
        switch(toolName){
            case 'browser_navigate':
                return 'Navigate';
            case 'browser_get_markdown':
                return 'Extract Content';
            case 'browser_click':
                return 'Click Element';
            case 'web_search':
                return 'Web Search';
            case 'list_directory':
                return 'List Files';
            case 'run_command':
                return 'Run Command';
            case 'read_file':
                return 'Read File';
            case 'write_file':
                return 'Write File';
            default:
                // 首字母大写
                return nameWithSpaces.split(' ').map((word)=>word.charAt(0).toUpperCase() + word.slice(1)).join(' ');
        }
    };
    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
        className: "mt-2 space-y-1.5",
        children: toolCalls.map((toolCall)=>{
            const status = getToolCallStatus(toolCall);
            const description = getToolDescription(toolCall);
            const browserInfo = getResultInfo(toolCall, status);
            const displayName = getToolDisplayName(toolCall.function.name);
            return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_ActionButton__WEBPACK_IMPORTED_MODULE_2__.ActionButton, {
                icon: getToolIcon(toolCall.function.name),
                label: displayName,
                onClick: ()=>onToolCallClick(toolCall),
                status: status === 'streaming' ? 'pending' : status,
                statusIcon: getStatusIcon(status, toolCall.function.name),
                description: description || browserInfo || undefined
            }, toolCall.id, false, {
                fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/components/ToolCalls.tsx",
                lineNumber: 214,
                columnNumber: 11
            }, undefined);
        })
    }, void 0, false, {
        fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/chat/Message/components/ToolCalls.tsx",
        lineNumber: 206,
        columnNumber: 5
    }, undefined);
};
_s(ToolCalls, "s9PYSlLm6O8IcMmlzSBV7r0/MTo=", false, function() {
    return [
        _common_hooks_useSession__WEBPACK_IMPORTED_MODULE_4__.useSession,
        jotai__WEBPACK_IMPORTED_MODULE_5__.useAtomValue
    ];
});
_c = ToolCalls;
var _c;
$RefreshReg$(_c, "ToolCalls");

function $RefreshSig$() {
  return $ReactRefreshRuntime$.createSignatureFunctionForTransform();
}
function $RefreshReg$(type, id) {
  $ReactRefreshRuntime$.register(type, module.id + "_" + id);
}
Promise.resolve().then(function() {
  $ReactRefreshRuntime$.refresh(module.id, module.hot);
});


}),
"./src/standalone/workspace/WorkspaceDetail.tsx": (function (module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  WorkspaceDetail: () => (WorkspaceDetail)
});
/* ESM import */var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/react@18.3.1/node_modules/react/jsx-dev-runtime.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../node_modules/.pnpm/react@18.3.1/node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* ESM import */var framer_motion__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__("../node_modules/.pnpm/framer-motion@12.19.2_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/render/components/motion/proxy.mjs");
/* ESM import */var _common_hooks_useSession__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/common/hooks/useSession.ts");
/* ESM import */var _renderers_ToolResultRenderer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/standalone/workspace/renderers/ToolResultRenderer.tsx");
/* ESM import */var _renderers_ResearchReportRenderer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/standalone/workspace/renderers/ResearchReportRenderer.tsx");
/* ESM import */var _components_WorkspaceHeader__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./src/standalone/workspace/components/WorkspaceHeader.tsx");
/* ESM import */var _components_ImageModal__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./src/standalone/workspace/components/ImageModal.tsx");
/* ESM import */var _components_FullscreenModal__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("./src/standalone/workspace/components/FullscreenModal.tsx");
/* ESM import */var _utils_contentStandardizer__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("./src/standalone/workspace/utils/contentStandardizer/index.ts");
/* provided dependency */ var $ReactRefreshRuntime$ = __webpack_require__("../node_modules/.pnpm/@rspack+plugin-react-refresh@1.0.3_react-refresh@0.16.0/node_modules/@rspack/plugin-react-refresh/client/reactRefresh.js");

var _s = $RefreshSig$();









/**
 * WorkspaceDetail Component - Displays details of a single tool result or report
 */ const WorkspaceDetail = ()=>{
    _s();
    const { activePanelContent, setActivePanelContent } = (0,_common_hooks_useSession__WEBPACK_IMPORTED_MODULE_2__.useSession)();
    const [zoomedImage, setZoomedImage] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);
    const [fullscreenData, setFullscreenData] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);
    if (!activePanelContent) {
        return null;
    }
    // Type assertion with runtime validation
    const panelContent = activePanelContent;
    // Handle streaming tool calls
    if (panelContent.type === 'streaming_tool_call' && isStreamingToolCall(panelContent.source)) {
        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_9__.motion.div, {
            initial: {
                opacity: 0
            },
            animate: {
                opacity: 1
            },
            exit: {
                opacity: 0
            },
            className: "h-full flex flex-col bg-white dark:bg-gray-900/20",
            children: [
                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_WorkspaceHeader__WEBPACK_IMPORTED_MODULE_5__.WorkspaceHeader, {
                    panelContent: panelContent,
                    onBack: ()=>setActivePanelContent(null)
                }, void 0, false, {
                    fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/workspace/WorkspaceDetail.tsx",
                    lineNumber: 38,
                    columnNumber: 9
                }, undefined),
                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                    className: "flex-1 overflow-auto p-4",
                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_renderers_ToolResultRenderer__WEBPACK_IMPORTED_MODULE_3__.ToolResultRenderer, {
                        content: panelContent.source,
                        onAction: handleContentAction
                    }, void 0, false, {
                        fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/workspace/WorkspaceDetail.tsx",
                        lineNumber: 42,
                        columnNumber: 11
                    }, undefined)
                }, void 0, false, {
                    fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/workspace/WorkspaceDetail.tsx",
                    lineNumber: 41,
                    columnNumber: 9
                }, undefined)
            ]
        }, void 0, true, {
            fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/workspace/WorkspaceDetail.tsx",
            lineNumber: 31,
            columnNumber: 7
        }, undefined);
    }
    // Handle research reports and deliverables
    if (isResearchReportType(panelContent)) {
        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_renderers_ResearchReportRenderer__WEBPACK_IMPORTED_MODULE_4__.ResearchReportRenderer, {
            content: getReportContent(panelContent),
            title: panelContent.title || 'Research Report',
            isStreaming: panelContent.isStreaming
        }, void 0, false, {
            fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/workspace/WorkspaceDetail.tsx",
            lineNumber: 51,
            columnNumber: 7
        }, undefined);
    }
    // Handle tool result content actions
    const handleContentAction = (action, data)=>{
        switch(action){
            case 'zoom':
                if (isZoomData(data)) {
                    setZoomedImage({
                        src: data.src,
                        alt: data.alt
                    });
                }
                break;
            case 'fullscreen':
                if (isFullscreenData(data)) {
                    setFullscreenData(data);
                }
                break;
        }
    };
    // Handle back navigation
    const handleBack = ()=>{
        setActivePanelContent(null);
    };
    // Get standardized content
    const standardizedContent = (0,_utils_contentStandardizer__WEBPACK_IMPORTED_MODULE_8__.standardizeContent)(panelContent);
    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {
        children: [
            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_9__.motion.div, {
                initial: {
                    opacity: 0
                },
                animate: {
                    opacity: 1
                },
                exit: {
                    opacity: 0
                },
                className: "h-full flex flex-col bg-white dark:bg-gray-900/20",
                children: [
                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_WorkspaceHeader__WEBPACK_IMPORTED_MODULE_5__.WorkspaceHeader, {
                        panelContent: panelContent,
                        onBack: handleBack
                    }, void 0, false, {
                        fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/workspace/WorkspaceDetail.tsx",
                        lineNumber: 92,
                        columnNumber: 9
                    }, undefined),
                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                        className: "flex-1 overflow-auto p-4",
                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_renderers_ToolResultRenderer__WEBPACK_IMPORTED_MODULE_3__.ToolResultRenderer, {
                            content: standardizedContent,
                            onAction: handleContentAction
                        }, void 0, false, {
                            fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/workspace/WorkspaceDetail.tsx",
                            lineNumber: 96,
                            columnNumber: 11
                        }, undefined)
                    }, void 0, false, {
                        fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/workspace/WorkspaceDetail.tsx",
                        lineNumber: 95,
                        columnNumber: 9
                    }, undefined)
                ]
            }, void 0, true, {
                fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/workspace/WorkspaceDetail.tsx",
                lineNumber: 85,
                columnNumber: 7
            }, undefined),
            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_ImageModal__WEBPACK_IMPORTED_MODULE_6__.ImageModal, {
                imageData: zoomedImage,
                onClose: ()=>setZoomedImage(null)
            }, void 0, false, {
                fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/workspace/WorkspaceDetail.tsx",
                lineNumber: 101,
                columnNumber: 7
            }, undefined),
            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_FullscreenModal__WEBPACK_IMPORTED_MODULE_7__.FullscreenModal, {
                data: fullscreenData,
                onClose: ()=>setFullscreenData(null)
            }, void 0, false, {
                fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/workspace/WorkspaceDetail.tsx",
                lineNumber: 103,
                columnNumber: 7
            }, undefined)
        ]
    }, void 0, true);
};
_s(WorkspaceDetail, "ORocLzHmhkfC7RTcd1smjl8gGEI=", false, function() {
    return [
        _common_hooks_useSession__WEBPACK_IMPORTED_MODULE_2__.useSession
    ];
});
_c = WorkspaceDetail;
// Type guard functions
function isStreamingToolCall(source) {
    return source !== null && typeof source === 'object' && 'toolCallId' in source && 'accumulatedArguments' in source && 'toolName' in source;
}
function isResearchReportType(content) {
    var _content_toolCallId;
    return content.type === 'research_report' || content.type === 'deliverable' || Boolean((_content_toolCallId = content.toolCallId) === null || _content_toolCallId === void 0 ? void 0 : _content_toolCallId.startsWith('final-answer'));
}
function getReportContent(content) {
    if (typeof content.source === 'string') {
        return content.source;
    }
    return JSON.stringify(content.source, null, 2);
}
function isZoomData(data) {
    return data !== null && typeof data === 'object' && 'src' in data && typeof data.src === 'string';
}
function isFullscreenData(data) {
    return data !== null && typeof data === 'object' && 'content' in data && 'fileName' in data && 'filePath' in data && 'displayMode' in data && 'isMarkdown' in data && typeof data.content === 'string' && typeof data.fileName === 'string' && typeof data.filePath === 'string';
}
var _c;
$RefreshReg$(_c, "WorkspaceDetail");

function $RefreshSig$() {
  return $ReactRefreshRuntime$.createSignatureFunctionForTransform();
}
function $RefreshReg$(type, id) {
  $ReactRefreshRuntime$.register(type, module.id + "_" + id);
}
Promise.resolve().then(function() {
  $ReactRefreshRuntime$.refresh(module.id, module.hot);
});


}),
"./src/standalone/workspace/renderers/StreamingToolCallRenderer.tsx": (function (module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  StreamingToolCallRenderer: () => (StreamingToolCallRenderer)
});
/* ESM import */var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/react@18.3.1/node_modules/react/jsx-dev-runtime.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../node_modules/.pnpm/react@18.3.1/node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* ESM import */var framer_motion__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../node_modules/.pnpm/framer-motion@12.19.2_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/render/components/motion/proxy.mjs");
/* ESM import */var react_icons_fi__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../node_modules/.pnpm/react-icons@4.12.0_react@18.3.1/node_modules/react-icons/fi/index.esm.js");
/* ESM import */var _common_utils_formatters__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/common/utils/formatters.ts");
/* provided dependency */ var $ReactRefreshRuntime$ = __webpack_require__("../node_modules/.pnpm/@rspack+plugin-react-refresh@1.0.3_react-refresh@0.16.0/node_modules/@rspack/plugin-react-refresh/client/reactRefresh.js");

var _s = $RefreshSig$();




/**
 * StreamingToolCallRenderer - Renders a tool call that is currently in progress
 * 
 * This component shows real-time progress of tool calls, especially useful for
 * long-running operations like write_file with large content.
 */ const StreamingToolCallRenderer = (param)=>{
    let { streamingCall } = param;
    _s();
    const [displayArguments, setDisplayArguments] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('');
    const [isAnimating, setIsAnimating] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);
    // Update display arguments with a slight delay for smooth animation
    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{
        setIsAnimating(true);
        const timer = setTimeout(()=>{
            setDisplayArguments(streamingCall.accumulatedArguments);
            setIsAnimating(false);
        }, 100);
        return ()=>clearTimeout(timer);
    }, [
        streamingCall.accumulatedArguments
    ]);
    // Parse arguments for better display
    const parsedArguments = react__WEBPACK_IMPORTED_MODULE_1___default().useMemo(()=>{
        if (!displayArguments.trim()) return null;
        try {
            return JSON.parse(displayArguments);
        } catch  {
            // If not valid JSON yet, return the raw string
            return displayArguments;
        }
    }, [
        displayArguments
    ]);
    // Get tool-specific display information
    const getToolDisplayInfo = ()=>{
        switch(streamingCall.toolName){
            case 'write_file':
                return {
                    icon: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_icons_fi__WEBPACK_IMPORTED_MODULE_3__.FiFileText, {
                        size: 18
                    }, void 0, false, {
                        fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/workspace/renderers/StreamingToolCallRenderer.tsx",
                        lineNumber: 52,
                        columnNumber: 17
                    }, undefined),
                    title: 'Writing File',
                    description: 'Content is being written to file...',
                    color: 'text-blue-500 dark:text-blue-400',
                    bgColor: 'bg-blue-50 dark:bg-blue-900/20',
                    borderColor: 'border-blue-200 dark:border-blue-800/30'
                };
            case 'edit_file':
                return {
                    icon: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_icons_fi__WEBPACK_IMPORTED_MODULE_3__.FiCode, {
                        size: 18
                    }, void 0, false, {
                        fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/workspace/renderers/StreamingToolCallRenderer.tsx",
                        lineNumber: 61,
                        columnNumber: 17
                    }, undefined),
                    title: 'Editing File',
                    description: 'File modifications in progress...',
                    color: 'text-purple-500 dark:text-purple-400',
                    bgColor: 'bg-purple-50 dark:bg-purple-900/20',
                    borderColor: 'border-purple-200 dark:border-purple-800/30'
                };
            case 'run_command':
                return {
                    icon: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_icons_fi__WEBPACK_IMPORTED_MODULE_3__.FiLoader, {
                        size: 18
                    }, void 0, false, {
                        fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/workspace/renderers/StreamingToolCallRenderer.tsx",
                        lineNumber: 70,
                        columnNumber: 17
                    }, undefined),
                    title: 'Running Command',
                    description: 'Command is being executed...',
                    color: 'text-green-500 dark:text-green-400',
                    bgColor: 'bg-green-50 dark:bg-green-900/20',
                    borderColor: 'border-green-200 dark:border-green-800/30'
                };
            default:
                return {
                    icon: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_icons_fi__WEBPACK_IMPORTED_MODULE_3__.FiLoader, {
                        size: 18
                    }, void 0, false, {
                        fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/workspace/renderers/StreamingToolCallRenderer.tsx",
                        lineNumber: 79,
                        columnNumber: 17
                    }, undefined),
                    title: streamingCall.toolName.replace(/_/g, ' ').replace(/\b\w/g, (l)=>l.toUpperCase()),
                    description: 'Operation in progress...',
                    color: 'text-gray-500 dark:text-gray-400',
                    bgColor: 'bg-gray-50 dark:bg-gray-900/20',
                    borderColor: 'border-gray-200 dark:border-gray-800/30'
                };
        }
    };
    const toolInfo = getToolDisplayInfo();
    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
        className: "space-y-4",
        children: [
            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                className: `p-4 rounded-xl border ${toolInfo.borderColor} ${toolInfo.bgColor}`,
                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                    className: "flex items-center justify-between",
                    children: [
                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                            className: "flex items-center",
                            children: [
                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                                    className: `w-10 h-10 rounded-xl flex items-center justify-center mr-3 ${toolInfo.color}`,
                                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_4__.motion.div, {
                                        animate: {
                                            rotate: streamingCall.toolName === 'run_command' ? 360 : 0
                                        },
                                        transition: {
                                            duration: 2,
                                            repeat: streamingCall.toolName === 'run_command' ? Infinity : 0,
                                            ease: 'linear'
                                        },
                                        children: toolInfo.icon
                                    }, void 0, false, {
                                        fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/workspace/renderers/StreamingToolCallRenderer.tsx",
                                        lineNumber: 98,
                                        columnNumber: 15
                                    }, undefined)
                                }, void 0, false, {
                                    fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/workspace/renderers/StreamingToolCallRenderer.tsx",
                                    lineNumber: 97,
                                    columnNumber: 13
                                }, undefined),
                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                                    children: [
                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("h3", {
                                            className: "font-medium text-gray-800 dark:text-gray-200",
                                            children: toolInfo.title
                                        }, void 0, false, {
                                            fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/workspace/renderers/StreamingToolCallRenderer.tsx",
                                            lineNumber: 110,
                                            columnNumber: 15
                                        }, undefined),
                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("p", {
                                            className: "text-sm text-gray-600 dark:text-gray-400",
                                            children: toolInfo.description
                                        }, void 0, false, {
                                            fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/workspace/renderers/StreamingToolCallRenderer.tsx",
                                            lineNumber: 113,
                                            columnNumber: 15
                                        }, undefined)
                                    ]
                                }, void 0, true, {
                                    fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/workspace/renderers/StreamingToolCallRenderer.tsx",
                                    lineNumber: 109,
                                    columnNumber: 13
                                }, undefined)
                            ]
                        }, void 0, true, {
                            fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/workspace/renderers/StreamingToolCallRenderer.tsx",
                            lineNumber: 96,
                            columnNumber: 11
                        }, undefined),
                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                            className: "flex items-center text-xs text-gray-500 dark:text-gray-400",
                            children: [
                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_icons_fi__WEBPACK_IMPORTED_MODULE_3__.FiClock, {
                                    className: "mr-1",
                                    size: 12
                                }, void 0, false, {
                                    fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/workspace/renderers/StreamingToolCallRenderer.tsx",
                                    lineNumber: 120,
                                    columnNumber: 13
                                }, undefined),
                                (0,_common_utils_formatters__WEBPACK_IMPORTED_MODULE_2__.formatTimestamp)(streamingCall.startTimestamp)
                            ]
                        }, void 0, true, {
                            fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/workspace/renderers/StreamingToolCallRenderer.tsx",
                            lineNumber: 119,
                            columnNumber: 11
                        }, undefined)
                    ]
                }, void 0, true, {
                    fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/workspace/renderers/StreamingToolCallRenderer.tsx",
                    lineNumber: 95,
                    columnNumber: 9
                }, undefined)
            }, void 0, false, {
                fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/workspace/renderers/StreamingToolCallRenderer.tsx",
                lineNumber: 94,
                columnNumber: 7
            }, undefined),
            displayArguments && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                className: "bg-white dark:bg-gray-800 rounded-xl border border-gray-200/50 dark:border-gray-700/30 overflow-hidden",
                children: [
                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                        className: "px-4 py-3 bg-gray-50/80 dark:bg-gray-800/80 border-b border-gray-100/50 dark:border-gray-700/30 flex items-center justify-between",
                        children: [
                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                                className: "font-medium text-gray-700 dark:text-gray-300 text-sm",
                                children: "Tool Arguments"
                            }, void 0, false, {
                                fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/workspace/renderers/StreamingToolCallRenderer.tsx",
                                lineNumber: 130,
                                columnNumber: 13
                            }, undefined),
                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_4__.motion.div, {
                                animate: {
                                    opacity: isAnimating ? [
                                        1,
                                        0.3,
                                        1
                                    ] : 1
                                },
                                transition: {
                                    duration: 0.3
                                },
                                className: "flex items-center text-xs text-gray-500 dark:text-gray-400",
                                children: [
                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_4__.motion.div, {
                                        animate: {
                                            scale: [
                                                1,
                                                1.2,
                                                1
                                            ]
                                        },
                                        transition: {
                                            duration: 1,
                                            repeat: Infinity
                                        },
                                        className: "w-2 h-2 rounded-full bg-green-500 dark:bg-green-400 mr-2"
                                    }, void 0, false, {
                                        fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/workspace/renderers/StreamingToolCallRenderer.tsx",
                                        lineNumber: 138,
                                        columnNumber: 15
                                    }, undefined),
                                    "Live"
                                ]
                            }, void 0, true, {
                                fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/workspace/renderers/StreamingToolCallRenderer.tsx",
                                lineNumber: 133,
                                columnNumber: 13
                            }, undefined)
                        ]
                    }, void 0, true, {
                        fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/workspace/renderers/StreamingToolCallRenderer.tsx",
                        lineNumber: 129,
                        columnNumber: 11
                    }, undefined),
                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                        className: "p-4 max-h-[60vh] overflow-auto",
                        children: typeof parsedArguments === 'string' ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_4__.motion.pre, {
                            className: "text-sm whitespace-pre-wrap font-mono text-gray-700 dark:text-gray-300",
                            animate: {
                                opacity: isAnimating ? 0.7 : 1
                            },
                            transition: {
                                duration: 0.2
                            },
                            children: parsedArguments
                        }, void 0, false, {
                            fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/workspace/renderers/StreamingToolCallRenderer.tsx",
                            lineNumber: 149,
                            columnNumber: 15
                        }, undefined) : parsedArguments ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_4__.motion.pre, {
                            className: "text-sm whitespace-pre-wrap font-mono text-gray-700 dark:text-gray-300 bg-gray-50 dark:bg-gray-800/50 p-3 rounded-lg overflow-x-auto",
                            animate: {
                                opacity: isAnimating ? 0.7 : 1
                            },
                            transition: {
                                duration: 0.2
                            },
                            children: JSON.stringify(parsedArguments, null, 2)
                        }, void 0, false, {
                            fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/workspace/renderers/StreamingToolCallRenderer.tsx",
                            lineNumber: 157,
                            columnNumber: 15
                        }, undefined) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                            className: "flex items-center justify-center py-8 text-gray-500 dark:text-gray-400",
                            children: [
                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_4__.motion.div, {
                                    animate: {
                                        rotate: 360
                                    },
                                    transition: {
                                        duration: 2,
                                        repeat: Infinity,
                                        ease: 'linear'
                                    },
                                    className: "mr-2",
                                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_icons_fi__WEBPACK_IMPORTED_MODULE_3__.FiLoader, {
                                        size: 16
                                    }, void 0, false, {
                                        fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/workspace/renderers/StreamingToolCallRenderer.tsx",
                                        lineNumber: 171,
                                        columnNumber: 19
                                    }, undefined)
                                }, void 0, false, {
                                    fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/workspace/renderers/StreamingToolCallRenderer.tsx",
                                    lineNumber: 166,
                                    columnNumber: 17
                                }, undefined),
                                "Waiting for arguments..."
                            ]
                        }, void 0, true, {
                            fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/workspace/renderers/StreamingToolCallRenderer.tsx",
                            lineNumber: 165,
                            columnNumber: 15
                        }, undefined)
                    }, void 0, false, {
                        fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/workspace/renderers/StreamingToolCallRenderer.tsx",
                        lineNumber: 147,
                        columnNumber: 11
                    }, undefined)
                ]
            }, void 0, true, {
                fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/workspace/renderers/StreamingToolCallRenderer.tsx",
                lineNumber: 128,
                columnNumber: 9
            }, undefined),
            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                className: "flex items-center justify-center py-2",
                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                    className: "flex items-center text-sm text-gray-600 dark:text-gray-400",
                    children: [
                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_4__.motion.div, {
                            animate: {
                                rotate: 360
                            },
                            transition: {
                                duration: 2,
                                repeat: Infinity,
                                ease: 'linear'
                            },
                            className: "mr-2",
                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_icons_fi__WEBPACK_IMPORTED_MODULE_3__.FiLoader, {
                                size: 14
                            }, void 0, false, {
                                fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/workspace/renderers/StreamingToolCallRenderer.tsx",
                                lineNumber: 188,
                                columnNumber: 13
                            }, undefined)
                        }, void 0, false, {
                            fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/workspace/renderers/StreamingToolCallRenderer.tsx",
                            lineNumber: 183,
                            columnNumber: 11
                        }, undefined),
                        "Tool call in progress..."
                    ]
                }, void 0, true, {
                    fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/workspace/renderers/StreamingToolCallRenderer.tsx",
                    lineNumber: 182,
                    columnNumber: 9
                }, undefined)
            }, void 0, false, {
                fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/workspace/renderers/StreamingToolCallRenderer.tsx",
                lineNumber: 181,
                columnNumber: 7
            }, undefined)
        ]
    }, void 0, true, {
        fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/workspace/renderers/StreamingToolCallRenderer.tsx",
        lineNumber: 92,
        columnNumber: 5
    }, undefined);
};
_s(StreamingToolCallRenderer, "p4r+DWdkV4uzRtjsdjXQXTuLM1M=");
_c = StreamingToolCallRenderer;
var _c;
$RefreshReg$(_c, "StreamingToolCallRenderer");

function $RefreshSig$() {
  return $ReactRefreshRuntime$.createSignatureFunctionForTransform();
}
function $RefreshReg$(type, id) {
  $ReactRefreshRuntime$.register(type, module.id + "_" + id);
}
Promise.resolve().then(function() {
  $ReactRefreshRuntime$.refresh(module.id, module.hot);
});


}),
"./src/standalone/workspace/renderers/ToolResultRenderer.tsx": (function (module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  ToolResultRenderer: () => (ToolResultRenderer),
  registerRenderer: () => (registerRenderer)
});
/* ESM import */var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/react@18.3.1/node_modules/react/jsx-dev-runtime.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../node_modules/.pnpm/react@18.3.1/node_modules/react/index.js");
/* ESM import */var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* ESM import */var _ImageRenderer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./src/standalone/workspace/renderers/ImageRenderer.tsx");
/* ESM import */var _LinkRenderer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/standalone/workspace/renderers/LinkRenderer.tsx");
/* ESM import */var _SearchResultRenderer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./src/standalone/workspace/renderers/SearchResultRenderer.tsx");
/* ESM import */var _CommandResultRenderer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./src/standalone/workspace/renderers/CommandResultRenderer.tsx");
/* ESM import */var _ScriptResultRenderer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./src/standalone/workspace/renderers/ScriptResultRenderer.tsx");
/* ESM import */var _BrowserResultRenderer__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("./src/standalone/workspace/renderers/BrowserResultRenderer.tsx");
/* ESM import */var _BrowserControlRenderer__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("./src/standalone/workspace/renderers/BrowserControlRenderer.tsx");
/* ESM import */var _PlanViewerRenderer__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__("./src/standalone/workspace/renderers/PlanViewerRenderer.tsx");
/* ESM import */var _ResearchReportRenderer__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__("./src/standalone/workspace/renderers/ResearchReportRenderer.tsx");
/* ESM import */var _generic_GenericResultRenderer__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__("./src/standalone/workspace/renderers/generic/GenericResultRenderer.tsx");
/* ESM import */var _DeliverableRenderer__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__("./src/standalone/workspace/renderers/DeliverableRenderer.tsx");
/* ESM import */var _StreamingToolCallRenderer__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__("./src/standalone/workspace/renderers/StreamingToolCallRenderer.tsx");
/* provided dependency */ var $ReactRefreshRuntime$ = __webpack_require__("../node_modules/.pnpm/@rspack+plugin-react-refresh@1.0.3_react-refresh@0.16.0/node_modules/@rspack/plugin-react-refresh/client/reactRefresh.js");














/**
 * Registry of content part renderers
 * Maps content types to their renderer components
 *
 * Design pattern: Component Registry pattern - allows dynamic registration of
 * renderers for different content types without modifying the core renderer
 */ const CONTENT_RENDERERS = {
    image: _ImageRenderer__WEBPACK_IMPORTED_MODULE_2__.ImageRenderer,
    link: _LinkRenderer__WEBPACK_IMPORTED_MODULE_3__.LinkRenderer,
    search_result: _SearchResultRenderer__WEBPACK_IMPORTED_MODULE_4__.SearchResultRenderer,
    command_result: _CommandResultRenderer__WEBPACK_IMPORTED_MODULE_5__.CommandResultRenderer,
    script_result: _ScriptResultRenderer__WEBPACK_IMPORTED_MODULE_6__.ScriptResultRenderer,
    browser_result: _BrowserResultRenderer__WEBPACK_IMPORTED_MODULE_7__.BrowserResultRenderer,
    browser_control: _BrowserControlRenderer__WEBPACK_IMPORTED_MODULE_8__.BrowserControlRenderer,
    plan: _PlanViewerRenderer__WEBPACK_IMPORTED_MODULE_9__.PlanViewerRenderer,
    research_report: _ResearchReportRenderer__WEBPACK_IMPORTED_MODULE_10__.ResearchReportRenderer,
    json: _generic_GenericResultRenderer__WEBPACK_IMPORTED_MODULE_11__.GenericResultRenderer,
    deliverable: _DeliverableRenderer__WEBPACK_IMPORTED_MODULE_12__.DeliverableRenderer,
    file_result: _generic_GenericResultRenderer__WEBPACK_IMPORTED_MODULE_11__.GenericResultRenderer
};
/**
 * Type guard to check if content is a StreamingToolCall
 */ function isStreamingToolCall(content) {
    return content && typeof content === 'object' && 'toolCallId' in content && 'accumulatedArguments' in content;
}
/**
 * Renders tool result content parts using the appropriate renderer for each part
 *
 * This component acts as a router that delegates rendering to specialized components
 * based on the content type, making it easily extensible to new content types.
 *
 * Improvements:
 * - Special handling for browser_get_markdown content
 * - Uses browser shell for browser-related tool results
 * - Consistent styling across all tool result types
 * - Intelligent generic renderer for unknown formats
 * - Support for streaming tool calls
 */ const ToolResultRenderer = (param)=>{
    let { content, onAction, className = '' } = param;
    // Handle streaming tool call
    if (isStreamingToolCall(content)) {
        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
            className: `streaming-tool-call-container ${className}`,
            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_StreamingToolCallRenderer__WEBPACK_IMPORTED_MODULE_13__.StreamingToolCallRenderer, {
                streamingCall: content,
                onAction: onAction
            }, void 0, false, {
                fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/workspace/renderers/ToolResultRenderer.tsx",
                lineNumber: 88,
                columnNumber: 9
            }, undefined)
        }, void 0, false, {
            fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/workspace/renderers/ToolResultRenderer.tsx",
            lineNumber: 87,
            columnNumber: 7
        }, undefined);
    }
    // Handle regular content parts
    if (!content || content.length === 0) {
        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
            className: "p-4 text-gray-500 dark:text-gray-400 text-sm italic",
            children: "No content to display"
        }, void 0, false, {
            fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/workspace/renderers/ToolResultRenderer.tsx",
            lineNumber: 96,
            columnNumber: 7
        }, undefined);
    }
    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
        className: `space-y-4 ${className}`,
        children: content.map((part, index)=>{
            if (part.type === 'json') {
                return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                    className: "tool-result-part",
                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_generic_GenericResultRenderer__WEBPACK_IMPORTED_MODULE_11__.GenericResultRenderer, {
                        part: part,
                        onAction: onAction
                    }, void 0, false, {
                        fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/workspace/renderers/ToolResultRenderer.tsx",
                        lineNumber: 108,
                        columnNumber: 15
                    }, undefined)
                }, `json-${part.name || ''}-${index}`, false, {
                    fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/workspace/renderers/ToolResultRenderer.tsx",
                    lineNumber: 107,
                    columnNumber: 13
                }, undefined);
            }
            const Renderer = CONTENT_RENDERERS[part.type] || _generic_GenericResultRenderer__WEBPACK_IMPORTED_MODULE_11__.GenericResultRenderer;
            return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {
                className: "tool-result-part",
                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Renderer, {
                    part: part,
                    onAction: onAction
                }, void 0, false, {
                    fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/workspace/renderers/ToolResultRenderer.tsx",
                    lineNumber: 117,
                    columnNumber: 13
                }, undefined)
            }, `${part.type}-${part.name || ''}-${index}`, false, {
                fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/workspace/renderers/ToolResultRenderer.tsx",
                lineNumber: 116,
                columnNumber: 11
            }, undefined);
        })
    }, void 0, false, {
        fileName: "/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/standalone/workspace/renderers/ToolResultRenderer.tsx",
        lineNumber: 103,
        columnNumber: 5
    }, undefined);
};
_c = ToolResultRenderer;
/**
 * Register a custom renderer for a specific content type
 * This allows extending the system with new renderers without modifying this file
 */ function registerRenderer(contentType, renderer) {
    CONTENT_RENDERERS[contentType] = renderer;
}
var _c;
$RefreshReg$(_c, "ToolResultRenderer");

function $RefreshSig$() {
  return $ReactRefreshRuntime$.createSignatureFunctionForTransform();
}
function $RefreshReg$(type, id) {
  $ReactRefreshRuntime$.register(type, module.id + "_" + id);
}
Promise.resolve().then(function() {
  $ReactRefreshRuntime$.refresh(module.id, module.hot);
});


}),

},function(__webpack_require__) {
// webpack/runtime/get_full_hash
(() => {
__webpack_require__.h = () => ("4de5f7fc57b64a96")
})();

}
);
//# sourceMappingURL=index.689485cd1ff6fc9f.hot-update.js.map