{"version":3,"file":"index.beacc28aee72743e.hot-update.js","sources":["/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/entry.css","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/main/state/actions/connectionActions.ts"],"sourcesContent":["// extracted by css-extract-rspack-plugin\nexport {};\n    if(module.hot) {\n      (function() {\n        var localsJsonString = undefined;\n        // 1749663233971\n        var cssReload = require(\"../../node_modules/.pnpm/@rspack+core@1.3.9_@swc+helpers@0.5.17/node_modules/@rspack/core/dist/cssExtractHmr.js\").cssReload(module.id, {});\n        // only invalidate when locals change\n        if (\n          module.hot.data &&\n          module.hot.data.value &&\n          module.hot.data.value !== localsJsonString\n        ) {\n          module.hot.invalidate();\n        } else {\n          module.hot.accept();\n        }\n        module.hot.dispose(function(data) {\n          data.value = localsJsonString;\n          cssReload();\n        });\n      })();\n    }\n  ","import { atom } from 'jotai';\nimport { SOCKET_EVENTS } from '@/common/constants';\nimport { apiService } from '../../services/apiService';\nimport { socketService } from '../../services/socketService';\nimport { connectionStatusAtom } from '../atoms/ui';\n\n/**\n * Check server connection status\n */\nexport const checkConnectionStatusAction = atom(null, async (get, set) => {\n  const currentStatus = get(connectionStatusAtom);\n\n  try {\n    const isConnected = await apiService.checkServerHealth();\n\n    set(connectionStatusAtom, {\n      ...currentStatus,\n      connected: isConnected,\n      lastConnected: isConnected ? Date.now() : currentStatus.lastConnected,\n      lastError: isConnected ? null : currentStatus.lastError,\n    });\n\n    return isConnected;\n  } catch (error) {\n    set(connectionStatusAtom, {\n      ...currentStatus,\n      connected: false,\n      lastError: error instanceof Error ? error.message : String(error),\n    });\n\n    return false;\n  }\n});\n\n/**\n * Initialize connection monitoring\n */\nexport const initConnectionMonitoringAction = atom(null, (get, set) => {\n  // Perform initial check\n  set(checkConnectionStatusAction);\n\n  // Set up socket event listeners\n  socketService.on(SOCKET_EVENTS.CONNECT, () => {\n    set(connectionStatusAtom, (prev) => ({\n      ...prev,\n      connected: true,\n      lastConnected: Date.now(),\n      lastError: null,\n      reconnecting: false,\n    }));\n  });\n\n  socketService.on(SOCKET_EVENTS.DISCONNECT, (reason) => {\n    set(connectionStatusAtom, (prev) => ({\n      ...prev,\n      connected: false,\n      lastError: `Disconnected: ${reason}`,\n      reconnecting: true,\n    }));\n  });\n\n  socketService.on(SOCKET_EVENTS.RECONNECT_ATTEMPT, () => {\n    set(connectionStatusAtom, (prev) => ({\n      ...prev,\n      reconnecting: true,\n    }));\n  });\n\n  socketService.on(SOCKET_EVENTS.RECONNECT_FAILED, () => {\n    set(connectionStatusAtom, (prev) => ({\n      ...prev,\n      connected: false,\n      reconnecting: false,\n      lastError: 'Failed to reconnect after multiple attempts',\n    }));\n  });\n\n  // Set up periodic health checks\n  const intervalId = setInterval(() => {\n    set(checkConnectionStatusAction);\n  }, 30000); // Check every 30 seconds\n\n  // Return cleanup function\n  return () => {\n    clearInterval(intervalId);\n    socketService.off(SOCKET_EVENTS.CONNECT, () => {});\n    socketService.off(SOCKET_EVENTS.DISCONNECT, () => {});\n    socketService.off(SOCKET_EVENTS.RECONNECT_ATTEMPT, () => {});\n    socketService.off(SOCKET_EVENTS.RECONNECT_FAILED, () => {});\n  };\n});\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"}