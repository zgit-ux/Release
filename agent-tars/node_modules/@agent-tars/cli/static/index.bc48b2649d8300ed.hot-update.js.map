{"version":3,"file":"index.bc48b2649d8300ed.hot-update.js","sources":["/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/entry.css","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Markdown/SyntaxHighlight.css","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Markdown/CodeBlock.tsx","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/v2/components/Markdown/MarkdownRenderer.tsx"],"sourcesContent":["// extracted by css-extract-rspack-plugin\nexport {};\n    if(module.hot) {\n      (function() {\n        var localsJsonString = undefined;\n        // 1749634948586\n        var cssReload = require(\"../../node_modules/.pnpm/@rspack+core@1.3.9_@swc+helpers@0.5.17/node_modules/@rspack/core/dist/cssExtractHmr.js\").cssReload(module.id, {});\n        // only invalidate when locals change\n        if (\n          module.hot.data &&\n          module.hot.data.value &&\n          module.hot.data.value !== localsJsonString\n        ) {\n          module.hot.invalidate();\n        } else {\n          module.hot.accept();\n        }\n        module.hot.dispose(function(data) {\n          data.value = localsJsonString;\n          cssReload();\n        });\n      })();\n    }\n  ","// extracted by css-extract-rspack-plugin\nexport {};\n    if(module.hot) {\n      (function() {\n        var localsJsonString = undefined;\n        // 1749634948573\n        var cssReload = require(\"../../../../../node_modules/.pnpm/@rspack+core@1.3.9_@swc+helpers@0.5.17/node_modules/@rspack/core/dist/cssExtractHmr.js\").cssReload(module.id, {});\n        // only invalidate when locals change\n        if (\n          module.hot.data &&\n          module.hot.data.value &&\n          module.hot.data.value !== localsJsonString\n        ) {\n          module.hot.invalidate();\n        } else {\n          module.hot.accept();\n        }\n        module.hot.dispose(function(data) {\n          data.value = localsJsonString;\n          cssReload();\n        });\n      })();\n    }\n  ","import React, { useState, useRef } from 'react';\n\ninterface CodeBlockProps {\n  className?: string;\n  children: React.ReactNode;\n}\n\nexport const CodeBlock: React.FC<CodeBlockProps> = ({ className, children }) => {\n  const match = /language-(\\w+)/.exec(className || '');\n  const [isWordWrap, setIsWordWrap] = useState(true);\n  const [isCopied, setIsCopied] = useState(false);\n  const codeRef = useRef<HTMLElement>(null);\n\n  // If no language is specified, return inline code style\n  if (!match) {\n    return (\n      <code className=\"bg-gray-800/50 text-purple-400 px-1.5 py-0.5 rounded text-sm font-mono\">\n        {children}\n      </code>\n    );\n  }\n\n  const handleCopy = () => {\n    if (codeRef.current) {\n      // Extract text content from code element instead of React nodes\n      const code = codeRef.current.textContent || '';\n      navigator.clipboard.writeText(code).then(() => {\n        setIsCopied(true);\n        setTimeout(() => setIsCopied(false), 2000);\n      });\n    }\n  };\n\n  const toggleWordWrap = () => {\n    setIsWordWrap(!isWordWrap);\n  };\n\n  return (\n    <div className=\"relative my-6 group\">\n      {/* Code block header with actions */}\n      <div className=\"flex items-center justify-between bg-gray-800/80 rounded-t-lg border-t border-l border-r border-purple-500/20 px-4 py-2\">\n        {/* Language badge */}\n        <div className=\"text-xs bg-purple-500/20 text-purple-300 px-2 py-0.5 rounded-md font-mono\">\n          {match[1] || 'code'}\n        </div>\n\n        {/* Action buttons - hidden until hover */}\n        <div className=\"flex items-center gap-2 opacity-80 group-hover:opacity-100 transition-opacity\">\n          {/* Word wrap toggle button */}\n          <button\n            onClick={toggleWordWrap}\n            className=\"hover:bg-gray-700 transition-colors rounded-md px-2 py-1 text-xs text-gray-300 hover:text-purple-300\"\n            title={isWordWrap ? 'Disable word wrap' : 'Enable word wrap'}\n          >\n            {isWordWrap ? (\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width=\"14\"\n                height=\"14\"\n                fill=\"currentColor\"\n                viewBox=\"0 0 16 16\"\n              >\n                <path d=\"M1 3.5A1.5 1.5 0 0 1 2.5 2h12A1.5 1.5 0 0 1 16 3.5v9a1.5 1.5 0 0 1-1.5 1.5h-12A1.5 1.5 0 0 1 1 12.5v-9zM2.5 3a.5.5 0 0 0-.5.5v9a.5.5 0 0 0 .5.5h12a.5.5 0 0 0 .5-.5v-9a.5.5 0 0 0-.5-.5h-12z\" />\n                <path d=\"M13 5.5a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 0 1H12v6.5a.5.5 0 0 1-1 0V5.5z\" />\n              </svg>\n            ) : (\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width=\"14\"\n                height=\"14\"\n                fill=\"currentColor\"\n                viewBox=\"0 0 16 16\"\n              >\n                <path d=\"M1 3.5A1.5 1.5 0 0 1 2.5 2h12A1.5 1.5 0 0 1 16 3.5v9a1.5 1.5 0 0 1-1.5 1.5h-12A1.5 1.5 0 0 1 1 12.5v-9zM2.5 3a.5.5 0 0 0-.5.5v9a.5.5 0 0 0 .5.5h12a.5.5 0 0 0 .5-.5v-9a.5.5 0 0 0-.5-.5h-12z\" />\n                <path d=\"M11 5.5a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 0 1H12v3.5a.5.5 0 0 1-1 0V5.5z\" />\n              </svg>\n            )}\n          </button>\n\n          {/* Copy button */}\n          <button\n            onClick={handleCopy}\n            className=\"hover:bg-gray-700 transition-colors rounded-md px-2 py-1 text-xs text-gray-300 hover:text-purple-300 flex items-center gap-1\"\n            title=\"Copy code\"\n          >\n            {isCopied ? (\n              <>\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  width=\"14\"\n                  height=\"14\"\n                  fill=\"currentColor\"\n                  viewBox=\"0 0 16 16\"\n                >\n                  <path d=\"M13.854 3.646a.5.5 0 0 1 0 .708l-7 7a.5.5 0 0 1-.708 0l-3.5-3.5a.5.5 0 1 1 .708-.708L6.5 10.293l6.646-6.647a.5.5 0 0 1 .708 0z\" />\n                </svg>\n                <span>Copied!</span>\n              </>\n            ) : (\n              <>\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  width=\"14\"\n                  height=\"14\"\n                  fill=\"currentColor\"\n                  viewBox=\"0 0 16 16\"\n                >\n                  <path d=\"M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1h1a1 1 0 0 1 1 1V14a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V3.5a1 1 0 0 1 1-1h1v-1z\" />\n                  <path d=\"M9.5 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h3zm-3-1A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3z\" />\n                </svg>\n                <span>Copy</span>\n              </>\n            )}\n          </button>\n        </div>\n      </div>\n\n      <pre\n        className={`bg-gray-900/90 backdrop-blur-sm border-b border-l border-r border-purple-500/20 rounded-b-lg p-4 font-mono text-sm ${\n          isWordWrap ? 'whitespace-pre-wrap break-words' : 'overflow-x-auto'\n        }`}\n      >\n        <code ref={codeRef} className={className}>\n          {children}\n        </code>\n      </pre>\n    </div>\n  );\n};\n","import React, { useState, useRef, useEffect } from 'react';\nimport ReactMarkdown, { Components } from 'react-markdown';\nimport remarkGfm from 'remark-gfm';\nimport rehypeRaw from 'rehype-raw';\nimport { remarkAlert } from 'remark-github-blockquote-alert';\nimport rehypeHighlight from 'rehype-highlight';\nimport { Dialog } from '@headlessui/react';\nimport { Link } from 'react-router-dom';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { HeaderAnchor } from './HeaderAnchor';\nimport { CodeBlock } from './CodeBlock';\nimport './SyntaxHighlight.css';\nimport 'remark-github-blockquote-alert/alert.css';\n\ninterface MarkdownRendererProps {\n  content: string;\n  publishDate?: string;\n  author?: string;\n  className?: string;\n  forceDarkTheme?: boolean;\n}\n\n/**\n * MarkdownRenderer component\n * Renders markdown content with custom styling and enhanced functionality\n */\nexport const MarkdownRenderer: React.FC<MarkdownRendererProps> = ({\n  content,\n  publishDate,\n  author,\n  className = '',\n  forceDarkTheme = false,\n}) => {\n  const [openImage, setOpenImage] = useState<string | null>(null);\n  const [imageLoaded, setImageLoaded] = useState(false);\n  const [renderError, setRenderError] = useState<Error | null>(null);\n  // Add a ref to track if we've rendered the first h1\n  const firstH1Ref = useRef(false);\n\n  const handleImageClick = (src: string) => {\n    setOpenImage(src);\n    setImageLoaded(false);\n  };\n\n  const handleCloseModal = () => {\n    setOpenImage(null);\n  };\n\n  // Handle hash navigation on page load\n  useEffect(() => {\n    if (window.location.hash) {\n      const id = window.location.hash.substring(1);\n      const element = document.getElementById(id);\n      if (element) {\n        // Use setTimeout to ensure page is fully rendered before scrolling\n        setTimeout(() => {\n          element.scrollIntoView({ behavior: 'smooth' });\n        }, 100);\n      }\n    }\n  }, [content]); // Re-check when content changes\n\n  // Reset the first h1 flag when content changes\n  useEffect(() => {\n    firstH1Ref.current = false;\n    setRenderError(null); // Reset any previous errors when content changes\n  }, [content]);\n\n  // If there was a rendering error, show a fallback\n  if (renderError) {\n    return (\n      <div className=\"p-3 border border-amber-200 dark:border-amber-800 bg-amber-50 dark:bg-amber-900/30 rounded-md text-amber-800 dark:text-amber-200\">\n        <p className=\"font-medium mb-1\">Markdown rendering error:</p>\n        <pre className=\"text-xs overflow-auto\">{content}</pre>\n      </div>\n    );\n  }\n\n  // Determine the theme class based on the forceDarkTheme prop\n  const themeClass = forceDarkTheme ? 'dark' : '';\n\n  const components: Components = {\n    h1: ({ node, children, ...props }) => {\n      // Generate ID from heading text for anchor links\n      const id = children\n        ?.toString()\n        .toLowerCase()\n        .replace(/[^\\w\\s]/g, '')\n        .replace(/\\s+/g, '-');\n\n      // Check if this is the first h1 and set the flag\n      const isFirstH1 = !firstH1Ref.current;\n      if (isFirstH1) {\n        firstH1Ref.current = true;\n      }\n\n      return (\n        <>\n          <h1\n            id={id}\n            className=\"group text-4xl font-bold mb-2 pb-2 border-b border-white/10 bg-gradient-to-r from-white via-gray-200 to-gray-400 bg-clip-text text-transparent scroll-mt-20 flex items-center\"\n            {...props}\n          >\n            {children}\n            {id && <HeaderAnchor id={id} />}\n          </h1>\n\n          {/* Display metadata only after the first h1 */}\n          {isFirstH1 && (publishDate || author) && (\n            <div className=\"flex items-center gap-1 mb-6 text-sm text-gray-400 mb-10\">\n              {publishDate && <span>{publishDate}</span>}\n              {author && (\n                <>\n                  {publishDate && <span>•</span>}\n                  <span>{author}</span>\n                </>\n              )}\n            </div>\n          )}\n        </>\n      );\n    },\n    h2: ({ node, children, ...props }) => {\n      const id = children\n        ?.toString()\n        .toLowerCase()\n        .replace(/[^\\w\\s]/g, '')\n        .replace(/\\s+/g, '-');\n      return (\n        <h2\n          id={id}\n          className=\"group text-3xl font-bold mt-12 mb-4 bg-gradient-to-r from-white to-gray-300 bg-clip-text text-transparent scroll-mt-20 flex items-center\"\n          {...props}\n        >\n          {children}\n          {id && <HeaderAnchor id={id} />}\n        </h2>\n      );\n    },\n    h3: ({ node, children, ...props }) => {\n      const id = children\n        ?.toString()\n        .toLowerCase()\n        .replace(/[^\\w\\s]/g, '')\n        .replace(/\\s+/g, '-');\n      return (\n        <h3\n          id={id}\n          className=\"group text-2xl font-semibold mt-8 mb-3 text-gray-800 dark:text-gray-200 scroll-mt-20 flex items-center\"\n          {...props}\n        >\n          {children}\n          {id && <HeaderAnchor id={id} />}\n        </h3>\n      );\n    },\n    h4: ({ node, children, ...props }) => {\n      const id = children\n        ?.toString()\n        .toLowerCase()\n        .replace(/[^\\w\\s]/g, '')\n        .replace(/\\s+/g, '-');\n      return (\n        <h4\n          id={id}\n          className=\"group text-xl font-semibold mt-6 mb-2 text-white/80 scroll-mt-20 flex items-center\"\n          {...props}\n        >\n          {children}\n          {id && <HeaderAnchor id={id} />}\n        </h4>\n      );\n    },\n    p: ({ node, ...props }) => (\n      <p className=\"my-0 text-gray-800 dark:text-gray-200 leading-relaxed\" {...props} />\n    ),\n    a: ({ node, href, ...props }) => {\n      // Handle three types of links:\n      // 1. Hash links (#section)\n      // 2. Internal path links (/path)\n      // 3. External links (https://...)\n\n      if (href && href.startsWith('#')) {\n        // Hash links - use smooth scrolling\n        return (\n          <a\n            href={href}\n            className=\"text-blue-400 hover:text-blue-300 transition-colors underline underline-offset-2\"\n            onClick={(e) => {\n              e.preventDefault();\n              // Find target element and scroll into view\n              const element = document.getElementById(href.substring(1));\n              if (element) {\n                element.scrollIntoView({ behavior: 'smooth' });\n                // Update URL without page reload\n                window.history.pushState(null, '', href);\n              }\n            }}\n            {...props}\n          />\n        );\n      } else if (href && !href.match(/^(https?:)?\\/\\//) && href.startsWith('/')) {\n        // Internal links - use React Router's Link\n        return (\n          <Link\n            to={href}\n            className=\"text-blue-400 hover:text-blue-300 transition-colors underline underline-offset-2\"\n            {...props}\n          />\n        );\n      }\n\n      // External links - open in new tab\n      return (\n        <a\n          href={href}\n          className=\"text-blue-400 hover:text-blue-300 transition-colors underline underline-offset-2\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          {...props}\n        />\n      );\n    },\n    ul: ({ node, ...props }) => (\n      <ul className=\"my-4 list-disc pl-6 text-gray-800 dark:text-gray-200\" {...props} />\n    ),\n    ol: ({ node, ...props }) => (\n      <ol className=\"my-4 list-decimal pl-6 text-gray-800 dark:text-gray-200\" {...props} />\n    ),\n    li: ({ node, ...props }) => <li className=\"my-1\" {...props} />,\n    blockquote: ({ node, ...props }) => (\n      <blockquote\n        className=\"border-l-4 border-purple-500 pl-4 my-4 italic text-gray-400\"\n        {...props}\n      />\n    ),\n    code: ({ node, className, children, ...props }) => {\n      return (\n        <CodeBlock className={`${className} dark:text-gray-200 dark:bg-gray-800`} {...props}>\n          {children}\n        </CodeBlock>\n      );\n    },\n    table: ({ node, ...props }) => (\n      <div className=\"overflow-x-auto my-6\">\n        <table className=\"min-w-full border-collapse border border-white/20 text-sm\" {...props} />\n      </div>\n    ),\n    thead: ({ node, ...props }) => <thead className=\"bg-white/5\" {...props} />,\n    tbody: ({ node, ...props }) => <tbody className=\"divide-y divide-white/10\" {...props} />,\n    tr: ({ node, ...props }) => <tr className=\"hover:bg-white/5 transition-colors\" {...props} />,\n    th: ({ node, ...props }) => (\n      <th\n        className=\"px-4 py-3 text-left text-xs font-medium text-gray-800 dark:text-gray-200 uppercase tracking-wider border-b border-white/20\"\n        {...props}\n      />\n    ),\n    td: ({ node, ...props }) => (\n      <td className=\"px-4 py-3 text-gray-800 border-white/10\" {...props} />\n    ),\n    img: ({ node, src, ...props }) => (\n      // @ts-expect-error\n      <motion.img\n        className=\"max-w-full h-auto my-6 rounded-lg border border-white/10 cursor-pointer\"\n        src={src}\n        onClick={() => src && handleImageClick(src)}\n        {...props}\n        alt={props.alt || 'Documentation image'}\n        whileHover={{ scale: 1.01 }}\n        transition={{ duration: 0.2 }}\n      />\n    ),\n    hr: ({ node, ...props }) => <hr className=\"my-8 border-t border-white/10\" {...props} />,\n  };\n\n  try {\n    return (\n      <div className={`${themeClass} markdown-content`}>\n        <ReactMarkdown\n          remarkPlugins={[remarkGfm, remarkAlert]}\n          rehypePlugins={[rehypeRaw, [rehypeHighlight, { detect: true, ignoreMissing: true }]]}\n          className={className}\n          components={components}\n        >\n          {content}\n        </ReactMarkdown>\n\n        {/* 图片预览对话框 */}\n        <Dialog open={!!openImage} onClose={handleCloseModal} className=\"relative z-[9999]\">\n          {/* 背景遮罩 */}\n          <div className=\"fixed inset-0 bg-black/70 backdrop-blur-sm\" aria-hidden=\"true\" />\n\n          {/* 图片容器 */}\n          <div className=\"fixed inset-0 flex items-center justify-center p-4\">\n            <Dialog.Panel className=\"max-w-[90vw] max-h-[90vh] outline-none\">\n              <motion.img\n                src={openImage || ''}\n                alt=\"Enlarged view\"\n                onLoad={() => setImageLoaded(true)}\n                className=\"max-w-full max-h-[85vh] object-contain rounded-lg\"\n                initial={{ opacity: 0, scale: 0.9 }}\n                animate={{\n                  opacity: imageLoaded ? 1 : 0.3,\n                  scale: imageLoaded ? 1 : 0.95,\n                }}\n                exit={{ opacity: 0, scale: 0.9 }}\n                transition={{ type: 'spring', duration: 0.3 }}\n                onClick={handleCloseModal}\n              />\n            </Dialog.Panel>\n          </div>\n        </Dialog>\n      </div>\n    );\n  } catch (error) {\n    console.error('Error rendering markdown:', error);\n    setRenderError(error instanceof Error ? error : new Error(String(error)));\n\n    // Fallback render for raw content\n    return (\n      <pre className=\"p-3 text-sm bg-gray-50 dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-md overflow-auto\">\n        {content}\n      </pre>\n    );\n  }\n};\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACvBA;AAOA;AAAA;;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;;AAEA;AAAA;;AAEA;AAAA;AACA;;;;;;AAIA;AAAA;;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AAAA;;;;;;AACA;AAAA;;;;;;;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA;;;;;;AACA;AAAA;;;;;;;;;;;;;;;;;AAMA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;;;;;;;;;;;AAEA;AAAA;;;;;;;AAGA;;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA;;;;;;AACA;AAAA;;;;;;;;;;;;AAEA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;AAOA;AACA;AAIA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;AAKA;AAzHA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAUA;;;AAGA;AACA;;AAOA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;;AACA;AAAA;AAAA;;;;;;AACA;AAAA;AAAA;;;;;;;;;;;;AAGA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AAAA;;;;;;;;;;;;AAIA;AACA;;AACA;AAAA;;;;;;AACA;;AAEA;AAAA;;;;;;AACA;AAAA;;;;;;;;;;;;;;;;AAOA;AACA;AAAA;AACA;AAKA;AAEA;AACA;AACA;;AAEA;AACA;AAAA;;;;;;;;;;;;AAGA;AACA;AAAA;AACA;AAKA;AAEA;AACA;AACA;;AAEA;AACA;AAAA;;;;;;;;;;;;AAGA;AACA;AAAA;AACA;AAKA;AAEA;AACA;AACA;;AAEA;AACA;AAAA;;;;;;;;;;;;AAGA;AACA;AAAA;AACA;AAAA;AAAA;;;;;;;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;AAGA;AACA;AACA;AAEA;AACA;AACA;;;;;;AAGA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;AAGA;AACA;AAAA;AACA;AAAA;AAAA;;;;;;;AAEA;AAAA;AACA;AAAA;AAAA;;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;;;;;;;AACA;AAAA;AACA;AACA;AACA;;;;;;;AAGA;AAAA;AACA;AACA;AAAA;AACA;;;;;;AAGA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;;;;;;;;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;;;;;;;AACA;AAAA;AACA;AACA;AACA;;;;;;;AAGA;AAAA;AACA;AAAA;AAAA;;;;;;;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;;;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;;;;;;;AACA;AAEA;AACA;AACA;;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;;;;;;AAIA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;;;;;;AAGA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;AAGA;AACA;AA3SA;AAAA"}