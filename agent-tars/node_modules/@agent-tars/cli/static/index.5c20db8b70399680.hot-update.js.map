{"version":3,"file":"index.5c20db8b70399680.hot-update.js","sources":["/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/entry.css","/Users/chenhaoli/workspace/code/UI-TARS-desktop-5/multimodal/agent-tars-web-ui/src/main/components/App.tsx"],"sourcesContent":["// extracted by css-extract-rspack-plugin\nexport {};\n    if(module.hot) {\n      (function() {\n        var localsJsonString = undefined;\n        // 1749662530426\n        var cssReload = require(\"../../node_modules/.pnpm/@rspack+core@1.3.9_@swc+helpers@0.5.17/node_modules/@rspack/core/dist/cssExtractHmr.js\").cssReload(module.id, {});\n        // only invalidate when locals change\n        if (\n          module.hot.data &&\n          module.hot.data.value &&\n          module.hot.data.value !== localsJsonString\n        ) {\n          module.hot.invalidate();\n        } else {\n          module.hot.accept();\n        }\n        module.hot.dispose(function(data) {\n          data.value = localsJsonString;\n          cssReload();\n        });\n      })();\n    }\n  ","import React, { useEffect } from 'react';\nimport { Routes, Route, Navigate, useParams, useNavigate, useLocation } from 'react-router-dom';\nimport { Layout } from './Layout';\nimport { useSession } from '../hooks/useSession';\nimport HomePage from '@/standalone/home/HomePage';\nimport { useReplayMode } from '../hooks/useReplayMode';\nimport { SessionRouter } from './Router/SessionRouter';\n\n/**\n * App Component - Main application container with routing\n */\nexport const App: React.FC = () => {\n  const { initConnectionMonitoring, loadSessions, connectionStatus, activeSessionId } =\n    useSession();\n  const isReplayMode = useReplayMode();\n\n  // Initialize connection monitoring and load sessions on mount - but not in replay mode\n  useEffect(() => {\n    // In replay mode, skip connection monitoring and session loading\n    if (isReplayMode) {\n      console.log('[ReplayMode] Skipping connection initialization in replay mode');\n      return;\n    }\n\n    const initialize = async () => {\n      // Initialize connection monitoring\n      const cleanup = initConnectionMonitoring();\n\n      // Load sessions if connected\n      if (connectionStatus.connected) {\n        await loadSessions();\n      }\n\n      return cleanup;\n    };\n\n    const cleanupPromise = initialize();\n\n    // Cleanup on unmount\n    return () => {\n      cleanupPromise.then((cleanup) => {\n        if (typeof cleanup === 'function') {\n          cleanup();\n        }\n      });\n    };\n  }, [initConnectionMonitoring, loadSessions, connectionStatus.connected, isReplayMode]);\n\n  // Special handling for replay mode - bypass normal routing\n  if (isReplayMode) {\n    console.log('[ReplayMode] Rendering replay layout directly');\n    return <Layout isReplayMode={true} />;\n  }\n\n  return (\n    <Routes>\n      <Route path=\"/\" element={<HomePage />} />\n      <Route\n        path=\"/:sessionId\"\n        element={\n          <SessionRouter>\n            <Layout />\n          </SessionRouter>\n        }\n      />\n    </Routes>\n  );\n};\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;;;;;;AACA;AAEA;;AAEA;AAAA;AAAA;;;;;;;;;;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;AAMA;AAxDA;;AAEA;AACA;;;AAHA"}