import { LocalBrowser } from '@agent-infra/browser';
import { ConsoleLogger } from '@multimodal/mcp-agent';
/**
 * BrowserManager - Singleton manager for Local Browser instance
 *
 * This class implements the Singleton pattern to ensure only one browser instance
 * exists across the application. It provides:
 *
 * 1. Lazy initialization - browser only launches when first needed
 * 2. Lifecycle management - handling browser creation, verification and cleanup
 * 3. Global access - consistent access point to shared browser instance
 */
export declare class BrowserManager {
    private static instance;
    private browser;
    private isLaunched;
    private logger;
    private constructor();
    /**
     * Get the singleton instance of BrowserManager
     */
    static getInstance(logger: ConsoleLogger): BrowserManager;
    /**
     * Get the browser instance, creating it if it doesn't exist
     */
    getBrowser(): LocalBrowser;
    /**
     * Launch the browser with specified options
     */
    launchBrowser(options?: {
        headless?: boolean;
    }): Promise<void>;
    /**
     * Check if the browser is launched
     */
    isLaunchingComplete(): boolean;
    /**
     * Check if the browser is alive
     */
    isBrowserAlive(): Promise<boolean>;
    /**
     * Close the browser instance
     */
    closeBrowser(): Promise<void>;
    /**
     * Reset the browser manager state (for testing purposes)
     */
    static resetInstance(): void;
}
//# sourceMappingURL=browser-manager.d.ts.map