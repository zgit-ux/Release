/**
* Copyright (c) 2025 Bytedance, Inc. and its affiliates.
* SPDX-License-Identifier: Apache-2.0
*/
"use strict";
var __webpack_require__ = {};
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
    GUIAgentOnlyStrategy: ()=>GUIAgentOnlyStrategy
});
const mcp_agent_namespaceObject = require("@multimodal/mcp-agent");
const external_base_strategy_js_namespaceObject = require("./base-strategy.js");
class GUIAgentOnlyStrategy extends external_base_strategy_js_namespaceObject.AbstractBrowserControlStrategy {
    async registerTools(registerToolFn) {
        if (this.guiAgent) {
            const guiAgentTool = this.guiAgent.getToolDefinition();
            registerToolFn(guiAgentTool);
            this.registeredTools.add(guiAgentTool.name);
            this.registerCustomBrowserTools(registerToolFn);
        }
        return Array.from(this.registeredTools);
    }
    registerCustomBrowserTools(registerToolFn) {
        const navigateTool = new mcp_agent_namespaceObject.Tool({
            id: 'browser_navigate',
            description: '[browser] Navigate to a URL',
            parameters: mcp_agent_namespaceObject.z.object({
                url: mcp_agent_namespaceObject.z.string().describe('URL to navigate to')
            }),
            function: async ({ url })=>{
                try {
                    if (!this.guiAgent) return {
                        status: 'error',
                        message: 'GUI Agent not initialized'
                    };
                    const page = await this.guiAgent.getPage();
                    await page.goto(url, {
                        waitUntil: 'networkidle2'
                    });
                    return {
                        status: 'success',
                        message: `Navigated to ${url}`
                    };
                } catch (error) {
                    this.logger.error(`Error navigating to URL: ${error}`);
                    return {
                        status: 'error',
                        message: `Failed to navigate: ${error instanceof Error ? error.message : String(error)}`
                    };
                }
            }
        });
        const backTool = new mcp_agent_namespaceObject.Tool({
            id: 'browser_back',
            description: '[browser] Go back to the previous page',
            parameters: mcp_agent_namespaceObject.z.object({}),
            function: async ()=>{
                try {
                    if (!this.guiAgent) return {
                        status: 'error',
                        message: 'GUI Agent not initialized'
                    };
                    const page = await this.guiAgent.getPage();
                    await page.goBack();
                    return {
                        status: 'success',
                        message: 'Navigated back'
                    };
                } catch (error) {
                    this.logger.error(`Error navigating back: ${error}`);
                    return {
                        status: 'error',
                        message: `Failed to navigate back: ${error instanceof Error ? error.message : String(error)}`
                    };
                }
            }
        });
        const forwardTool = new mcp_agent_namespaceObject.Tool({
            id: 'browser_forward',
            description: '[browser] Go forward to the next page',
            parameters: mcp_agent_namespaceObject.z.object({}),
            function: async ()=>{
                try {
                    if (!this.guiAgent) return {
                        status: 'error',
                        message: 'GUI Agent not initialized'
                    };
                    const page = await this.guiAgent.getPage();
                    await page.goForward();
                    return {
                        status: 'success',
                        message: 'Navigated forward'
                    };
                } catch (error) {
                    this.logger.error(`Error navigating forward: ${error}`);
                    return {
                        status: 'error',
                        message: `Failed to navigate forward: ${error instanceof Error ? error.message : String(error)}`
                    };
                }
            }
        });
        const refreshTool = new mcp_agent_namespaceObject.Tool({
            id: 'browser_refresh',
            description: '[browser] Refresh the current page',
            parameters: mcp_agent_namespaceObject.z.object({}),
            function: async ()=>{
                try {
                    if (!this.guiAgent) return {
                        status: 'error',
                        message: 'GUI Agent not initialized'
                    };
                    const page = await this.guiAgent.getPage();
                    await page.reload();
                    return {
                        status: 'success',
                        message: 'Page refreshed'
                    };
                } catch (error) {
                    this.logger.error(`Error refreshing page: ${error}`);
                    return {
                        status: 'error',
                        message: `Failed to refresh: ${error instanceof Error ? error.message : String(error)}`
                    };
                }
            }
        });
        new mcp_agent_namespaceObject.Tool({
            id: 'browser_get_markdown',
            description: '[browser] Get the content of the current page as markdown',
            parameters: mcp_agent_namespaceObject.z.object({}),
            function: async ()=>{
                try {
                    if (!this.guiAgent) return {
                        status: 'error',
                        message: 'GUI Agent not initialized'
                    };
                    const page = await this.guiAgent.getPage();
                    const markdown = await page.evaluate(()=>{
                        const convertToMarkdown = (html)=>{
                            const div = document.createElement('div');
                            div.innerHTML = html;
                            const scripts = div.querySelectorAll("script, style");
                            scripts.forEach((el)=>el.remove());
                            return div.textContent || '';
                        };
                        return convertToMarkdown(document.body.innerHTML);
                    });
                    return markdown;
                } catch (error) {
                    this.logger.error(`Error extracting markdown: ${error}`);
                    return `Failed to extract content: ${error instanceof Error ? error.message : String(error)}`;
                }
            }
        });
        const getUrlTool = new mcp_agent_namespaceObject.Tool({
            id: 'browser_get_url',
            description: '[browser] Get the current page URL',
            parameters: mcp_agent_namespaceObject.z.object({}),
            function: async ()=>{
                try {
                    if (!this.guiAgent) return {
                        status: 'error',
                        message: 'GUI Agent not initialized'
                    };
                    const page = await this.guiAgent.getPage();
                    return await page.url();
                } catch (error) {
                    this.logger.error(`Error getting URL: ${error}`);
                    return `Failed to get URL: ${error instanceof Error ? error.message : String(error)}`;
                }
            }
        });
        const getTitleTool = new mcp_agent_namespaceObject.Tool({
            id: 'browser_get_title',
            description: '[browser] Get the current page title',
            parameters: mcp_agent_namespaceObject.z.object({}),
            function: async ()=>{
                try {
                    if (!this.guiAgent) return {
                        status: 'error',
                        message: 'GUI Agent not initialized'
                    };
                    const page = await this.guiAgent.getPage();
                    return await page.title();
                } catch (error) {
                    this.logger.error(`Error getting title: ${error}`);
                    return `Failed to get title: ${error instanceof Error ? error.message : String(error)}`;
                }
            }
        });
        [
            navigateTool,
            backTool,
            forwardTool,
            refreshTool,
            getUrlTool,
            getTitleTool
        ].forEach((tool)=>{
            registerToolFn(tool);
            this.registeredTools.add(tool.name);
        });
        this.logger.info(`Registered ${this.registeredTools.size} custom browser tools`);
    }
}
var __webpack_export_target__ = exports;
for(var __webpack_i__ in __webpack_exports__)__webpack_export_target__[__webpack_i__] = __webpack_exports__[__webpack_i__];
if (__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, '__esModule', {
    value: true
});

//# sourceMappingURL=gui-agent-only-strategy.js.map