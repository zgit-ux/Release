/**
* Copyright (c) 2025 Bytedance, Inc. and its affiliates.
* SPDX-License-Identifier: Apache-2.0
*/
"use strict";
var __webpack_require__ = {};
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
    createContentTools: ()=>createContentTools
});
const core_namespaceObject = require("@mcp-agent/core");
const external_content_extractor_js_namespaceObject = require("../content-extractor.js");
function createContentTools(logger, browserGUIAgent) {
    const contentExtractor = new external_content_extractor_js_namespaceObject.PaginatedContentExtractor(logger.spawn('ContentExtractor'));
    const getMarkdownTool = new core_namespaceObject.Tool({
        id: 'browser_get_markdown',
        description: '[browser] Get the content of the current page as markdown with pagination support',
        parameters: core_namespaceObject.z.object({
            page: core_namespaceObject.z.number().optional().describe('Page number to extract (default: 1), in most cases, you do not need to pass this parameter.')
        }),
        function: async ({ page = 1 })=>{
            try {
                if (!browserGUIAgent) return {
                    status: 'error',
                    message: 'GUI Agent not initialized'
                };
                const browserPage = await browserGUIAgent.getPage();
                const result = await contentExtractor.extractContent(browserPage, page);
                return {
                    content: result.content,
                    pagination: {
                        currentPage: result.currentPage,
                        totalPages: result.totalPages,
                        hasMorePages: result.hasMorePages
                    },
                    title: result.title
                };
            } catch (error) {
                logger.error(`Error extracting markdown: ${error}`);
                return {
                    status: 'error',
                    message: `Failed to extract content: ${error instanceof Error ? error.message : String(error)}`
                };
            }
        }
    });
    return [
        getMarkdownTool
    ];
}
exports.createContentTools = __webpack_exports__.createContentTools;
for(var __webpack_i__ in __webpack_exports__)if (-1 === [
    "createContentTools"
].indexOf(__webpack_i__)) exports[__webpack_i__] = __webpack_exports__[__webpack_i__];
Object.defineProperty(exports, '__esModule', {
    value: true
});

//# sourceMappingURL=content.js.map