{"version":3,"file":"browser/browser-tools-manager.js","sources":["webpack://@agent-tars/core/webpack/runtime/define_property_getters","webpack://@agent-tars/core/webpack/runtime/has_own_property","webpack://@agent-tars/core/webpack/runtime/make_namespace_object","webpack://@agent-tars/core/./src/browser/browser-tools-manager.ts"],"sourcesContent":["__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n        if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n            Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n        }\n    }\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/*\n * Copyright (c) 2025 Bytedance, Inc. and its affiliates.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Tool, Client } from '@mcp-agent/core';\nimport { BrowserGUIAgent } from './browser-gui-agent';\nimport { ConsoleLogger } from '@mcp-agent/core';\nimport { StrategyFactory } from './browser-control-strategies/strategy-factory';\nimport { BrowserControlStrategy } from './browser-control-strategies/base-strategy';\nimport { BrowserControlMode } from '../types';\n\n/**\n * BrowserToolsManager - Controls the registration of browser tools based on selected strategy\n *\n * This manager implements a Strategy pattern for browser control:\n * - Encapsulates each browser control strategy (default, browser-use-only, gui-agent-only)\n * - Dynamically registers the appropriate tools based on the selected strategy\n * - Ensures proper integration between GUI Agent and MCP Browser Server tools\n */\nexport class BrowserToolsManager {\n  private logger: ConsoleLogger;\n  private browserClient?: Client;\n  private browserGUIAgent?: BrowserGUIAgent;\n  private registeredTools: Set<string> = new Set();\n  private strategy: BrowserControlStrategy;\n\n  constructor(\n    logger: ConsoleLogger,\n    private mode: BrowserControlMode = 'mixed',\n  ) {\n    this.logger = logger.spawn('BrowserToolsManager');\n    this.logger.info(`Initialized with mode: ${mode}`);\n\n    // Create strategy using factory\n    this.strategy = StrategyFactory.createStrategy(mode, this.logger);\n  }\n\n  /**\n   * Set the MCP Browser client for DOM-based operations\n   */\n  setBrowserClient(client: Client): void {\n    this.browserClient = client;\n    this.strategy.setBrowserClient(client);\n  }\n\n  /**\n   * Set the GUI Agent for vision-based operations\n   */\n  setBrowserGUIAgent(guiAgent: BrowserGUIAgent): void {\n    this.browserGUIAgent = guiAgent;\n    this.strategy.setBrowserGUIAgent(guiAgent);\n  }\n\n  /**\n   * Register all browser tools according to the selected strategy\n   * @param registerToolFn Function to register a tool with the agent\n   * @returns Array of registered tool names\n   */\n  async registerTools(registerToolFn: (tool: Tool) => void): Promise<string[]> {\n    // Clear previously registered tools tracking\n    this.registeredTools.clear();\n\n    // Check if required components are available for the selected strategy\n    if (!this.validateRequiredComponents()) {\n      return [];\n    }\n\n    // Enhanced logging for browser strategy\n    this.logger.info(`🌐 Activating browser control mode: ${this.mode}`);\n    this.logger.info(`🔍 Strategy: ${this.strategy.constructor.name}`);\n\n    // Delegate tool registration to the strategy\n    const registeredTools = await this.strategy.registerTools(registerToolFn);\n\n    // Track registered tools\n    registeredTools.forEach((toolName) => this.registeredTools.add(toolName));\n\n    // Enhanced logging for registered tools\n    this.logger.info(`✅ Registered ${registeredTools.length} browser tools:`);\n    if (registeredTools.length > 0) {\n      registeredTools.forEach((tool) => {\n        this.logger.info(`  • ${tool}`);\n      });\n    }\n\n    return Array.from(this.registeredTools);\n  }\n\n  /**\n   * Get current browser control mode\n   */\n  getMode(): BrowserControlMode {\n    return this.mode;\n  }\n\n  /**\n   * Get registered tool names\n   */\n  getRegisteredTools(): string[] {\n    return Array.from(this.registeredTools);\n  }\n\n  /**\n   * Validate that all required components are available for the selected strategy\n   */\n  private validateRequiredComponents(): boolean {\n    if ((this.mode === 'mixed' || this.mode === 'browser-use-only') && !this.browserClient) {\n      this.logger.warn('Browser client not set but required for current strategy');\n      return false;\n    }\n\n    if ((this.mode === 'mixed' || this.mode === 'gui-agent-only') && !this.browserGUIAgent) {\n      this.logger.warn('GUI Agent not set but required for current strategy');\n      return false;\n    }\n\n    return true;\n  }\n}\n"],"names":["__webpack_require__","definition","key","Object","obj","prop","Symbol","BrowserToolsManager","client","guiAgent","registerToolFn","registeredTools","toolName","tool","Array","logger","mode","Set","StrategyFactory"],"mappings":"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"}