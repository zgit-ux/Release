/**
* Copyright (c) 2025 Bytedance, Inc. and its affiliates.
* SPDX-License-Identifier: Apache-2.0
*/
import { StrategyFactory } from "./browser-control-strategies/strategy-factory.mjs";
function _define_property(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
class BrowserToolsManager {
    setBrowserClient(client) {
        this.browserClient = client;
        this.strategy.setBrowserClient(client);
    }
    setBrowserGUIAgent(guiAgent) {
        this.browserGUIAgent = guiAgent;
        this.strategy.setBrowserGUIAgent(guiAgent);
    }
    async registerTools(registerToolFn) {
        this.registeredTools.clear();
        if (!this.validateRequiredComponents()) return [];
        this.logger.info(`\u{1F310} Activating browser control mode: ${this.mode}`);
        this.logger.info(`\u{1F50D} Strategy: ${this.strategy.constructor.name}`);
        const registeredTools = await this.strategy.registerTools(registerToolFn);
        registeredTools.forEach((toolName)=>this.registeredTools.add(toolName));
        this.logger.info(`\u{2705} Registered ${registeredTools.length} browser tools:`);
        if (registeredTools.length > 0) registeredTools.forEach((tool)=>{
            this.logger.info(`  \u{2022} ${tool}`);
        });
        return Array.from(this.registeredTools);
    }
    getMode() {
        return this.mode;
    }
    getRegisteredTools() {
        return Array.from(this.registeredTools);
    }
    validateRequiredComponents() {
        if (('mixed' === this.mode || 'browser-use-only' === this.mode) && !this.browserClient) {
            this.logger.warn('Browser client not set but required for current strategy');
            return false;
        }
        if (('mixed' === this.mode || 'gui-agent-only' === this.mode) && !this.browserGUIAgent) {
            this.logger.warn('GUI Agent not set but required for current strategy');
            return false;
        }
        return true;
    }
    constructor(logger, mode = 'mixed'){
        _define_property(this, "mode", void 0);
        _define_property(this, "logger", void 0);
        _define_property(this, "browserClient", void 0);
        _define_property(this, "browserGUIAgent", void 0);
        _define_property(this, "registeredTools", void 0);
        _define_property(this, "strategy", void 0);
        this.mode = mode;
        this.registeredTools = new Set();
        this.logger = logger.spawn('BrowserToolsManager');
        this.logger.info(`Initialized with mode: ${mode}`);
        this.strategy = StrategyFactory.createStrategy(mode, this.logger);
    }
}
export { BrowserToolsManager };

//# sourceMappingURL=browser-tools-manager.mjs.map