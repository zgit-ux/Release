{"version":3,"file":"browser/browser-manager.js","sources":["webpack://@agent-tars/core/webpack/runtime/define_property_getters","webpack://@agent-tars/core/webpack/runtime/has_own_property","webpack://@agent-tars/core/webpack/runtime/make_namespace_object","webpack://@agent-tars/core/./src/browser/browser-manager.ts"],"sourcesContent":["__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n        if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n            Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n        }\n    }\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/*\n * Copyright (c) 2025 Bytedance, Inc. and its affiliates.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { LocalBrowser, Page } from '@agent-infra/browser';\nimport { ConsoleLogger } from '@mcp-agent/core';\n\n/**\n * BrowserManager - Singleton manager for Local Browser instance\n *\n * This class implements the Singleton pattern to ensure only one browser instance\n * exists across the application. It provides:\n *\n * 1. Lazy initialization - browser only launches when first needed\n * 2. Lifecycle management - handling browser creation, verification and cleanup\n * 3. Global access - consistent access point to shared browser instance\n */\nexport class BrowserManager {\n  private static instance: BrowserManager | null = null;\n  private browser: LocalBrowser | null = null;\n  // FIXME: move to `@agent-infra/browser`.\n  private isLaunched = false;\n  private logger: ConsoleLogger;\n\n  private constructor(logger: ConsoleLogger) {\n    this.logger = logger.spawn('BrowserManager');\n    this.logger.info('Browser manager initialized (browser not launched yet)');\n  }\n\n  /**\n   * Get the singleton instance of BrowserManager\n   */\n  public static getInstance(logger: ConsoleLogger): BrowserManager {\n    if (!BrowserManager.instance) {\n      BrowserManager.instance = new BrowserManager(logger);\n    }\n    return BrowserManager.instance;\n  }\n\n  /**\n   * Get the browser instance, creating it if it doesn't exist\n   */\n  public getBrowser(): LocalBrowser {\n    if (!this.browser) {\n      this.logger.info('Creating browser instance (not launched yet)');\n      this.browser = new LocalBrowser({\n        logger: this.logger.spawn('LocalBrowser'),\n      });\n    }\n    return this.browser;\n  }\n\n  /**\n   * Launch the browser with specified options\n   */\n  public async launchBrowser(options: { headless?: boolean } = {}): Promise<void> {\n    if (this.isLaunched) {\n      this.logger.info('Browser already launched, skipping launch');\n      return;\n    }\n\n    try {\n      this.logger.info('üåê Launching browser instance...');\n      const browser = this.getBrowser();\n      await browser.launch(options);\n      // FIXME: Create new page here to avoid the mcp server browser createing\n      // another browser instance, we need a better solution here.\n      // const openingPage = await browser.createPage();\n      // await openingPage.goto('about:blank', {\n      //   waitUntil: 'networkidle2',\n      // });\n      this.isLaunched = true;\n      this.logger.success('‚úÖ Browser instance launched successfully');\n    } catch (error) {\n      this.logger.error(`‚ùå Failed to launch browser: ${error}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Close all browser pages but keep the browser instance alive\n   * This is useful for cleaning up between tasks without needing to relaunch the browser\n   */\n  public async closeAllPages(): Promise<void> {\n    if (!this.browser || !this.isLaunched) {\n      this.logger.info('Browser not launched, no pages to close');\n      return;\n    }\n\n    try {\n      this.logger.info('Closing browser pages...');\n      const pages = await this.browser.getBrowser().pages();\n      // Close all pages except the last one\n      for (let i = 0; i < pages.length; i++) {\n        if (i === pages.length - 1) {\n          await pages[i].goto('about:blank');\n        } else {\n          await pages[i].close();\n        }\n      }\n    } catch (error) {\n      this.logger.error(`‚ùå Error managing browser pages: ${error}`);\n    }\n  }\n\n  /**\n   * Check if the browser is launched\n   */\n  public isLaunchingComplete(): boolean {\n    return this.isLaunched;\n  }\n\n  /**\n   * Check if the browser is alive\n   */\n  public async isBrowserAlive(): Promise<boolean> {\n    if (!this.browser || !this.isLaunched) {\n      return false;\n    }\n    return this.browser.isBrowserAlive();\n  }\n\n  /**\n   * Close the browser instance\n   */\n  public async closeBrowser(): Promise<void> {\n    if (this.browser && this.isLaunched) {\n      try {\n        this.logger.info('Closing browser instance...');\n        await this.browser.close();\n        this.logger.info('Browser instance closed successfully');\n      } catch (error) {\n        this.logger.error(`Error closing browser: ${error}`);\n      } finally {\n        this.isLaunched = false;\n      }\n    }\n  }\n\n  /**\n   * Reset the browser manager state (for testing purposes)\n   */\n  public static resetInstance(): void {\n    BrowserManager.instance = null;\n  }\n}\n"],"names":["__webpack_require__","definition","key","Object","obj","prop","Symbol","BrowserManager","logger","LocalBrowser","options","browser","error","pages","i"],"mappings":"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"}