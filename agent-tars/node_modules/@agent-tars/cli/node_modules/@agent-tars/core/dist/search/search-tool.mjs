/**
* Copyright (c) 2025 Bytedance, Inc. and its affiliates.
* SPDX-License-Identifier: Apache-2.0
*/
import { Tool, z } from "@mcp-agent/core";
import { SearchClient, SearchProvider } from "@agent-infra/search";
function _define_property(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
class SearchToolProvider {
    mapProviderString(provider) {
        const providerMap = {
            browser_search: SearchProvider.BrowserSearch,
            bing: SearchProvider.BingSearch,
            tavily: SearchProvider.Tavily,
            searxng: SearchProvider.SearXNG,
            duckduckgo: SearchProvider.DuckduckgoSearch
        };
        const resolvedProvider = providerMap[provider] || SearchProvider.BrowserSearch;
        this.logger.debug(`Mapped provider ${provider} to ${resolvedProvider}`);
        return resolvedProvider;
    }
    createSearchTool() {
        const MAX_WORDS = 7;
        return new Tool({
            id: 'web_search',
            description: `\u{26A0}\u{FE0F} SEARCH QUERY LENGTH LIMIT: ${MAX_WORDS} WORDS MAXIMUM \u{26A0}\u{FE0F}

Search the web for information. For best results:\n1) Use CONCISE queries (3-5 words ideal)\n2) Include only ESSENTIAL keywords, not full questions\n3) For complex topics, use multiple simple searches instead of one long query\n4) Focus on specific terms that will appear on relevant pages`,
            parameters: z.object({
                query: z.string().describe(`Search query - MUST BE CONCISE (maximum ${MAX_WORDS} words)`),
                count: z.number().optional().describe(`Number of results to return (default: ${this.config.count || 10})`)
            }),
            function: async ({ query, count })=>{
                if (!query || '' === query.trim()) return {
                    error: 'Search query is required'
                };
                try {
                    this.logger.info(`Performing search: "${query}" (count: ${count || this.config.count})`);
                    const results = await this.searchClient.search({
                        query,
                        count: count || this.config.count
                    });
                    return results.pages;
                } catch (error) {
                    this.logger.error(`Search error: ${error}`);
                    return {
                        error: `Search failed: ${error instanceof Error ? error.message : String(error)}`
                    };
                }
            }
        });
    }
    constructor(logger, config){
        var _config_browserSearch, _config_browserSearch1;
        _define_property(this, "logger", void 0);
        _define_property(this, "searchClient", void 0);
        _define_property(this, "config", void 0);
        this.logger = logger.spawn('SearchToolProvider');
        this.config = config;
        const provider = this.mapProviderString(config.provider);
        const searchConfig = {
            provider,
            providerConfig: {
                engine: (null == (_config_browserSearch = config.browserSearch) ? void 0 : _config_browserSearch.engine) || 'google',
                needVisitedUrls: (null == (_config_browserSearch1 = config.browserSearch) ? void 0 : _config_browserSearch1.needVisitedUrls) || false,
                apiKey: config.apiKey,
                baseUrl: config.baseUrl
            },
            logger: this.logger
        };
        this.searchClient = new SearchClient(searchConfig);
        this.logger.info(`Search tool provider initialized with ${config.provider}`);
    }
}
export { SearchToolProvider };

//# sourceMappingURL=search-tool.mjs.map