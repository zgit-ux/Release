{"version":3,"file":"llm-requester.mjs","sources":["webpack://@agent-tars/core/./src/llm-requester.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n/*\n * Copyright (c) 2025 Bytedance, Inc. and its affiliates.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport fs from 'fs';\nimport {\n  getLLMClient,\n  ModelResolver,\n  ResolvedModel,\n  getLogger,\n  LLMRequestHookPayload,\n} from '@mcp-agent/core';\n\nconst logger = getLogger('LLMRequester');\n\n/**\n * Options for LLM request\n */\nexport interface LLMRequestOptions {\n  /**\n   * Provider name\n   */\n  provider: string;\n  /**\n   * Model name\n   */\n  model: string;\n  /**\n   * Path to the request body JSON file or JSON string\n   */\n  body: string;\n  /**\n   * API key (optional)\n   */\n  apiKey?: string;\n  /**\n   * Base URL (optional)\n   */\n  baseURL?: string;\n  /**\n   * Whether to use streaming mode\n   */\n  stream?: boolean;\n  /**\n   * Whether to use thinking mode\n   */\n  thinking?: boolean;\n}\n\n/**\n * A standalone module to send requests to LLM providers without creating a full Agent\n */\nexport class LLMRequester {\n  /**\n   * Send a request to LLM provider\n   */\n  async request(options: LLMRequestOptions): Promise<any> {\n    const { provider, model, body, apiKey, baseURL, stream = false } = options;\n\n    const modelResolver = new ModelResolver({\n      provider: provider as ResolvedModel['provider'],\n      id: model,\n      baseURL,\n      apiKey,\n    });\n\n    const resolvedModel = modelResolver.resolve();\n\n    // Get request body\n    const response = this.getRequestBody(body);\n    const requestBody = response.request;\n\n    if (!requestBody) {\n      throw new Error('Invalid request body');\n    }\n\n    logger.info(`Sending request to ${provider}/${model}`);\n    if (baseURL) {\n      logger.info(`Using custom baseURL: ${baseURL}`);\n    }\n\n    // Create LLM client\n    const client = getLLMClient(resolvedModel, { type: options.thinking ? 'enabled' : 'disabled' });\n\n    try {\n      // @ts-expect-error\n      // Add stream option to request\n      requestBody.stream = requestBody.stream ?? stream;\n\n      // @ts-expect-error\n      // Send request\n      const response = await client.chat.completions.create(requestBody);\n\n      if (stream) {\n        // Return the stream directly\n        return response;\n      } else {\n        // Return complete response\n        return response;\n      }\n    } catch (error) {\n      logger.error(`Request failed: ${error}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Parse the request body from a file path or JSON string\n   */\n  private getRequestBody(body: string): LLMRequestHookPayload {\n    try {\n      // Check if body is a file path\n      if (body.endsWith('.json') || body.endsWith('.jsonl')) {\n        if (fs.existsSync(body)) {\n          const content = fs.readFileSync(body, 'utf-8');\n          console.log('content', content);\n          return JSON.parse(content);\n        }\n        throw new Error(`body does not exist: ${body}`);\n      }\n\n      // Check if body is a JSON string\n      return JSON.parse(body);\n    } catch (error) {\n      throw new Error(\n        `Failed to parse request body: ${error instanceof Error ? error.message : error}`,\n      );\n    }\n  }\n}\n"],"names":["logger","getLogger","LLMRequester","options","provider","model","body","apiKey","baseURL","stream","modelResolver","ModelResolver","resolvedModel","response","requestBody","Error","client","getLLMClient","error","fs","content","console","JSON"],"mappings":";;;;;;AAeA,MAAMA,SAASC,UAAU;AAuClB,MAAMC;IAIX,MAAM,QAAQC,OAA0B,EAAgB;QACtD,MAAM,EAAEC,QAAQ,EAAEC,KAAK,EAAEC,IAAI,EAAEC,MAAM,EAAEC,OAAO,EAAEC,SAAS,KAAK,EAAE,GAAGN;QAEnE,MAAMO,gBAAgB,IAAIC,cAAc;YACtC,UAAUP;YACV,IAAIC;YACJG;YACAD;QACF;QAEA,MAAMK,gBAAgBF,cAAc,OAAO;QAG3C,MAAMG,WAAW,IAAI,CAAC,cAAc,CAACP;QACrC,MAAMQ,cAAcD,SAAS,OAAO;QAEpC,IAAI,CAACC,aACH,MAAM,IAAIC,MAAM;QAGlBf,OAAO,IAAI,CAAC,CAAC,mBAAmB,EAAEI,SAAS,CAAC,EAAEC,OAAO;QACrD,IAAIG,SACFR,OAAO,IAAI,CAAC,CAAC,sBAAsB,EAAEQ,SAAS;QAIhD,MAAMQ,SAASC,aAAaL,eAAe;YAAE,MAAMT,QAAQ,QAAQ,GAAG,YAAY;QAAW;QAE7F,IAAI;YAGFW,YAAY,MAAM,GAAGA,YAAY,MAAM,IAAIL;YAI3C,MAAMI,WAAW,MAAMG,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,CAACF;YAOpD,OAAOD;QAEX,EAAE,OAAOK,OAAO;YACdlB,OAAO,KAAK,CAAC,CAAC,gBAAgB,EAAEkB,OAAO;YACvC,MAAMA;QACR;IACF;IAKQ,eAAeZ,IAAY,EAAyB;QAC1D,IAAI;YAEF,IAAIA,KAAK,QAAQ,CAAC,YAAYA,KAAK,QAAQ,CAAC,WAAW;gBACrD,IAAIa,oBAAAA,UAAa,CAACb,OAAO;oBACvB,MAAMc,UAAUD,oBAAAA,YAAe,CAACb,MAAM;oBACtCe,QAAQ,GAAG,CAAC,WAAWD;oBACvB,OAAOE,KAAK,KAAK,CAACF;gBACpB;gBACA,MAAM,IAAIL,MAAM,CAAC,qBAAqB,EAAET,MAAM;YAChD;YAGA,OAAOgB,KAAK,KAAK,CAAChB;QACpB,EAAE,OAAOY,OAAO;YACd,MAAM,IAAIH,MACR,CAAC,8BAA8B,EAAEG,iBAAiBH,QAAQG,MAAM,OAAO,GAAGA,OAAO;QAErF;IACF;AACF"}