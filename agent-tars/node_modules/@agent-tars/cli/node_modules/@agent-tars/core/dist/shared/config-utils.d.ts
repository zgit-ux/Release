import { AgentTARSOptions } from '../types';
/**
 * Creates default configuration options for AgentTARS
 */
export declare const AGENT_TARS_DEFAULT_OPTIONS: AgentTARSOptions;
/**
 * Utility type for deep partial objects
 * Allows creating partial mocks of complex objects
 */
export type DeepPartial<T> = T extends object ? {
    [P in keyof T]?: DeepPartial<T[P]>;
} : T;
/**
 * Deep merge function - merges source object properties into target object, supporting nested structures
 *
 * @param target The target object
 * @param source The source object
 * @param options Merge options
 * @returns The merged object
 */
export declare function deepMerge<T extends Record<string, any>>(target: T, source?: DeepPartial<T> | null, options?: {
    nonDestructive?: boolean;
}): T;
/**
 * Applies default options and merges with user options
 *
 * @param options User-provided options
 * @returns Complete merged options
 */
export declare function applyDefaultOptions<T extends AgentTARSOptions>(options: DeepPartial<T>): T;
//# sourceMappingURL=config-utils.d.ts.map