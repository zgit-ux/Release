import { ToolDefinition } from '@multimodal/mcp-agent';
import { Client } from '@modelcontextprotocol/sdk/client/index.js';
import { GUIAgent } from './gui-agent';
import { ConsoleLogger } from '@multimodal/mcp-agent';
import { BrowserControlMode } from './types';
/**
 * BrowserToolsManager - Controls the registration of browser tools based on selected strategy
 *
 * This manager implements a Strategy pattern for browser control:
 * - Encapsulates each browser control strategy (default, browser-use-only, gui-agent-only)
 * - Dynamically registers the appropriate tools based on the selected strategy
 * - Ensures proper integration between GUI Agent and MCP Browser Server tools
 */
export declare class BrowserToolsManager {
    private mode;
    private logger;
    private browserClient?;
    private guiAgent?;
    private registeredTools;
    private strategy;
    constructor(logger: ConsoleLogger, mode?: BrowserControlMode);
    /**
     * Set the MCP Browser client for DOM-based operations
     */
    setBrowserClient(client: Client): void;
    /**
     * Set the GUI Agent for vision-based operations
     */
    setGUIAgent(guiAgent: GUIAgent): void;
    /**
     * Register all browser tools according to the selected strategy
     * @param registerToolFn Function to register a tool with the agent
     * @returns Array of registered tool names
     */
    registerTools(registerToolFn: (tool: ToolDefinition) => void): Promise<string[]>;
    /**
     * Get current browser control mode
     */
    getMode(): BrowserControlMode;
    /**
     * Get registered tool names
     */
    getRegisteredTools(): string[];
    /**
     * Validate that all required components are available for the selected strategy
     */
    private validateRequiredComponents;
}
//# sourceMappingURL=browser-tools-manager.d.ts.map