/**
* Copyright (c) 2025 Bytedance, Inc. and its affiliates.
* SPDX-License-Identifier: Apache-2.0
*/
"use strict";
var __webpack_require__ = {};
(()=>{
    __webpack_require__.n = (module)=>{
        var getter = module && module.__esModule ? ()=>module['default'] : ()=>module;
        __webpack_require__.d(getter, {
            a: getter
        });
        return getter;
    };
})();
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
    createVisualTools: ()=>createVisualTools
});
const external_fs_namespaceObject = require("fs");
var external_fs_default = /*#__PURE__*/ __webpack_require__.n(external_fs_namespaceObject);
const external_path_namespaceObject = require("path");
var external_path_default = /*#__PURE__*/ __webpack_require__.n(external_path_namespaceObject);
const core_namespaceObject = require("@mcp-agent/core");
function createVisualTools(logger, browserGUIAgent) {
    const screenshotTool = new core_namespaceObject.Tool({
        id: 'browser_screenshot',
        description: '[browser] Take a screenshot of the current page or a specific area. Saves to workspace/images directory.',
        parameters: core_namespaceObject.z.object({
            area: core_namespaceObject.z.array(core_namespaceObject.z.number()).length(4).optional().describe('Optional area to capture as [x1, y1, x2, y2]. If not provided, captures the entire viewport.')
        }),
        function: async ({ area })=>{
            try {
                if (!browserGUIAgent) return {
                    status: 'error',
                    message: 'GUI Agent not initialized'
                };
                const page = await browserGUIAgent.getPage();
                const imagesDir = external_path_default().join(process.cwd(), 'images');
                if (!external_fs_default().existsSync(imagesDir)) external_fs_default().mkdirSync(imagesDir, {
                    recursive: true
                });
                const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
                const slug = `screenshot-${timestamp}`;
                const filename = `${slug}.png`;
                const filepath = external_path_default().join(imagesDir, filename);
                if (area && 4 === area.length) {
                    const [x1, y1, x2, y2] = area;
                    await page.screenshot({
                        path: filepath,
                        clip: {
                            x: x1,
                            y: y1,
                            width: x2 - x1,
                            height: y2 - y1
                        }
                    });
                    logger.info(`Took screenshot of area [${x1}, ${y1}, ${x2}, ${y2}] and saved to ${filepath}`);
                } else {
                    await page.screenshot({
                        path: filepath
                    });
                    logger.info(`Took full screenshot and saved to ${filepath}`);
                }
                return {
                    status: 'success',
                    filepath: filepath,
                    slug: slug,
                    message: `Screenshot saved to ${filepath}`
                };
            } catch (error) {
                logger.error(`Error taking screenshot: ${error}`);
                return {
                    status: 'error',
                    message: `Failed to take screenshot: ${error instanceof Error ? error.message : String(error)}`
                };
            }
        }
    });
    return [
        screenshotTool
    ];
}
exports.createVisualTools = __webpack_exports__.createVisualTools;
for(var __webpack_i__ in __webpack_exports__)if (-1 === [
    "createVisualTools"
].indexOf(__webpack_i__)) exports[__webpack_i__] = __webpack_exports__[__webpack_i__];
Object.defineProperty(exports, '__esModule', {
    value: true
});

//# sourceMappingURL=visual.js.map