{"version":3,"file":"search/search-tool.js","sources":["webpack://@agent-tars/core/webpack/runtime/define_property_getters","webpack://@agent-tars/core/webpack/runtime/has_own_property","webpack://@agent-tars/core/webpack/runtime/make_namespace_object","webpack://@agent-tars/core/./src/search/search-tool.ts"],"sourcesContent":["__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n        if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n            Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n        }\n    }\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/*\n * Copyright (c) 2025 Bytedance, Inc. and its affiliates.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ConsoleLogger, Tool, z } from '@mcp-agent/core';\nimport { SearchClient, SearchConfig, SearchProvider } from '@agent-infra/search';\nimport { AgentTARSSearchOptions } from '@agent-tars/interface';\nimport { LocalBrowser } from '@agent-infra/browser';\n\n/**\n * Configuration for search tool provider\n */\nexport interface SearchToolConfig extends AgentTARSSearchOptions {\n  /** External browser instance for browser_search provider */\n  externalBrowser?: LocalBrowser;\n}\n\n/**\n * SearchToolProvider - Direct integration with agent-infra/search\n *\n * This class provides a clean interface for creating search tools that\n * directly use the SearchClient from agent-infra/search, eliminating the\n * need for the mcp-server-search middleware.\n */\nexport class SearchToolProvider {\n  private logger: ConsoleLogger;\n  private searchClient: SearchClient<SearchProvider>;\n  private config: SearchToolConfig;\n\n  /**\n   * Create a new search tool provider\n   *\n   * @param logger - Logger instance\n   * @param config - Search configuration\n   */\n  constructor(logger: ConsoleLogger, config: SearchToolConfig) {\n    this.logger = logger.spawn('SearchToolProvider');\n    this.config = config;\n\n    // Map string provider to SearchProvider enum\n    const provider = this.mapProviderString(config.provider);\n\n    // Create search client configuration\n    const searchConfig: SearchConfig<SearchProvider> = {\n      provider,\n      providerConfig: {\n        // @ts-expect-error browser seach only\n        engine: config.browserSearch?.engine || 'google',\n        needVisitedUrls: config.browserSearch?.needVisitedUrls || false,\n        apiKey: config.apiKey,\n        baseUrl: config.baseUrl,\n      },\n      logger: this.logger,\n    };\n\n    // FIXME: Un-comment it after refine launch state management of `@agent-infra/browser` and\n    // Add browser instance for browser search if provided\n    // if (provider === SearchProvider.BrowserSearch && config.externalBrowser) {\n    //   // @ts-expect-error - The types are not perfectly aligned\n    //   searchConfig.providerConfig.browser = config.externalBrowser;\n    //   // @ts-expect-error\n    //   searchConfig.providerConfig.keepBrowserOpen = true;\n    // }\n\n    // Initialize search client\n    this.searchClient = new SearchClient(searchConfig);\n    this.logger.info(`Search tool provider initialized with ${config.provider}`);\n  }\n\n  /**\n   * Map string provider name to SearchProvider enum\n   */\n  private mapProviderString(provider: string): SearchProvider {\n    const providerMap: Record<string, SearchProvider> = {\n      browser_search: SearchProvider.BrowserSearch,\n      bing: SearchProvider.BingSearch,\n      tavily: SearchProvider.Tavily,\n      searxng: SearchProvider.SearXNG,\n      duckduckgo: SearchProvider.DuckduckgoSearch,\n    };\n\n    const resolvedProvider = providerMap[provider] || SearchProvider.BrowserSearch;\n    this.logger.debug(`Mapped provider ${provider} to ${resolvedProvider}`);\n\n    return resolvedProvider;\n  }\n\n  /**\n   * Create a search tool definition that can be registered with an agent\n   *\n   * @returns Tool definition for agent registration\n   */\n  createSearchTool(): Tool {\n    const MAX_WORDS = 7;\n\n    return new Tool({\n      id: 'web_search',\n      description:\n        `⚠️ SEARCH QUERY LENGTH LIMIT: ${MAX_WORDS} WORDS MAXIMUM ⚠️\\n\\n` +\n        'Search the web for information. For best results:\\n' +\n        '1) Use CONCISE queries (3-5 words ideal)\\n' +\n        '2) Include only ESSENTIAL keywords, not full questions\\n' +\n        '3) For complex topics, use multiple simple searches instead of one long query\\n' +\n        '4) Focus on specific terms that will appear on relevant pages',\n      parameters: z.object({\n        query: z.string().describe(`Search query - MUST BE CONCISE (maximum ${MAX_WORDS} words)`),\n        count: z\n          .number()\n          .optional()\n          .describe(`Number of results to return (default: ${this.config.count || 10})`),\n      }),\n      function: async ({ query, count }) => {\n        if (!query || query.trim() === '') {\n          return {\n            error: 'Search query is required',\n          };\n        }\n\n        try {\n          this.logger.info(`Performing search: \"${query}\" (count: ${count || this.config.count})`);\n\n          const results = await this.searchClient.search({\n            query,\n            count: count || this.config.count,\n          });\n\n          return results.pages;\n        } catch (error) {\n          this.logger.error(`Search error: ${error}`);\n          return {\n            error: `Search failed: ${error instanceof Error ? error.message : String(error)}`,\n          };\n        }\n      },\n    });\n  }\n}\n"],"names":["__webpack_require__","definition","key","Object","obj","prop","Symbol","SearchToolProvider","provider","providerMap","SearchProvider","resolvedProvider","MAX_WORDS","Tool","z","query","count","results","error","Error","String","logger","config","_config_browserSearch","_config_browserSearch1","searchConfig","SearchClient"],"mappings":"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"}