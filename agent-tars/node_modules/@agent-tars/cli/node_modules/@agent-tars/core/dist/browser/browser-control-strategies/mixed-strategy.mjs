/**
* Copyright (c) 2025 Bytedance, Inc. and its affiliates.
* SPDX-License-Identifier: Apache-2.0
*/
import { AbstractBrowserControlStrategy } from "./base-strategy.mjs";
import { createContentTools, createNavigationTools, createVisualTools } from "../tools/index.mjs";
class MixedControlStrategy extends AbstractBrowserControlStrategy {
    async registerTools(registerToolFn) {
        if (this.browserGUIAgent) {
            const guiAgentTool = this.browserGUIAgent.getTool();
            registerToolFn(guiAgentTool);
            this.registeredTools.add(guiAgentTool.name);
            const contentTools = createContentTools(this.logger, this.browserGUIAgent);
            const navigationTools = createNavigationTools(this.logger, this.browserGUIAgent);
            const visualTools = createVisualTools(this.logger, this.browserGUIAgent);
            [
                ...navigationTools,
                ...contentTools,
                ...visualTools
            ].forEach((tool)=>{
                registerToolFn(tool);
                this.registeredTools.add(tool.name);
            });
        }
        if (this.browserClient) {
            const browserTools = [
                'browser_click',
                'browser_form_input_fill',
                'browser_press_key',
                'browser_hover',
                'browser_scroll',
                'browser_select',
                'browser_get_clickable_elements',
                'browser_read_links',
                'browser_tab_list',
                'browser_new_tab',
                'browser_close_tab',
                'browser_switch_tab',
                'browser_evaluate'
            ];
            await this.registerMCPBrowserTools(registerToolFn, browserTools);
        }
        return Array.from(this.registeredTools);
    }
}
export { MixedControlStrategy };

//# sourceMappingURL=mixed-strategy.mjs.map