/**
* Copyright (c) 2025 Bytedance, Inc. and its affiliates.
* SPDX-License-Identifier: Apache-2.0
*/
import { AbstractBrowserControlStrategy } from "./base-strategy.mjs";
import { createContentTools, createNavigationTools, createStatusTools, createVisualTools } from "../tools/index.mjs";
class GUIAgentOnlyStrategy extends AbstractBrowserControlStrategy {
    async registerTools(registerToolFn) {
        if (this.browserGUIAgent) {
            const guiAgentTool = this.browserGUIAgent.getTool();
            registerToolFn(guiAgentTool);
            this.registeredTools.add(guiAgentTool.name);
            this.registerCustomBrowserTools(registerToolFn);
        }
        return Array.from(this.registeredTools);
    }
    registerCustomBrowserTools(registerToolFn) {
        if (!this.browserGUIAgent) return void this.logger.warn('GUI Agent not initialized, cannot register custom browser tools');
        const navigationTools = createNavigationTools(this.logger, this.browserGUIAgent);
        const contentTools = createContentTools(this.logger, this.browserGUIAgent);
        const statusTools = createStatusTools(this.logger, this.browserGUIAgent);
        const visualTools = createVisualTools(this.logger, this.browserGUIAgent);
        [
            ...navigationTools,
            ...contentTools,
            ...statusTools,
            ...visualTools
        ].forEach((tool)=>{
            registerToolFn(tool);
            this.registeredTools.add(tool.name);
        });
        this.logger.info(`Registered ${this.registeredTools.size} custom browser tools`);
    }
}
export { GUIAgentOnlyStrategy };

//# sourceMappingURL=gui-agent-only-strategy.mjs.map