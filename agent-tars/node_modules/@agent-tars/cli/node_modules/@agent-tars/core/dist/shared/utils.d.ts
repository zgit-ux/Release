export interface ImageCompressionOptions {
    quality: number;
    format?: 'jpeg' | 'png' | 'webp';
    width?: number;
    height?: number;
    tempDir?: string;
}
export interface CompressionResult {
    originalSize: number;
    compressedSize: number;
    compressionRatio: number;
    path: string;
    buffer: Buffer;
}
/**
 * High-performance image compression utility class
 */
export declare class ImageCompressor {
    readonly options: ImageCompressionOptions;
    constructor(options?: ImageCompressionOptions);
    /**
     * Compress image and return Buffer without writing to file
     * @param imageBuffer Image Buffer
     */
    compressToBuffer(imageBuffer: Buffer): Promise<Buffer>;
    /**
     * Select plugins based on target format
     */
    private getPluginsForFormat;
    /**
     * Get formatted description of current compression options
     */
    getOptionsDescription(): string;
}
/**
 * Format byte size to human readable format
 * @param bytes Number of bytes
 */
export declare function formatBytes(bytes: number): string;
//# sourceMappingURL=utils.d.ts.map