/**
* Copyright (c) 2025 Bytedance, Inc. and its affiliates.
* SPDX-License-Identifier: Apache-2.0
*/
"use strict";
var __webpack_require__ = {};
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
    BrowserToolsManager: ()=>BrowserToolsManager
});
const strategy_factory_js_namespaceObject = require("./browser-control-strategies/strategy-factory.js");
function _define_property(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
class BrowserToolsManager {
    setBrowserClient(client) {
        this.browserClient = client;
        this.strategy.setBrowserClient(client);
    }
    setBrowserGUIAgent(guiAgent) {
        this.browserGUIAgent = guiAgent;
        this.strategy.setBrowserGUIAgent(guiAgent);
    }
    async registerTools(registerToolFn) {
        this.registeredTools.clear();
        if (!this.validateRequiredComponents()) return [];
        this.logger.info(`\u{1F310} Activating browser control mode: ${this.mode}`);
        this.logger.info(`\u{1F50D} Strategy: ${this.strategy.constructor.name}`);
        const registeredTools = await this.strategy.registerTools(registerToolFn);
        registeredTools.forEach((toolName)=>this.registeredTools.add(toolName));
        this.logger.info(`\u{2705} Registered ${registeredTools.length} browser tools:`);
        if (registeredTools.length > 0) registeredTools.forEach((tool)=>{
            this.logger.info(`  \u{2022} ${tool}`);
        });
        return Array.from(this.registeredTools);
    }
    getMode() {
        return this.mode;
    }
    getRegisteredTools() {
        return Array.from(this.registeredTools);
    }
    validateRequiredComponents() {
        if (('mixed' === this.mode || 'browser-use-only' === this.mode) && !this.browserClient) {
            this.logger.warn('Browser client not set but required for current strategy');
            return false;
        }
        if (('mixed' === this.mode || 'gui-agent-only' === this.mode) && !this.browserGUIAgent) {
            this.logger.warn('GUI Agent not set but required for current strategy');
            return false;
        }
        return true;
    }
    constructor(logger, mode = 'mixed'){
        _define_property(this, "mode", void 0);
        _define_property(this, "logger", void 0);
        _define_property(this, "browserClient", void 0);
        _define_property(this, "browserGUIAgent", void 0);
        _define_property(this, "registeredTools", void 0);
        _define_property(this, "strategy", void 0);
        this.mode = mode;
        this.registeredTools = new Set();
        this.logger = logger.spawn('BrowserToolsManager');
        this.logger.info(`Initialized with mode: ${mode}`);
        this.strategy = strategy_factory_js_namespaceObject.StrategyFactory.createStrategy(mode, this.logger);
    }
}
exports.BrowserToolsManager = __webpack_exports__.BrowserToolsManager;
for(var __webpack_i__ in __webpack_exports__)if (-1 === [
    "BrowserToolsManager"
].indexOf(__webpack_i__)) exports[__webpack_i__] = __webpack_exports__[__webpack_i__];
Object.defineProperty(exports, '__esModule', {
    value: true
});

//# sourceMappingURL=browser-tools-manager.js.map