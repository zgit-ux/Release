/**
* Copyright (c) 2025 Bytedance, Inc. and its affiliates.
* SPDX-License-Identifier: Apache-2.0
*/
"use strict";
var __webpack_require__ = {};
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
    BaseBrowserTool: ()=>BaseBrowserTool,
    CustomBrowserTool: ()=>CustomBrowserTool,
    MCPBrowserTool: ()=>MCPBrowserTool
});
function _define_property(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
class BaseBrowserTool {
    setBrowserClient(client) {
        this.browserClient = client;
    }
    setBrowserGUIAgent(guiAgent) {
        this.browserGUIAgent = guiAgent;
    }
    constructor(logger){
        _define_property(this, "logger", void 0);
        _define_property(this, "browserClient", void 0);
        _define_property(this, "browserGUIAgent", void 0);
        _define_property(this, "category", 'browser');
        this.logger = logger.spawn(this.constructor.name);
    }
}
class MCPBrowserTool extends BaseBrowserTool {
    createMCPToolDefinition(name, description) {
        if (!this.browserClient) {
            this.logger.warn(`Cannot create tool ${name}: Browser client not set`);
            return null;
        }
        return {
            name,
            description: `[${this.category}] ${description}`,
            schema: {
                type: 'object',
                properties: {}
            },
            function: async (args)=>{
                try {
                    const result = await this.browserClient.callTool({
                        name,
                        arguments: args
                    });
                    return result.content;
                } catch (error) {
                    this.logger.error(`Error executing tool '${name}':`, error);
                    throw error;
                }
            }
        };
    }
}
class CustomBrowserTool extends BaseBrowserTool {
    async getPage() {
        if (!this.browserGUIAgent) throw new Error('GUI Agent not initialized');
        return this.browserGUIAgent.getPage();
    }
}
var __webpack_export_target__ = exports;
for(var __webpack_i__ in __webpack_exports__)__webpack_export_target__[__webpack_i__] = __webpack_exports__[__webpack_i__];
if (__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, '__esModule', {
    value: true
});

//# sourceMappingURL=base.js.map