{"version":3,"file":"browser/browser-control-strategies/browser-use-only-strategy.mjs","sources":["webpack://@agent-tars/core/./src/browser/browser-control-strategies/browser-use-only-strategy.ts"],"sourcesContent":["import { Tool } from '@mcp-agent/core';\nimport { AbstractBrowserControlStrategy } from './base-strategy';\nimport { createContentTools } from '../tools';\n\n/**\n * BrowserUseOnlyStrategy - Implements the 'browser-use-only' browser control mode\n *\n * This strategy uses exclusively DOM-based tools from the MCP Browser server\n * for all browser interactions, without any vision-based capabilities.\n */\nexport class BrowserUseOnlyStrategy extends AbstractBrowserControlStrategy {\n  /**\n   * Register all MCP Browser tools\n   */\n  async registerTools(registerToolFn: (tool: Tool) => void): Promise<string[]> {\n    if (!this.browserClient) {\n      this.logger.warn('Browser client not set, cannot register browser tools');\n      return [];\n    }\n\n    // Register custom markdown extraction tool if GUI Agent is available\n    if (this.browserGUIAgent) {\n      const contentTools = createContentTools(this.logger, this.browserGUIAgent);\n      contentTools.forEach((tool) => {\n        registerToolFn(tool);\n        this.registeredTools.add(tool.name);\n      });\n    }\n\n    // Register all other browser tools from MCP Browser server\n    const browserTools = [\n      // Navigation tools\n      'browser_navigate',\n      'browser_go_back',\n      'browser_go_forward',\n\n      // Skip content extraction tools - using custom implementation\n      // 'browser_get_markdown',\n      // 'browser_get_html',\n      // 'browser_get_text',\n\n      // Interaction tools\n      'browser_click',\n      'browser_press_key',\n      'browser_hover',\n      'browser_scroll',\n      'browser_form_input_fill',\n      'browser_select',\n\n      // Status tools\n      'browser_get_clickable_elements',\n      'browser_read_links',\n\n      // Visual tools\n      // 'browser_screenshot',\n\n      // Tab management\n      'browser_tab_list',\n      'browser_new_tab',\n      'browser_close_tab',\n      'browser_switch_tab',\n\n      // Advanced tools\n      'browser_evaluate',\n    ];\n\n    await this.registerMCPBrowserTools(registerToolFn, browserTools);\n\n    return Array.from(this.registeredTools);\n  }\n}\n"],"names":["BrowserUseOnlyStrategy","AbstractBrowserControlStrategy","registerToolFn","contentTools","createContentTools","tool","browserTools","Array"],"mappings":";;;;;;AAUO,MAAMA,+BAA+BC;IAI1C,MAAM,cAAcC,cAAoC,EAAqB;QAC3E,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;YACvB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;YACjB,OAAO,EAAE;QACX;QAGA,IAAI,IAAI,CAAC,eAAe,EAAE;YACxB,MAAMC,eAAeC,mBAAmB,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,eAAe;YACzED,aAAa,OAAO,CAAC,CAACE;gBACpBH,eAAeG;gBACf,IAAI,CAAC,eAAe,CAAC,GAAG,CAACA,KAAK,IAAI;YACpC;QACF;QAGA,MAAMC,eAAe;YAEnB;YACA;YACA;YAQA;YACA;YACA;YACA;YACA;YACA;YAGA;YACA;YAMA;YACA;YACA;YACA;YAGA;SACD;QAED,MAAM,IAAI,CAAC,uBAAuB,CAACJ,gBAAgBI;QAEnD,OAAOC,MAAM,IAAI,CAAC,IAAI,CAAC,eAAe;IACxC;AACF"}