/**
* Copyright (c) 2025 Bytedance, Inc. and its affiliates.
* SPDX-License-Identifier: Apache-2.0
*/
import { READABILITY_SCRIPT, toMarkdown } from "@agent-infra/shared";
function _define_property(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
class PaginatedContentExtractor {
    async extractContent(page, pageNumber = 1) {
        try {
            this.logger.debug(`Extracting content page ${pageNumber} with max length ${this.pageSize}`);
            const extractionResult = await page.evaluate((readabilityScript)=>{
                const Readability = new Function('module', `${readabilityScript}\nreturn module.exports`)({});
                const documentClone = document.cloneNode(true);
                documentClone.querySelectorAll("script,noscript,style,link,svg,img,video,iframe,canvas,.reflist").forEach((el)=>el.remove());
                const article = new Readability(documentClone).parse();
                const content = (null == article ? void 0 : article.content) || '';
                const title = document.title;
                return {
                    content,
                    title: (null == article ? void 0 : article.title) || title,
                    fullContent: content
                };
            }, READABILITY_SCRIPT);
            const fullMarkdown = toMarkdown(extractionResult.fullContent || '');
            const totalPages = Math.ceil(fullMarkdown.length / this.pageSize);
            const validPageNumber = Math.min(Math.max(1, pageNumber), totalPages);
            const startIndex = (validPageNumber - 1) * this.pageSize;
            const endIndex = Math.min(startIndex + this.pageSize, fullMarkdown.length);
            const pageContent = fullMarkdown.substring(startIndex, endIndex);
            let contentWithPagination = pageContent;
            if (totalPages > 1) {
                const paginationInfo = `\n\n---\n\n*Page ${validPageNumber} of ${totalPages}. ${validPageNumber < totalPages ? `There are ${totalPages - validPageNumber} more pages with additional content.` : 'This is the last page.'}*\n`;
                contentWithPagination += paginationInfo;
            }
            if (1 === validPageNumber && extractionResult.title) contentWithPagination = `# ${extractionResult.title}\n\n${contentWithPagination}`;
            return {
                content: contentWithPagination,
                totalPages,
                currentPage: validPageNumber,
                hasMorePages: validPageNumber < totalPages,
                title: extractionResult.title
            };
        } catch (error) {
            this.logger.error(`Error extracting paginated content: ${error}`);
            throw new Error(`Content extraction failed: ${error instanceof Error ? error.message : String(error)}`);
        }
    }
    constructor(logger, pageSize = 100000){
        _define_property(this, "logger", void 0);
        _define_property(this, "pageSize", void 0);
        this.logger = logger;
        this.pageSize = pageSize;
    }
}
export { PaginatedContentExtractor };

//# sourceMappingURL=content-extractor.mjs.map