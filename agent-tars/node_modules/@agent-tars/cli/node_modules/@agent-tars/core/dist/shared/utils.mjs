/**
* Copyright (c) 2025 Bytedance, Inc. and its affiliates.
* SPDX-License-Identifier: Apache-2.0
*/
import external_imagemin_default from "imagemin";
import external_imagemin_pngquant_default from "imagemin-pngquant";
import external_imagemin_mozjpeg_default from "imagemin-mozjpeg";
import external_imagemin_webp_default from "imagemin-webp";
function _define_property(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
class ImageCompressor {
    async compressToBuffer(imageBuffer) {
        const plugins = this.getPluginsForFormat();
        return await external_imagemin_default.buffer(imageBuffer, {
            plugins
        });
    }
    getPluginsForFormat() {
        const quality = this.options.quality / 100;
        switch(this.options.format){
            case 'jpeg':
                return [
                    external_imagemin_mozjpeg_default({
                        quality: this.options.quality
                    })
                ];
            case 'png':
                return [
                    external_imagemin_pngquant_default({
                        quality: [
                            quality,
                            Math.min(quality + 0.2, 1)
                        ]
                    })
                ];
            case 'webp':
                return [
                    external_imagemin_webp_default({
                        quality: this.options.quality
                    })
                ];
            default:
                return [
                    external_imagemin_webp_default({
                        quality: this.options.quality
                    })
                ];
        }
    }
    getOptionsDescription() {
        return `Quality: ${this.options.quality}, Format: ${this.options.format}${this.options.width ? `, Width: ${this.options.width}px` : ''}${this.options.height ? `, Height: ${this.options.height}px` : ''}`;
    }
    constructor(options){
        _define_property(this, "options", void 0);
        this.options = {
            quality: (null == options ? void 0 : options.quality) ?? 80,
            format: (null == options ? void 0 : options.format) ?? 'webp',
            width: null == options ? void 0 : options.width,
            height: null == options ? void 0 : options.height
        };
    }
}
function formatBytes(bytes) {
    if (0 === bytes) return '0 Bytes';
    const k = 1024;
    const sizes = [
        'Bytes',
        'KB',
        'MB',
        'GB'
    ];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return `${parseFloat((bytes / Math.pow(k, i)).toFixed(2))} ${sizes[i]}`;
}
export { ImageCompressor, formatBytes };

//# sourceMappingURL=utils.mjs.map