/**
* Copyright (c) 2025 Bytedance, Inc. and its affiliates.
* SPDX-License-Identifier: Apache-2.0
*/
"use strict";
var __webpack_require__ = {};
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
    BrowserManager: ()=>BrowserManager
});
const browser_namespaceObject = require("@agent-infra/browser");
function _define_property(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
class BrowserManager {
    static getInstance(logger) {
        if (!BrowserManager.instance) BrowserManager.instance = new BrowserManager(logger);
        return BrowserManager.instance;
    }
    getBrowser() {
        if (!this.browser) {
            this.logger.info('Creating browser instance (not launched yet)');
            this.browser = new browser_namespaceObject.LocalBrowser({
                logger: this.logger.spawn('LocalBrowser')
            });
        }
        return this.browser;
    }
    async launchBrowser(options = {}) {
        if (this.isLaunched) return void this.logger.info('Browser already launched, skipping launch');
        try {
            this.logger.info("\uD83C\uDF10 Launching browser instance...");
            const browser = this.getBrowser();
            await browser.launch(options);
            this.isLaunched = true;
            this.logger.success("\u2705 Browser instance launched successfully");
        } catch (error) {
            this.logger.error(`\u{274C} Failed to launch browser: ${error}`);
            throw error;
        }
    }
    async closeAllPages() {
        if (!this.browser || !this.isLaunched) return void this.logger.info('Browser not launched, no pages to close');
        try {
            this.logger.info('Closing browser pages...');
            const pages = await this.browser.getBrowser().pages();
            for(let i = 0; i < pages.length; i++)if (i === pages.length - 1) await pages[i].goto('about:blank');
            else await pages[i].close();
        } catch (error) {
            this.logger.error(`\u{274C} Error managing browser pages: ${error}`);
        }
    }
    isLaunchingComplete() {
        return this.isLaunched;
    }
    async isBrowserAlive() {
        if (!this.browser || !this.isLaunched) return false;
        return this.browser.isBrowserAlive();
    }
    async closeBrowser() {
        if (this.browser && this.isLaunched) try {
            this.logger.info('Closing browser instance...');
            await this.browser.close();
            this.logger.info('Browser instance closed successfully');
        } catch (error) {
            this.logger.error(`Error closing browser: ${error}`);
        } finally{
            this.isLaunched = false;
        }
    }
    static resetInstance() {
        BrowserManager.instance = null;
    }
    constructor(logger){
        _define_property(this, "browser", null);
        _define_property(this, "isLaunched", false);
        _define_property(this, "logger", void 0);
        this.logger = logger.spawn('BrowserManager');
        this.logger.info('Browser manager initialized (browser not launched yet)');
    }
}
_define_property(BrowserManager, "instance", null);
exports.BrowserManager = __webpack_exports__.BrowserManager;
for(var __webpack_i__ in __webpack_exports__)if (-1 === [
    "BrowserManager"
].indexOf(__webpack_i__)) exports[__webpack_i__] = __webpack_exports__[__webpack_i__];
Object.defineProperty(exports, '__esModule', {
    value: true
});

//# sourceMappingURL=browser-manager.js.map