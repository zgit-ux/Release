/**
* Copyright (c) 2025 Bytedance, Inc. and its affiliates.
* SPDX-License-Identifier: Apache-2.0
*/
import * as __WEBPACK_EXTERNAL_MODULE__multimodal_mcp_agent_4b976ab5__ from "@multimodal/mcp-agent";
import * as __WEBPACK_EXTERNAL_MODULE__base_strategy_mjs_30189777__ from "./base-strategy.mjs";
class GUIAgentOnlyStrategy extends __WEBPACK_EXTERNAL_MODULE__base_strategy_mjs_30189777__.AbstractBrowserControlStrategy {
    async registerTools(registerToolFn) {
        if (this.guiAgent) {
            const guiAgentTool = this.guiAgent.getToolDefinition();
            registerToolFn(guiAgentTool);
            this.registeredTools.add(guiAgentTool.name);
            this.registerCustomBrowserTools(registerToolFn);
        }
        return Array.from(this.registeredTools);
    }
    registerCustomBrowserTools(registerToolFn) {
        const navigateTool = new __WEBPACK_EXTERNAL_MODULE__multimodal_mcp_agent_4b976ab5__.Tool({
            id: 'browser_navigate',
            description: '[browser] Navigate to a URL',
            parameters: __WEBPACK_EXTERNAL_MODULE__multimodal_mcp_agent_4b976ab5__.z.object({
                url: __WEBPACK_EXTERNAL_MODULE__multimodal_mcp_agent_4b976ab5__.z.string().describe('URL to navigate to')
            }),
            function: async ({ url })=>{
                try {
                    if (!this.guiAgent) return {
                        status: 'error',
                        message: 'GUI Agent not initialized'
                    };
                    const page = await this.guiAgent.getPage();
                    await page.goto(url, {
                        waitUntil: 'networkidle2'
                    });
                    return {
                        status: 'success',
                        message: `Navigated to ${url}`
                    };
                } catch (error) {
                    this.logger.error(`Error navigating to URL: ${error}`);
                    return {
                        status: 'error',
                        message: `Failed to navigate: ${error instanceof Error ? error.message : String(error)}`
                    };
                }
            }
        });
        const backTool = new __WEBPACK_EXTERNAL_MODULE__multimodal_mcp_agent_4b976ab5__.Tool({
            id: 'browser_back',
            description: '[browser] Go back to the previous page',
            parameters: __WEBPACK_EXTERNAL_MODULE__multimodal_mcp_agent_4b976ab5__.z.object({}),
            function: async ()=>{
                try {
                    if (!this.guiAgent) return {
                        status: 'error',
                        message: 'GUI Agent not initialized'
                    };
                    const page = await this.guiAgent.getPage();
                    await page.goBack();
                    return {
                        status: 'success',
                        message: 'Navigated back'
                    };
                } catch (error) {
                    this.logger.error(`Error navigating back: ${error}`);
                    return {
                        status: 'error',
                        message: `Failed to navigate back: ${error instanceof Error ? error.message : String(error)}`
                    };
                }
            }
        });
        const forwardTool = new __WEBPACK_EXTERNAL_MODULE__multimodal_mcp_agent_4b976ab5__.Tool({
            id: 'browser_forward',
            description: '[browser] Go forward to the next page',
            parameters: __WEBPACK_EXTERNAL_MODULE__multimodal_mcp_agent_4b976ab5__.z.object({}),
            function: async ()=>{
                try {
                    if (!this.guiAgent) return {
                        status: 'error',
                        message: 'GUI Agent not initialized'
                    };
                    const page = await this.guiAgent.getPage();
                    await page.goForward();
                    return {
                        status: 'success',
                        message: 'Navigated forward'
                    };
                } catch (error) {
                    this.logger.error(`Error navigating forward: ${error}`);
                    return {
                        status: 'error',
                        message: `Failed to navigate forward: ${error instanceof Error ? error.message : String(error)}`
                    };
                }
            }
        });
        const refreshTool = new __WEBPACK_EXTERNAL_MODULE__multimodal_mcp_agent_4b976ab5__.Tool({
            id: 'browser_refresh',
            description: '[browser] Refresh the current page',
            parameters: __WEBPACK_EXTERNAL_MODULE__multimodal_mcp_agent_4b976ab5__.z.object({}),
            function: async ()=>{
                try {
                    if (!this.guiAgent) return {
                        status: 'error',
                        message: 'GUI Agent not initialized'
                    };
                    const page = await this.guiAgent.getPage();
                    await page.reload();
                    return {
                        status: 'success',
                        message: 'Page refreshed'
                    };
                } catch (error) {
                    this.logger.error(`Error refreshing page: ${error}`);
                    return {
                        status: 'error',
                        message: `Failed to refresh: ${error instanceof Error ? error.message : String(error)}`
                    };
                }
            }
        });
        new __WEBPACK_EXTERNAL_MODULE__multimodal_mcp_agent_4b976ab5__.Tool({
            id: 'browser_get_markdown',
            description: '[browser] Get the content of the current page as markdown',
            parameters: __WEBPACK_EXTERNAL_MODULE__multimodal_mcp_agent_4b976ab5__.z.object({}),
            function: async ()=>{
                try {
                    if (!this.guiAgent) return {
                        status: 'error',
                        message: 'GUI Agent not initialized'
                    };
                    const page = await this.guiAgent.getPage();
                    const markdown = await page.evaluate(()=>{
                        const convertToMarkdown = (html)=>{
                            const div = document.createElement('div');
                            div.innerHTML = html;
                            const scripts = div.querySelectorAll("script, style");
                            scripts.forEach((el)=>el.remove());
                            return div.textContent || '';
                        };
                        return convertToMarkdown(document.body.innerHTML);
                    });
                    return markdown;
                } catch (error) {
                    this.logger.error(`Error extracting markdown: ${error}`);
                    return `Failed to extract content: ${error instanceof Error ? error.message : String(error)}`;
                }
            }
        });
        const getUrlTool = new __WEBPACK_EXTERNAL_MODULE__multimodal_mcp_agent_4b976ab5__.Tool({
            id: 'browser_get_url',
            description: '[browser] Get the current page URL',
            parameters: __WEBPACK_EXTERNAL_MODULE__multimodal_mcp_agent_4b976ab5__.z.object({}),
            function: async ()=>{
                try {
                    if (!this.guiAgent) return {
                        status: 'error',
                        message: 'GUI Agent not initialized'
                    };
                    const page = await this.guiAgent.getPage();
                    return await page.url();
                } catch (error) {
                    this.logger.error(`Error getting URL: ${error}`);
                    return `Failed to get URL: ${error instanceof Error ? error.message : String(error)}`;
                }
            }
        });
        const getTitleTool = new __WEBPACK_EXTERNAL_MODULE__multimodal_mcp_agent_4b976ab5__.Tool({
            id: 'browser_get_title',
            description: '[browser] Get the current page title',
            parameters: __WEBPACK_EXTERNAL_MODULE__multimodal_mcp_agent_4b976ab5__.z.object({}),
            function: async ()=>{
                try {
                    if (!this.guiAgent) return {
                        status: 'error',
                        message: 'GUI Agent not initialized'
                    };
                    const page = await this.guiAgent.getPage();
                    return await page.title();
                } catch (error) {
                    this.logger.error(`Error getting title: ${error}`);
                    return `Failed to get title: ${error instanceof Error ? error.message : String(error)}`;
                }
            }
        });
        [
            navigateTool,
            backTool,
            forwardTool,
            refreshTool,
            getUrlTool,
            getTitleTool
        ].forEach((tool)=>{
            registerToolFn(tool);
            this.registeredTools.add(tool.name);
        });
        this.logger.info(`Registered ${this.registeredTools.size} custom browser tools`);
    }
}
export { GUIAgentOnlyStrategy };

//# sourceMappingURL=gui-agent-only-strategy.mjs.map