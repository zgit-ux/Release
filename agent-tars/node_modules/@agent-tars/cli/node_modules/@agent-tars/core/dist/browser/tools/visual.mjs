/**
* Copyright (c) 2025 Bytedance, Inc. and its affiliates.
* SPDX-License-Identifier: Apache-2.0
*/
import external_fs_default from "fs";
import external_path_default from "path";
import { Tool, z } from "@mcp-agent/core";
function createVisualTools(logger, browserGUIAgent) {
    const screenshotTool = new Tool({
        id: 'browser_screenshot',
        description: '[browser] Take a screenshot of the current page or a specific area. Saves to workspace/images directory.',
        parameters: z.object({
            area: z.array(z.number()).length(4).optional().describe('Optional area to capture as [x1, y1, x2, y2]. If not provided, captures the entire viewport.')
        }),
        function: async ({ area })=>{
            try {
                if (!browserGUIAgent) return {
                    status: 'error',
                    message: 'GUI Agent not initialized'
                };
                const page = await browserGUIAgent.getPage();
                const imagesDir = external_path_default.join(process.cwd(), 'images');
                if (!external_fs_default.existsSync(imagesDir)) external_fs_default.mkdirSync(imagesDir, {
                    recursive: true
                });
                const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
                const slug = `screenshot-${timestamp}`;
                const filename = `${slug}.png`;
                const filepath = external_path_default.join(imagesDir, filename);
                if (area && 4 === area.length) {
                    const [x1, y1, x2, y2] = area;
                    await page.screenshot({
                        path: filepath,
                        clip: {
                            x: x1,
                            y: y1,
                            width: x2 - x1,
                            height: y2 - y1
                        }
                    });
                    logger.info(`Took screenshot of area [${x1}, ${y1}, ${x2}, ${y2}] and saved to ${filepath}`);
                } else {
                    await page.screenshot({
                        path: filepath
                    });
                    logger.info(`Took full screenshot and saved to ${filepath}`);
                }
                return {
                    status: 'success',
                    filepath: filepath,
                    slug: slug,
                    message: `Screenshot saved to ${filepath}`
                };
            } catch (error) {
                logger.error(`Error taking screenshot: ${error}`);
                return {
                    status: 'error',
                    message: `Failed to take screenshot: ${error instanceof Error ? error.message : String(error)}`
                };
            }
        }
    });
    return [
        screenshotTool
    ];
}
export { createVisualTools };

//# sourceMappingURL=visual.mjs.map