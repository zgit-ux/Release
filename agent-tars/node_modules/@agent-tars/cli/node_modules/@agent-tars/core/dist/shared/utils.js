/**
* Copyright (c) 2025 Bytedance, Inc. and its affiliates.
* SPDX-License-Identifier: Apache-2.0
*/
"use strict";
var __webpack_require__ = {};
(()=>{
    __webpack_require__.n = (module)=>{
        var getter = module && module.__esModule ? ()=>module['default'] : ()=>module;
        __webpack_require__.d(getter, {
            a: getter
        });
        return getter;
    };
})();
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
    ImageCompressor: ()=>ImageCompressor,
    formatBytes: ()=>formatBytes
});
const external_imagemin_namespaceObject = require("imagemin");
var external_imagemin_default = /*#__PURE__*/ __webpack_require__.n(external_imagemin_namespaceObject);
const external_imagemin_pngquant_namespaceObject = require("imagemin-pngquant");
var external_imagemin_pngquant_default = /*#__PURE__*/ __webpack_require__.n(external_imagemin_pngquant_namespaceObject);
const external_imagemin_mozjpeg_namespaceObject = require("imagemin-mozjpeg");
var external_imagemin_mozjpeg_default = /*#__PURE__*/ __webpack_require__.n(external_imagemin_mozjpeg_namespaceObject);
const external_imagemin_webp_namespaceObject = require("imagemin-webp");
var external_imagemin_webp_default = /*#__PURE__*/ __webpack_require__.n(external_imagemin_webp_namespaceObject);
function _define_property(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
class ImageCompressor {
    async compressToBuffer(imageBuffer) {
        const plugins = this.getPluginsForFormat();
        return await external_imagemin_default().buffer(imageBuffer, {
            plugins
        });
    }
    getPluginsForFormat() {
        const quality = this.options.quality / 100;
        switch(this.options.format){
            case 'jpeg':
                return [
                    external_imagemin_mozjpeg_default()({
                        quality: this.options.quality
                    })
                ];
            case 'png':
                return [
                    external_imagemin_pngquant_default()({
                        quality: [
                            quality,
                            Math.min(quality + 0.2, 1)
                        ]
                    })
                ];
            case 'webp':
                return [
                    external_imagemin_webp_default()({
                        quality: this.options.quality
                    })
                ];
            default:
                return [
                    external_imagemin_webp_default()({
                        quality: this.options.quality
                    })
                ];
        }
    }
    getOptionsDescription() {
        return `Quality: ${this.options.quality}, Format: ${this.options.format}${this.options.width ? `, Width: ${this.options.width}px` : ''}${this.options.height ? `, Height: ${this.options.height}px` : ''}`;
    }
    constructor(options){
        _define_property(this, "options", void 0);
        this.options = {
            quality: (null == options ? void 0 : options.quality) ?? 80,
            format: (null == options ? void 0 : options.format) ?? 'webp',
            width: null == options ? void 0 : options.width,
            height: null == options ? void 0 : options.height
        };
    }
}
function formatBytes(bytes) {
    if (0 === bytes) return '0 Bytes';
    const k = 1024;
    const sizes = [
        'Bytes',
        'KB',
        'MB',
        'GB'
    ];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return `${parseFloat((bytes / Math.pow(k, i)).toFixed(2))} ${sizes[i]}`;
}
exports.ImageCompressor = __webpack_exports__.ImageCompressor;
exports.formatBytes = __webpack_exports__.formatBytes;
for(var __webpack_i__ in __webpack_exports__)if (-1 === [
    "ImageCompressor",
    "formatBytes"
].indexOf(__webpack_i__)) exports[__webpack_i__] = __webpack_exports__[__webpack_i__];
Object.defineProperty(exports, '__esModule', {
    value: true
});

//# sourceMappingURL=utils.js.map