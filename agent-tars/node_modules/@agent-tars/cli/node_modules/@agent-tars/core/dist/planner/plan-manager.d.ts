import { ResolvedModel, ChatCompletionMessageParam, ConsoleLogger, AgentEventStream, Tool, OpenAI } from '@mcp-agent/core';
import { AgentTARSPlannerOptions } from '../types';
import type { AgentTARS } from '../agent-tars';
/**
 * Default planning system prompt extension that guides the agent to create and follow plans
 */
export declare const DEFAULT_PLANNING_PROMPT = "\n<planning_approach>\nYou are a methodical agent that follows a plan-and-solve approach for complex tasks. When handling tasks:\n\n1. Analyze if the task requires a multi-step plan:\n   - For complex research, analysis, or multi-part tasks \u2192 Create a plan\n   - For simple questions or tasks \u2192 Skip planning and answer directly\n\n2. If a plan is needed:\n   - Create a clear, step-by-step plan with specific goals\n   - Execute each step in order, using appropriate tools\n   - Update the plan as you learn new information\n   - Mark steps as completed when done\n   - Once ALL steps are complete, call the \"final_answer\" tool\n\n3. During execution:\n   - Adapt your plan as needed based on new findings\n   - Be willing to simplify the plan if the task turns out simpler than expected\n   - Always complete your plan before providing final answers\n</planning_approach>\n\n<planning_constraints>\nIMPORTANT CONSTRAINTS:\n- Create AT MOST 3 key steps in your plan\n- Focus on information gathering and research steps\n- Call the \"final_answer\" tool once ALL plan steps are complete\n- For simple questions, you can skip planning entirely\n</planning_constraints>\n";
/**
 * PlanManager - Manages planning functionality for the agent
 *
 * This class handles the creation, updating, and tracking of plans,
 * as well as registering necessary tools for plan management.
 */
export declare class PlanManager {
    private logger;
    private eventStream;
    private agent;
    private currentPlan;
    private taskCompleted;
    private finalAnswerCalled;
    private maxSteps;
    private planningPrompt;
    private hasPlan;
    private deepResearchGenerator;
    /**
     * Creates a new PlanManager instance
     *
     * @param logger - Logger instance for logging plan-related events
     * @param eventStream - EventStream for tracking plan events
     * @param options - Configuration options for the planning system
     */
    constructor(logger: ConsoleLogger, eventStream: AgentEventStream.Processor, agent: AgentTARS, options?: AgentTARSPlannerOptions);
    /**
     * Checks if a plan has been generated for the current task
     */
    hasPlanGenerated(): boolean;
    /**
     * Gets the planning system prompt extension
     */
    getPlanningPrompt(): string;
    /**
     * Registers planning-related tools with the agent
     *
     * @returns Array of tool definitions to register
     */
    getTools(): Tool[];
    /**
     * Checks if the final report has been called
     */
    isFinalAnswerCalled(): boolean;
    /**
     * Resets the final report status
     */
    resetFinalAnswerStatus(): void;
    /**
     * Checks if all plan steps are complete
     */
    isTaskCompleted(): boolean;
    /**
     * Gets the current plan steps
     */
    getCurrentPlan(): AgentEventStream.PlanStep[];
    /**
     * Generates the initial plan for a task
     *
     * @param llmClient - The LLM client to use for plan generation
     * @param resolvedModel - The resolved model configuration
     * @param messages - The current conversation messages
     * @param sessionId - The session identifier
     */
    generateInitialPlan(llmClient: OpenAI, resolvedModel: ResolvedModel, messages: ChatCompletionMessageParam[], sessionId: string): Promise<void>;
    /**
     * Updates the plan based on current progress
     *
     * @param llmClient - The LLM client to use for plan updates
     * @param resolvedModel - The resolved model configuration
     * @param messages - The current conversation messages
     * @param sessionId - The session identifier
     */
    updatePlan(llmClient: OpenAI, resolvedModel: ResolvedModel, messages: ChatCompletionMessageParam[], sessionId: string): Promise<void>;
    /**
     * Resets the planner state for a new session
     */
    reset(): void;
}
//# sourceMappingURL=plan-manager.d.ts.map