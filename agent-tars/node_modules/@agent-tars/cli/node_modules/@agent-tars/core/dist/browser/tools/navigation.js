/**
* Copyright (c) 2025 Bytedance, Inc. and its affiliates.
* SPDX-License-Identifier: Apache-2.0
*/
"use strict";
var __webpack_require__ = {};
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
    createNavigationTools: ()=>createNavigationTools
});
const core_namespaceObject = require("@mcp-agent/core");
function createNavigationTools(logger, browserGUIAgent) {
    const navigateTool = new core_namespaceObject.Tool({
        id: 'browser_navigate',
        description: '[browser] Navigate to a URL',
        parameters: core_namespaceObject.z.object({
            url: core_namespaceObject.z.string().describe('URL to navigate to')
        }),
        function: async ({ url })=>{
            try {
                if (!browserGUIAgent) return {
                    status: 'error',
                    message: 'GUI Agent not initialized'
                };
                const page = await browserGUIAgent.getPage();
                await page.goto(url);
                return {
                    status: 'success',
                    url,
                    message: "Navigated success"
                };
            } catch (error) {
                logger.error(`Error navigating to URL: ${error}`);
                return {
                    status: 'error',
                    url,
                    message: `Failed to navigate: ${error instanceof Error ? error.message : String(error)}`
                };
            }
        }
    });
    const backTool = new core_namespaceObject.Tool({
        id: 'browser_go_back',
        description: '[browser] Go back to the previous page, or close tab if no history exists',
        parameters: core_namespaceObject.z.object({}),
        function: async ()=>{
            try {
                if (!browserGUIAgent) return {
                    status: 'error',
                    message: 'GUI Agent not initialized'
                };
                const page = await browserGUIAgent.getPage();
                const hasHistory = await page.evaluate(()=>window.history.length > 1);
                if (hasHistory) {
                    await page.goBack();
                    return {
                        status: 'success',
                        message: 'Navigated back'
                    };
                }
                {
                    const browser = page.browser();
                    const pages = await browser.pages();
                    if (pages.length > 1) {
                        const currentUrl = page.url();
                        await page.close();
                        logger.info(`Closed tab with URL ${currentUrl} (no history to go back to)`);
                        return {
                            status: 'success',
                            message: 'No history available, closed the current tab instead',
                            action: 'closed'
                        };
                    }
                    await page.goto('about:blank');
                    return {
                        status: 'success',
                        message: 'No history available and only one tab open, navigated to blank page',
                        action: 'blank'
                    };
                }
            } catch (error) {
                logger.error(`Error handling back navigation: ${error}`);
                return {
                    status: 'error',
                    message: `Failed to navigate back: ${error instanceof Error ? error.message : String(error)}`
                };
            }
        }
    });
    const forwardTool = new core_namespaceObject.Tool({
        id: 'browser_go_forward',
        description: '[browser] Go forward to the next page',
        parameters: core_namespaceObject.z.object({}),
        function: async ()=>{
            try {
                if (!browserGUIAgent) return {
                    status: 'error',
                    message: 'GUI Agent not initialized'
                };
                const page = await browserGUIAgent.getPage();
                await page.goForward();
                return {
                    status: 'success',
                    message: 'Navigated forward'
                };
            } catch (error) {
                logger.error(`Error navigating forward: ${error}`);
                return {
                    status: 'error',
                    message: `Failed to navigate forward: ${error instanceof Error ? error.message : String(error)}`
                };
            }
        }
    });
    const refreshTool = new core_namespaceObject.Tool({
        id: 'browser_refresh',
        description: '[browser] Refresh the current page',
        parameters: core_namespaceObject.z.object({}),
        function: async ()=>{
            try {
                if (!browserGUIAgent) return {
                    status: 'error',
                    message: 'GUI Agent not initialized'
                };
                const page = await browserGUIAgent.getPage();
                await page.reload();
                return {
                    status: 'success',
                    message: 'Page refreshed'
                };
            } catch (error) {
                logger.error(`Error refreshing page: ${error}`);
                return {
                    status: 'error',
                    message: `Failed to refresh: ${error instanceof Error ? error.message : String(error)}`
                };
            }
        }
    });
    return [
        navigateTool,
        backTool,
        forwardTool,
        refreshTool
    ];
}
exports.createNavigationTools = __webpack_exports__.createNavigationTools;
for(var __webpack_i__ in __webpack_exports__)if (-1 === [
    "createNavigationTools"
].indexOf(__webpack_i__)) exports[__webpack_i__] = __webpack_exports__[__webpack_i__];
Object.defineProperty(exports, '__esModule', {
    value: true
});

//# sourceMappingURL=navigation.js.map