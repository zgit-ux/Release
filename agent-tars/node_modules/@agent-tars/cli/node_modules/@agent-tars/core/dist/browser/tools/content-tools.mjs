/**
* Copyright (c) 2025 Bytedance, Inc. and its affiliates.
* SPDX-License-Identifier: Apache-2.0
*/
import * as __WEBPACK_EXTERNAL_MODULE__multimodal_mcp_agent_4b976ab5__ from "@multimodal/mcp-agent";
import * as __WEBPACK_EXTERNAL_MODULE__base_mjs_f55655df__ from "./base.mjs";
class ContentTools extends __WEBPACK_EXTERNAL_MODULE__base_mjs_f55655df__.CustomBrowserTool {
    getTools() {
        const tools = [];
        const getMarkdownTool = new __WEBPACK_EXTERNAL_MODULE__multimodal_mcp_agent_4b976ab5__.Tool({
            id: 'browser_get_markdown',
            description: '[browser] Get the content of the current page as markdown',
            parameters: __WEBPACK_EXTERNAL_MODULE__multimodal_mcp_agent_4b976ab5__.z.object({
                selector: __WEBPACK_EXTERNAL_MODULE__multimodal_mcp_agent_4b976ab5__.z.string().optional().describe('CSS selector to extract content from (optional)')
            }),
            function: async ({ selector })=>{
                try {
                    if (!this.browserGUIAgent) return {
                        error: 'GUI Agent not initialized'
                    };
                    const page = await this.getPage();
                    const markdown = await page.evaluate((targetSelector)=>{
                        function htmlToMarkdown(element) {
                            if (!element) return '';
                            const style = window.getComputedStyle(element);
                            if ('none' === style.display || 'hidden' === style.visibility || '0' === style.opacity) return '';
                            const tag = element.tagName.toLowerCase();
                            let result = '';
                            switch(tag){
                                case 'h1':
                                    return `\n# ${element.textContent.trim()}\n\n`;
                                case 'h2':
                                    return `\n## ${element.textContent.trim()}\n\n`;
                                case 'h3':
                                    return `\n### ${element.textContent.trim()}\n\n`;
                                case 'h4':
                                    return `\n#### ${element.textContent.trim()}\n\n`;
                                case 'h5':
                                    return `\n##### ${element.textContent.trim()}\n\n`;
                                case 'h6':
                                    return `\n###### ${element.textContent.trim()}\n\n`;
                                case 'p':
                                    return `\n${element.textContent.trim()}\n\n`;
                                case 'a':
                                    const href = element.getAttribute('href');
                                    if (href) return `[${element.textContent.trim()}](${href})`;
                                    return element.textContent.trim();
                                case 'strong':
                                case 'b':
                                    return `**${element.textContent.trim()}**`;
                                case 'em':
                                case 'i':
                                    return `*${element.textContent.trim()}*`;
                                case 'code':
                                    return `\`${element.textContent.trim()}\``;
                                case 'pre':
                                    return `\n\`\`\`\n${element.textContent.trim()}\n\`\`\`\n\n`;
                                case 'ul':
                                    {
                                        let listItems = '';
                                        for (const child of element.children)if ('li' === child.tagName.toLowerCase()) listItems += `\n- ${child.textContent.trim()}`;
                                        return `${listItems}\n\n`;
                                    }
                                case 'ol':
                                    {
                                        let listItems = '';
                                        let index = 1;
                                        for (const child of element.children)if ('li' === child.tagName.toLowerCase()) {
                                            listItems += `\n${index}. ${child.textContent.trim()}`;
                                            index++;
                                        }
                                        return `${listItems}\n\n`;
                                    }
                                case 'img':
                                    {
                                        const alt = element.getAttribute('alt') || 'image';
                                        const src = element.getAttribute('src') || '';
                                        return `\n![${alt}](${src})\n\n`;
                                    }
                                case 'blockquote':
                                    return `\n> ${element.textContent.trim()}\n\n`;
                                case 'hr':
                                    return '\n---\n\n';
                                case 'table':
                                    return `\n[Table content: ${element.textContent.trim()}]\n\n`;
                                case 'br':
                                    return '\n';
                                default:
                                    if (element.children && element.children.length > 0) {
                                        for (const child of element.children)result += htmlToMarkdown(child);
                                        return result;
                                    }
                                    {
                                        const text = element.textContent.trim();
                                        return text ? text : '';
                                    }
                            }
                        }
                        try {
                            const title = document.title;
                            let markdown = `# ${title}\n\n`;
                            const target = targetSelector ? document.querySelector(targetSelector) : document.body;
                            if (!target) return `# ${title}\n\nNo content found for selector: ${targetSelector}`;
                            markdown += htmlToMarkdown(target);
                            return markdown.replace(/\n{3,}/g, '\n\n').trim();
                        } catch (error) {
                            return `Error converting to markdown: ${error.message}`;
                        }
                    }, selector || null);
                    return markdown;
                } catch (error) {
                    this.logger.error(`Error extracting markdown: ${error}`);
                    return `Failed to extract content: ${error instanceof Error ? error.message : String(error)}`;
                }
            }
        });
        tools.push(getMarkdownTool);
        return tools;
    }
    constructor(logger){
        super(logger);
        this.category = 'browser';
    }
}
export { ContentTools };

//# sourceMappingURL=content-tools.mjs.map