{"version":3,"file":"browser/browser-control-strategies/gui-agent-only-strategy.mjs","sources":["webpack://@agent-tars/core/./src/browser/browser-control-strategies/gui-agent-only-strategy.ts"],"sourcesContent":["/*\n * Copyright (c) 2025 Bytedance, Inc. and its affiliates.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Tool } from '@mcp-agent/core';\nimport { AbstractBrowserControlStrategy } from './base-strategy';\nimport {\n  createNavigationTools,\n  createContentTools,\n  createStatusTools,\n  createVisualTools,\n} from '../tools';\n\n/**\n * GUIAgentOnlyStrategy - Implements the 'gui-agent-only' browser control mode\n *\n * This strategy exclusively uses the GUI Agent for browser control, with custom\n * implementations for essential browser functions like navigation, without depending\n * on the MCP Browser server.\n */\nexport class GUIAgentOnlyStrategy extends AbstractBrowserControlStrategy {\n  /**\n   * Register GUI Agent tool and self-implemented browser tools\n   */\n  async registerTools(registerToolFn: (tool: Tool) => void): Promise<string[]> {\n    // Register GUI Agent tool if available\n    if (this.browserGUIAgent) {\n      const guiAgentTool = this.browserGUIAgent.getTool();\n      registerToolFn(guiAgentTool);\n      this.registeredTools.add(guiAgentTool.name);\n\n      // Register custom browser tools that don't rely on MCP Browser server\n      this.registerCustomBrowserTools(registerToolFn);\n    }\n\n    return Array.from(this.registeredTools);\n  }\n\n  /**\n   * Register custom browser tools implemented within the GUI Agent\n   */\n  private registerCustomBrowserTools(registerToolFn: (tool: Tool) => void): void {\n    if (!this.browserGUIAgent) {\n      this.logger.warn('GUI Agent not initialized, cannot register custom browser tools');\n      return;\n    }\n\n    // Use centralized tool factories\n    const navigationTools = createNavigationTools(this.logger, this.browserGUIAgent);\n    const contentTools = createContentTools(this.logger, this.browserGUIAgent);\n    const statusTools = createStatusTools(this.logger, this.browserGUIAgent);\n    const visualTools = createVisualTools(this.logger, this.browserGUIAgent);\n\n    // Register all tools\n    [...navigationTools, ...contentTools, ...statusTools, ...visualTools].forEach((tool) => {\n      registerToolFn(tool);\n      this.registeredTools.add(tool.name);\n    });\n\n    this.logger.info(`Registered ${this.registeredTools.size} custom browser tools`);\n  }\n}\n"],"names":["GUIAgentOnlyStrategy","AbstractBrowserControlStrategy","registerToolFn","guiAgentTool","Array","navigationTools","createNavigationTools","contentTools","createContentTools","statusTools","createStatusTools","visualTools","createVisualTools","tool"],"mappings":";;;;;;AAqBO,MAAMA,6BAA6BC;IAIxC,MAAM,cAAcC,cAAoC,EAAqB;QAE3E,IAAI,IAAI,CAAC,eAAe,EAAE;YACxB,MAAMC,eAAe,IAAI,CAAC,eAAe,CAAC,OAAO;YACjDD,eAAeC;YACf,IAAI,CAAC,eAAe,CAAC,GAAG,CAACA,aAAa,IAAI;YAG1C,IAAI,CAAC,0BAA0B,CAACD;QAClC;QAEA,OAAOE,MAAM,IAAI,CAAC,IAAI,CAAC,eAAe;IACxC;IAKQ,2BAA2BF,cAAoC,EAAQ;QAC7E,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,YACzB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;QAKnB,MAAMG,kBAAkBC,sBAAsB,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,eAAe;QAC/E,MAAMC,eAAeC,mBAAmB,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,eAAe;QACzE,MAAMC,cAAcC,kBAAkB,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,eAAe;QACvE,MAAMC,cAAcC,kBAAkB,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,eAAe;QAGvE;eAAIP;eAAoBE;eAAiBE;eAAgBE;SAAY,CAAC,OAAO,CAAC,CAACE;YAC7EX,eAAeW;YACf,IAAI,CAAC,eAAe,CAAC,GAAG,CAACA,KAAK,IAAI;QACpC;QAEA,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,WAAW,EAAE,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,qBAAqB,CAAC;IACjF;AACF"}