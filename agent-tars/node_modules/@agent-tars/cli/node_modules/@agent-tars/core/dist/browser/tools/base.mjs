/**
* Copyright (c) 2025 Bytedance, Inc. and its affiliates.
* SPDX-License-Identifier: Apache-2.0
*/
function _define_property(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
class BaseBrowserTool {
    setBrowserClient(client) {
        this.browserClient = client;
    }
    setBrowserGUIAgent(guiAgent) {
        this.browserGUIAgent = guiAgent;
    }
    constructor(logger){
        _define_property(this, "logger", void 0);
        _define_property(this, "browserClient", void 0);
        _define_property(this, "browserGUIAgent", void 0);
        _define_property(this, "category", 'browser');
        this.logger = logger.spawn(this.constructor.name);
    }
}
class MCPBrowserTool extends BaseBrowserTool {
    createMCPToolDefinition(name, description) {
        if (!this.browserClient) {
            this.logger.warn(`Cannot create tool ${name}: Browser client not set`);
            return null;
        }
        return {
            name,
            description: `[${this.category}] ${description}`,
            schema: {
                type: 'object',
                properties: {}
            },
            function: async (args)=>{
                try {
                    const result = await this.browserClient.callTool({
                        name,
                        arguments: args
                    });
                    return result.content;
                } catch (error) {
                    this.logger.error(`Error executing tool '${name}':`, error);
                    throw error;
                }
            }
        };
    }
}
class CustomBrowserTool extends BaseBrowserTool {
    async getPage() {
        if (!this.browserGUIAgent) throw new Error('GUI Agent not initialized');
        return this.browserGUIAgent.getPage();
    }
}
export { BaseBrowserTool, CustomBrowserTool, MCPBrowserTool };

//# sourceMappingURL=base.mjs.map