/**
* Copyright (c) 2025 Bytedance, Inc. and its affiliates.
* SPDX-License-Identifier: Apache-2.0
*/
"use strict";
var __webpack_require__ = {};
(()=>{
    __webpack_require__.n = (module)=>{
        var getter = module && module.__esModule ? ()=>module['default'] : ()=>module;
        __webpack_require__.d(getter, {
            a: getter
        });
        return getter;
    };
})();
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
    LLMRequester: ()=>LLMRequester
});
const external_fs_namespaceObject = require("fs");
var external_fs_default = /*#__PURE__*/ __webpack_require__.n(external_fs_namespaceObject);
const core_namespaceObject = require("@mcp-agent/core");
const logger = (0, core_namespaceObject.getLogger)('LLMRequester');
class LLMRequester {
    async request(options) {
        const { provider, model, body, apiKey, baseURL, stream = false } = options;
        const modelResolver = new core_namespaceObject.ModelResolver({
            provider: provider,
            id: model,
            baseURL,
            apiKey
        });
        const resolvedModel = modelResolver.resolve();
        const response = this.getRequestBody(body);
        const requestBody = response.request;
        if (!requestBody) throw new Error('Invalid request body');
        logger.info(`Sending request to ${provider}/${model}`);
        if (baseURL) logger.info(`Using custom baseURL: ${baseURL}`);
        const client = (0, core_namespaceObject.getLLMClient)(resolvedModel, {
            type: options.thinking ? 'enabled' : 'disabled'
        });
        try {
            requestBody.stream = requestBody.stream ?? stream;
            const response = await client.chat.completions.create(requestBody);
            return response;
        } catch (error) {
            logger.error(`Request failed: ${error}`);
            throw error;
        }
    }
    getRequestBody(body) {
        try {
            if (body.endsWith('.json') || body.endsWith('.jsonl')) {
                if (external_fs_default().existsSync(body)) {
                    const content = external_fs_default().readFileSync(body, 'utf-8');
                    console.log('content', content);
                    return JSON.parse(content);
                }
                throw new Error(`body does not exist: ${body}`);
            }
            return JSON.parse(body);
        } catch (error) {
            throw new Error(`Failed to parse request body: ${error instanceof Error ? error.message : error}`);
        }
    }
}
exports.LLMRequester = __webpack_exports__.LLMRequester;
for(var __webpack_i__ in __webpack_exports__)if (-1 === [
    "LLMRequester"
].indexOf(__webpack_i__)) exports[__webpack_i__] = __webpack_exports__[__webpack_i__];
Object.defineProperty(exports, '__esModule', {
    value: true
});

//# sourceMappingURL=llm-requester.js.map