/**
* Copyright (c) 2025 Bytedance, Inc. and its affiliates.
* SPDX-License-Identifier: Apache-2.0
*/
import external_fs_default from "fs";
import { ModelResolver, getLLMClient, getLogger } from "@mcp-agent/core";
const logger = getLogger('LLMRequester');
class LLMRequester {
    async request(options) {
        const { provider, model, body, apiKey, baseURL, stream = false } = options;
        const modelResolver = new ModelResolver({
            provider: provider,
            id: model,
            baseURL,
            apiKey
        });
        const resolvedModel = modelResolver.resolve();
        const response = this.getRequestBody(body);
        const requestBody = response.request;
        if (!requestBody) throw new Error('Invalid request body');
        logger.info(`Sending request to ${provider}/${model}`);
        if (baseURL) logger.info(`Using custom baseURL: ${baseURL}`);
        const client = getLLMClient(resolvedModel, {
            type: options.thinking ? 'enabled' : 'disabled'
        });
        try {
            requestBody.stream = requestBody.stream ?? stream;
            const response = await client.chat.completions.create(requestBody);
            return response;
        } catch (error) {
            logger.error(`Request failed: ${error}`);
            throw error;
        }
    }
    getRequestBody(body) {
        try {
            if (body.endsWith('.json') || body.endsWith('.jsonl')) {
                if (external_fs_default.existsSync(body)) {
                    const content = external_fs_default.readFileSync(body, 'utf-8');
                    console.log('content', content);
                    return JSON.parse(content);
                }
                throw new Error(`body does not exist: ${body}`);
            }
            return JSON.parse(body);
        } catch (error) {
            throw new Error(`Failed to parse request body: ${error instanceof Error ? error.message : error}`);
        }
    }
}
export { LLMRequester };

//# sourceMappingURL=llm-requester.mjs.map