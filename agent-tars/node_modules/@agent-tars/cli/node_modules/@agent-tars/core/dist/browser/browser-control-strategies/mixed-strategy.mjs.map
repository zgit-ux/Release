{"version":3,"file":"browser/browser-control-strategies/mixed-strategy.mjs","sources":["webpack://@agent-tars/core/./src/browser/browser-control-strategies/mixed-strategy.ts"],"sourcesContent":["/*\n * Copyright (c) 2025 Bytedance, Inc. and its affiliates.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Tool } from '@mcp-agent/core';\nimport { AbstractBrowserControlStrategy } from './base-strategy';\nimport { createContentTools, createNavigationTools, createVisualTools } from '../tools';\n\n/**\n * MixedControlStrategy - Implements the 'default' browser control mode\n *\n * This strategy provides a hybrid approach that combines both GUI Agent (vision-based)\n * and MCP Browser (DOM-based) tools without handling conflicts between them.\n */\nexport class MixedControlStrategy extends AbstractBrowserControlStrategy {\n  /**\n   * Register both GUI Agent tools and complementary MCP Browser tools\n   */\n  async registerTools(registerToolFn: (tool: Tool) => void): Promise<string[]> {\n    // Register GUI Agent tool if available\n    if (this.browserGUIAgent) {\n      const guiAgentTool = this.browserGUIAgent.getTool();\n      registerToolFn(guiAgentTool);\n      this.registeredTools.add(guiAgentTool.name);\n\n      // Register custom markdown extraction tool instead of MCP-provided one\n      const contentTools = createContentTools(this.logger, this.browserGUIAgent);\n      const navigationTools = createNavigationTools(this.logger, this.browserGUIAgent);\n      const visualTools = createVisualTools(this.logger, this.browserGUIAgent);\n\n      [...navigationTools, ...contentTools, ...visualTools].forEach((tool) => {\n        registerToolFn(tool);\n        this.registeredTools.add(tool.name);\n      });\n    }\n\n    // Register all browser tools from MCP Browser server except markdown extraction\n    if (this.browserClient) {\n      // Register all browser tools except content extraction tools\n      // Use our custom markdown tool instead\n      const browserTools = [\n        // Navigation tools\n        // 'browser_navigate',\n        // 'browser_go_back',\n        // 'browser_go_forward',\n\n        // Skip `browser_get_markdown` - using custom implementation\n        // 'browser_get_markdown',\n\n        // Interaction tools\n        'browser_click',\n        'browser_form_input_fill',\n        'browser_press_key',\n        'browser_hover',\n        'browser_scroll',\n        'browser_select',\n\n        // Status tools\n        'browser_get_clickable_elements',\n        'browser_read_links',\n\n        // Visual tools\n        // 'browser_screenshot',\n\n        // Tab management\n        'browser_tab_list',\n        'browser_new_tab',\n        'browser_close_tab',\n        'browser_switch_tab',\n\n        // Advanced tools\n        'browser_evaluate',\n      ];\n\n      await this.registerMCPBrowserTools(registerToolFn, browserTools);\n    }\n\n    return Array.from(this.registeredTools);\n  }\n}\n"],"names":["MixedControlStrategy","AbstractBrowserControlStrategy","registerToolFn","guiAgentTool","contentTools","createContentTools","navigationTools","createNavigationTools","visualTools","createVisualTools","tool","browserTools","Array"],"mappings":";;;;;;AAeO,MAAMA,6BAA6BC;IAIxC,MAAM,cAAcC,cAAoC,EAAqB;QAE3E,IAAI,IAAI,CAAC,eAAe,EAAE;YACxB,MAAMC,eAAe,IAAI,CAAC,eAAe,CAAC,OAAO;YACjDD,eAAeC;YACf,IAAI,CAAC,eAAe,CAAC,GAAG,CAACA,aAAa,IAAI;YAG1C,MAAMC,eAAeC,mBAAmB,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,eAAe;YACzE,MAAMC,kBAAkBC,sBAAsB,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,eAAe;YAC/E,MAAMC,cAAcC,kBAAkB,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,eAAe;YAEvE;mBAAIH;mBAAoBF;mBAAiBI;aAAY,CAAC,OAAO,CAAC,CAACE;gBAC7DR,eAAeQ;gBACf,IAAI,CAAC,eAAe,CAAC,GAAG,CAACA,KAAK,IAAI;YACpC;QACF;QAGA,IAAI,IAAI,CAAC,aAAa,EAAE;YAGtB,MAAMC,eAAe;gBAUnB;gBACA;gBACA;gBACA;gBACA;gBACA;gBAGA;gBACA;gBAMA;gBACA;gBACA;gBACA;gBAGA;aACD;YAED,MAAM,IAAI,CAAC,uBAAuB,CAACT,gBAAgBS;QACrD;QAEA,OAAOC,MAAM,IAAI,CAAC,IAAI,CAAC,eAAe;IACxC;AACF"}