import { LocalBrowser, Page, RemoteBrowser } from '@agent-infra/browser';
import { ConsoleLogger, AgentEventStream, Tool } from '@mcp-agent/core';
/**
 * Coordinate type definition
 */
export type Coords = [number, number] | [];
/**
 * Action input parameters for browser actions
 */
export interface ActionInputs {
    content?: string;
    start_box?: string;
    end_box?: string;
    key?: string;
    hotkey?: string;
    direction?: string;
    start_coords?: Coords;
    end_coords?: Coords;
}
/**
 * Parsed prediction from GUI agent
 */
export interface PredictionParsed {
    /** Action inputs parsed from action_type(action_inputs) */
    action_inputs: ActionInputs;
    /** Action type parsed from action_type(action_inputs) */
    action_type: string;
    /** Thinking content */
    thought?: string;
}
/**
 * Browser initialization options
 */
export interface GUIAgentOptions {
    /** browser instance to use */
    browser: LocalBrowser | RemoteBrowser;
    /** The logger instance to use */
    logger: ConsoleLogger;
    /** Whether to run browser in headless mode */
    headless?: boolean;
    /** Scaling factors for coordinates */
    factors?: [number, number];
    /** Event stream instance for injecting environment info */
    eventStream?: AgentEventStream.Processor;
}
/**
 * Browser GUI Agent for visual browser automation
 */
export declare class BrowserGUIAgent {
    private options;
    private browser;
    private browserOperator;
    private screenWidth?;
    private screenHeight?;
    private browserGUIAgentTool;
    private logger;
    private factors;
    private eventStream?;
    currentScreenshot?: string;
    /**
     * Creates a new GUI Agent
     * @param options - Configuration options
     */
    constructor(options: GUIAgentOptions);
    /**
     * Capture page content and add it to event stream as environment info
     * This is called automatically after each browser_vision_control action
     */
    private capturePageContentAsEnvironmentInfo;
    /**
     * Set the event stream instance
     * @param eventStream - The event stream instance
     */
    setEventStream(eventStream: AgentEventStream.Processor): void;
    /**
     * Get the tool definition for GUI Agent browser control
     */
    getTool(): Tool;
    screenshot(): Promise<{
        originalSize: number;
        screenshotTime: string;
        compressedSize: number;
        compressedBase64: string;
    }>;
    /**
     * Hook for starting each agent loop
     * - Takes a screenshot
     * - Extracts image dimensions
     * - Sends the screenshot to the event stream
     */
    onEachAgentLoopStart(eventStream: AgentEventStream.Processor, isReplaySnapshot?: boolean): Promise<void>;
    /**
     * Add data URI prefix to base64 image if not present
     */
    private addBase64ImagePrefix;
    /**
     * Parse operation string into a structured operation object
     */
    private parseAction;
    /**
     * Extract width and height information from base64 encoded image
     */
    private extractImageDimensionsFromBase64;
    /**
     * Get access to the underlying Puppeteer page
     * This allows custom browser tools to be implemented
     * without relying on the MCP Browser server
     */
    getPage(): Promise<Page>;
}
//# sourceMappingURL=browser-gui-agent.d.ts.map