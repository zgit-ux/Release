import { ConsoleLogger, ToolDefinition } from '@multimodal/mcp-agent';
import { Client } from '@modelcontextprotocol/sdk/client/index.js';
import { GUIAgent } from '../gui-agent';
/**
 * BrowserControlStrategy - Interface for browser control strategies
 *
 * Defines the contract that all browser control strategies must implement
 */
export interface BrowserControlStrategy {
    /**
     * Set the MCP Browser client for DOM-based operations
     * @param client MCP client for browser operations
     */
    setBrowserClient(client: Client): void;
    /**
     * Set the GUI Agent for vision-based operations
     * @param guiAgent GUI Agent instance
     */
    setGUIAgent(guiAgent: GUIAgent): void;
    /**
     * Register browser control tools based on the strategy
     * @param registerToolFn Function to register a tool with the agent
     * @returns Array of registered tool names
     */
    registerTools(registerToolFn: (tool: ToolDefinition) => void): Promise<string[]>;
    /**
     * Get the name of the strategy for logging purposes
     */
    getStrategyName(): string;
}
/**
 * AbstractBrowserControlStrategy - Base implementation for browser control strategies
 *
 * Provides common functionality and state management for all strategies
 */
export declare abstract class AbstractBrowserControlStrategy implements BrowserControlStrategy {
    protected browserClient?: Client;
    protected guiAgent?: GUIAgent;
    protected logger: ConsoleLogger;
    protected registeredTools: Set<string>;
    constructor(logger: ConsoleLogger);
    /**
     * Set the MCP Browser client
     */
    setBrowserClient(client: Client): void;
    /**
     * Set the GUI Agent
     */
    setGUIAgent(guiAgent: GUIAgent): void;
    /**
     * Register browser control tools
     * Each strategy must implement this method
     */
    abstract registerTools(registerToolFn: (tool: ToolDefinition) => void): Promise<string[]>;
    /**
     * Get the name of the strategy for logging purposes
     */
    getStrategyName(): string;
    /**
     * Register selected MCP Browser tools
     * Helper method for strategies that use MCP Browser
     */
    protected registerMCPBrowserTools(registerToolFn: (tool: ToolDefinition) => void, toolNames: string[]): Promise<void>;
}
//# sourceMappingURL=base-strategy.d.ts.map