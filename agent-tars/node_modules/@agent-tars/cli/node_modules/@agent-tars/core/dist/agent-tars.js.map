{"version":3,"file":"agent-tars.js","sources":["webpack://@agent-tars/core/webpack/runtime/compat_get_default_export","webpack://@agent-tars/core/webpack/runtime/define_property_getters","webpack://@agent-tars/core/webpack/runtime/has_own_property","webpack://@agent-tars/core/webpack/runtime/make_namespace_object","webpack://@agent-tars/core/./src/agent-tars.ts"],"sourcesContent":["// getDefaultExport function for compatibility with non-ESM modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};\n","__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n        if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n            Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n        }\n    }\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/* eslint-disable @typescript-eslint/no-explicit-any */\n/*\n * Copyright (c) 2025 Bytedance, Inc. and its affiliates.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport fs from 'fs';\nimport path from 'path';\nimport {\n  InMemoryTransport,\n  Client,\n  AgentEventStream,\n  Tool,\n  JSONSchema7,\n  MCPAgent,\n  MCPServerRegistry,\n  LLMRequestHookPayload,\n  LLMResponseHookPayload,\n  ConsoleLogger,\n  LoopTerminationCheckResult,\n} from '@mcp-agent/core';\nimport {\n  AgentTARSOptions,\n  BuiltInMCPServers,\n  BuiltInMCPServerName,\n  AgentTARSPlannerOptions,\n} from './types';\nimport { DEFAULT_SYSTEM_PROMPT, generateBrowserRulesPrompt } from './prompt';\nimport { BrowserGUIAgent, BrowserManager, BrowserToolsManager } from './browser';\nimport { PlanManager, DEFAULT_PLANNING_PROMPT } from './planner/plan-manager';\nimport { SearchToolProvider } from './search';\n\n// @ts-expect-error\n// Default esm asset has some issues {@see https://github.com/bytedance/UI-TARS-desktop/issues/672}\nimport * as browserModule from '@agent-infra/mcp-server-browser/dist/server.cjs';\nimport * as filesystemModule from '@agent-infra/mcp-server-filesystem';\nimport * as commandsModule from '@agent-infra/mcp-server-commands';\n\n/**\n * A Agent TARS that uses in-memory MCP tool call\n * for built-in MCP Servers.\n */\nexport class AgentTARS<T extends AgentTARSOptions = AgentTARSOptions> extends MCPAgent<T> {\n  private workingDirectory: string;\n  private tarsOptions: AgentTARSOptions;\n  private mcpServers: BuiltInMCPServers = {};\n  private inMemoryMCPClients: Partial<Record<BuiltInMCPServerName, Client>> = {};\n  private browserGUIAgent?: BrowserGUIAgent;\n  private browserManager: BrowserManager;\n  private planManager?: PlanManager;\n  private currentIteration = 0;\n  private browserToolsManager?: BrowserToolsManager;\n  private searchToolProvider?: SearchToolProvider;\n\n  // Message history storage for experimental dump feature\n  private traces: Array<{\n    type: 'request' | 'response';\n    timestamp: number;\n    id: string;\n    data: any;\n  }> = [];\n\n  constructor(options: T) {\n    // Apply default config\n    const tarsOptions: T = {\n      search: {\n        provider: 'browser_search',\n        count: 10,\n        browserSearch: {\n          engine: 'google',\n          needVisitedUrls: false,\n          ...(options.search?.browserSearch || {}),\n        },\n        ...(options.search ?? {}),\n      },\n      browser: {\n        type: 'local',\n        headless: false,\n        control: 'mixed',\n        ...(options.browser ?? {}),\n      },\n      mcpImpl: 'in-memory',\n      // default tool call engine for agent tars.\n      toolCallEngine: 'structured_outputs',\n      mcpServers: {},\n      maxIterations: 100,\n      maxTokens: 10000, // Set default maxTokens to 10000 for AgentTARS\n      ...options,\n    };\n\n    const { workingDirectory = process.cwd() } = tarsOptions.workspace!;\n\n    // Under the 'in-memory' implementation, the built-in mcp server will be implemented independently\n    // Note that the usage of the attached mcp server will be the same as the implementation,\n    // because we cannot determine whether it supports same-process calls.\n    const mcpServers: MCPServerRegistry = {\n      ...(options.mcpImpl === 'stdio'\n        ? {\n            browser: {\n              command: 'npx',\n              args: ['-y', '@agent-infra/mcp-server-browser'],\n            },\n            filesystem: {\n              command: 'npx',\n              args: ['-y', '@agent-infra/mcp-server-filesystem', workingDirectory],\n            },\n            commands: {\n              command: 'npx',\n              args: ['-y', '@agent-infra/mcp-server-commands'],\n            },\n          }\n        : {}),\n      ...(options.mcpServers || {}),\n    };\n\n    // Initialize planner options if enabled\n    const plannerOptions: AgentTARSPlannerOptions | undefined =\n      typeof tarsOptions.planner === 'boolean'\n        ? tarsOptions.planner\n          ? { enabled: true }\n          : undefined\n        : tarsOptions.planner;\n\n    // Generate planner prompt if enabled\n    let plannerPrompt = '';\n    if (plannerOptions?.enabled) {\n      plannerPrompt = `${DEFAULT_PLANNING_PROMPT} \\n\\n ${plannerOptions.planningPrompt ?? ''}`;\n    }\n\n    // Generate browser rules based on control solution\n    const browserRules = generateBrowserRulesPrompt(tarsOptions.browser?.control);\n\n    const systemPrompt = `${DEFAULT_SYSTEM_PROMPT}\n${plannerPrompt ? `\\n${plannerPrompt}` : ''}\n${browserRules}\n\n<envirnoment>\nCurrent Working Directory: ${workingDirectory}\n</envirnoment>\n\n    `;\n\n    // Prepare system instructions by combining default prompt with custom instructions\n    const instructions = options.instructions\n      ? `${systemPrompt}\\n\\n${options.instructions}`\n      : systemPrompt;\n\n    super({\n      ...tarsOptions,\n      name: options.name ?? 'AgentTARS',\n      instructions,\n      mcpServers,\n      maxTokens: tarsOptions.maxTokens, // Ensure maxTokens is passed to the parent class\n    });\n\n    this.logger = this.logger.spawn('AgentTARS');\n    this.tarsOptions = tarsOptions;\n    this.workingDirectory = workingDirectory;\n    this.logger.info(`ü§ñ AgentTARS initialized | Working directory: ${workingDirectory}`);\n\n    // Initialize browser manager instead of direct browser instance\n    this.browserManager = BrowserManager.getInstance(this.logger);\n\n    if (plannerOptions?.enabled) {\n      this.planManager = new PlanManager(this.logger, this.eventStream, this, plannerOptions);\n    }\n\n    if (options.experimental?.dumpMessageHistory) {\n      this.logger.info('üìù Message history dump enabled');\n    }\n  }\n\n  /**\n   * Initialize in-memory MCP modules and register tools\n   */\n  async initialize(): Promise<void> {\n    this.logger.info('Initializing AgentTARS ...');\n\n    try {\n      // Initialize browser components based on control solution\n      const control = this.tarsOptions.browser?.control || 'mixed';\n\n      // Always create browser tools manager regardless of control mode\n      this.browserToolsManager = new BrowserToolsManager(this.logger, control);\n\n      // First initialize GUI Agent if needed\n      if (control !== 'browser-use-only') {\n        await this.initializeGUIAgent();\n      }\n\n      // Initialize search tools using direct integration with agent-infra/search\n      await this.initializeSearchTools();\n\n      // Then initialize MCP servers and register tools\n      if (this.tarsOptions.mcpImpl === 'in-memory') {\n        await this.initializeInMemoryMCPForBuiltInMCPServers();\n      }\n\n      // Register planner tools if enabled\n      if (this.planManager) {\n        const plannerTools = this.planManager.getTools();\n        plannerTools.forEach((tool) => this.registerTool(tool));\n        this.logger.info(`Registered ${plannerTools.length} planner tools`);\n      }\n\n      this.logger.info('‚úÖ AgentTARS initialization complete');\n      // Log all registered tools in a beautiful format\n      this.logRegisteredTools();\n    } catch (error) {\n      this.logger.error('‚ùå Failed to initialize AgentTARS:', error);\n      await this.cleanup();\n      throw error;\n    }\n  }\n\n  /**\n   * Initialize search tools using direct integration with agent-infra/search\n   */\n  private async initializeSearchTools(): Promise<void> {\n    try {\n      this.logger.info('üîç Initializing search tools with direct integration');\n\n      // Get browser instance from manager for browser_search provider if needed\n      const sharedBrowser =\n        this.tarsOptions.search?.provider === 'browser_search'\n          ? this.browserManager.getBrowser()\n          : undefined;\n\n      // Create search tool provider with configuration from options\n      this.searchToolProvider = new SearchToolProvider(this.logger, {\n        provider: this.tarsOptions.search!.provider,\n        count: this.tarsOptions.search!.count,\n        browserSearch: this.tarsOptions.search!.browserSearch,\n        apiKey: this.tarsOptions.search!.apiKey,\n        baseUrl: this.tarsOptions.search!.baseUrl,\n        // FIXME: Un-comment it after refine launch state management of `@agent-infra/browser` and\n        // externalBrowser: sharedBrowser,\n      });\n\n      // Create and register search tool\n      const searchTool = this.searchToolProvider.createSearchTool();\n      this.registerTool(searchTool);\n\n      this.logger.info('‚úÖ Search tools initialized successfully');\n    } catch (error) {\n      this.logger.error('‚ùå Failed to initialize search tools:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Log all registered tools in a beautiful format\n   */\n  private logRegisteredTools(): void {\n    try {\n      // Get all tools from parent class\n      const tools = this.getTools();\n\n      if (!tools || tools.length === 0) {\n        this.logger.info('üß∞ No tools registered');\n        return;\n      }\n\n      const toolCount = tools.length;\n\n      // Create a beautiful header for the tools log\n      const header = `üß∞ ${toolCount} Tools Registered üß∞`;\n      const separator = '‚ïê'.repeat(header.length);\n\n      this.logger.info('\\n');\n      this.logger.info(separator);\n      this.logger.info(header);\n      this.logger.info(separator);\n\n      // Group tools by their module/category (derived from description)\n      const toolsByCategory: Record<string, string[]> = {};\n\n      tools.forEach((tool) => {\n        // Extract category from description [category] format if available\n        const categoryMatch = tool.description?.match(/^\\[(.*?)\\]/);\n        const category = categoryMatch ? categoryMatch[1] : 'general';\n\n        if (!toolsByCategory[category]) {\n          toolsByCategory[category] = [];\n        }\n\n        toolsByCategory[category].push(tool.name);\n      });\n\n      // Print tools by category\n      Object.entries(toolsByCategory).forEach(([category, toolNames]) => {\n        this.logger.info(`\\nüì¶ ${category} (${toolNames.length}):`);\n        toolNames.sort().forEach((name) => {\n          this.logger.info(`  ‚Ä¢ ${name}`);\n        });\n      });\n\n      this.logger.info('\\n' + separator);\n      this.logger.info(`‚ú® Total: ${toolCount} tools ready to use`);\n      this.logger.info(separator + '\\n');\n    } catch (error) {\n      this.logger.error('‚ùå Failed to log registered tools:', error);\n    }\n  }\n  /**\n   * Initialize GUI Agent for visual browser control\n   */\n  private async initializeGUIAgent(): Promise<void> {\n    try {\n      this.logger.info('üñ•Ô∏è Initializing GUI Agent for visual browser control');\n\n      // Create GUI Agent instance with browser from manager\n      this.browserGUIAgent = new BrowserGUIAgent({\n        logger: this.logger,\n        headless: this.tarsOptions.browser?.headless,\n        browser: this.browserManager.getBrowser(), // Get browser from manager\n        eventStream: this.eventStream, // Pass the event stream\n      });\n\n      // Set GUI Agent in browser tools manager\n      if (this.browserToolsManager) {\n        this.browserToolsManager.setBrowserGUIAgent(this.browserGUIAgent);\n      }\n\n      this.logger.info('‚úÖ GUI Agent initialized successfully');\n    } catch (error) {\n      this.logger.error(`‚ùå Failed to initialize GUI Agent: ${error}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Initialize in-memory mcp for built-in mcp servers using the new architecture\n   * with direct server creation and configuration\n   */\n  private async initializeInMemoryMCPForBuiltInMCPServers(): Promise<void> {\n    try {\n      // Get browser instance from manager for reuse\n      const sharedBrowser = this.browserManager.getBrowser();\n      this.logger.info('Using shared browser instance for MCP servers');\n\n      // Use static imports instead of dynamic imports\n      const mcpModules = {\n        browser: browserModule,\n        filesystem: filesystemModule,\n        commands: commandsModule,\n      };\n\n      // Create servers with appropriate configurations\n      this.mcpServers = {\n        browser: mcpModules.browser.createServer({\n          externalBrowser: sharedBrowser,\n          enableAdBlocker: false,\n          launchOptions: {\n            headless: this.tarsOptions.browser?.headless,\n          },\n        }),\n        filesystem: mcpModules.filesystem.createServer({\n          allowedDirectories: [this.workingDirectory],\n        }),\n        commands: mcpModules.commands.createServer(),\n      };\n\n      // Create in-memory clients for each server\n      await Promise.all(\n        Object.entries(this.mcpServers)\n          .filter(([_, server]) => server !== null) // Skip null servers\n          .map(async ([name, server]) => {\n            const [clientTransport, serverTransport] = InMemoryTransport.createLinkedPair();\n\n            // Create a client for this server\n            const client = new Client(\n              {\n                name: `${name}-client`,\n                version: '1.0',\n              },\n              {\n                capabilities: {\n                  roots: {\n                    listChanged: true,\n                  },\n                },\n              },\n            );\n\n            // Connect the client and server\n            await Promise.all([client.connect(clientTransport), server.connect(serverTransport)]);\n\n            // Store the client for later use\n            this.inMemoryMCPClients[name as BuiltInMCPServerName] = client;\n            // FIXME: check if global logger level is working.\n            this.logger.info(`‚úÖ Connected to ${name} MCP server`);\n          }),\n      );\n\n      // If browser tools manager exists, set the browser client\n      if (this.browserToolsManager && this.inMemoryMCPClients.browser) {\n        this.browserToolsManager.setBrowserClient(this.inMemoryMCPClients.browser);\n      }\n\n      // Register browser tools using the strategy if available\n      if (this.browserToolsManager) {\n        const registeredTools = await this.browserToolsManager.registerTools((tool) =>\n          this.registerTool(tool),\n        );\n\n        this.logger.info(\n          `‚úÖ Registered ${registeredTools.length} browser tools using '${this.tarsOptions.browser?.control || 'default'}' strategy`,\n        );\n      }\n\n      // Always register non-browser tools regardless of browser tools manager\n      await Promise.all(\n        Object.entries(this.inMemoryMCPClients).map(async ([name, client]) => {\n          if (name !== 'browser' || !this.browserToolsManager) {\n            await this.registerToolsFromClient(name as BuiltInMCPServerName, client!);\n          }\n        }),\n      );\n\n      this.logger.info('‚úÖ In-memory MCP initialization complete');\n    } catch (error) {\n      this.logger.error('‚ùå Failed to initialize in-memory MCP:', error);\n      throw new Error(\n        `Failed to initialize in-memory MCP: ${error instanceof Error ? error.message : String(error)}`,\n      );\n    }\n  }\n\n  /**\n   * Register tools from a specific MCP client\n   */\n  private async registerToolsFromClient(\n    moduleName: BuiltInMCPServerName,\n    client: Client,\n  ): Promise<void> {\n    try {\n      // Get tools from the client\n      const tools = await client.listTools();\n\n      if (!tools || !Array.isArray(tools.tools)) {\n        this.logger.warn(`‚ö†Ô∏è No tools returned from '${moduleName}' module`);\n        return;\n      }\n\n      // Register each tool with the agent\n      for (const tool of tools.tools) {\n        const toolDefinition = new Tool({\n          id: tool.name,\n          description: `[${moduleName}] ${tool.description}`,\n          parameters: (tool.inputSchema || { type: 'object', properties: {} }) as JSONSchema7,\n          function: async (args: Record<string, unknown>) => {\n            try {\n              const result = await client.callTool({\n                name: tool.name,\n                arguments: args,\n              });\n              return result.content;\n            } catch (error) {\n              this.logger.error(`‚ùå Error executing tool '${tool.name}':`, error);\n              throw error;\n            }\n          },\n        });\n\n        this.registerTool(toolDefinition);\n        this.logger.info(`Registered tool: ${toolDefinition.name}`);\n      }\n\n      this.logger.info(`Registered ${tools.tools.length} MCP tools from '${moduleName}'`);\n    } catch (error) {\n      this.logger.error(`‚ùå Failed to register tools from '${moduleName}' module:`, error);\n      throw error;\n    }\n  }\n  /**\n   * Lazy browser initialization using on-demand pattern\n   *\n   * This hook intercepts tool calls and lazily initializes the browser only when\n   * it's first needed by a browser-related tool.\n   */\n  override async onBeforeToolCall(\n    id: string,\n    toolCall: { toolCallId: string; name: string },\n    args: any,\n  ) {\n    if (\n      (toolCall.name.startsWith('browser') && !this.browserManager.isLaunchingComplete()) ||\n      !(await this.browserManager.isBrowserAlive())\n    ) {\n      if (this.isReplaySnapshot) {\n        // Skip actual browser launch in replay mode\n      } else {\n        await this.browserManager.launchBrowser({\n          headless: this.tarsOptions.browser?.headless,\n        });\n      }\n    }\n    return args;\n  }\n\n  /**\n   * Override the onEachAgentLoopStart method to handle GUI Agent initialization\n   * and planner lifecycle\n   * This is called at the start of each agent iteration\n   */\n  override async onEachAgentLoopStart(sessionId: string): Promise<void> {\n    this.currentIteration++;\n\n    // If GUI Agent is enabled and the browser is launched,\n    // take a screenshot and send it to the event stream\n    if (\n      this.tarsOptions.browser?.control !== 'browser-use-only' &&\n      this.browserGUIAgent &&\n      this.browserManager.isLaunchingComplete()\n    ) {\n      // Ensure GUI Agent has access to the current event stream\n      if (this.browserGUIAgent.setEventStream) {\n        this.browserGUIAgent.setEventStream(this.eventStream);\n      }\n\n      await this.browserGUIAgent?.onEachAgentLoopStart(this.eventStream, this.isReplaySnapshot);\n    }\n\n    // Handle planner lifecycle if enabled\n    if (this.planManager && !this.isReplaySnapshot) {\n      const llmClient = this.getLLMClient();\n      const resolvedModel = this.getCurrentResolvedModel();\n\n      if (llmClient && resolvedModel) {\n        // Get messages for planning context\n        const messages = this.getMessagesForPlanning();\n\n        if (this.currentIteration === 1) {\n          // Generate initial plan on first iteration\n          await this.planManager.generateInitialPlan(llmClient, resolvedModel, messages, sessionId);\n        } else {\n          // Update plan on subsequent iterations\n          await this.planManager.updatePlan(llmClient, resolvedModel, messages, sessionId);\n        }\n      }\n    }\n\n    // Call any super implementation if it exists\n    await super.onEachAgentLoopStart(sessionId);\n  }\n\n  /**\n   * Override onBeforeLoopTermination to ensure \"final_answer\" is called if planner is enabled\n   */\n  override async onBeforeLoopTermination(\n    id: string,\n    finalEvent: AgentEventStream.AssistantMessageEvent,\n  ): Promise<LoopTerminationCheckResult> {\n    // If planner is enabled, check if \"final_answer\" was called\n    // if (\n    //   this.planManager &&\n    //   !this.planManager.isfinalAnswerCalled() &&\n    //   this.planManager.hasPlanGenerated()\n    // ) {\n    //   this.logger.warn(`[Planner] Preventing loop termination: \"final_answer\" tool was not called`);\n\n    //   // Add a user message reminding the agent to call \"final_answer\"\n    //   const reminderEvent = this.eventStream.createEvent('user_message', {\n    //     content:\n    //       'Please call the \"final_answer\" tool before providing your final answer. This is required to complete the task.',\n    //   });\n    //   this.eventStream.sendEvent(reminderEvent);\n\n    //   // Prevent loop termination\n    //   return {\n    //     finished: false,\n    //     message: '\"final_answer\" tool must be called before completing the task',\n    //   };\n    // }\n\n    // If planner is not enabled, no plan was generated, or \"final_answer\" was called, allow termination\n    return { finished: true };\n  }\n\n  /**\n   * Override onAgentLoopEnd to reset planner state\n   */\n  override async onAgentLoopEnd(id: string): Promise<void> {\n    if (this.planManager) {\n      this.planManager.resetFinalAnswerStatus();\n      this.currentIteration = 0;\n    }\n\n    // Close all browser pages but keep the browser instance alive for next task\n    // try {\n    //   if (this.browserManager.isLaunchingComplete()) {\n    //     this.logger.info('Closing all browser pages after task completion');\n    //     await this.browserManager.closeAllPages();\n    //   }\n    // } catch (error) {\n    //   this.logger.warn(\n    //     `Failed to close browser pages: ${error instanceof Error ? error.message : String(error)}`,\n    //   );\n    // }\n\n    await super.onAgentLoopEnd(id);\n  }\n\n  /**\n   * Get messages from event stream formatted for planning purposes\n   *\n   * FIXME: better memory control\n   */\n  private getMessagesForPlanning(): any[] {\n    // Get user and assistant messages\n    const events = this.eventStream.getEventsByType(['user_message', 'assistant_message']);\n\n    // Convert events to message format\n    return events.map((event) => {\n      if (event.type === 'assistant_message') {\n        return {\n          role: 'assistant',\n          content: event.content,\n        };\n      } else {\n        return {\n          role: 'user',\n          content:\n            // @ts-expect-error FIXME: handle type error\n            typeof event?.content === 'string' ? event.content : JSON.stringify(event.content),\n        };\n      }\n    });\n  }\n\n  /**\n   * Get information about the current browser control setup\n   * @returns Object containing mode and registered tools\n   */\n  public getBrowserControlInfo(): { mode: string; tools: string[] } {\n    if (this.browserToolsManager) {\n      return {\n        mode: this.browserToolsManager.getMode(),\n        tools: this.browserToolsManager.getRegisteredTools(),\n      };\n    }\n\n    return {\n      mode: this.tarsOptions.browser?.control || 'default',\n      tools: [],\n    };\n  }\n\n  /**\n   * Clean up resources when done\n   */\n  async cleanup(): Promise<void> {\n    this.logger.info('Cleaning up resources...');\n\n    const cleanupPromises: Promise<void>[] = [];\n\n    // Close each MCP client connection\n    for (const [name, client] of Object.entries(this.inMemoryMCPClients)) {\n      cleanupPromises.push(\n        client.close().catch((error) => {\n          this.logger.warn(`‚ö†Ô∏è Error while closing ${name} client: ${error}`);\n        }),\n      );\n    }\n\n    // Close each MCP server\n    for (const [name, server] of Object.entries(this.mcpServers)) {\n      if (server?.close) {\n        cleanupPromises.push(\n          server.close().catch((error) => {\n            this.logger.warn(`‚ö†Ô∏è Error while closing ${name} server: ${error}`);\n          }),\n        );\n      }\n    }\n\n    // Close the shared browser instance through the manager\n    cleanupPromises.push(\n      this.browserManager.closeBrowser().catch((error) => {\n        this.logger.warn(`‚ö†Ô∏è Error while closing shared browser: ${error}`);\n      }),\n    );\n\n    // Wait for all cleanup operations to complete\n    await Promise.allSettled(cleanupPromises);\n\n    // Clear references\n    this.inMemoryMCPClients = {};\n    this.mcpServers = {};\n    this.browserGUIAgent = undefined;\n\n    this.logger.info('‚úÖ Cleanup complete');\n  }\n\n  /**\n   * Get the current working directory for filesystem operations\n   */\n  public getWorkingDirectory(): string {\n    return this.workingDirectory;\n  }\n\n  /**\n   * Get the logger instance used by this agent\n   */\n  public getLogger(): ConsoleLogger {\n    return this.logger;\n  }\n\n  /**\n   * Override onLLMRequest hook to capture requests for message history dump\n   */\n  override onLLMRequest(id: string, payload: LLMRequestHookPayload): void {\n    // Add to message history if feature is enabled\n    if (this.tarsOptions.experimental?.dumpMessageHistory) {\n      this.traces.push({\n        type: 'request',\n        timestamp: Date.now(),\n        id,\n        // FIXME: redesign the trace impl, using JSONL.\n        data: JSON.parse(JSON.stringify(payload)),\n      });\n\n      // Dump the message history after each request\n      this.dumpMessageHistory(id);\n    }\n  }\n\n  /**\n   * Override onLLMResponse hook to capture responses for message history dump\n   */\n  override onLLMResponse(id: string, payload: LLMResponseHookPayload): void {\n    // Add to message history if feature is enabled\n    if (this.tarsOptions.experimental?.dumpMessageHistory) {\n      this.traces.push({\n        type: 'response',\n        timestamp: Date.now(),\n        id,\n        // FIXME: redesign the trace impl, using JSONL.\n        data: JSON.parse(JSON.stringify(payload)),\n      });\n\n      // Dump the message history after each response\n      this.dumpMessageHistory(id);\n    }\n  }\n\n  /**\n   * Get the current abort signal if available\n   * This allows other components to hook into the abort mechanism\n   */\n  public getAbortSignal(): AbortSignal | undefined {\n    return this.executionController.getAbortSignal();\n  }\n\n  /**\n   * Get the browser manager instance\n   * This allows external components to access browser functionality\n   */\n  getBrowserManager(): BrowserManager | undefined {\n    return this.browserManager;\n  }\n\n  /**\n   * Save message history to file\n   * This is an experimental feature that dumps all LLM requests and responses\n   * to a JSON file in the working directory.\n   *\n   * The file will be named using the session ID to ensure all communications\n   * within the same session are stored in a single file.\n   *\n   * @param sessionId The session ID to use for the filename\n   */\n  private dumpMessageHistory(sessionId: string): void {\n    try {\n      if (!this.tarsOptions.experimental?.dumpMessageHistory) {\n        return;\n      }\n\n      // Use sessionId for the filename to ensure we update the same file\n      // throughout the session\n      const filename = `session_${sessionId}.json`;\n      const filePath = path.join(this.workingDirectory, filename);\n\n      // Create a formatted JSON object with metadata\n      const output = {\n        agent: {\n          id: this.id,\n          name: this.name,\n        },\n        sessionId,\n        timestamp: Date.now(),\n        history: this.traces,\n      };\n\n      // Pretty-print the JSON for better readability\n      fs.writeFileSync(filePath, JSON.stringify(output, null, 2), 'utf8');\n      this.logger.debug(`üìù Message history updated in: ${filePath}`);\n    } catch (error) {\n      this.logger.error('Failed to dump message history:', error);\n    }\n  }\n}\n"],"names":["__webpack_require__","module","getter","definition","key","Object","obj","prop","Symbol","AgentTARS","MCPAgent","_this_tarsOptions_browser","control","BrowserToolsManager","plannerTools","tool","error","_this_tarsOptions_search","SearchToolProvider","searchTool","tools","toolCount","header","separator","toolsByCategory","_tool_description","categoryMatch","category","toolNames","name","BrowserGUIAgent","sharedBrowser","mcpModules","browserModule","filesystemModule","commandsModule","Promise","_","server","clientTransport","serverTransport","InMemoryTransport","client","Client","_this_tarsOptions_browser1","registeredTools","Error","String","moduleName","Array","toolDefinition","Tool","args","result","id","toolCall","sessionId","_this_browserGUIAgent","llmClient","resolvedModel","messages","finalEvent","events","event","JSON","cleanupPromises","undefined","payload","_this_tarsOptions_experimental","Date","filename","filePath","path","output","fs","options","_options_search","_tarsOptions_browser","_options_experimental","tarsOptions","workingDirectory","process","mcpServers","plannerOptions","plannerPrompt","DEFAULT_PLANNING_PROMPT","browserRules","generateBrowserRulesPrompt","systemPrompt","DEFAULT_SYSTEM_PROMPT","instructions","BrowserManager","PlanManager"],"mappings":"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"}