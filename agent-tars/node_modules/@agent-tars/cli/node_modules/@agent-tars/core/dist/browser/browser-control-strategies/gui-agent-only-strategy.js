/**
* Copyright (c) 2025 Bytedance, Inc. and its affiliates.
* SPDX-License-Identifier: Apache-2.0
*/
"use strict";
var __webpack_require__ = {};
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
    GUIAgentOnlyStrategy: ()=>GUIAgentOnlyStrategy
});
const external_base_strategy_js_namespaceObject = require("./base-strategy.js");
const index_js_namespaceObject = require("../tools/index.js");
class GUIAgentOnlyStrategy extends external_base_strategy_js_namespaceObject.AbstractBrowserControlStrategy {
    async registerTools(registerToolFn) {
        if (this.browserGUIAgent) {
            const guiAgentTool = this.browserGUIAgent.getTool();
            registerToolFn(guiAgentTool);
            this.registeredTools.add(guiAgentTool.name);
            this.registerCustomBrowserTools(registerToolFn);
        }
        return Array.from(this.registeredTools);
    }
    registerCustomBrowserTools(registerToolFn) {
        if (!this.browserGUIAgent) return void this.logger.warn('GUI Agent not initialized, cannot register custom browser tools');
        const navigationTools = (0, index_js_namespaceObject.createNavigationTools)(this.logger, this.browserGUIAgent);
        const contentTools = (0, index_js_namespaceObject.createContentTools)(this.logger, this.browserGUIAgent);
        const statusTools = (0, index_js_namespaceObject.createStatusTools)(this.logger, this.browserGUIAgent);
        const visualTools = (0, index_js_namespaceObject.createVisualTools)(this.logger, this.browserGUIAgent);
        [
            ...navigationTools,
            ...contentTools,
            ...statusTools,
            ...visualTools
        ].forEach((tool)=>{
            registerToolFn(tool);
            this.registeredTools.add(tool.name);
        });
        this.logger.info(`Registered ${this.registeredTools.size} custom browser tools`);
    }
}
exports.GUIAgentOnlyStrategy = __webpack_exports__.GUIAgentOnlyStrategy;
for(var __webpack_i__ in __webpack_exports__)if (-1 === [
    "GUIAgentOnlyStrategy"
].indexOf(__webpack_i__)) exports[__webpack_i__] = __webpack_exports__[__webpack_i__];
Object.defineProperty(exports, '__esModule', {
    value: true
});

//# sourceMappingURL=gui-agent-only-strategy.js.map