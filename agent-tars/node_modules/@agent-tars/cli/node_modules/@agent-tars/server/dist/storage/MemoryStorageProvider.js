/**
* Copyright (c) 2025 Bytedance, Inc. and its affiliates.
* SPDX-License-Identifier: Apache-2.0
*/
"use strict";
var __webpack_require__ = {};
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
    MemoryStorageProvider: ()=>MemoryStorageProvider
});
function _define_property(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
class MemoryStorageProvider {
    async initialize() {}
    async createSession(metadata) {
        this.sessions.set(metadata.id, {
            ...metadata,
            createdAt: metadata.createdAt || Date.now(),
            updatedAt: metadata.updatedAt || Date.now()
        });
        this.events.set(metadata.id, []);
        return this.sessions.get(metadata.id);
    }
    async updateSessionMetadata(sessionId, metadata) {
        const session = this.sessions.get(sessionId);
        if (!session) throw new Error(`Session not found: ${sessionId}`);
        const updatedSession = {
            ...session,
            ...metadata,
            updatedAt: Date.now()
        };
        this.sessions.set(sessionId, updatedSession);
        return updatedSession;
    }
    async getSessionMetadata(sessionId) {
        return this.sessions.get(sessionId) || null;
    }
    async getAllSessions() {
        return Array.from(this.sessions.values());
    }
    async deleteSession(sessionId) {
        const deleted = this.sessions.delete(sessionId);
        this.events.delete(sessionId);
        return deleted;
    }
    async saveEvent(sessionId, event) {
        if (!this.sessions.has(sessionId)) throw new Error(`Session not found: ${sessionId}`);
        const sessionEvents = this.events.get(sessionId) || [];
        sessionEvents.push(event);
        this.events.set(sessionId, sessionEvents);
        await this.updateSessionMetadata(sessionId, {
            updatedAt: Date.now()
        });
    }
    async getSessionEvents(sessionId) {
        if (!this.sessions.has(sessionId)) throw new Error(`Session not found: ${sessionId}`);
        return this.events.get(sessionId) || [];
    }
    async close() {}
    constructor(){
        _define_property(this, "sessions", new Map());
        _define_property(this, "events", new Map());
    }
}
exports.MemoryStorageProvider = __webpack_exports__.MemoryStorageProvider;
for(var __webpack_i__ in __webpack_exports__)if (-1 === [
    "MemoryStorageProvider"
].indexOf(__webpack_i__)) exports[__webpack_i__] = __webpack_exports__[__webpack_i__];
Object.defineProperty(exports, '__esModule', {
    value: true
});

//# sourceMappingURL=MemoryStorageProvider.js.map