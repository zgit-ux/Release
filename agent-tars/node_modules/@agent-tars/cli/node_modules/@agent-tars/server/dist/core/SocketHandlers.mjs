/**
* Copyright (c) 2025 Bytedance, Inc. and its affiliates.
* SPDX-License-Identifier: Apache-2.0
*/
import { Server } from "socket.io";
import { handleAgentError } from "../utils/error-handler.mjs";
function setupSocketIO(httpServer, server) {
    const io = new Server(httpServer, {
        cors: {
            origin: '*',
            methods: [
                'GET',
                'POST'
            ]
        }
    });
    io.on('connection', (socket)=>{
        SocketHandlers.handleConnection(socket, server);
    });
    return io;
}
class SocketHandlers {
    static handleConnection(socket, server) {
        console.log('Client connected:', socket.id);
        socket.on('ping', (callback)=>{
            if ('function' == typeof callback) callback();
        });
        socket.on('join-session', (sessionId)=>{
            SocketHandlers.handleJoinSession(socket, server, sessionId);
        });
        socket.on('send-query', async ({ sessionId, query })=>{
            await SocketHandlers.handleSendQuery(socket, server, sessionId, query);
        });
        socket.on('abort-query', async ({ sessionId })=>{
            await SocketHandlers.handleAbortQuery(socket, server, sessionId);
        });
        socket.on('disconnect', ()=>{
            console.log('Client disconnected:', socket.id);
        });
    }
    static handleJoinSession(socket, server, sessionId) {
        if (server.sessions[sessionId]) {
            socket.join(sessionId);
            console.log(`Client ${socket.id} joined session ${sessionId}`);
            const eventHandler = (eventType, data)=>{
                socket.emit('agent-event', {
                    type: eventType,
                    data
                });
            };
            const initialStatus = {
                isProcessing: server.sessions[sessionId].getProcessingStatus(),
                state: server.sessions[sessionId].agent.status()
            };
            socket.emit('agent-status', initialStatus);
            server.sessions[sessionId].eventBridge.subscribe(eventHandler);
            socket.on('disconnect', ()=>{
                if (server.sessions[sessionId]) server.sessions[sessionId].eventBridge.unsubscribe(eventHandler);
            });
        } else socket.emit('error', 'Session not found');
    }
    static async handleSendQuery(socket, server, sessionId, query) {
        if (server.sessions[sessionId]) try {
            const response = await server.sessions[sessionId].runQuery(query);
            if (!response.success && response.error) socket.emit('error', response.error.message);
        } catch (error) {
            const handledError = handleAgentError(error);
            console.error('Unexpected error in socket query:', handledError);
            socket.emit('error', handledError.message);
        }
        else socket.emit('error', 'Session not found');
    }
    static async handleAbortQuery(socket, server, sessionId) {
        if (server.sessions[sessionId]) try {
            const aborted = await server.sessions[sessionId].abortQuery();
            socket.emit('abort-result', {
                success: aborted
            });
        } catch (error) {
            console.error('Error aborting query:', error);
            socket.emit('error', 'Failed to abort query');
        }
        else socket.emit('error', 'Session not found');
    }
}
export { SocketHandlers, setupSocketIO };

//# sourceMappingURL=SocketHandlers.mjs.map