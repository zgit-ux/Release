/**
* Copyright (c) 2025 Bytedance, Inc. and its affiliates.
* SPDX-License-Identifier: Apache-2.0
*/
function _define_property(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
class AgioBatchProcessor {
    addEvent(event) {
        this.eventBuffer.push(event);
        if (this.eventBuffer.length >= this.maxBatchSize) this.flush();
        else this.scheduleFlush();
    }
    async flush() {
        this.clearScheduledFlush();
        if (0 === this.eventBuffer.length) return;
        const eventsToSend = [
            ...this.eventBuffer
        ];
        this.eventBuffer = [];
        try {
            const controller = new AbortController();
            const timeoutId = setTimeout(()=>controller.abort(), this.requestTimeout);
            const response = await fetch(this.providerUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    events: eventsToSend
                }),
                signal: controller.signal
            });
            clearTimeout(timeoutId);
            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
        } catch (error) {
            if (error instanceof Error && 'AbortError' === error.name) console.error(`AGIO event batch request to ${this.providerUrl} timed out`);
            else console.error(`Failed to send AGIO event batch to ${this.providerUrl}:`, error);
        }
    }
    scheduleFlush() {
        if (!this.timer) this.timer = setTimeout(()=>{
            this.flush();
        }, this.flushInterval);
    }
    clearScheduledFlush() {
        if (this.timer) {
            clearTimeout(this.timer);
            this.timer = null;
        }
    }
    constructor(options){
        _define_property(this, "providerUrl", void 0);
        _define_property(this, "maxBatchSize", void 0);
        _define_property(this, "flushInterval", void 0);
        _define_property(this, "requestTimeout", void 0);
        _define_property(this, "eventBuffer", []);
        _define_property(this, "timer", null);
        this.providerUrl = options.providerUrl;
        this.maxBatchSize = options.maxBatchSize ?? 20;
        this.flushInterval = options.flushInterval ?? 5000;
        this.requestTimeout = options.requestTimeout ?? 5000;
    }
}
export { AgioBatchProcessor };

//# sourceMappingURL=AgioBatchProcessor.mjs.map