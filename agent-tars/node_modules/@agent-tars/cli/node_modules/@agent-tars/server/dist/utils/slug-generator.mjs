/**
* Copyright (c) 2025 Bytedance, Inc. and its affiliates.
* SPDX-License-Identifier: Apache-2.0
*/
function _define_property(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
class SlugGenerator {
    async generateSlug(userMessage) {
        if (!userMessage.trim()) return this.getDefaultSlug();
        try {
            const llmSlug = await this.generateWithLLM(userMessage);
            if (llmSlug) return llmSlug;
        } catch (error) {
            console.warn('LLM slug generation failed, using manual normalization:', error);
        }
        return this.manualNormalization(userMessage);
    }
    async generateWithLLM(userMessage) {
        var _response_choices__message, _response_choices_;
        const response = await this.agent.callLLM({
            messages: [
                {
                    role: 'system',
                    content: `You are a URL slug generator. Generate a semantic, URL-friendly slug from the given text.

Requirements:
- Use 3-5 words separated by hyphens
- Use only lowercase English words
- No special characters except hyphens
- Capture the main topic/intent of the text
- Handle multilingual input (Chinese, English, etc.)
- NEVER include non-ASCII characters like Chinese in the output

Return only a JSON object with a "slug" field.`
                },
                {
                    role: 'user',
                    content: `Generate a slug for: "${userMessage}"`
                }
            ],
            response_format: {
                type: 'json_object'
            },
            temperature: 0.3,
            max_tokens: 100
        });
        const content = null == (_response_choices_ = response.choices[0]) ? void 0 : null == (_response_choices__message = _response_choices_.message) ? void 0 : _response_choices__message.content;
        if (!content) return null;
        try {
            const parsed = JSON.parse(content);
            return this.manualNormalization(parsed.slug);
        } catch (error) {
            console.error('Failed to parse LLM slug response:', error);
            return null;
        }
    }
    manualNormalization(text) {
        const normalized = text.toLowerCase().replace(/[^\x00-\x7F]+/g, '-').replace(/[^\w\s-]/g, '').replace(/\s+/g, '-').replace(/-+/g, '-').substring(0, 60).replace(/^-+|-+$/g, '');
        if (!normalized || 0 === normalized.length) return this.getDefaultSlug();
        const words = normalized.split('-').filter((word)=>word.length > 0);
        return words.slice(0, 4).join('-') || this.getDefaultSlug();
    }
    getDefaultSlug() {
        return 'untitled-session';
    }
    constructor(agent){
        _define_property(this, "agent", void 0);
        this.agent = agent;
    }
}
export { SlugGenerator };

//# sourceMappingURL=slug-generator.mjs.map