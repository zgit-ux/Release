/**
* Copyright (c) 2025 Bytedance, Inc. and its affiliates.
* SPDX-License-Identifier: Apache-2.0
*/
"use strict";
var __webpack_require__ = {};
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
    ShareService: ()=>ShareService
});
const share_js_namespaceObject = require("../utils/share.js");
const slug_generator_js_namespaceObject = require("../utils/slug-generator.js");
function _define_property(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
class ShareService {
    async shareSession(sessionId, upload = false, agent) {
        try {
            if (!this.storageProvider) throw new Error('Storage not configured, cannot share session');
            const metadata = await this.storageProvider.getSessionMetadata(sessionId);
            if (!metadata) throw new Error('Session not found');
            const events = await this.storageProvider.getSessionEvents(sessionId);
            const keyFrameEvents = events.filter((event)=>'assistant_streaming_message' !== event.type && 'assistant_streaming_thinking_message' !== event.type && 'final_answer_streaming' !== event.type);
            const shareHtml = this.generateShareHtml(keyFrameEvents, metadata);
            if (upload && this.appConfig.share.provider) {
                const shareUrl = await this.uploadShareHtml(shareHtml, sessionId, metadata, agent);
                return {
                    success: true,
                    url: shareUrl,
                    sessionId
                };
            }
            return {
                success: true,
                html: shareHtml,
                sessionId
            };
        } catch (error) {
            return {
                success: false,
                sessionId,
                error: error instanceof Error ? error.message : String(error)
            };
        }
    }
    generateShareHtml(events, metadata) {
        var _this_appConfig_model, _this_appConfig, _this_appConfig_model1, _this_appConfig1;
        if (!this.appConfig.ui.staticPath) throw new Error('Cannot found static path.');
        const modelInfo = {
            provider: process.env.MODEL_PROVIDER || (null == (_this_appConfig = this.appConfig) ? void 0 : null == (_this_appConfig_model = _this_appConfig.model) ? void 0 : _this_appConfig_model.provider) || 'Default Provider',
            model: process.env.MODEL_NAME || (null == (_this_appConfig1 = this.appConfig) ? void 0 : null == (_this_appConfig_model1 = _this_appConfig1.model) ? void 0 : _this_appConfig_model1.id) || 'Default Model'
        };
        return share_js_namespaceObject.ShareUtils.generateShareHtml(events, metadata, this.appConfig.ui.staticPath, modelInfo);
    }
    async uploadShareHtml(html, sessionId, metadata, agent) {
        if (!this.appConfig.share.provider) throw new Error('Share provider not configured');
        let normalizedSlug = '';
        let originalQuery = '';
        if (this.storageProvider && agent) try {
            const events = await this.storageProvider.getSessionEvents(sessionId);
            const firstUserMessage = events.find((e)=>'user_message' === e.type);
            if (firstUserMessage && firstUserMessage.content) {
                var _firstUserMessage_content_find;
                originalQuery = 'string' == typeof firstUserMessage.content ? firstUserMessage.content : (null == (_firstUserMessage_content_find = firstUserMessage.content.find((c)=>'text' === c.type)) ? void 0 : _firstUserMessage_content_find.text) || '';
                if (originalQuery) {
                    const slugGenerator = new slug_generator_js_namespaceObject.SlugGenerator(agent);
                    normalizedSlug = await slugGenerator.generateSlug(originalQuery);
                    normalizedSlug = normalizedSlug.replace(/[^\x00-\x7F]+/g, '').replace(/[^\w-]/g, '');
                }
            }
        } catch (error) {
            console.warn('Failed to extract query for normalized slug:', error);
        }
        normalizedSlug = normalizedSlug ? `${normalizedSlug}-${sessionId}` : sessionId;
        return share_js_namespaceObject.ShareUtils.uploadShareHtml(html, sessionId, this.appConfig.share.provider, {
            metadata,
            slug: normalizedSlug,
            query: originalQuery
        });
    }
    getShareConfig() {
        var _this_appConfig_share, _this_appConfig_share1;
        return {
            hasShareProvider: !!(null == (_this_appConfig_share = this.appConfig.share) ? void 0 : _this_appConfig_share.provider),
            shareProvider: (null == (_this_appConfig_share1 = this.appConfig.share) ? void 0 : _this_appConfig_share1.provider) || null
        };
    }
    constructor(appConfig, storageProvider){
        _define_property(this, "appConfig", void 0);
        _define_property(this, "storageProvider", void 0);
        this.appConfig = appConfig;
        this.storageProvider = storageProvider;
    }
}
exports.ShareService = __webpack_exports__.ShareService;
for(var __webpack_i__ in __webpack_exports__)if (-1 === [
    "ShareService"
].indexOf(__webpack_i__)) exports[__webpack_i__] = __webpack_exports__[__webpack_i__];
Object.defineProperty(exports, '__esModule', {
    value: true
});

//# sourceMappingURL=ShareService.js.map