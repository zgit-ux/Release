/**
* Copyright (c) 2025 Bytedance, Inc. and its affiliates.
* SPDX-License-Identifier: Apache-2.0
*/
"use strict";
var __webpack_require__ = {};
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
    abortQuery: ()=>abortQuery,
    executeStreamingQuery: ()=>executeStreamingQuery,
    executeQuery: ()=>executeQuery
});
const core_namespaceObject = require("@agent-tars/core");
const error_handler_js_namespaceObject = require("../../utils/error-handler.js");
const imageCompressor = new core_namespaceObject.ImageCompressor({
    quality: 5,
    format: 'webp'
});
async function compressImagesInQuery(query) {
    try {
        if ('string' == typeof query) return query;
        if (Array.isArray(query)) {
            const compressedQuery = await Promise.all(query.map(async (part)=>{
                var _part_image_url;
                if ('image_url' === part.type && (null == (_part_image_url = part.image_url) ? void 0 : _part_image_url.url)) return await compressImageUrl(part);
                return part;
            }));
            return compressedQuery;
        }
        return query;
    } catch (error) {
        console.error('Error compressing images in query:', error);
        return query;
    }
}
async function compressImageUrl(imagePart) {
    try {
        const imageUrl = imagePart.image_url.url;
        if (!imageUrl.startsWith('data:image/')) return imagePart;
        const base64Data = imageUrl.replace(/^data:image\/\w+;base64,/, '');
        const originalBuffer = Buffer.from(base64Data, 'base64');
        const originalSize = originalBuffer.length;
        const compressedBuffer = await imageCompressor.compressToBuffer(originalBuffer);
        const compressedSize = compressedBuffer.length;
        const compressedBase64 = `data:image/webp;base64,${compressedBuffer.toString('base64')}`;
        const compressionRatio = originalSize / compressedSize;
        const compressionPercentage = ((1 - compressedSize / originalSize) * 100).toFixed(2);
        console.log('Image compression stats:', {
            original: (0, core_namespaceObject.formatBytes)(originalSize),
            compressed: (0, core_namespaceObject.formatBytes)(compressedSize),
            ratio: `${compressionRatio.toFixed(2)}x (${compressionPercentage}% smaller)`,
            format: 'webp',
            quality: 80
        });
        return {
            ...imagePart,
            image_url: {
                url: compressedBase64
            }
        };
    } catch (error) {
        console.error('Error compressing individual image:', error);
        return imagePart;
    }
}
async function executeQuery(req, res) {
    const { sessionId, query } = req.body;
    if (!sessionId) return res.status(400).json({
        error: 'Session ID is required'
    });
    if (!query) return res.status(400).json({
        error: 'Query is required'
    });
    const server = req.app.locals.server;
    if (!server.sessions[sessionId]) return res.status(404).json({
        error: 'Session not found'
    });
    try {
        const compressedQuery = await compressImagesInQuery(query);
        const response = await server.sessions[sessionId].runQuery(compressedQuery);
        if (response.success) res.status(200).json({
            result: response.result
        });
        else res.status(500).json(response);
    } catch (error) {
        console.error(`Unexpected error processing query in session ${sessionId}:`, error);
        res.status(500).json((0, error_handler_js_namespaceObject.createErrorResponse)(error));
    }
}
async function executeStreamingQuery(req, res) {
    const { sessionId, query } = req.body;
    if (!sessionId) return res.status(400).json({
        error: 'Session ID is required'
    });
    if (!query) return res.status(400).json({
        error: 'Query is required'
    });
    const server = req.app.locals.server;
    if (!server.sessions[sessionId]) return res.status(404).json({
        error: 'Session not found'
    });
    try {
        res.setHeader('Content-Type', 'text/event-stream');
        res.setHeader('Cache-Control', 'no-cache');
        res.setHeader('Connection', 'keep-alive');
        const compressedQuery = await compressImagesInQuery(query);
        const eventStream = await server.sessions[sessionId].runQueryStreaming(compressedQuery);
        for await (const event of eventStream){
            const isErrorEvent = 'system' === event.type && 'error' === event.level;
            if (res.closed) break;
            res.write(`data: ${JSON.stringify(event)}\n\n`);
            if (isErrorEvent) break;
        }
        if (!res.closed) res.end();
    } catch (error) {
        console.error(`Critical error in streaming query for session ${sessionId}:`, error);
        if (res.headersSent) {
            const errorObj = (0, error_handler_js_namespaceObject.createErrorResponse)(error);
            res.write(`data: ${JSON.stringify({
                type: 'system',
                level: 'error',
                message: errorObj.error.message,
                timestamp: Date.now()
            })}\n\n`);
            res.end();
        } else res.status(500).json((0, error_handler_js_namespaceObject.createErrorResponse)(error));
    }
}
async function abortQuery(req, res) {
    const { sessionId } = req.body;
    if (!sessionId) return res.status(400).json({
        error: 'Session ID is required'
    });
    const server = req.app.locals.server;
    if (!server.sessions[sessionId]) return res.status(404).json({
        error: 'Session not found'
    });
    try {
        const aborted = await server.sessions[sessionId].abortQuery();
        res.status(200).json({
            success: aborted
        });
    } catch (error) {
        console.error(`Error aborting query in session ${sessionId}:`, error);
        res.status(500).json({
            error: 'Failed to abort query'
        });
    }
}
exports.abortQuery = __webpack_exports__.abortQuery;
exports.executeQuery = __webpack_exports__.executeQuery;
exports.executeStreamingQuery = __webpack_exports__.executeStreamingQuery;
for(var __webpack_i__ in __webpack_exports__)if (-1 === [
    "abortQuery",
    "executeQuery",
    "executeStreamingQuery"
].indexOf(__webpack_i__)) exports[__webpack_i__] = __webpack_exports__[__webpack_i__];
Object.defineProperty(exports, '__esModule', {
    value: true
});

//# sourceMappingURL=queries.js.map