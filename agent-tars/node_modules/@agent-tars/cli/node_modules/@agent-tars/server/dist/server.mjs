/**
* Copyright (c) 2025 Bytedance, Inc. and its affiliates.
* SPDX-License-Identifier: Apache-2.0
*/
import external_express_default from "express";
import external_http_default from "http";
import { setupAPI } from "./api/index.mjs";
import { setupSocketIO } from "./core/SocketHandlers.mjs";
import { createStorageProvider } from "./storage/index.mjs";
import { LogLevel } from "@agent-tars/core";
function _define_property(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
class AgentTARSServer {
    getCustomAgioProvider() {
        return this.customAgioProvider;
    }
    getApp() {
        return this.app;
    }
    getHttpServer() {
        return this.server;
    }
    getSocketIOServer() {
        return this.io;
    }
    isServerRunning() {
        return this.isRunning;
    }
    getStorageInfo() {
        if (!this.storageProvider) return {
            type: 'none'
        };
        if ('FileStorageProvider' === this.storageProvider.constructor.name) return {
            type: 'file',
            path: this.storageProvider.dbPath
        };
        if ('SQLiteStorageProvider' === this.storageProvider.constructor.name) return {
            type: 'sqlite',
            path: this.storageProvider.dbPath
        };
        return {
            type: this.storageProvider.constructor.name.replace('StorageProvider', '').toLowerCase()
        };
    }
    async start() {
        if (this.storageProvider) try {
            await this.storageProvider.initialize();
        } catch (error) {
            console.error('Failed to initialize storage provider:', error);
        }
        return new Promise((resolve)=>{
            this.server.listen(this.port, ()=>{
                this.isRunning = true;
                resolve(this.server);
            });
        });
    }
    async stop() {
        const sessionCleanup = Object.values(this.sessions).map((session)=>session.cleanup());
        await Promise.all(sessionCleanup);
        Object.values(this.storageUnsubscribes).forEach((unsubscribe)=>unsubscribe());
        this.storageUnsubscribes = {};
        this.sessions = {};
        if (this.storageProvider) await this.storageProvider.close();
        if (this.isRunning) return new Promise((resolve, reject)=>{
            this.server.close((err)=>{
                if (err) return void reject(err);
                this.isRunning = false;
                console.log('Server stopped');
                resolve();
            });
        });
        return Promise.resolve();
    }
    constructor(appConfig, injectionOptions){
        var _appConfig_workspace;
        _define_property(this, "app", void 0);
        _define_property(this, "server", void 0);
        _define_property(this, "io", void 0);
        _define_property(this, "isRunning", false);
        _define_property(this, "sessions", {});
        _define_property(this, "storageUnsubscribes", {});
        _define_property(this, "customAgioProvider", void 0);
        _define_property(this, "port", void 0);
        _define_property(this, "workspacePath", void 0);
        _define_property(this, "isDebug", void 0);
        _define_property(this, "storageProvider", null);
        _define_property(this, "appConfig", void 0);
        this.appConfig = appConfig;
        this.port = appConfig.server.port ?? 3000;
        this.workspacePath = null == (_appConfig_workspace = appConfig.workspace) ? void 0 : _appConfig_workspace.workingDirectory;
        this.isDebug = appConfig.logLevel === LogLevel.DEBUG;
        this.customAgioProvider = null == injectionOptions ? void 0 : injectionOptions.agioProvider;
        this.app = external_express_default();
        this.server = external_http_default.createServer(this.app);
        if (appConfig.server.storage) this.storageProvider = createStorageProvider(appConfig.server.storage);
        setupAPI(this.app);
        this.io = setupSocketIO(this.server, this);
        this.app.locals.server = this;
    }
}
export { AgentTARSServer, external_express_default as express };

//# sourceMappingURL=server.mjs.map