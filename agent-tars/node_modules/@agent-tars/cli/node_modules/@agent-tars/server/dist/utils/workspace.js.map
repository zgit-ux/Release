{"version":3,"file":"utils/workspace.js","sources":["webpack://@agent-tars/server/webpack/runtime/define_property_getters","webpack://@agent-tars/server/webpack/runtime/has_own_property","webpack://@agent-tars/server/webpack/runtime/make_namespace_object","webpack://@agent-tars/server/./src/utils/workspace.ts"],"sourcesContent":["__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n        if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n            Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n        }\n    }\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/*\n * Copyright (c) 2025 Bytedance, Inc. and its affiliates.\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { WorkspacePathManager } from './workspace-path';\n\n/**\n * Ensures a working directory exists and returns its path\n * @param namespace workspace namespace, used when you need to isolate the execution of tasks\n * @param workspacePath optional path to workspace directory (defaults to CWD/agent-tars-workspace)\n * @param isolateSessions whether to create isolated session directories (default: false)\n * @param isDebug whether to log debug information\n * @returns Path to the working directory\n */\nexport function ensureWorkingDirectory(\n  namespace: string,\n  workspacePath?: string,\n  isolateSessions = false,\n  isDebug = false,\n): string {\n  try {\n    // Resolve the workspace path using the workspace path manager\n    const baseDir = process.cwd();\n    const resolvedPath = WorkspacePathManager.resolveWorkspacePath(\n      baseDir,\n      workspacePath,\n      namespace,\n      isolateSessions,\n    );\n\n    // Ensure the directory exists\n    const workingDirectory = WorkspacePathManager.ensureWorkspaceDirectory(resolvedPath);\n\n    if (isDebug) {\n      console.log(`Created or verified working directory: ${workingDirectory}`);\n    }\n    return workingDirectory;\n  } catch (error) {\n    console.error(`Failed to create working directory:`, error);\n    throw new Error(\n      `Failed to initialize agent workspace: ${error instanceof Error ? error.message : String(error)}`,\n    );\n  }\n}\n"],"names":["__webpack_require__","definition","key","Object","obj","prop","Symbol","ensureWorkingDirectory","namespace","workspacePath","isolateSessions","isDebug","baseDir","process","resolvedPath","WorkspacePathManager","workingDirectory","console","error","Error","String"],"mappings":";;;;;;;IAAAA,oBAAoB,CAAC,GAAG,CAAC,UAASC;QACjC,IAAI,IAAIC,OAAOD,WACR,IAAGD,oBAAoB,CAAC,CAACC,YAAYC,QAAQ,CAACF,oBAAoB,CAAC,CAAC,UAASE,MACzEC,OAAO,cAAc,CAAC,UAASD,KAAK;YAAE,YAAY;YAAM,KAAKD,UAAU,CAACC,IAAI;QAAC;IAGzF;;;ICNAF,oBAAoB,CAAC,GAAG,CAACI,KAAKC,OAAUF,OAAO,SAAS,CAAC,cAAc,CAAC,IAAI,CAACC,KAAKC;;;ICClFL,oBAAoB,CAAC,GAAG,CAAC;QACxB,IAAG,AAAkB,eAAlB,OAAOM,UAA0BA,OAAO,WAAW,EACrDH,OAAO,cAAc,CAAC,UAASG,OAAO,WAAW,EAAE;YAAE,OAAO;QAAS;QAEtEH,OAAO,cAAc,CAAC,UAAS,cAAc;YAAE,OAAO;QAAK;IAC5D;;;;;;;;ACSO,SAASI,uBACdC,SAAiB,EACjBC,aAAsB,EACtBC,kBAAkB,KAAK,EACvBC,UAAU,KAAK;IAEf,IAAI;QAEF,MAAMC,UAAUC,QAAQ,GAAG;QAC3B,MAAMC,eAAeC,2CAAAA,oBAAAA,CAAAA,oBAAyC,CAC5DH,SACAH,eACAD,WACAE;QAIF,MAAMM,mBAAmBD,2CAAAA,oBAAAA,CAAAA,wBAA6C,CAACD;QAEvE,IAAIH,SACFM,QAAQ,GAAG,CAAC,CAAC,uCAAuC,EAAED,kBAAkB;QAE1E,OAAOA;IACT,EAAE,OAAOE,OAAO;QACdD,QAAQ,KAAK,CAAC,uCAAuCC;QACrD,MAAM,IAAIC,MACR,CAAC,sCAAsC,EAAED,iBAAiBC,QAAQD,MAAM,OAAO,GAAGE,OAAOF,QAAQ;IAErG;AACF"}