/**
* Copyright (c) 2025 Bytedance, Inc. and its affiliates.
* SPDX-License-Identifier: Apache-2.0
*/
function _define_property(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
class ErrorWithCode extends Error {
    constructor(message, code, details){
        super(message), _define_property(this, "code", void 0), _define_property(this, "details", void 0), this.code = code, this.details = details;
        this.name = 'AgentTARSError';
    }
}
function handleAgentError(error, context) {
    console.error(`Agent error${context ? ` [${context}]` : ''}:`, error);
    if (error instanceof ErrorWithCode) return error;
    if (error instanceof Error) return new ErrorWithCode(error.message, 'AGENT_EXECUTION_ERROR', {
        stack: error.stack
    });
    return new ErrorWithCode('string' == typeof error ? error : 'Unknown agent execution error', 'UNKNOWN_ERROR', {
        originalError: error
    });
}
function createErrorResponse(error) {
    const normalizedError = handleAgentError(error);
    return {
        success: false,
        error: {
            code: normalizedError.code,
            message: normalizedError.message,
            details: normalizedError.details
        }
    };
}
export { ErrorWithCode, createErrorResponse, handleAgentError };

//# sourceMappingURL=error-handler.mjs.map