/**
* Copyright (c) 2025 Bytedance, Inc. and its affiliates.
* SPDX-License-Identifier: Apache-2.0
*/
"use strict";
var __webpack_require__ = {};
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
    SocketHandlers: ()=>SocketHandlers,
    setupSocketIO: ()=>setupSocketIO
});
const external_socket_io_namespaceObject = require("socket.io");
const error_handler_js_namespaceObject = require("../utils/error-handler.js");
function setupSocketIO(httpServer, server) {
    const io = new external_socket_io_namespaceObject.Server(httpServer, {
        cors: {
            origin: '*',
            methods: [
                'GET',
                'POST'
            ]
        }
    });
    io.on('connection', (socket)=>{
        SocketHandlers.handleConnection(socket, server);
    });
    return io;
}
class SocketHandlers {
    static handleConnection(socket, server) {
        console.log('Client connected:', socket.id);
        socket.on('ping', (callback)=>{
            if ('function' == typeof callback) callback();
        });
        socket.on('join-session', (sessionId)=>{
            SocketHandlers.handleJoinSession(socket, server, sessionId);
        });
        socket.on('send-query', async ({ sessionId, query })=>{
            await SocketHandlers.handleSendQuery(socket, server, sessionId, query);
        });
        socket.on('abort-query', async ({ sessionId })=>{
            await SocketHandlers.handleAbortQuery(socket, server, sessionId);
        });
        socket.on('disconnect', ()=>{
            console.log('Client disconnected:', socket.id);
        });
    }
    static handleJoinSession(socket, server, sessionId) {
        if (server.sessions[sessionId]) {
            socket.join(sessionId);
            console.log(`Client ${socket.id} joined session ${sessionId}`);
            const eventHandler = (eventType, data)=>{
                socket.emit('agent-event', {
                    type: eventType,
                    data
                });
            };
            const initialStatus = {
                isProcessing: server.sessions[sessionId].getProcessingStatus(),
                state: server.sessions[sessionId].agent.status()
            };
            socket.emit('agent-status', initialStatus);
            server.sessions[sessionId].eventBridge.subscribe(eventHandler);
            socket.on('disconnect', ()=>{
                if (server.sessions[sessionId]) server.sessions[sessionId].eventBridge.unsubscribe(eventHandler);
            });
        } else socket.emit('error', 'Session not found');
    }
    static async handleSendQuery(socket, server, sessionId, query) {
        if (server.sessions[sessionId]) try {
            const response = await server.sessions[sessionId].runQuery(query);
            if (!response.success && response.error) socket.emit('error', response.error.message);
        } catch (error) {
            const handledError = (0, error_handler_js_namespaceObject.handleAgentError)(error);
            console.error('Unexpected error in socket query:', handledError);
            socket.emit('error', handledError.message);
        }
        else socket.emit('error', 'Session not found');
    }
    static async handleAbortQuery(socket, server, sessionId) {
        if (server.sessions[sessionId]) try {
            const aborted = await server.sessions[sessionId].abortQuery();
            socket.emit('abort-result', {
                success: aborted
            });
        } catch (error) {
            console.error('Error aborting query:', error);
            socket.emit('error', 'Failed to abort query');
        }
        else socket.emit('error', 'Session not found');
    }
}
exports.SocketHandlers = __webpack_exports__.SocketHandlers;
exports.setupSocketIO = __webpack_exports__.setupSocketIO;
for(var __webpack_i__ in __webpack_exports__)if (-1 === [
    "SocketHandlers",
    "setupSocketIO"
].indexOf(__webpack_i__)) exports[__webpack_i__] = __webpack_exports__[__webpack_i__];
Object.defineProperty(exports, '__esModule', {
    value: true
});

//# sourceMappingURL=SocketHandlers.js.map