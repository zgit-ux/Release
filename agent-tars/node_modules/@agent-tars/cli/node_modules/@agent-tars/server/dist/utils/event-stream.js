/**
* Copyright (c) 2025 Bytedance, Inc. and its affiliates.
* SPDX-License-Identifier: Apache-2.0
*/
"use strict";
var __webpack_require__ = {};
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
    EventStreamBridge: ()=>EventStreamBridge
});
function _define_property(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
class EventStreamBridge {
    subscribe(handler) {
        this.subscribers.add(handler);
    }
    unsubscribe(handler) {
        this.subscribers.delete(handler);
    }
    emit(type, data) {
        for (const handler of this.subscribers)handler(type, data);
    }
    connectToAgentEventStream(agentEventStream) {
        const handleEvent = (event)=>{
            var _event_message, _event_message1;
            switch(event.type){
                case 'agent_run_start':
                    this.emit('agent-status', {
                        isProcessing: true,
                        state: 'executing'
                    });
                    break;
                case 'agent_run_end':
                    this.emit('agent-status', {
                        isProcessing: false,
                        state: event.status || 'idle'
                    });
                    break;
                case 'user_message':
                    this.emit('agent-status', {
                        isProcessing: true,
                        state: 'processing'
                    });
                    this.emit('query', {
                        text: event.content
                    });
                    break;
                case 'assistant_message':
                    this.emit('answer', {
                        text: event.content
                    });
                    break;
                case 'tool_call':
                    this.emit('event', {
                        type: 'tool_call',
                        name: event.name,
                        toolCallId: event.toolCallId,
                        arguments: event.arguments
                    });
                    break;
                case 'tool_result':
                    this.emit('event', {
                        type: 'tool_result',
                        name: event.name,
                        toolCallId: event.toolCallId,
                        content: event.content,
                        error: event.error
                    });
                    break;
                case 'system':
                    this.emit(event.level, {
                        message: event.message
                    });
                    break;
                default:
                    this.emit('event', event);
            }
            if ('system' === event.type && (null == (_event_message = event.message) ? void 0 : _event_message.includes('aborted'))) {
                this.emit('aborted', {
                    message: event.message
                });
                this.emit('agent-status', {
                    isProcessing: false,
                    state: 'idle'
                });
            }
            if ('system' === event.type && (null == (_event_message1 = event.message) ? void 0 : _event_message1.includes('status'))) this.emit('status', {
                message: event.message
            });
        };
        return agentEventStream.subscribe(handleEvent);
    }
    constructor(){
        _define_property(this, "subscribers", new Set());
    }
}
exports.EventStreamBridge = __webpack_exports__.EventStreamBridge;
for(var __webpack_i__ in __webpack_exports__)if (-1 === [
    "EventStreamBridge"
].indexOf(__webpack_i__)) exports[__webpack_i__] = __webpack_exports__[__webpack_i__];
Object.defineProperty(exports, '__esModule', {
    value: true
});

//# sourceMappingURL=event-stream.js.map