/**
* Copyright (c) 2025 Bytedance, Inc. and its affiliates.
* SPDX-License-Identifier: Apache-2.0
*/
import external_path_default from "path";
import { AgentStatus, AgentTARS } from "@agent-tars/core";
import { AgentSnapshot } from "@multimodal/agent-snapshot";
import { EventStreamBridge } from "../utils/event-stream.mjs";
import { AgioProvider } from "./AgioProvider.mjs";
import { handleAgentError } from "../utils/error-handler.mjs";
function _define_property(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
class AgentSession {
    getProcessingStatus() {
        return this.agent.status() === AgentStatus.EXECUTING;
    }
    async initialize() {
        await this.agent.initialize();
        if (this.agioProvider) try {
            await this.agioProvider.sendAgentInitialized();
        } catch (error) {
            console.error('Failed to send AGIO initialization event:', error);
        }
        const agentEventStream = this.agent.getEventStream();
        const handleEvent = async (event)=>{
            if (this.server.storageProvider) try {
                await this.server.storageProvider.saveEvent(this.id, event);
            } catch (error) {
                console.error(`Failed to save event to storage: ${error}`);
            }
            if (this.agioProvider) try {
                await this.agioProvider.processAgentEvent(event);
            } catch (error) {
                console.error('Failed to process AGIO event:', error);
            }
        };
        const storageUnsubscribe = agentEventStream.subscribe(handleEvent);
        this.unsubscribe = this.eventBridge.connectToAgentEventStream(agentEventStream);
        this.eventBridge.emit('ready', {
            sessionId: this.id
        });
        return {
            storageUnsubscribe
        };
    }
    async runQuery(query) {
        try {
            const result = await this.agent.run({
                input: query
            });
            return {
                success: true,
                result
            };
        } catch (error) {
            this.eventBridge.emit('error', {
                message: error instanceof Error ? error.message : String(error)
            });
            const handledError = handleAgentError(error, `Session ${this.id}`);
            return {
                success: false,
                error: {
                    code: handledError.code,
                    message: handledError.message,
                    details: handledError.details
                }
            };
        }
    }
    async runQueryStreaming(query) {
        try {
            return await this.agent.run({
                input: query,
                stream: true
            });
        } catch (error) {
            this.eventBridge.emit('error', {
                message: error instanceof Error ? error.message : String(error)
            });
            const handledError = handleAgentError(error, `Session ${this.id} (streaming)`);
            return this.createErrorEventStream(handledError);
        }
    }
    async *createErrorEventStream(error) {
        yield this.agent.getEventStream().createEvent('system', {
            level: 'error',
            message: error.message,
            details: {
                errorCode: error.code,
                details: error.details
            }
        });
    }
    async abortQuery() {
        try {
            const aborted = this.agent.abort();
            if (aborted) this.eventBridge.emit('aborted', {
                sessionId: this.id
            });
            return aborted;
        } catch (error) {
            this.eventBridge.emit('error', {
                message: error instanceof Error ? error.message : String(error)
            });
            return false;
        }
    }
    async cleanup() {
        if (this.unsubscribe) {
            this.unsubscribe();
            this.unsubscribe = null;
        }
        await this.agent.cleanup();
        if (this.agioProvider) {
            var _this_agioProvider_cleanup, _this_agioProvider;
            await (null == (_this_agioProvider_cleanup = (_this_agioProvider = this.agioProvider).cleanup) ? void 0 : _this_agioProvider_cleanup.call(_this_agioProvider));
        }
        this.eventBridge.emit('closed', {
            sessionId: this.id
        });
    }
    constructor(server, sessionId, agioProviderImpl){
        var _appConfig_snapshot, _appConfig_agio;
        _define_property(this, "server", void 0);
        _define_property(this, "id", void 0);
        _define_property(this, "agent", void 0);
        _define_property(this, "eventBridge", void 0);
        _define_property(this, "unsubscribe", void 0);
        _define_property(this, "agioProvider", void 0);
        this.server = server;
        this.unsubscribe = null;
        this.id = sessionId;
        this.eventBridge = new EventStreamBridge();
        const { appConfig } = server;
        const { workspace, server: appServerConfig } = appConfig;
        const agent = new AgentTARS(server.appConfig);
        if (null == (_appConfig_snapshot = appConfig.snapshot) ? void 0 : _appConfig_snapshot.enable) {
            const snapshotPath = appConfig.snapshot.snapshotPath || external_path_default.join(workspace.workingDirectory, 'snapshots');
            this.agent = new AgentSnapshot(agent, {
                snapshotPath,
                snapshotName: sessionId
            });
            agent.logger.debug(`AgentSnapshot initialized with path: ${snapshotPath}`);
        } else this.agent = agent;
        if (null == (_appConfig_agio = appConfig.agio) ? void 0 : _appConfig_agio.provider) {
            var _appConfig_agio1;
            const impl = agioProviderImpl ?? AgioProvider;
            this.agioProvider = new impl(null == (_appConfig_agio1 = appConfig.agio) ? void 0 : _appConfig_agio1.provider, appConfig, sessionId, agent);
            agent.logger.debug(`AGIO collector initialized with provider: ${appConfig.agio.provider}`);
        }
        agent.logger.info('Agent Config', JSON.stringify(agent.getOptions(), null, 2));
    }
}
const core_AgentSession = AgentSession;
export { AgentSession, core_AgentSession as default };

//# sourceMappingURL=AgentSession.mjs.map