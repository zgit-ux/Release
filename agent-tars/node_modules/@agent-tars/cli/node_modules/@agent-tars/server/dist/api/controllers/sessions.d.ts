import { Request, Response } from 'express';
/**
 * Get all sessions
 */
export declare function getAllSessions(req: Request, res: Response): Promise<Response<any, Record<string, any>> | undefined>;
/**
 * Create a new session
 */
export declare function createSession(req: Request, res: Response): Promise<void>;
/**
 * Get session details
 */
export declare function getSessionDetails(req: Request, res: Response): Promise<Response<any, Record<string, any>> | undefined>;
/**
 * Get session events
 */
export declare function getSessionEvents(req: Request, res: Response): Promise<Response<any, Record<string, any>> | undefined>;
/**
 * Get session status
 */
export declare function getSessionStatus(req: Request, res: Response): Promise<Response<any, Record<string, any>> | undefined>;
/**
 * Update session metadata
 */
export declare function updateSession(req: Request, res: Response): Promise<Response<any, Record<string, any>> | undefined>;
/**
 * Delete a session
 */
export declare function deleteSession(req: Request, res: Response): Promise<Response<any, Record<string, any>> | undefined>;
/**
 * Generate summary for a session
 */
export declare function generateSummary(req: Request, res: Response): Promise<Response<any, Record<string, any>> | undefined>;
/**
 * Get browser control information
 */
export declare function getBrowserControlInfo(req: Request, res: Response): Promise<Response<any, Record<string, any>> | undefined>;
/**
 * Share a session
 */
export declare function shareSession(req: Request, res: Response): Promise<Response<any, Record<string, any>>>;
/**
 * Get events from the latest updated session
 */
export declare function getLatestSessionEvents(req: Request, res: Response): Promise<Response<any, Record<string, any>> | undefined>;
//# sourceMappingURL=sessions.d.ts.map