/**
* Copyright (c) 2025 Bytedance, Inc. and its affiliates.
* SPDX-License-Identifier: Apache-2.0
*/
import external_fs_default from "fs";
import external_path_default from "path";
import external_os_default from "os";
class ShareUtils {
    static generateShareHtml(events, metadata, staticPath, modelInfo) {
        if (!staticPath) throw new Error('Cannot found static path.');
        const indexPath = external_path_default.join(staticPath, 'index.html');
        if (!external_fs_default.existsSync(indexPath)) throw new Error('Static web ui not found.');
        try {
            let htmlContent = external_fs_default.readFileSync(indexPath, 'utf8');
            const safeEventJson = this.safeJsonStringify(events);
            const safeMetadataJson = this.safeJsonStringify(metadata);
            const safeModelInfoJson = this.safeJsonStringify(modelInfo);
            const scriptTag = `<script>
        window.AGENT_TARS_REPLAY_MODE = true;
        window.AGENT_TARS_SESSION_DATA = ${safeMetadataJson};
        window.AGENT_TARS_EVENT_STREAM = ${safeEventJson};
        window.AGENT_TARS_MODEL_INFO = ${safeModelInfoJson};
      </script>
      <script>
        // Add a fallback mechanism for when routes don't match in shared HTML files
        window.addEventListener('DOMContentLoaded', function() {
          // Give React time to attempt normal routing
          setTimeout(function() {
            const root = document.getElementById('root');
            if (root && (!root.children || root.children.length === 0)) {
              console.log('[ReplayMode] No content rendered, applying fallback');
              // Try to force the app to re-render if no content is displayed
              window.dispatchEvent(new Event('resize'));
            }
          }, 1000);
        });
      </script>`;
            htmlContent = htmlContent.replace('</head>', `${scriptTag}\n</head>`);
            return htmlContent;
        } catch (error) {
            console.error('Failed to generate share HTML:', error);
            throw new Error(`Failed to generate share HTML: ${error instanceof Error ? error.message : String(error)}`);
        }
    }
    static safeJsonStringify(data) {
        let jsonString = JSON.stringify(data);
        jsonString = jsonString.replace(/</g, '\\u003C');
        jsonString = jsonString.replace(/>/g, '\\u003E');
        jsonString = jsonString.replace(/\//g, '\\/');
        return jsonString;
    }
    static async uploadShareHtml(html, sessionId, shareProviderUrl, options) {
        if (!shareProviderUrl) throw new Error('Share provider not configured');
        try {
            const tempDir = external_path_default.join(external_os_default.tmpdir(), 'agent-tars-share');
            if (!external_fs_default.existsSync(tempDir)) external_fs_default.mkdirSync(tempDir, {
                recursive: true
            });
            const fileName = `agent-tars-${sessionId}-${Date.now()}.html`;
            const filePath = external_path_default.join(tempDir, fileName);
            external_fs_default.writeFileSync(filePath, html);
            const formData = new FormData();
            const file = new File([
                html
            ], fileName, {
                type: 'text/html'
            });
            formData.append('file', file);
            formData.append('sessionId', sessionId);
            if (options) {
                if (options.slug) formData.append('slug', options.slug);
                if (options.query) formData.append('query', options.query);
                if (options.metadata) {
                    formData.append('name', options.metadata.name || '');
                    if (options.metadata.tags && options.metadata.tags.length > 0) formData.append('tags', JSON.stringify(options.metadata.tags));
                }
            }
            const response = await fetch(shareProviderUrl, {
                method: 'POST',
                body: formData
            });
            external_fs_default.unlinkSync(filePath);
            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
            const responseData = await response.json();
            if (responseData && responseData.url) return responseData.url;
            throw new Error('Invalid response from share provider');
        } catch (error) {
            console.error('Failed to upload share HTML:', error);
            throw error;
        }
    }
}
export { ShareUtils };

//# sourceMappingURL=share.mjs.map