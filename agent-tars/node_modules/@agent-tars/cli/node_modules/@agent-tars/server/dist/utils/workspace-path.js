/**
* Copyright (c) 2025 Bytedance, Inc. and its affiliates.
* SPDX-License-Identifier: Apache-2.0
*/
"use strict";
var __webpack_require__ = {};
(()=>{
    __webpack_require__.n = (module)=>{
        var getter = module && module.__esModule ? ()=>module['default'] : ()=>module;
        __webpack_require__.d(getter, {
            a: getter
        });
        return getter;
    };
})();
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
    WorkspacePathManager: ()=>WorkspacePathManager
});
const external_fs_namespaceObject = require("fs");
var external_fs_default = /*#__PURE__*/ __webpack_require__.n(external_fs_namespaceObject);
const external_path_namespaceObject = require("path");
var external_path_default = /*#__PURE__*/ __webpack_require__.n(external_path_namespaceObject);
const external_os_namespaceObject = require("os");
var external_os_default = /*#__PURE__*/ __webpack_require__.n(external_os_namespaceObject);
function _define_property(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
class WorkspacePathManager {
    static resolveWorkspacePath(baseDir, workspacePath, namespace, isolateSessions) {
        let resolvedPath;
        resolvedPath = workspacePath ? workspacePath.startsWith('~') ? workspacePath.replace(/^~/, external_os_default().homedir()) : external_path_default().isAbsolute(workspacePath) ? workspacePath : external_path_default().resolve(baseDir, workspacePath) : external_path_default().join(baseDir, this.DEFAULT_WORKSPACE_DIR);
        if (isolateSessions && namespace) resolvedPath = external_path_default().join(resolvedPath, namespace);
        return resolvedPath;
    }
    static ensureWorkspaceDirectory(workspacePath) {
        try {
            external_fs_default().mkdirSync(workspacePath, {
                recursive: true
            });
            return workspacePath;
        } catch (error) {
            throw new Error(`Failed to create workspace directory ${workspacePath}: ${error instanceof Error ? error.message : String(error)}`);
        }
    }
}
_define_property(WorkspacePathManager, "DEFAULT_WORKSPACE_DIR", 'agent-tars-workspace');
exports.WorkspacePathManager = __webpack_exports__.WorkspacePathManager;
for(var __webpack_i__ in __webpack_exports__)if (-1 === [
    "WorkspacePathManager"
].indexOf(__webpack_i__)) exports[__webpack_i__] = __webpack_exports__[__webpack_i__];
Object.defineProperty(exports, '__esModule', {
    value: true
});

//# sourceMappingURL=workspace-path.js.map