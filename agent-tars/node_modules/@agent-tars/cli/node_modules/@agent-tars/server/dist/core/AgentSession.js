/**
* Copyright (c) 2025 Bytedance, Inc. and its affiliates.
* SPDX-License-Identifier: Apache-2.0
*/
"use strict";
var __webpack_require__ = {};
(()=>{
    __webpack_require__.n = (module)=>{
        var getter = module && module.__esModule ? ()=>module['default'] : ()=>module;
        __webpack_require__.d(getter, {
            a: getter
        });
        return getter;
    };
})();
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
    default: ()=>core_AgentSession,
    AgentSession: ()=>AgentSession
});
const external_path_namespaceObject = require("path");
var external_path_default = /*#__PURE__*/ __webpack_require__.n(external_path_namespaceObject);
const core_namespaceObject = require("@agent-tars/core");
const agent_snapshot_namespaceObject = require("@multimodal/agent-snapshot");
const event_stream_js_namespaceObject = require("../utils/event-stream.js");
const external_AgioProvider_js_namespaceObject = require("./AgioProvider.js");
const error_handler_js_namespaceObject = require("../utils/error-handler.js");
function _define_property(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
class AgentSession {
    getProcessingStatus() {
        return this.agent.status() === core_namespaceObject.AgentStatus.EXECUTING;
    }
    async initialize() {
        await this.agent.initialize();
        if (this.agioProvider) try {
            await this.agioProvider.sendAgentInitialized();
        } catch (error) {
            console.error('Failed to send AGIO initialization event:', error);
        }
        const agentEventStream = this.agent.getEventStream();
        const handleEvent = async (event)=>{
            if (this.server.storageProvider) try {
                await this.server.storageProvider.saveEvent(this.id, event);
            } catch (error) {
                console.error(`Failed to save event to storage: ${error}`);
            }
            if (this.agioProvider) try {
                await this.agioProvider.processAgentEvent(event);
            } catch (error) {
                console.error('Failed to process AGIO event:', error);
            }
        };
        const storageUnsubscribe = agentEventStream.subscribe(handleEvent);
        this.unsubscribe = this.eventBridge.connectToAgentEventStream(agentEventStream);
        this.eventBridge.emit('ready', {
            sessionId: this.id
        });
        return {
            storageUnsubscribe
        };
    }
    async runQuery(query) {
        try {
            const result = await this.agent.run({
                input: query
            });
            return {
                success: true,
                result
            };
        } catch (error) {
            this.eventBridge.emit('error', {
                message: error instanceof Error ? error.message : String(error)
            });
            const handledError = (0, error_handler_js_namespaceObject.handleAgentError)(error, `Session ${this.id}`);
            return {
                success: false,
                error: {
                    code: handledError.code,
                    message: handledError.message,
                    details: handledError.details
                }
            };
        }
    }
    async runQueryStreaming(query) {
        try {
            return await this.agent.run({
                input: query,
                stream: true
            });
        } catch (error) {
            this.eventBridge.emit('error', {
                message: error instanceof Error ? error.message : String(error)
            });
            const handledError = (0, error_handler_js_namespaceObject.handleAgentError)(error, `Session ${this.id} (streaming)`);
            return this.createErrorEventStream(handledError);
        }
    }
    async *createErrorEventStream(error) {
        yield this.agent.getEventStream().createEvent('system', {
            level: 'error',
            message: error.message,
            details: {
                errorCode: error.code,
                details: error.details
            }
        });
    }
    async abortQuery() {
        try {
            const aborted = this.agent.abort();
            if (aborted) this.eventBridge.emit('aborted', {
                sessionId: this.id
            });
            return aborted;
        } catch (error) {
            this.eventBridge.emit('error', {
                message: error instanceof Error ? error.message : String(error)
            });
            return false;
        }
    }
    async cleanup() {
        if (this.unsubscribe) {
            this.unsubscribe();
            this.unsubscribe = null;
        }
        await this.agent.cleanup();
        if (this.agioProvider) {
            var _this_agioProvider_cleanup, _this_agioProvider;
            await (null == (_this_agioProvider_cleanup = (_this_agioProvider = this.agioProvider).cleanup) ? void 0 : _this_agioProvider_cleanup.call(_this_agioProvider));
        }
        this.eventBridge.emit('closed', {
            sessionId: this.id
        });
    }
    constructor(server, sessionId, agioProviderImpl){
        var _appConfig_snapshot, _appConfig_agio;
        _define_property(this, "server", void 0);
        _define_property(this, "id", void 0);
        _define_property(this, "agent", void 0);
        _define_property(this, "eventBridge", void 0);
        _define_property(this, "unsubscribe", void 0);
        _define_property(this, "agioProvider", void 0);
        this.server = server;
        this.unsubscribe = null;
        this.id = sessionId;
        this.eventBridge = new event_stream_js_namespaceObject.EventStreamBridge();
        const { appConfig } = server;
        const { workspace, server: appServerConfig } = appConfig;
        const agent = new core_namespaceObject.AgentTARS(server.appConfig);
        if (null == (_appConfig_snapshot = appConfig.snapshot) ? void 0 : _appConfig_snapshot.enable) {
            console.log('workspace.workingDirectory', workspace.workingDirectory,);
            
            const snapshotPath = appConfig.snapshot.snapshotPath || external_path_default().join(workspace.workingDirectory, 'snapshots');
            this.agent = new agent_snapshot_namespaceObject.AgentSnapshot(agent, {
                snapshotPath,
                snapshotName: sessionId
            });
            agent.logger.debug(`AgentSnapshot initialized with path: ${snapshotPath}`);
        } else this.agent = agent;
        if (null == (_appConfig_agio = appConfig.agio) ? void 0 : _appConfig_agio.provider) {
            var _appConfig_agio1;
            const impl = agioProviderImpl ?? external_AgioProvider_js_namespaceObject.AgioProvider;
            this.agioProvider = new impl(null == (_appConfig_agio1 = appConfig.agio) ? void 0 : _appConfig_agio1.provider, appConfig, sessionId, agent);
            agent.logger.debug(`AGIO collector initialized with provider: ${appConfig.agio.provider}`);
        }
        agent.logger.info('Agent Config', JSON.stringify(agent.getOptions(), null, 2));
    }
}
const core_AgentSession = AgentSession;
exports.AgentSession = __webpack_exports__.AgentSession;
exports["default"] = __webpack_exports__["default"];
for(var __webpack_i__ in __webpack_exports__)if (-1 === [
    "AgentSession",
    "default"
].indexOf(__webpack_i__)) exports[__webpack_i__] = __webpack_exports__[__webpack_i__];
Object.defineProperty(exports, '__esModule', {
    value: true
});

//# sourceMappingURL=AgentSession.js.map