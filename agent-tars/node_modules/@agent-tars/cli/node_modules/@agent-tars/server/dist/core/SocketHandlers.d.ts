import { Socket } from 'socket.io';
import { Server as SocketIOServer } from 'socket.io';
import http from 'http';
import { AgentTARSServer } from '../server';
/**
 * Setup WebSocket functionality for the server
 * @param httpServer HTTP server instance
 * @param server AgentTARSServer instance
 * @returns Configured Socket.IO server
 */
export declare function setupSocketIO(httpServer: http.Server, server: AgentTARSServer): SocketIOServer;
/**
 * SocketHandlers - Event handlers for WebSocket connections
 *
 * Manages all socket events including:
 * - Connection/disconnection
 * - Session joining
 * - Query sending
 * - Query aborting
 */
export declare class SocketHandlers {
    /**
     * Handle client connection
     */
    static handleConnection(socket: Socket, server: AgentTARSServer): void;
    /**
     * Handle session joining
     */
    static handleJoinSession(socket: Socket, server: AgentTARSServer, sessionId: string): void;
    /**
     * Handle sending a query
     */
    static handleSendQuery(socket: Socket, server: AgentTARSServer, sessionId: string, query: string): Promise<void>;
    /**
     * Handle aborting a query
     */
    static handleAbortQuery(socket: Socket, server: AgentTARSServer, sessionId: string): Promise<void>;
}
//# sourceMappingURL=SocketHandlers.d.ts.map