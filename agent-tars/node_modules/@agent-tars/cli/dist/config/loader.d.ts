import { AgentTARSAppConfig } from '@agent-tars/interface';
/**
 * Load configuration from files or URLs
 *
 * This function handles loading Agent TARS configuration from multiple sources:
 * 1. Auto-detected configuration files in the current directory (if no explicit path provided)
 * 2. Local configuration files specified via paths
 * 3. Remote configuration from URLs
 *
 * When multiple configurations are provided, they are merged sequentially with
 * later configs taking precedence over earlier ones.
 *
 * @param configPaths Path(s) to config files or URL(s), can be a string array
 * @param isDebug Whether to output debug information
 * @returns Merged configuration object
 *
 * @example
 * // Load from default configuration file in current directory
 * const config = await loadTarsConfig();
 *
 * @example
 * // Load from specific local file
 * const config = await loadTarsConfig(['./my-config.json']);
 *
 * @example
 * // Load from remote URL
 * const config = await loadTarsConfig(['https://example.com/config.json']);
 *
 * @example
 * // Load and merge multiple configurations
 * const config = await loadTarsConfig([
 *   './base-config.json',
 *   'https://example.com/overrides.json'
 * ]);
 */
export declare function loadTarsConfig(configPaths?: string[], isDebug?: boolean): Promise<AgentTARSAppConfig>;
/**
 * Deep merge two objects with the second taking precedence
 *
 * This function recursively merges properties from the source object into the target object.
 * For nested objects, it performs a deep merge. For arrays and primitive values, it replaces
 * the target value with the source value.
 *
 * @param target Target object to merge into
 * @param source Source object to merge from (takes precedence)
 * @returns A new merged object
 */
export declare function deepMerge(target: Record<string, any>, source: Record<string, any>): Record<string, any>;
//# sourceMappingURL=loader.d.ts.map