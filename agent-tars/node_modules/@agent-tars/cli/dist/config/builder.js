/**
* Copyright (c) 2025 Bytedance, Inc. and its affiliates.
* SPDX-License-Identifier: Apache-2.0
*/
"use strict";
var __webpack_require__ = {};
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
    ConfigBuilder: ()=>ConfigBuilder
});
const interface_namespaceObject = require("@agent-tars/interface");
const index_js_namespaceObject = require("../utils/index.js");
class ConfigBuilder {
    static buildAppConfig(cliArgs, userConfig) {
        const config = this.deepMerge({}, userConfig);
        const { config: configPath, debug, quiet, port, stream, provider, apiKey, baseURL, browserControl, shareProvider, ...cliConfigProps } = cliArgs;
        this.handleDeprecatedOptions(cliConfigProps, {
            provider,
            apiKey,
            baseURL,
            browserControl,
            shareProvider
        });
        this.deepMerge(config, cliConfigProps);
        this.applyLoggingShortcuts(config, {
            debug,
            quiet
        });
        this.applyServerConfiguration(config, {
            port
        });
        this.resolveModelSecrets(cliConfigProps);
        return config;
    }
    static handleDeprecatedOptions(config, deprecated) {
        const { provider, apiKey, baseURL, browserControl, shareProvider } = deprecated;
        if (provider || apiKey || baseURL) {
            if (config.model) {
                console.warn("\u26A0\uFE0F  DEPRECATED: --model is deprecated. Use --model.id instead.");
                console.warn('   Migration: Replace --model with --model.id');
                if ('string' == typeof config.model) config.model = {
                    id: config.model
                };
            } else config.model = {};
            if (provider) {
                console.warn("\u26A0\uFE0F  DEPRECATED: --provider is deprecated. Use --model.provider instead.");
                console.warn('   Migration: Replace --provider with --model.provider');
                if (!config.model.provider) config.model.provider = provider;
            }
            if (apiKey) {
                console.warn("\u26A0\uFE0F  DEPRECATED: --apiKey is deprecated. Use --model.apiKey instead.");
                console.warn('   Migration: Replace --apiKey with --model.apiKey');
                if (!config.model.apiKey) config.model.apiKey = apiKey;
            }
            if (baseURL) {
                console.warn("\u26A0\uFE0F  DEPRECATED: --baseURL is deprecated. Use --model.baseURL instead.");
                console.warn('   Migration: Replace --baseURL with --model.baseURL');
                if (!config.model.baseURL) config.model.baseURL = baseURL;
            }
        }
        if (browserControl) {
            console.warn("\u26A0\uFE0F  DEPRECATED: --browser-control is deprecated. Use --browser.control instead.");
            console.warn('   Migration: Replace --browser-control with --browser.control');
            if (!config.browser) config.browser = {};
            if (!config.browser.control) config.browser.control = browserControl;
        }
        if (shareProvider) {
            console.warn("\u26A0\uFE0F  DEPRECATED: --share-provider is deprecated. Use --share.provider instead.");
            console.warn('   Migration: Replace --share-provider with --share.provider');
            if (!config.share) config.share = {};
            if (!config.share.provider) config.share.provider = shareProvider;
        }
    }
    static applyLoggingShortcuts(config, shortcuts) {
        if (config.logLevel) config.logLevel = this.parseLogLevel(config.logLevel);
        if (shortcuts.quiet) config.logLevel = interface_namespaceObject.LogLevel.SILENT;
        if (shortcuts.debug) config.logLevel = interface_namespaceObject.LogLevel.DEBUG;
    }
    static parseLogLevel(level) {
        const upperLevel = level.toUpperCase();
        if ('DEBUG' === upperLevel) return interface_namespaceObject.LogLevel.DEBUG;
        if ('INFO' === upperLevel) return interface_namespaceObject.LogLevel.INFO;
        if ('WARN' === upperLevel || 'WARNING' === upperLevel) return interface_namespaceObject.LogLevel.WARN;
        if ('ERROR' === upperLevel) return interface_namespaceObject.LogLevel.ERROR;
        console.warn(`Unknown log level: ${level}, using default log level`);
    }
    static applyServerConfiguration(config, serverOptions) {
        if (!config.server) config.server = {
            port: 8888
        };
        if (!config.server.storage || !config.server.storage.type) config.server.storage = {
            type: 'sqlite'
        };
        if (serverOptions.port) config.server.port = serverOptions.port;
    }
    static resolveModelSecrets(cliConfigProps) {
        if (cliConfigProps.model) {
            if (cliConfigProps.model.apiKey) cliConfigProps.model.apiKey = (0, index_js_namespaceObject.resolveValue)(cliConfigProps.model.apiKey, 'API key');
            if (cliConfigProps.model.baseURL) cliConfigProps.model.baseURL = (0, index_js_namespaceObject.resolveValue)(cliConfigProps.model.baseURL, 'base URL');
        }
    }
    static deepMerge(target, source) {
        if (this.isObject(target) && this.isObject(source)) Object.keys(source).forEach((key)=>{
            if (this.isObject(source[key])) if (key in target) target[key] = this.deepMerge(target[key], source[key]);
            else Object.assign(target, {
                [key]: source[key]
            });
            else Object.assign(target, {
                [key]: source[key]
            });
        });
        return target;
    }
    static isObject(item) {
        return item && 'object' == typeof item && !Array.isArray(item);
    }
}
exports.ConfigBuilder = __webpack_exports__.ConfigBuilder;
for(var __webpack_i__ in __webpack_exports__)if (-1 === [
    "ConfigBuilder"
].indexOf(__webpack_i__)) exports[__webpack_i__] = __webpack_exports__[__webpack_i__];
Object.defineProperty(exports, '__esModule', {
    value: true
});
