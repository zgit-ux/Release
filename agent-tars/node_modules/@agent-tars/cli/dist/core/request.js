/**
* Copyright (c) 2025 Bytedance, Inc. and its affiliates.
* SPDX-License-Identifier: Apache-2.0
*/
"use strict";
var __webpack_require__ = {};
(()=>{
    __webpack_require__.n = (module)=>{
        var getter = module && module.__esModule ? ()=>module['default'] : ()=>module;
        __webpack_require__.d(getter, {
            a: getter
        });
        return getter;
    };
})();
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
    processRequestCommand: ()=>processRequestCommand
});
const external_path_namespaceObject = require("path");
var external_path_default = /*#__PURE__*/ __webpack_require__.n(external_path_namespaceObject);
const core_namespaceObject = require("@agent-tars/core");
const index_js_namespaceObject = require("../utils/index.js");
const colors = {
    reset: '\x1b[0m',
    bold: '\x1b[1m',
    dim: '\x1b[2m',
    red: '\x1b[31m',
    green: '\x1b[32m',
    yellow: '\x1b[33m',
    blue: '\x1b[34m',
    magenta: '\x1b[35m',
    cyan: '\x1b[36m',
    gray: '\x1b[90m'
};
function colorize(text, color) {
    return colors[color] + text + colors.reset;
}
async function processRequestCommand(options) {
    const { provider, model, body, stream, thinking, format = 'raw' } = options;
    const apiKey = (0, index_js_namespaceObject.resolveValue)(options.apiKey, 'API key');
    const baseURL = (0, index_js_namespaceObject.resolveValue)(options.baseURL, 'base URL');
    if (!provider) {
        console.error(colorize('Error: --provider is required', 'red'));
        process.exit(1);
    }
    if (!model) {
        console.error(colorize('Error: --model is required', 'red'));
        process.exit(1);
    }
    if (!body) {
        console.error(colorize('Error: --body is required', 'red'));
        process.exit(1);
    }
    if ('raw' !== format && 'semantic' !== format) {
        console.error(colorize('Error: --format must be either "raw" or "semantic"', 'red'));
        process.exit(1);
    }
    try {
        const requester = new core_namespaceObject.LLMRequester();
        console.log(colorize("\uD83D\uDE80 Sending request to ", 'cyan') + colorize(provider, 'bold') + colorize('/', 'dim') + colorize(model, 'bold'));
        let resolvedBody = body;
        if (!body.startsWith('/') && !body.startsWith('{')) resolvedBody = external_path_default().resolve(process.cwd(), body);
        const response = await requester.request({
            provider,
            model,
            body: resolvedBody,
            apiKey,
            baseURL,
            stream,
            thinking
        });
        console.log('\n' + colorize('Response:', 'bold'));
        console.log(colorize("\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500", 'gray'));
        if (response[Symbol.asyncIterator]) {
            console.log(colorize("\uD83D\uDD04 Processing streaming response...", 'magenta'));
            for await (const chunk of response)if ('raw' === format) console.log(JSON.stringify(chunk));
            else {
                const content = chunk.choices[0]?.delta?.content;
                if (content) process.stdout.write(content);
                const delta = chunk.choices[0]?.delta;
                if (delta?.reasoning_content) process.stdout.write(colorize(`[Reasoning]: ${delta.reasoning_content}`, 'cyan'));
                if (delta?.tool_calls) console.log('\n' + colorize('[Tool Call]:', 'magenta') + JSON.stringify(delta.tool_calls));
            }
        } else if ('raw' === format) console.log(JSON.stringify(response, null, 2));
        else {
            const message = response.choices[0]?.message;
            if (message) {
                if (message.content) console.log(colorize('[Content]: ', 'green') + message.content);
                if (message.tool_calls) {
                    console.log('\n' + colorize('[Tool Calls]:', 'magenta'));
                    message.tool_calls.forEach((call, index)=>{
                        console.log('  ' + colorize(`${index + 1}.`, 'cyan') + ' ' + colorize(call.function?.name || 'Unknown', 'bold'));
                        console.log('     ' + colorize('Arguments:', 'dim') + ' ' + call.function?.arguments || '{}');
                    });
                }
                if (message.reasoning_content) console.log('\n' + colorize('[Reasoning]: ', 'cyan') + message.reasoning_content);
            } else console.log('No message content in response');
        }
        console.log(colorize("\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500", 'gray'));
    } catch (error) {
        console.error('\n' + colorize("\u274C Request failed:", 'red'));
        console.error(error);
        process.exit(1);
    }
}
exports.processRequestCommand = __webpack_exports__.processRequestCommand;
for(var __webpack_i__ in __webpack_exports__)if (-1 === [
    "processRequestCommand"
].indexOf(__webpack_i__)) exports[__webpack_i__] = __webpack_exports__[__webpack_i__];
Object.defineProperty(exports, '__esModule', {
    value: true
});
