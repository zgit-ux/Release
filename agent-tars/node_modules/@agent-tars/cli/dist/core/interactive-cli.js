/**
* Copyright (c) 2025 Bytedance, Inc. and its affiliates.
* SPDX-License-Identifier: Apache-2.0
*/
"use strict";
var __webpack_require__ = {};
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
    startInteractiveCLI: ()=>startInteractiveCLI
});
const external_readline_namespaceObject = require("readline");
const core_namespaceObject = require("@agent-tars/core");
const server_namespaceObject = require("@agent-tars/server");
const index_js_namespaceObject = require("../utils/index.js");
function generateSessionId() {
    const now = new Date();
    const datePart = now.toISOString().slice(0, 10).replace(/-/g, '');
    const timePart = now.toISOString().slice(11, 19).replace(/:/g, '');
    const randomPart = Math.random().toString(36).substring(2, 6);
    return `cli_${datePart}_${timePart}_${randomPart}`;
}
function extractConfigInfo(agent, sessionId, workingDirectory, config) {
    const modelInfo = config.model || {};
    const provider = modelInfo.provider || 'default';
    const model = modelInfo.id || 'default';
    const searchProvider = config.search?.provider;
    const browserMode = config.browser?.headless === false ? 'visible' : 'headless';
    const friendlyWorkdir = (0, index_js_namespaceObject.toUserFriendlyPath)(workingDirectory);
    const configInfo = {
        sessionId,
        workspace: friendlyWorkdir,
        model,
        provider
    };
    if (searchProvider) configInfo.search = searchProvider;
    if (config.browser) configInfo.browser = browserMode;
    return configInfo;
}
async function handleSpecialCommands(input, agent, renderer, isDebug) {
    const command = input.trim().toLowerCase();
    if ('/exit' === command || '/quit' === command) {
        console.log('\nExiting TARS Agent...');
        return true;
    }
    if ('/help' === command) {
        console.log('\nAvailable commands:');
        console.log('  /help     - Show this help message');
        console.log('  /exit     - Exit the CLI');
        console.log('  /quit     - Same as /exit');
        console.log('  /debug    - Toggle debug mode');
        console.log('  /clear    - Clear the screen');
        console.log('\nEnter any other text to interact with Agent TARS.');
        renderer.updatePrompt();
        return true;
    }
    if ('/debug' === command) {
        const newDebugState = !isDebug;
        console.log(`\nDebug mode ${newDebugState ? 'enabled' : 'disabled'}`);
        renderer.updatePrompt();
        return true;
    }
    if ('/clear' === command) {
        console.clear();
        renderer.printWelcome();
        renderer.updatePrompt();
        return true;
    }
    return false;
}
async function startInteractiveCLI(config = {}, isDebug = false) {
    const sessionId = generateSessionId();
    const isolateSessions = config.workspace?.isolateSessions ?? false;
    const workingDirectory = (0, server_namespaceObject.ensureWorkingDirectory)(sessionId, config.workspace?.workingDirectory, isolateSessions);
    if (!isDebug && !config.logLevel) config.logLevel = core_namespaceObject.LogLevel.WARN;
    const agent = new core_namespaceObject.AgentTARS({
        ...config,
        workspace: {
            ...config.workspace || {},
            workingDirectory
        }
    });
    if (isDebug) agent.getLogger().info('Starting TARS Agent in interactive mode...');
    let renderer = null;
    try {
        await agent.initialize();
        const rl = (0, external_readline_namespaceObject.createInterface)({
            input: process.stdin,
            output: process.stdout,
            prompt: "\u276F ",
            historySize: 100
        });
        renderer = new index_js_namespaceObject.CLIRenderer(rl, {
            showTools: isDebug,
            showSystemEvents: isDebug,
            terminalWidth: process.stdout.columns,
            debug: isDebug
        });
        const eventStream = agent.getEventStream();
        const configInfo = extractConfigInfo(agent, sessionId, workingDirectory, config);
        if (!process.env.AGENT_QUIET) renderer.printConfigBox(configInfo);
        const unsubscribe = eventStream.subscribe((event)=>{
            if (renderer) renderer.processAgentEvent(event);
        });
        renderer.printWelcome();
        rl.prompt();
        process.stdin.on('keypress', ()=>{
            if (renderer && renderer.isProcessing) {
                renderer.stopSpinner();
                renderer.clearLine();
            }
        });
        rl.on('line', async (line)=>{
            const input = line.trim();
            if ('' === input) return void rl.prompt();
            const isHandled = await handleSpecialCommands(input, agent, renderer, isDebug);
            if (isHandled) return;
            try {
                renderer.printUserInput(input);
                renderer.startAssistantResponseStreaming();
                const streamResponse = await agent.run({
                    input,
                    stream: true
                });
                for await (const event of streamResponse)if ('assistant_streaming_message' === event.type) renderer.updateAssistantResponseStreaming(event.content);
                renderer.finalizeAssistantResponseStreaming();
            } catch (error) {
                console.error(`Error: ${error instanceof Error ? error.message : String(error)}`);
            }
            renderer.updatePrompt();
        });
        rl.on('close', async ()=>{
            console.log('\nThanks for using Agent TARS! Goodbye.');
            unsubscribe();
            if (renderer) renderer.cleanup();
            await agent.cleanup();
            process.exit(0);
        });
        process.on('SIGINT', async ()=>{
            console.log('\nReceived SIGINT. Shutting down gracefully...');
            unsubscribe();
            if (renderer) renderer.cleanup();
            await agent.cleanup();
            process.exit(0);
        });
    } catch (error) {
        console.error('Failed to start interactive mode:', error);
        if (renderer) renderer.cleanup();
        await agent.cleanup();
        process.exit(1);
    }
}
exports.startInteractiveCLI = __webpack_exports__.startInteractiveCLI;
for(var __webpack_i__ in __webpack_exports__)if (-1 === [
    "startInteractiveCLI"
].indexOf(__webpack_i__)) exports[__webpack_i__] = __webpack_exports__[__webpack_i__];
Object.defineProperty(exports, '__esModule', {
    value: true
});
