/**
* Copyright (c) 2025 Bytedance, Inc. and its affiliates.
* SPDX-License-Identifier: Apache-2.0
*/
"use strict";
var __webpack_require__ = {};
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
    processSilentRun: ()=>processSilentRun
});
const core_namespaceObject = require("@agent-tars/core");
const console_interceptor_js_namespaceObject = require("../utils/console-interceptor.js");
async function processSilentRun(options) {
    const { appConfig, input, format = 'text', includeLogs = false } = options;
    if (!appConfig.workspace) appConfig.workspace = {};
    const { result, logs } = await console_interceptor_js_namespaceObject.ConsoleInterceptor.run(async ()=>{
        const agent = new core_namespaceObject.AgentTARS(appConfig);
        try {
            return await agent.run(input);
        } finally{
            await agent.cleanup();
        }
    }, {
        silent: true,
        capture: includeLogs,
        debug: includeLogs
    });
    if ('json' === format) {
        const output = {
            ...result,
            ...includeLogs ? {
                logs
            } : {}
        };
        process.stdout.write(JSON.stringify(output, null, 2));
    } else {
        if (result.content) process.stdout.write(result.content);
        else process.stdout.write(JSON.stringify(result, null, 2));
        if (includeLogs && logs.length > 0) {
            process.stdout.write('\n\n--- Logs ---\n');
            process.stdout.write(logs.join('\n'));
        }
    }
}
exports.processSilentRun = __webpack_exports__.processSilentRun;
for(var __webpack_i__ in __webpack_exports__)if (-1 === [
    "processSilentRun"
].indexOf(__webpack_i__)) exports[__webpack_i__] = __webpack_exports__[__webpack_i__];
Object.defineProperty(exports, '__esModule', {
    value: true
});
