/**
* Copyright (c) 2025 Bytedance, Inc. and its affiliates.
* SPDX-License-Identifier: Apache-2.0
*/
"use strict";
var __webpack_require__ = {};
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
    registerRunCommand: ()=>registerRunCommand
});
const external_options_js_namespaceObject = require("./options.js");
const run_js_namespaceObject = require("../core/run.js");
function registerRunCommand(cli) {
    const runCommand = cli.command('run', 'Run Agent TARS in silent mode and output results to stdout');
    runCommand.option('--input [...query]', 'Input query to process (required)').option('--format [format]', 'Output format: "json" or "text" (default: "text")', {
        default: 'text'
    }).option('--include-logs', 'Include captured logs in the output (for debugging)', {
        default: false
    });
    (0, external_options_js_namespaceObject.addCommonOptions)(runCommand).action(async (options = {})=>{
        try {
            if (!options.input || Array.isArray(options.input) && 0 === options.input.length) {
                console.error('Error: --input parameter is required');
                process.exit(1);
            }
            const { appConfig } = await (0, external_options_js_namespaceObject.processCommonOptions)({
                ...options,
                quiet: true
            });
            await (0, run_js_namespaceObject.processSilentRun)({
                appConfig,
                input: Array.isArray(options.input) ? options.input.join(' ') : options.input,
                format: options.format,
                includeLogs: options.includeLogs
            });
        } catch (err) {
            console.error('Error:', err instanceof Error ? err.message : String(err));
            process.exit(1);
        }
    });
}
exports.registerRunCommand = __webpack_exports__.registerRunCommand;
for(var __webpack_i__ in __webpack_exports__)if (-1 === [
    "registerRunCommand"
].indexOf(__webpack_i__)) exports[__webpack_i__] = __webpack_exports__[__webpack_i__];
Object.defineProperty(exports, '__esModule', {
    value: true
});
