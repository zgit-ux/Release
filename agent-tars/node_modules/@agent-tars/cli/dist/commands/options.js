/**
* Copyright (c) 2025 Bytedance, Inc. and its affiliates.
* SPDX-License-Identifier: Apache-2.0
*/
"use strict";
var __webpack_require__ = {};
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
    addCommonOptions: ()=>addCommonOptions,
    DEFAULT_PORT: ()=>DEFAULT_PORT,
    processCommonOptions: ()=>processCommonOptions
});
const index_js_namespaceObject = require("../utils/index.js");
const loader_js_namespaceObject = require("../config/loader.js");
const builder_js_namespaceObject = require("../config/builder.js");
const state_js_namespaceObject = require("../core/state.js");
const DEFAULT_PORT = 8888;
function addCommonOptions(command) {
    return command.option('--port <port>', 'Port to run the server on', {
        default: DEFAULT_PORT
    }).option('--open', 'Open the web UI in the default browser on server start').option('--config, -c <path>', `Path to configuration file(s) or URL(s)
      
                            Specify one or more configuration files or URLs. Multiple values are merged sequentially,
                            with later files overriding earlier ones. Supports local paths or remote URLs.
                            
                            Examples:
                              --config ./my-config.json
                              --config https://example.com/config.json
                              --config ./base-config.yml --config ./override.json
                            
                            Supported file formats: .ts, .js, .json, .yml, .yaml
                            
                            If not specified, looks for agent-tars.config.{ts,js,json,yml,yaml} in current directory.
      `, {
        type: [
            String
        ]
    }).option('--logLevel <level>', 'Log level (debug, info, warn, error)').option('--debug', 'Enable debug mode (show tool calls and system events), highest priority').option('--quiet', 'Reduce startup logging to minimum').option('--model <model>', 'model provider config').option('--model.provider [provider]', 'LLM provider name').option('--provider [provider]', 'LLM provider name (deprecated, replaced by `--model.provider`)').option('--model.id [model]', 'Model identifier').option('--model.apiKey [apiKey]', 'Model API key').option('--apiKey [apiKey]', 'Model API key (deprecated, replaced by `--model.apiKey`)').option('--model.baseURL [baseURL]', 'Model base URL').option('--baseURL [baseURL]', 'Model Base URL (deprecated, replaced by `--model.baseURL`)').option('--stream', 'Enable streaming mode for LLM responses').option('--thinking', 'Used to control the reasoning content.').option('--thinking.type [type]', 'Enable reasoning mode for compatible models (enabled)').option('--toolCallEngine [engine]', 'Tool call engine type (native, prompt_engineering, structured_outputs)').option('--workspace <workspace>', 'workspace config').option('--workspace.workingDirectory <path>', 'Path to workspace directory').option('--browser <browser>', 'browser config').option('--browser.control [mode]', 'Browser control mode (mixed, browser-use-only, gui-agent-only)').option('--browser-control [mode]', 'Browser control mode (deprecated, replaced by `--browser.control`)').option('--planner <planner>', 'Planner config').option('--planner.enabled', 'Enable planning functionality for complex tasks').option('--share <share>', 'Share config').option('--share.provider [url]', 'Share provider URL').option('--share-provider [url]', 'Share provider URL (deprecated, replaced by `--share.provider`)').option('--snapshot <snapshot>', 'Snapshot config').option('--snapshot.enable', 'Enable agent snapshot functionality').option('--snapshot.snapshotPath <path>', 'Path for storing agent snapshots').option('--agio <agio>', 'Agio config').option('--agio.provider <url>', `AGIO monitoring provider URL for agent analytics
      
                            When specified, the agent will send standardized monitoring events to the configured
                            endpoint for insights and observability. This includes metrics like execution time,
                            tool usage, loop iterations, and error rates.
                            
                            PRIVACY NOTICE: This cli does not connect to any external server by default.
                            Event transmission only occurs when you explicitly configure this option with a provider URL.
                            
                            Examples:
                              --agio.provider http://localhost:3000/events
                              --agio.provider https://analytics.example.com/api/events
                            
                            For more information about AGIO events and data collection, see the documentation.
      `);
}
async function processCommonOptions(options) {
    const bootstrapCliOptions = (0, state_js_namespaceObject.getBootstrapCliOptions)();
    const configPaths = options.config ?? [];
    const isDebug = !!options.debug;
    if (bootstrapCliOptions.remoteConfig) configPaths.unshift(bootstrapCliOptions.remoteConfig);
    const userConfig = await (0, loader_js_namespaceObject.loadTarsConfig)(configPaths, isDebug);
    const appConfig = builder_js_namespaceObject.ConfigBuilder.buildAppConfig(options, userConfig);
    if (appConfig.logLevel) index_js_namespaceObject.logger.setLevel(appConfig.logLevel);
    index_js_namespaceObject.logger.debug('Application configuration built from CLI and config files');
    return {
        appConfig,
        isDebug
    };
}
exports.DEFAULT_PORT = __webpack_exports__.DEFAULT_PORT;
exports.addCommonOptions = __webpack_exports__.addCommonOptions;
exports.processCommonOptions = __webpack_exports__.processCommonOptions;
for(var __webpack_i__ in __webpack_exports__)if (-1 === [
    "DEFAULT_PORT",
    "addCommonOptions",
    "processCommonOptions"
].indexOf(__webpack_i__)) exports[__webpack_i__] = __webpack_exports__[__webpack_i__];
Object.defineProperty(exports, '__esModule', {
    value: true
});
