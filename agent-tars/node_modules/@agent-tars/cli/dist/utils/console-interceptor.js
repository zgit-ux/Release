/**
* Copyright (c) 2025 Bytedance, Inc. and its affiliates.
* SPDX-License-Identifier: Apache-2.0
*/
"use strict";
var __webpack_require__ = {};
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
    ConsoleInterceptor: ()=>ConsoleInterceptor
});
const external_misc_js_namespaceObject = require("./misc.js");
class ConsoleInterceptor {
    originalConsole;
    buffer = [];
    options;
    constructor(options = {}){
        this.options = {
            silent: true,
            capture: true,
            ...options
        };
        this.originalConsole = {
            log: console.log,
            info: console.info,
            warn: console.warn,
            error: console.error,
            debug: console.debug
        };
    }
    start() {
        if (this.options.debug) external_misc_js_namespaceObject.logger.debug('Starting console output interception');
        console.log = this.createInterceptor(this.originalConsole.log);
        console.info = this.createInterceptor(this.originalConsole.info);
        console.warn = this.createInterceptor(this.originalConsole.warn, process.stderr);
        console.error = this.createInterceptor(this.originalConsole.error, process.stderr);
        console.debug = this.createInterceptor(this.originalConsole.debug);
    }
    stop() {
        console.log = this.originalConsole.log;
        console.info = this.originalConsole.info;
        console.warn = this.originalConsole.warn;
        console.error = this.originalConsole.error;
        console.debug = this.originalConsole.debug;
        if (this.options.debug) external_misc_js_namespaceObject.logger.debug('Console output interception stopped');
    }
    getCapturedOutput() {
        return [
            ...this.buffer
        ];
    }
    getCapturedString() {
        return this.buffer.join('\n');
    }
    clearBuffer() {
        this.buffer = [];
    }
    createInterceptor(original, stream = process.stdout) {
        return (...args)=>{
            const message = args.map((arg)=>'string' == typeof arg ? arg : JSON.stringify(arg)).join(' ');
            if (this.options.filter && !this.options.filter(message)) return void original.apply(console, args);
            if (this.options.capture) this.buffer.push(message);
            if (this.options.debug) external_misc_js_namespaceObject.logger.debug(`[Intercepted]: ${message}`);
            if (!this.options.silent) original.apply(console, args);
        };
    }
    static async run(fn, options) {
        const interceptor = new ConsoleInterceptor(options);
        interceptor.start();
        try {
            const result = await fn();
            return {
                result,
                logs: interceptor.getCapturedOutput()
            };
        } finally{
            interceptor.stop();
        }
    }
}
exports.ConsoleInterceptor = __webpack_exports__.ConsoleInterceptor;
for(var __webpack_i__ in __webpack_exports__)if (-1 === [
    "ConsoleInterceptor"
].indexOf(__webpack_i__)) exports[__webpack_i__] = __webpack_exports__[__webpack_i__];
Object.defineProperty(exports, '__esModule', {
    value: true
});
