/**
* Copyright (c) 2025 Bytedance, Inc. and its affiliates.
* SPDX-License-Identifier: Apache-2.0
*/
"use strict";
var __webpack_require__ = {};
(()=>{
    __webpack_require__.n = (module)=>{
        var getter = module && module.__esModule ? ()=>module['default'] : ()=>module;
        __webpack_require__.d(getter, {
            a: getter
        });
        return getter;
    };
})();
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
    CLIRenderer: ()=>CLIRenderer
});
const external_readline_namespaceObject = require("readline");
var external_readline_default = /*#__PURE__*/ __webpack_require__.n(external_readline_namespaceObject);
const external_index_js_namespaceObject = require("./index.js");
const external_chalk_namespaceObject = require("chalk");
var external_chalk_default = /*#__PURE__*/ __webpack_require__.n(external_chalk_namespaceObject);
const external_boxen_namespaceObject = require("boxen");
var external_boxen_default = /*#__PURE__*/ __webpack_require__.n(external_boxen_namespaceObject);
const external_log_update_namespaceObject = require("log-update");
var external_log_update_default = /*#__PURE__*/ __webpack_require__.n(external_log_update_namespaceObject);
const external_string_width_namespaceObject = require("string-width");
var external_string_width_default = /*#__PURE__*/ __webpack_require__.n(external_string_width_namespaceObject);
const external_figures_namespaceObject = require("figures");
var external_figures_default = /*#__PURE__*/ __webpack_require__.n(external_figures_namespaceObject);
const external_cli_truncate_namespaceObject = require("cli-truncate");
var external_cli_truncate_default = /*#__PURE__*/ __webpack_require__.n(external_cli_truncate_namespaceObject);
class CLIRenderer {
    options;
    rl;
    hasShownDivider = false;
    terminalWidth;
    steps = [];
    thinkingMessage = '';
    spinnerFrames = [
        "\u280B",
        "\u2819",
        "\u2839",
        "\u2838",
        "\u283C",
        "\u2834",
        "\u2826",
        "\u2827",
        "\u2807",
        "\u280F"
    ];
    spinnerIndex = 0;
    spinnerInterval = null;
    isProcessing = false;
    stepCount = 0;
    currentToolCallId = null;
    activeTools = {};
    progressShown = false;
    imageRenderingSupported;
    streamedResponse = '';
    isStreaming = false;
    hasReceivedContent = false;
    constructor(readlineInterface, options = {}){
        this.rl = readlineInterface;
        this.options = {
            showTools: false,
            showSystemEvents: false,
            useColors: true,
            debug: false,
            ...options
        };
        this.terminalWidth = options.terminalWidth || process.stdout.columns || 80;
        this.imageRenderingSupported = (0, external_index_js_namespaceObject.isImageRenderingSupported)();
        if (this.options.debug) if (this.imageRenderingSupported) console.log('Terminal supports image rendering via imgcat');
        else console.log('Terminal does not support image rendering');
    }
    clearLine() {
        external_readline_default().clearLine(process.stdout, 0);
        external_readline_default().cursorTo(process.stdout, 0);
    }
    stopSpinner() {
        if (this.spinnerInterval) {
            clearInterval(this.spinnerInterval);
            this.spinnerInterval = null;
            external_log_update_default().clear();
            this.isProcessing = false;
        }
    }
    formatText(text, indent = 0, maxWidth) {
        const width = maxWidth || this.terminalWidth - indent - 2;
        if (external_string_width_default()(text) <= width) return text;
        return external_cli_truncate_default()(text, width, {
            position: 'end'
        });
    }
    formatObject(obj) {
        if (null == obj) return String(obj);
        if ('string' == typeof obj) return obj;
        try {
            if ('object' == typeof obj) {
                const objAny = obj;
                if (Array.isArray(obj)) {
                    if (obj.length <= 3) return JSON.stringify(obj);
                    return `[${obj.length} items] ${JSON.stringify(obj.slice(0, 2))}...`;
                }
                if (objAny.text) return objAny.text;
                if (objAny.content) return objAny.content;
                if (objAny.result) return String(objAny.result);
                if (objAny.message) return objAny.message;
                if (objAny.data) return this.formatObject(objAny.data);
                if ('text' === objAny.type && objAny.text) return objAny.text;
                const jsonString = JSON.stringify(obj);
                if (jsonString.length > 100) return jsonString.substring(0, 97) + '...';
                return jsonString;
            }
            return String(obj);
        } catch (err) {
            return '[Complex Object]';
        }
    }
    startSpinner(message) {
        if (this.spinnerInterval) clearInterval(this.spinnerInterval);
        this.isProcessing = true;
        this.spinnerIndex = 0;
        let dots = '';
        this.spinnerInterval = setInterval(()=>{
            const frame = this.spinnerFrames[this.spinnerIndex];
            this.spinnerIndex = (this.spinnerIndex + 1) % this.spinnerFrames.length;
            dots = dots.length < 3 ? dots + '.' : '';
            external_log_update_default()(`${external_chalk_default().cyan(frame)} ${external_chalk_default().dim(message)}${dots}`);
        }, 80);
    }
    startMinimalSpinner() {
        if (this.spinnerInterval) clearInterval(this.spinnerInterval);
        this.spinnerIndex = 0;
        this.spinnerInterval = setInterval(()=>{
            if (this.isStreaming) {
                process.stdout.write('\b' + this.spinnerFrames[this.spinnerIndex]);
                this.spinnerIndex = (this.spinnerIndex + 1) % this.spinnerFrames.length;
            } else this.stopSpinner();
        }, 80);
    }
    printConfigBox(config) {
        const lines = Object.entries(config).filter(([_, value])=>void 0 !== value).map(([key, value])=>{
            const formattedKey = key.charAt(0).toUpperCase() + key.slice(1);
            return `${external_chalk_default().dim(formattedKey)}: ${external_chalk_default().white(value)}`;
        });
        const boxContent = lines.join('\n');
        console.log(external_boxen_default()(boxContent, {
            title: external_chalk_default().cyan.bold('Agent TARS'),
            titleAlignment: 'center',
            padding: 1,
            borderColor: 'blue',
            borderStyle: 'round',
            width: Math.min(this.terminalWidth - 4, 80),
            dimBorder: true
        }));
    }
    printDivider(forceDisplay = false, style = 'normal') {
        if (this.hasShownDivider && !forceDisplay) return;
        this.clearLine();
        const char = 'thick' === style ? "\u2501" : 'thin' === style ? "\u2500" : "\u2500";
        const divider = char.repeat(Math.min(this.terminalWidth - 2, 60));
        console.log('thick' === style ? external_chalk_default().cyan(divider) : external_chalk_default().gray(divider));
        this.hasShownDivider = true;
    }
    printWelcome() {
        const versionInfo = `${external_chalk_default().white.bold('CLI')} ${external_chalk_default().gray("v0.1.11")}`;
        const helpText = external_chalk_default().dim('Type your query or commands (/help, /exit)');
        console.log(external_boxen_default()(`${external_chalk_default().cyan.bold('Welcome to Agent TARS')}\n${versionInfo}\n\n${helpText}`, {
            padding: 1,
            margin: 1,
            borderColor: 'cyan',
            borderStyle: 'round',
            dimBorder: true
        }));
        this.printDivider(true, 'thick');
    }
    printUserInput(input) {
        this.hasShownDivider = false;
        console.log(external_chalk_default().bold.blue(external_figures_default().arrowRight) + ' ' + external_chalk_default().white.bold(input));
        this.printDivider();
        this.steps = [];
        this.activeTools = {};
        this.stepCount = 0;
        this.isProcessing = true;
        this.progressShown = false;
    }
    printAssistantResponse(response) {
        this.stopSpinner();
        this.clearLine();
        this.hasShownDivider = false;
        if (this.steps.length > 0) this.renderCompletedSteps();
        console.log();
        console.log(external_chalk_default().bold.cyan(external_figures_default().arrowLeft) + ' ' + response);
        console.log();
        this.printDivider(true);
        this.isProcessing = false;
    }
    createOrUpdateStep(type, title, status = 'pending', content, details, id) {
        if (id) {
            const existingStep = this.steps.find((step)=>step.id === id);
            if (existingStep) {
                existingStep.status = status;
                if (content) existingStep.content = content;
                if (details) existingStep.details = {
                    ...existingStep.details || {},
                    ...details
                };
                if ('complete' === status || 'error' === status) existingStep.endTime = Date.now();
                return existingStep;
            }
        }
        const step = {
            id: id || `step-${++this.stepCount}`,
            type,
            title,
            status,
            content,
            details,
            startTime: Date.now()
        };
        this.steps.push(step);
        return step;
    }
    renderStepsProgress() {
        this.stopSpinner();
        const activeToolIds = Object.keys(this.activeTools);
        if (0 === activeToolIds.length) {
            if (this.isProcessing) this.startSpinner('Agent TARS is thinking...');
            return;
        }
        console.log();
        console.log(external_chalk_default().dim(`${external_figures_default().pointer} Working on ${activeToolIds.length} steps:`));
        activeToolIds.forEach((id)=>{
            const tool = this.activeTools[id];
            const indicator = external_chalk_default().cyan(external_figures_default().play);
            console.log(`  ${indicator} ${external_chalk_default().bold(tool.title)}${external_chalk_default().dim(' (in progress...)')}`);
        });
        this.progressShown = true;
    }
    renderCompletedSteps() {
        const tools = this.steps.filter((s)=>'tool' === s.type && 'complete' === s.status);
        const results = this.steps.filter((s)=>'result' === s.type);
        if (tools.length > 0) {
            console.log();
            console.log(external_chalk_default().dim(`${external_figures_default().pointer} Completed ${tools.length} steps:`));
            tools.forEach((toolStep, index)=>{
                const resultStep = results.find((r)=>r.id.includes(toolStep.id));
                console.log(`  ${external_chalk_default().cyan(external_figures_default().play)} ${external_chalk_default().bold(toolStep.title)}`);
                if (this.options.debug && toolStep.details) {
                    const args = JSON.stringify(toolStep.details);
                    if (args.length > 80) console.log(`    ${external_chalk_default().dim('Args:')} ${this.formatText(args, 10, 70)}`);
                    else console.log(`    ${external_chalk_default().dim('Args:')} ${args}`);
                }
                if (resultStep) {
                    const status = 'error' === resultStep.status ? external_chalk_default().red(external_figures_default().cross) : external_chalk_default().green(external_figures_default().tick);
                    const duration = resultStep.endTime && toolStep.startTime ? ` ${external_chalk_default().gray(`(${Math.round((resultStep.endTime - toolStep.startTime) / 100) / 10}s)`)}` : '';
                    let content = resultStep.content ? this.formatObject(resultStep.content) : '';
                    if (content.length > 120) content = this.formatText(content, 6, 120) + external_chalk_default().dim(' (truncated)');
                    console.log(`    ${status} ${external_chalk_default().dim('Result:')} ${content}${duration}`);
                }
                if (index < tools.length - 1) console.log();
            });
        }
    }
    printToolExecution(id, name, args) {
        this.stopSpinner();
        this.currentToolCallId = id;
        const step = this.createOrUpdateStep('tool', name, 'active', void 0, args, id);
        this.activeTools[id] = step;
        this.progressShown = false;
        if (this.options.showTools || this.options.debug) {
            this.clearLine();
            console.log(external_chalk_default().cyan(`${external_figures_default().pointer} Executing: ${external_chalk_default().bold(name)}`));
            if (this.options.debug) console.log(external_chalk_default().dim(`  Args: ${JSON.stringify(args)}`));
        } else if (!this.progressShown) this.renderStepsProgress();
    }
    printToolResult(id, name, result, error) {
        this.stopSpinner();
        delete this.activeTools[id];
        const toolStep = this.steps.find((s)=>s.id === id);
        if (toolStep) {
            toolStep.status = 'complete';
            toolStep.endTime = Date.now();
        }
        const resultId = `${id}-result`;
        const status = error ? 'error' : 'complete';
        const formattedResult = this.formatObject(result);
        this.createOrUpdateStep('result', `${name} result`, status, error || formattedResult, void 0, resultId);
        if (this.options.showTools || this.options.debug) {
            this.clearLine();
            if (error) console.log(external_chalk_default().red(`${external_figures_default().cross} ${external_chalk_default().bold(name)} failed: ${error}`));
            else {
                console.log(external_chalk_default().green(`${external_figures_default().tick} ${external_chalk_default().bold(name)} completed`));
                const displayResult = formattedResult;
                if (displayResult.length > 100) console.log(external_chalk_default().dim(`  Result: ${this.formatText(displayResult, 10, 100)} [...]`));
                else console.log(external_chalk_default().dim(`  Result: ${displayResult}`));
            }
        } else if (0 === Object.keys(this.activeTools).length) this.renderCompletedSteps();
        this.currentToolCallId = null;
        if (Object.keys(this.activeTools).length > 0) this.renderStepsProgress();
        else if (this.isProcessing) this.startSpinner('Agent TARS is thinking...');
    }
    printSystemEvent(level, message) {
        if (!this.options.showSystemEvents && !this.options.debug) return;
        this.stopSpinner();
        this.clearLine();
        const prefix = 'info' === level ? external_chalk_default().blue(`${external_figures_default().info} `) : 'warning' === level ? external_chalk_default().yellow(`${external_figures_default().warning} `) : external_chalk_default().red(`${external_figures_default().cross} `);
        console.log(prefix + message);
        if (Object.keys(this.activeTools).length > 0) this.renderStepsProgress();
        else if (this.isProcessing) this.startSpinner('Agent TARS is thinking...');
    }
    updateThinking(content) {
        this.stopSpinner();
        const existingStep = this.steps.find((s)=>'thinking' === s.type && 'active' === s.status);
        if (existingStep) existingStep.content = content;
        else this.createOrUpdateStep('thinking', 'Reasoning', 'active', content);
        if (this.options.debug) {
            this.clearLine();
            console.log(external_chalk_default().cyan(`${external_figures_default().arrowDown} Thinking: ${content}`));
        }
        if (Object.keys(this.activeTools).length > 0) this.renderStepsProgress();
        else if (this.isProcessing) this.startSpinner(`Thinking: ${content.substring(0, 30)}${content.length > 30 ? '...' : ''}`);
    }
    startAssistantResponseStreaming() {
        this.stopSpinner();
        this.clearLine();
        this.streamedResponse = '';
        this.isStreaming = true;
        process.stdout.write(external_chalk_default().bold.cyan(external_figures_default().arrowLeft) + ' ');
        this.startMinimalSpinner();
    }
    updateAssistantResponseStreaming(content) {
        this.streamedResponse += content;
        this.stopSpinner();
        if (content && !this.hasReceivedContent) this.hasReceivedContent = true;
        process.stdout.write(content);
        if (this.isStreaming) {
            if (this.isStreaming && !this.hasReceivedContent) this.startMinimalSpinner();
        }
    }
    finalizeAssistantResponseStreaming() {
        this.stopSpinner();
        this.isStreaming = false;
        this.hasReceivedContent = false;
        console.log('\n');
        this.printDivider(true);
    }
    async processMultimodalContent(content) {
        if (!Array.isArray(content)) return;
        for (const part of content)if ('text' === part.type) console.log(part.text);
        else if ('image_url' === part.type && part.image_url) {
            const imageUrl = part.image_url.url;
            if (imageUrl.startsWith('data:image/') && this.imageRenderingSupported) {
                const [mimeTypeAndPrefix, base64Data] = imageUrl.split(',');
                const mimeType = mimeTypeAndPrefix.split(':')[1].split(';')[0];
                this.clearLine();
                console.log(external_chalk_default().cyan("\uD83D\uDDBC\uFE0F Displaying image:"));
                const rendered = await (0, external_index_js_namespaceObject.renderImageInTerminal)(base64Data, mimeType);
                if (!rendered) {
                    console.log(external_chalk_default().yellow('  Image could not be rendered in this terminal.'));
                    console.log(external_chalk_default().dim('  Try running in iTerm2 for image support.'));
                }
            } else console.log(external_chalk_default().cyan("\uD83D\uDDBC\uFE0F Image:"), external_chalk_default().blue.underline(imageUrl));
        }
    }
    async processAgentEvent(event) {
        if ('user_message' === event.type && Array.isArray(event.content)) {
            this.clearLine();
            console.log(external_chalk_default().bold.blue(external_figures_default().arrowRight) + ' ' + external_chalk_default().white.bold('Multimodal message:'));
            await this.processMultimodalContent(event.content);
            return;
        }
        switch(event.type){
            case 'tool_call':
                this.printToolExecution(event.toolCallId, event.name, event.arguments);
                break;
            case 'tool_result':
                if (event.content && 'object' == typeof event.content && 'image' === event.content.type) {
                    this.clearLine();
                    console.log(external_chalk_default().cyan(`${external_figures_default().pointer} Tool ${external_chalk_default().bold(event.name)} returned an image:`));
                    if (this.imageRenderingSupported) {
                        const imageData = event.content.data;
                        const mimeType = event.content.mimeType || 'image/png';
                        await (0, external_index_js_namespaceObject.renderImageInTerminal)(imageData, mimeType);
                    } else console.log(external_chalk_default().yellow('  Image cannot be displayed in this terminal.'));
                } else this.printToolResult(event.toolCallId, event.name, event.content, event.error);
                break;
            case 'system':
                this.printSystemEvent(event.level, event.message);
                break;
            case 'assistant_thinking_message':
                if (event.isComplete) {
                    const thinkingStep = this.steps.find((s)=>'thinking' === s.type && 'active' === s.status);
                    if (thinkingStep) {
                        thinkingStep.status = 'complete';
                        thinkingStep.endTime = Date.now();
                    }
                }
                this.updateThinking(event.content);
                break;
            case 'assistant_streaming_thinking_message':
                this.updateThinking(event.content);
                break;
            case 'assistant_streaming_message':
                if (Array.isArray(event.content)) await this.processMultimodalContent(event.content);
                break;
        }
    }
    updatePrompt(text) {
        this.stopSpinner();
        const promptSymbol = external_chalk_default().cyan.bold("\u276F ");
        this.rl.setPrompt(text ? `${text}${promptSymbol}` : promptSymbol);
        this.rl.prompt(true);
    }
    cleanup() {
        this.stopSpinner();
    }
}
exports.CLIRenderer = __webpack_exports__.CLIRenderer;
for(var __webpack_i__ in __webpack_exports__)if (-1 === [
    "CLIRenderer"
].indexOf(__webpack_i__)) exports[__webpack_i__] = __webpack_exports__[__webpack_i__];
Object.defineProperty(exports, '__esModule', {
    value: true
});
