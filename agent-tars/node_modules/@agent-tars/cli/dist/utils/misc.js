/**
* Copyright (c) 2025 Bytedance, Inc. and its affiliates.
* SPDX-License-Identifier: Apache-2.0
*/
"use strict";
var __webpack_modules__ = {
    imgcat: function(module) {
        module.exports = require("imgcat");
    }
};
var __webpack_module_cache__ = {};
function __webpack_require__(moduleId) {
    var cachedModule = __webpack_module_cache__[moduleId];
    if (void 0 !== cachedModule) return cachedModule.exports;
    var module = __webpack_module_cache__[moduleId] = {
        exports: {}
    };
    __webpack_modules__[moduleId](module, module.exports, __webpack_require__);
    return module.exports;
}
(()=>{
    __webpack_require__.n = (module)=>{
        var getter = module && module.__esModule ? ()=>module['default'] : ()=>module;
        __webpack_require__.d(getter, {
            a: getter
        });
        return getter;
    };
})();
(()=>{
    __webpack_require__.d = (exports1, definition)=>{
        for(var key in definition)if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports1, key)) Object.defineProperty(exports1, key, {
            enumerable: true,
            get: definition[key]
        });
    };
})();
(()=>{
    __webpack_require__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
})();
(()=>{
    __webpack_require__.r = (exports1)=>{
        if ('undefined' != typeof Symbol && Symbol.toStringTag) Object.defineProperty(exports1, Symbol.toStringTag, {
            value: 'Module'
        });
        Object.defineProperty(exports1, '__esModule', {
            value: true
        });
    };
})();
var __webpack_exports__ = {};
(()=>{
    __webpack_require__.r(__webpack_exports__);
    __webpack_require__.d(__webpack_exports__, {
        isImgcatAvailable: ()=>isImgcatAvailable,
        logger: ()=>logger,
        resolveValue: ()=>resolveValue,
        toUserFriendlyPath: ()=>toUserFriendlyPath,
        renderImageInTerminal: ()=>renderImageInTerminal,
        isImageRenderingSupported: ()=>isImageRenderingSupported
    });
    const core_namespaceObject = require("@agent-tars/core");
    const external_fs_namespaceObject = require("fs");
    var external_fs_default = /*#__PURE__*/ __webpack_require__.n(external_fs_namespaceObject);
    const external_os_namespaceObject = require("os");
    var external_os_default = /*#__PURE__*/ __webpack_require__.n(external_os_namespaceObject);
    const external_path_namespaceObject = require("path");
    var external_path_default = /*#__PURE__*/ __webpack_require__.n(external_path_namespaceObject);
    const external_child_process_namespaceObject = require("child_process");
    const external_util_namespaceObject = require("util");
    const logger = (0, core_namespaceObject.getLogger)('AgentTARS');
    function resolveValue(value, label = 'value') {
        if (!value) return;
        if (/^[A-Z][A-Z0-9_]*$/.test(value)) {
            const envValue = process.env[value];
            if (envValue) {
                logger.debug(`Using ${label} from environment variable: ${value}`);
                return envValue;
            }
            logger.warn(`Environment variable "${value}" not found, using as literal value`);
        }
        return value;
    }
    async function isImgcatAvailable() {
        const execPromise = (0, external_util_namespaceObject.promisify)(external_child_process_namespaceObject.exec);
        try {
            await execPromise('which imgcat');
            return true;
        } catch (error) {
            return false;
        }
    }
    function isImageRenderingSupported() {
        return Boolean('iTerm.app' === process.env.TERM_PROGRAM || 'iTerm2' === process.env.LC_TERMINAL || process.env.TERM?.includes('screen'));
    }
    async function renderImageInTerminal(imageData, mimeType, isDebug = false) {
        try {
            if (!isImageRenderingSupported()) {
                console.log('Terminal does not support image rendering');
                return false;
            }
            const imgcatExists = await isImgcatAvailable();
            if (isDebug) logger.debug('imgcatExists', imgcatExists);
            if (!imgcatExists) {
                console.error('The imgcat command is not installed. Install it with:');
                console.error('curl -fsSL https://iterm2.com/utilities/imgcat -o /usr/local/bin/imgcat && chmod +x /usr/local/bin/imgcat');
                return false;
            }
            const tempDir = external_path_default().join(external_os_default().homedir(), '.agent-tars/images');
            if (!external_fs_default().existsSync(tempDir)) external_fs_default().mkdirSync(tempDir, {
                recursive: true
            });
            const format = mimeType.split('/')[1] || 'png';
            const tempFile = external_path_default().join(tempDir, `image-${Date.now()}.${format}`);
            const imgcat = __webpack_require__("imgcat");
            const base64Data = imageData.replace(/^data:image\/\w+;base64,/, '');
            external_fs_default().writeFileSync(tempFile, Buffer.from(base64Data, 'base64'));
            await imgcat(tempFile, {
                log: true
            });
            const execPromise = (0, external_util_namespaceObject.promisify)(external_child_process_namespaceObject.exec);
            try {
                await execPromise(`imgcat ${tempFile}`);
            } catch (error) {
                console.error('Failed to execute imgcat command:', error);
                console.log('Falling back to text message: [Image data cannot be displayed]');
                return false;
            }
            return true;
        } catch (error) {
            console.error('Failed to render image:', error);
            return false;
        }
    }
    function toUserFriendlyPath(absolutePath) {
        const homedir = external_os_default().homedir();
        if (absolutePath.startsWith(homedir)) return absolutePath.replace(homedir, '~');
        return absolutePath;
    }
})();
exports.isImageRenderingSupported = __webpack_exports__.isImageRenderingSupported;
exports.isImgcatAvailable = __webpack_exports__.isImgcatAvailable;
exports.logger = __webpack_exports__.logger;
exports.renderImageInTerminal = __webpack_exports__.renderImageInTerminal;
exports.resolveValue = __webpack_exports__.resolveValue;
exports.toUserFriendlyPath = __webpack_exports__.toUserFriendlyPath;
for(var __webpack_i__ in __webpack_exports__)if (-1 === [
    "isImageRenderingSupported",
    "isImgcatAvailable",
    "logger",
    "renderImageInTerminal",
    "resolveValue",
    "toUserFriendlyPath"
].indexOf(__webpack_i__)) exports[__webpack_i__] = __webpack_exports__[__webpack_i__];
Object.defineProperty(exports, '__esModule', {
    value: true
});
