import readline from 'readline';
import { AgentEventStream, ChatCompletionContentPart } from '@agent-tars/core';
/**
 * CLI renderer configuration options
 */
export interface CLIRendererOptions {
    /** Whether to show tool execution details */
    showTools?: boolean;
    /** Whether to show system events */
    showSystemEvents?: boolean;
    /** Whether to use colors in output */
    useColors?: boolean;
    /** Terminal width */
    terminalWidth?: number;
    /** Debug mode */
    debug?: boolean;
}
/**
 * Configuration info to be displayed in the config box
 */
export interface ConfigInfo {
    sessionId: string;
    workspace?: string;
    model?: string;
    provider?: string;
    [key: string]: string | undefined;
}
/**
 * Enhanced CLI renderer for Agent TARS
 * Provides a cleaner, more visually appealing CLI experience
 */
export declare class CLIRenderer {
    private options;
    private rl;
    private hasShownDivider;
    private terminalWidth;
    private steps;
    private thinkingMessage;
    private spinnerFrames;
    private spinnerIndex;
    private spinnerInterval;
    isProcessing: boolean;
    private stepCount;
    private currentToolCallId;
    private activeTools;
    private progressShown;
    private imageRenderingSupported;
    private streamedResponse;
    private isStreaming;
    private hasReceivedContent;
    constructor(readlineInterface: readline.Interface, options?: CLIRendererOptions);
    /**
     * Clear the current line
     */
    clearLine(): void;
    /**
     * Stop spinner animation
     */
    stopSpinner(): void;
    /**
     * Format text to fit within terminal width
     */
    private formatText;
    /**
     * Format object for display
     */
    private formatObject;
    /**
     * Start spinner animation
     */
    private startSpinner;
    /**
  
     * Start a minimal spinner for streaming
     * Unlike the full spinner, this doesn't take over the whole line
     */
    private startMinimalSpinner;
    /**
     * Print configuration info in a box
     */
    printConfigBox(config: ConfigInfo): void;
    /**
     * Print a divider line
     */
    printDivider(forceDisplay?: boolean, style?: 'normal' | 'thin' | 'thick'): void;
    /**
     * Print welcome message
     */
    printWelcome(): void;
    /**
     * Print user input
     */
    printUserInput(input: string): void;
    /**
     * Print assistant response
     */
    printAssistantResponse(response: string): void;
    /**
     * Create a new step or update an existing one
     */
    private createOrUpdateStep;
    /**
     * Render progress of active steps in real-time
     */
    private renderStepsProgress;
    /**
     * Render all completed steps
     */
    private renderCompletedSteps;
    /**
     * Print tool execution
     */
    printToolExecution(id: string, name: string, args: Record<string, unknown>): void;
    /**
     * Print tool result
     */
    printToolResult(id: string, name: string, result: unknown, error?: string): void;
    /**
     * Print system event
     */
    printSystemEvent(level: 'info' | 'warning' | 'error', message: string): void;
    /**
     * Update thinking status
     */
    updateThinking(content: string): void;
    /**
     * Start streaming assistant response
     * Prepares the UI for receiving a streamed response
     */
    startAssistantResponseStreaming(): void;
    /**
     * Update streaming assistant response
     * Appends new content and updates the display
     */
    updateAssistantResponseStreaming(content: string): void;
    /**
     * Finalize the streaming response
     * Completes the streaming UI and adds formatting
     */
    finalizeAssistantResponseStreaming(): void;
    /**
     * Process multimodal content from user or assistant messages
     * @param content An array of content parts that may include text and images
     */
    processMultimodalContent(content: ChatCompletionContentPart[]): Promise<void>;
    /**
     * Process agent events for display
     */
    processAgentEvent(event: AgentEventStream.Event): Promise<void>;
    /**
     * Update the prompt with the specified text
     */
    updatePrompt(text?: string): void;
    /**
     * Clean up resources when shutting down
     */
    cleanup(): void;
}
//# sourceMappingURL=cli-renderer.d.ts.map