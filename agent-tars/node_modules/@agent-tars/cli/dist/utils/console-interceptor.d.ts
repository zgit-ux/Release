interface ConsoleInterceptorOptions {
    /**
     * If true, will silence all console output
     */
    silent?: boolean;
    /**
     * If true, will capture all console output to the buffer
     */
    capture?: boolean;
    /**
     * If provided, will check each message against this filter
     * and only silence or capture messages that match
     */
    filter?: (message: string) => boolean;
    /**
     * If true, will log intercepted messages at debug level
     */
    debug?: boolean;
}
/**
 * ConsoleInterceptor - Temporarily intercepts console output
 *
 * This class provides a way to intercept and control all console output
 * during a specific operation, allowing silent execution or capture of logs.
 */
export declare class ConsoleInterceptor {
    private originalConsole;
    private buffer;
    private options;
    constructor(options?: ConsoleInterceptorOptions);
    /**
     * Start intercepting console output
     */
    start(): void;
    /**
     * Stop intercepting and restore original console behavior
     */
    stop(): void;
    /**
     * Get all captured console output
     */
    getCapturedOutput(): string[];
    /**
     * Get captured output as a single string
     */
    getCapturedString(): string;
    /**
     * Clear the captured output buffer
     */
    clearBuffer(): void;
    /**
     * Create a replacement function for console methods
     */
    private createInterceptor;
    /**
     * Execute a function with console interception
     *
     * @param fn Function to execute with intercepted console
     * @returns Result of the function
     */
    static run<T>(fn: () => Promise<T>, options?: ConsoleInterceptorOptions): Promise<{
        result: T;
        logs: string[];
    }>;
}
export {};
//# sourceMappingURL=console-interceptor.d.ts.map